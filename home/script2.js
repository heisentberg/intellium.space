
/*!
 * Webflow: Front-end site library
 * @license MIT
 * Inline scripts may access the api using an async handler:
 *   var Webflow = Webflow || [];
 *   Webflow.push(readyFunction);
 */

(() => { // webpackBootstrap
    var __webpack_modules__ = ({
    12372: (function (module, __unused_webpack_exports, __webpack_require__) {
    var map = {
      "./af": "44445",
      "./af.js": "44445",
      "./ar": "8779",
      "./ar-dz": "30230",
      "./ar-dz.js": "30230",
      "./ar-kw": "37885",
      "./ar-kw.js": "37885",
      "./ar-ly": "18449",
      "./ar-ly.js": "18449",
      "./ar-ma": "30721",
      "./ar-ma.js": "30721",
      "./ar-sa": "39707",
      "./ar-sa.js": "39707",
      "./ar-tn": "79625",
      "./ar-tn.js": "79625",
      "./ar.js": "8779",
      "./az": "84507",
      "./az.js": "84507",
      "./be": "91008",
      "./be.js": "91008",
      "./bg": "1574",
      "./bg.js": "1574",
      "./bm": "60821",
      "./bm.js": "60821",
      "./bn": "92129",
      "./bn-bd": "3012",
      "./bn-bd.js": "3012",
      "./bn.js": "92129",
      "./bo": "64080",
      "./bo.js": "64080",
      "./br": "77473",
      "./br.js": "77473",
      "./bs": "87110",
      "./bs.js": "87110",
      "./ca": "43008",
      "./ca.js": "43008",
      "./cs": "20743",
      "./cs.js": "20743",
      "./cv": "35233",
      "./cv.js": "35233",
      "./cy": "24880",
      "./cy.js": "24880",
      "./da": "76103",
      "./da.js": "76103",
      "./de": "2781",
      "./de-at": "54828",
      "./de-at.js": "54828",
      "./de-ch": "98941",
      "./de-ch.js": "98941",
      "./de.js": "2781",
      "./dv": "22699",
      "./dv.js": "22699",
      "./el": "45997",
      "./el.js": "45997",
      "./en-au": "94829",
      "./en-au.js": "94829",
      "./en-ca": "83136",
      "./en-ca.js": "83136",
      "./en-gb": "55266",
      "./en-gb.js": "55266",
      "./en-ie": "69585",
      "./en-ie.js": "69585",
      "./en-il": "4793",
      "./en-il.js": "4793",
      "./en-in": "79131",
      "./en-in.js": "79131",
      "./en-nz": "79736",
      "./en-nz.js": "79736",
      "./en-sg": "65831",
      "./en-sg.js": "65831",
      "./eo": "8923",
      "./eo.js": "8923",
      "./es": "3905",
      "./es-do": "84268",
      "./es-do.js": "84268",
      "./es-mx": "58594",
      "./es-mx.js": "58594",
      "./es-us": "1742",
      "./es-us.js": "1742",
      "./es.js": "3905",
      "./et": "87344",
      "./et.js": "87344",
      "./eu": "68732",
      "./eu.js": "68732",
      "./fa": "33074",
      "./fa.js": "33074",
      "./fi": "22266",
      "./fi.js": "22266",
      "./fil": "29030",
      "./fil.js": "29030",
      "./fo": "51062",
      "./fo.js": "51062",
      "./fr": "21115",
      "./fr-ca": "50255",
      "./fr-ca.js": "50255",
      "./fr-ch": "4946",
      "./fr-ch.js": "4946",
      "./fr.js": "21115",
      "./fy": "738",
      "./fy.js": "738",
      "./ga": "23555",
      "./ga.js": "23555",
      "./gd": "62064",
      "./gd.js": "62064",
      "./gl": "69906",
      "./gl.js": "69906",
      "./gom-deva": "47743",
      "./gom-deva.js": "47743",
      "./gom-latn": "8219",
      "./gom-latn.js": "8219",
      "./gu": "47324",
      "./gu.js": "47324",
      "./he": "44376",
      "./he.js": "44376",
      "./hi": "70525",
      "./hi.js": "70525",
      "./hr": "74953",
      "./hr.js": "74953",
      "./hu": "77162",
      "./hu.js": "77162",
      "./hy-am": "8269",
      "./hy-am.js": "8269",
      "./id": "56133",
      "./id.js": "56133",
      "./is": "34248",
      "./is.js": "34248",
      "./it": "5432",
      "./it-ch": "37968",
      "./it-ch.js": "37968",
      "./it.js": "5432",
      "./ja": "60605",
      "./ja.js": "60605",
      "./jv": "12073",
      "./jv.js": "12073",
      "./ka": "99208",
      "./ka.js": "99208",
      "./kk": "70357",
      "./kk.js": "70357",
      "./km": "68406",
      "./km.js": "68406",
      "./kn": "58094",
      "./kn.js": "58094",
      "./ko": "52755",
      "./ko.js": "52755",
      "./ku": "36091",
      "./ku.js": "36091",
      "./ky": "51121",
      "./ky.js": "51121",
      "./lb": "9323",
      "./lb.js": "9323",
      "./lo": "68017",
      "./lo.js": "68017",
      "./lt": "28422",
      "./lt.js": "28422",
      "./lv": "42078",
      "./lv.js": "42078",
      "./me": "825",
      "./me.js": "825",
      "./mi": "41773",
      "./mi.js": "41773",
      "./mk": "60775",
      "./mk.js": "60775",
      "./ml": "13727",
      "./ml.js": "13727",
      "./mn": "97445",
      "./mn.js": "97445",
      "./mr": "78969",
      "./mr.js": "78969",
      "./ms": "26092",
      "./ms-my": "32178",
      "./ms-my.js": "32178",
      "./ms.js": "26092",
      "./mt": "80909",
      "./mt.js": "80909",
      "./my": "98378",
      "./my.js": "98378",
      "./nb": "46463",
      "./nb.js": "46463",
      "./ne": "89333",
      "./ne.js": "89333",
      "./nl": "64212",
      "./nl-be": "87496",
      "./nl-be.js": "87496",
      "./nl.js": "64212",
      "./nn": "81250",
      "./nn.js": "81250",
      "./oc-lnc": "1728",
      "./oc-lnc.js": "1728",
      "./pa-in": "82338",
      "./pa-in.js": "82338",
      "./pl": "25586",
      "./pl.js": "25586",
      "./pt": "56166",
      "./pt-br": "63124",
      "./pt-br.js": "63124",
      "./pt.js": "56166",
      "./ro": "84715",
      "./ro.js": "84715",
      "./ru": "59599",
      "./ru.js": "59599",
      "./sd": "86592",
      "./sd.js": "86592",
      "./se": "48916",
      "./se.js": "48916",
      "./si": "84228",
      "./si.js": "84228",
      "./sk": "17819",
      "./sk.js": "17819",
      "./sl": "50786",
      "./sl.js": "50786",
      "./sq": "4905",
      "./sq.js": "4905",
      "./sr": "15478",
      "./sr-cyrl": "47955",
      "./sr-cyrl.js": "47955",
      "./sr.js": "15478",
      "./ss": "43220",
      "./ss.js": "43220",
      "./sv": "22591",
      "./sv.js": "22591",
      "./sw": "42626",
      "./sw.js": "42626",
      "./ta": "59138",
      "./ta.js": "59138",
      "./te": "91821",
      "./te.js": "91821",
      "./tet": "53034",
      "./tet.js": "53034",
      "./tg": "61561",
      "./tg.js": "61561",
      "./th": "20370",
      "./th.js": "20370",
      "./tk": "48113",
      "./tk.js": "48113",
      "./tl-ph": "97743",
      "./tl-ph.js": "97743",
      "./tlh": "85970",
      "./tlh.js": "85970",
      "./tr": "16267",
      "./tr.js": "16267",
      "./tzl": "42925",
      "./tzl.js": "42925",
      "./tzm": "13483",
      "./tzm-latn": "73987",
      "./tzm-latn.js": "73987",
      "./tzm.js": "13483",
      "./ug-cn": "2433",
      "./ug-cn.js": "2433",
      "./uk": "7451",
      "./uk.js": "7451",
      "./ur": "30097",
      "./ur.js": "30097",
      "./uz": "24174",
      "./uz-latn": "41928",
      "./uz-latn.js": "41928",
      "./uz.js": "24174",
      "./vi": "73780",
      "./vi.js": "73780",
      "./x-pseudo": "10391",
      "./x-pseudo.js": "10391",
      "./yo": "35775",
      "./yo.js": "35775",
      "./zh-cn": "20635",
      "./zh-cn.js": "20635",
      "./zh-hk": "84000",
      "./zh-hk.js": "84000",
      "./zh-mo": "30360",
      "./zh-mo.js": "30360",
      "./zh-tw": "64314",
      "./zh-tw.js": "64314"
    };
    
    
    function webpackContext(req) {
      var id = webpackContextResolve(req);
      return __webpack_require__(id);
    }
    function webpackContextResolve(req) {
      if(!__webpack_require__.o(map, req)) {
        var e = new Error("Cannot find module '" + req + "'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
      }
      return map[req];
    }
    webpackContext.keys = function webpackContextKeys() {
      return Object.keys(map);
    };
    webpackContext.resolve = webpackContextResolve;
    module.exports = webpackContext;
    webpackContext.id = 12372;
    
    
    }),
    95487: (function () {
    "use strict";
    /* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ /*!
     * tram.js v0.8.2-global
     * Cross-browser CSS3 transitions in JavaScript
     * https://github.com/bkwld/tram
     * MIT License
     */ /* prettier-ignore */ 
    window.tram = function(a) {
        function b(a, b) {
            var c = new M.Bare;
            return c.init(a, b);
        }
        function c(a) {
            return a.replace(/[A-Z]/g, function(a) {
                return "-" + a.toLowerCase();
            });
        }
        function d(a) {
            var b = parseInt(a.slice(1), 16), c = b >> 16 & 255, d = b >> 8 & 255, e = 255 & b;
            return [
                c,
                d,
                e
            ];
        }
        function e(a, b, c) {
            return "#" + (1 << 24 | a << 16 | b << 8 | c).toString(16).slice(1);
        }
        function f() {}
        function g(a, b) {
            j("Type warning: Expected: [" + a + "] Got: [" + typeof b + "] " + b);
        }
        function h(a, b, c) {
            j("Units do not match [" + a + "]: " + b + ", " + c);
        }
        function i(a, b, c) {
            if (void 0 !== b && (c = b), void 0 === a) return c;
            var d = c;
            return $.test(a) || !_.test(a) ? d = parseInt(a, 10) : _.test(a) && (d = 1e3 * parseFloat(a)), 0 > d && (d = 0), d === d ? d : c;
        }
        function j(a) {
            U.debug && window && window.console.warn(a);
        }
        function k(a) {
            for(var b = -1, c = a ? a.length : 0, d = []; ++b < c;){
                var e = a[b];
                e && d.push(e);
            }
            return d;
        }
        var l = function(a, b, c) {
            function d(a) {
                return "object" == typeof a;
            }
            function e(a) {
                return "function" == typeof a;
            }
            function f() {}
            function g(h, i) {
                function j() {
                    var a = new k;
                    return e(a.init) && a.init.apply(a, arguments), a;
                }
                function k() {}
                i === c && (i = h, h = Object), j.Bare = k;
                var l, m = f[a] = h[a], n = k[a] = j[a] = new f;
                return n.constructor = j, j.mixin = function(b) {
                    return k[a] = j[a] = g(j, b)[a], j;
                }, j.open = function(a) {
                    if (l = {}, e(a) ? l = a.call(j, n, m, j, h) : d(a) && (l = a), d(l)) for(var c in l)b.call(l, c) && (n[c] = l[c]);
                    return e(n.init) || (n.init = h), j;
                }, j.open(i);
            }
            return g;
        }("prototype", {}.hasOwnProperty), m = {
            ease: [
                "ease",
                function(a, b, c, d) {
                    var e = (a /= d) * a, f = e * a;
                    return b + c * (-2.75 * f * e + 11 * e * e + -15.5 * f + 8 * e + .25 * a);
                }
            ],
            "ease-in": [
                "ease-in",
                function(a, b, c, d) {
                    var e = (a /= d) * a, f = e * a;
                    return b + c * (-1 * f * e + 3 * e * e + -3 * f + 2 * e);
                }
            ],
            "ease-out": [
                "ease-out",
                function(a, b, c, d) {
                    var e = (a /= d) * a, f = e * a;
                    return b + c * (.3 * f * e + -1.6 * e * e + 2.2 * f + -1.8 * e + 1.9 * a);
                }
            ],
            "ease-in-out": [
                "ease-in-out",
                function(a, b, c, d) {
                    var e = (a /= d) * a, f = e * a;
                    return b + c * (2 * f * e + -5 * e * e + 2 * f + 2 * e);
                }
            ],
            linear: [
                "linear",
                function(a, b, c, d) {
                    return c * a / d + b;
                }
            ],
            "ease-in-quad": [
                "cubic-bezier(0.550, 0.085, 0.680, 0.530)",
                function(a, b, c, d) {
                    return c * (a /= d) * a + b;
                }
            ],
            "ease-out-quad": [
                "cubic-bezier(0.250, 0.460, 0.450, 0.940)",
                function(a, b, c, d) {
                    return -c * (a /= d) * (a - 2) + b;
                }
            ],
            "ease-in-out-quad": [
                "cubic-bezier(0.455, 0.030, 0.515, 0.955)",
                function(a, b, c, d) {
                    return (a /= d / 2) < 1 ? c / 2 * a * a + b : -c / 2 * (--a * (a - 2) - 1) + b;
                }
            ],
            "ease-in-cubic": [
                "cubic-bezier(0.550, 0.055, 0.675, 0.190)",
                function(a, b, c, d) {
                    return c * (a /= d) * a * a + b;
                }
            ],
            "ease-out-cubic": [
                "cubic-bezier(0.215, 0.610, 0.355, 1)",
                function(a, b, c, d) {
                    return c * ((a = a / d - 1) * a * a + 1) + b;
                }
            ],
            "ease-in-out-cubic": [
                "cubic-bezier(0.645, 0.045, 0.355, 1)",
                function(a, b, c, d) {
                    return (a /= d / 2) < 1 ? c / 2 * a * a * a + b : c / 2 * ((a -= 2) * a * a + 2) + b;
                }
            ],
            "ease-in-quart": [
                "cubic-bezier(0.895, 0.030, 0.685, 0.220)",
                function(a, b, c, d) {
                    return c * (a /= d) * a * a * a + b;
                }
            ],
            "ease-out-quart": [
                "cubic-bezier(0.165, 0.840, 0.440, 1)",
                function(a, b, c, d) {
                    return -c * ((a = a / d - 1) * a * a * a - 1) + b;
                }
            ],
            "ease-in-out-quart": [
                "cubic-bezier(0.770, 0, 0.175, 1)",
                function(a, b, c, d) {
                    return (a /= d / 2) < 1 ? c / 2 * a * a * a * a + b : -c / 2 * ((a -= 2) * a * a * a - 2) + b;
                }
            ],
            "ease-in-quint": [
                "cubic-bezier(0.755, 0.050, 0.855, 0.060)",
                function(a, b, c, d) {
                    return c * (a /= d) * a * a * a * a + b;
                }
            ],
            "ease-out-quint": [
                "cubic-bezier(0.230, 1, 0.320, 1)",
                function(a, b, c, d) {
                    return c * ((a = a / d - 1) * a * a * a * a + 1) + b;
                }
            ],
            "ease-in-out-quint": [
                "cubic-bezier(0.860, 0, 0.070, 1)",
                function(a, b, c, d) {
                    return (a /= d / 2) < 1 ? c / 2 * a * a * a * a * a + b : c / 2 * ((a -= 2) * a * a * a * a + 2) + b;
                }
            ],
            "ease-in-sine": [
                "cubic-bezier(0.470, 0, 0.745, 0.715)",
                function(a, b, c, d) {
                    return -c * Math.cos(a / d * (Math.PI / 2)) + c + b;
                }
            ],
            "ease-out-sine": [
                "cubic-bezier(0.390, 0.575, 0.565, 1)",
                function(a, b, c, d) {
                    return c * Math.sin(a / d * (Math.PI / 2)) + b;
                }
            ],
            "ease-in-out-sine": [
                "cubic-bezier(0.445, 0.050, 0.550, 0.950)",
                function(a, b, c, d) {
                    return -c / 2 * (Math.cos(Math.PI * a / d) - 1) + b;
                }
            ],
            "ease-in-expo": [
                "cubic-bezier(0.950, 0.050, 0.795, 0.035)",
                function(a, b, c, d) {
                    return 0 === a ? b : c * Math.pow(2, 10 * (a / d - 1)) + b;
                }
            ],
            "ease-out-expo": [
                "cubic-bezier(0.190, 1, 0.220, 1)",
                function(a, b, c, d) {
                    return a === d ? b + c : c * (-Math.pow(2, -10 * a / d) + 1) + b;
                }
            ],
            "ease-in-out-expo": [
                "cubic-bezier(1, 0, 0, 1)",
                function(a, b, c, d) {
                    return 0 === a ? b : a === d ? b + c : (a /= d / 2) < 1 ? c / 2 * Math.pow(2, 10 * (a - 1)) + b : c / 2 * (-Math.pow(2, -10 * --a) + 2) + b;
                }
            ],
            "ease-in-circ": [
                "cubic-bezier(0.600, 0.040, 0.980, 0.335)",
                function(a, b, c, d) {
                    return -c * (Math.sqrt(1 - (a /= d) * a) - 1) + b;
                }
            ],
            "ease-out-circ": [
                "cubic-bezier(0.075, 0.820, 0.165, 1)",
                function(a, b, c, d) {
                    return c * Math.sqrt(1 - (a = a / d - 1) * a) + b;
                }
            ],
            "ease-in-out-circ": [
                "cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                function(a, b, c, d) {
                    return (a /= d / 2) < 1 ? -c / 2 * (Math.sqrt(1 - a * a) - 1) + b : c / 2 * (Math.sqrt(1 - (a -= 2) * a) + 1) + b;
                }
            ],
            "ease-in-back": [
                "cubic-bezier(0.600, -0.280, 0.735, 0.045)",
                function(a, b, c, d, e) {
                    return void 0 === e && (e = 1.70158), c * (a /= d) * a * ((e + 1) * a - e) + b;
                }
            ],
            "ease-out-back": [
                "cubic-bezier(0.175, 0.885, 0.320, 1.275)",
                function(a, b, c, d, e) {
                    return void 0 === e && (e = 1.70158), c * ((a = a / d - 1) * a * ((e + 1) * a + e) + 1) + b;
                }
            ],
            "ease-in-out-back": [
                "cubic-bezier(0.680, -0.550, 0.265, 1.550)",
                function(a, b, c, d, e) {
                    return void 0 === e && (e = 1.70158), (a /= d / 2) < 1 ? c / 2 * a * a * (((e *= 1.525) + 1) * a - e) + b : c / 2 * ((a -= 2) * a * (((e *= 1.525) + 1) * a + e) + 2) + b;
                }
            ]
        }, n = {
            "ease-in-back": "cubic-bezier(0.600, 0, 0.735, 0.045)",
            "ease-out-back": "cubic-bezier(0.175, 0.885, 0.320, 1)",
            "ease-in-out-back": "cubic-bezier(0.680, 0, 0.265, 1)"
        }, o = document, p = window, q = "bkwld-tram", r = /[\-\.0-9]/g, s = /[A-Z]/, t = "number", u = /^(rgb|#)/, v = /(em|cm|mm|in|pt|pc|px)$/, w = /(em|cm|mm|in|pt|pc|px|%)$/, x = /(deg|rad|turn)$/, y = "unitless", z = /(all|none) 0s ease 0s/, A = /^(width|height)$/, B = " ", C = o.createElement("a"), D = [
            "Webkit",
            "Moz",
            "O",
            "ms"
        ], E = [
            "-webkit-",
            "-moz-",
            "-o-",
            "-ms-"
        ], F = function(a) {
            if (a in C.style) return {
                dom: a,
                css: a
            };
            var b, c, d = "", e = a.split("-");
            for(b = 0; b < e.length; b++)d += e[b].charAt(0).toUpperCase() + e[b].slice(1);
            for(b = 0; b < D.length; b++)if (c = D[b] + d, c in C.style) return {
                dom: c,
                css: E[b] + a
            };
        }, G = b.support = {
            bind: Function.prototype.bind,
            transform: F("transform"),
            transition: F("transition"),
            backface: F("backface-visibility"),
            timing: F("transition-timing-function")
        };
        if (G.transition) {
            var H = G.timing.dom;
            if (C.style[H] = m["ease-in-back"][0], !C.style[H]) for(var I in n)m[I][0] = n[I];
        }
        var J = b.frame = function() {
            var a = p.requestAnimationFrame || p.webkitRequestAnimationFrame || p.mozRequestAnimationFrame || p.oRequestAnimationFrame || p.msRequestAnimationFrame;
            return a && G.bind ? a.bind(p) : function(a) {
                p.setTimeout(a, 16);
            };
        }(), K = b.now = function() {
            var a = p.performance, b = a && (a.now || a.webkitNow || a.msNow || a.mozNow);
            return b && G.bind ? b.bind(a) : Date.now || function() {
                return +new Date;
            };
        }(), L = l(function(b) {
            function d(a, b) {
                var c = k(("" + a).split(B)), d = c[0];
                b = b || {};
                var e = Y[d];
                if (!e) return j("Unsupported property: " + d);
                if (!b.weak || !this.props[d]) {
                    var f = e[0], g = this.props[d];
                    return g || (g = this.props[d] = new f.Bare), g.init(this.$el, c, e, b), g;
                }
            }
            function e(a, b, c) {
                if (a) {
                    var e = typeof a;
                    if (b || (this.timer && this.timer.destroy(), this.queue = [], this.active = !1), "number" == e && b) return this.timer = new S({
                        duration: a,
                        context: this,
                        complete: h
                    }), void (this.active = !0);
                    if ("string" == e && b) {
                        switch(a){
                            case "hide":
                                o.call(this);
                                break;
                            case "stop":
                                l.call(this);
                                break;
                            case "redraw":
                                p.call(this);
                                break;
                            default:
                                d.call(this, a, c && c[1]);
                        }
                        return h.call(this);
                    }
                    if ("function" == e) return void a.call(this, this);
                    if ("object" == e) {
                        var f = 0;
                        u.call(this, a, function(a, b) {
                            a.span > f && (f = a.span), a.stop(), a.animate(b);
                        }, function(a) {
                            "wait" in a && (f = i(a.wait, 0));
                        }), t.call(this), f > 0 && (this.timer = new S({
                            duration: f,
                            context: this
                        }), this.active = !0, b && (this.timer.complete = h));
                        var g = this, j = !1, k = {};
                        J(function() {
                            u.call(g, a, function(a) {
                                a.active && (j = !0, k[a.name] = a.nextStyle);
                            }), j && g.$el.css(k);
                        });
                    }
                }
            }
            function f(a) {
                a = i(a, 0), this.active ? this.queue.push({
                    options: a
                }) : (this.timer = new S({
                    duration: a,
                    context: this,
                    complete: h
                }), this.active = !0);
            }
            function g(a) {
                return this.active ? (this.queue.push({
                    options: a,
                    args: arguments
                }), void (this.timer.complete = h)) : j("No active transition timer. Use start() or wait() before then().");
            }
            function h() {
                if (this.timer && this.timer.destroy(), this.active = !1, this.queue.length) {
                    var a = this.queue.shift();
                    e.call(this, a.options, !0, a.args);
                }
            }
            function l(a) {
                this.timer && this.timer.destroy(), this.queue = [], this.active = !1;
                var b;
                "string" == typeof a ? (b = {}, b[a] = 1) : b = "object" == typeof a && null != a ? a : this.props, u.call(this, b, v), t.call(this);
            }
            function m(a) {
                l.call(this, a), u.call(this, a, w, x);
            }
            function n(a) {
                "string" != typeof a && (a = "block"), this.el.style.display = a;
            }
            function o() {
                l.call(this), this.el.style.display = "none";
            }
            function p() {
                this.el.offsetHeight;
            }
            function r() {
                l.call(this), a.removeData(this.el, q), this.$el = this.el = null;
            }
            function t() {
                var a, b, c = [];
                this.upstream && c.push(this.upstream);
                for(a in this.props)b = this.props[a], b.active && c.push(b.string);
                c = c.join(","), this.style !== c && (this.style = c, this.el.style[G.transition.dom] = c);
            }
            function u(a, b, e) {
                var f, g, h, i, j = b !== v, k = {};
                for(f in a)h = a[f], f in Z ? (k.transform || (k.transform = {}), k.transform[f] = h) : (s.test(f) && (f = c(f)), f in Y ? k[f] = h : (i || (i = {}), i[f] = h));
                for(f in k){
                    if (h = k[f], g = this.props[f], !g) {
                        if (!j) continue;
                        g = d.call(this, f);
                    }
                    b.call(this, g, h);
                }
                e && i && e.call(this, i);
            }
            function v(a) {
                a.stop();
            }
            function w(a, b) {
                a.set(b);
            }
            function x(a) {
                this.$el.css(a);
            }
            function y(a, c) {
                b[a] = function() {
                    return this.children ? A.call(this, c, arguments) : (this.el && c.apply(this, arguments), this);
                };
            }
            function A(a, b) {
                var c, d = this.children.length;
                for(c = 0; d > c; c++)a.apply(this.children[c], b);
                return this;
            }
            b.init = function(b) {
                if (this.$el = a(b), this.el = this.$el[0], this.props = {}, this.queue = [], this.style = "", this.active = !1, U.keepInherited && !U.fallback) {
                    var c = W(this.el, "transition");
                    c && !z.test(c) && (this.upstream = c);
                }
                G.backface && U.hideBackface && V(this.el, G.backface.css, "hidden");
            }, y("add", d), y("start", e), y("wait", f), y("then", g), y("next", h), y("stop", l), y("set", m), y("show", n), y("hide", o), y("redraw", p), y("destroy", r);
        }), M = l(L, function(b) {
            function c(b, c) {
                var d = a.data(b, q) || a.data(b, q, new L.Bare);
                return d.el || d.init(b), c ? d.start(c) : d;
            }
            b.init = function(b, d) {
                var e = a(b);
                if (!e.length) return this;
                if (1 === e.length) return c(e[0], d);
                var f = [];
                return e.each(function(a, b) {
                    f.push(c(b, d));
                }), this.children = f, this;
            };
        }), N = l(function(a) {
            function b() {
                var a = this.get();
                this.update("auto");
                var b = this.get();
                return this.update(a), b;
            }
            function c(a, b, c) {
                return void 0 !== b && (c = b), a in m ? a : c;
            }
            function d(a) {
                var b = /rgba?\((\d+),\s*(\d+),\s*(\d+)/.exec(a);
                return (b ? e(b[1], b[2], b[3]) : a).replace(/#(\w)(\w)(\w)$/, "#$1$1$2$2$3$3");
            }
            var f = {
                duration: 500,
                ease: "ease",
                delay: 0
            };
            a.init = function(a, b, d, e) {
                this.$el = a, this.el = a[0];
                var g = b[0];
                d[2] && (g = d[2]), X[g] && (g = X[g]), this.name = g, this.type = d[1], this.duration = i(b[1], this.duration, f.duration), this.ease = c(b[2], this.ease, f.ease), this.delay = i(b[3], this.delay, f.delay), this.span = this.duration + this.delay, this.active = !1, this.nextStyle = null, this.auto = A.test(this.name), this.unit = e.unit || this.unit || U.defaultUnit, this.angle = e.angle || this.angle || U.defaultAngle, U.fallback || e.fallback ? this.animate = this.fallback : (this.animate = this.transition, this.string = this.name + B + this.duration + "ms" + ("ease" != this.ease ? B + m[this.ease][0] : "") + (this.delay ? B + this.delay + "ms" : ""));
            }, a.set = function(a) {
                a = this.convert(a, this.type), this.update(a), this.redraw();
            }, a.transition = function(a) {
                this.active = !0, a = this.convert(a, this.type), this.auto && ("auto" == this.el.style[this.name] && (this.update(this.get()), this.redraw()), "auto" == a && (a = b.call(this))), this.nextStyle = a;
            }, a.fallback = function(a) {
                var c = this.el.style[this.name] || this.convert(this.get(), this.type);
                a = this.convert(a, this.type), this.auto && ("auto" == c && (c = this.convert(this.get(), this.type)), "auto" == a && (a = b.call(this))), this.tween = new R({
                    from: c,
                    to: a,
                    duration: this.duration,
                    delay: this.delay,
                    ease: this.ease,
                    update: this.update,
                    context: this
                });
            }, a.get = function() {
                return W(this.el, this.name);
            }, a.update = function(a) {
                V(this.el, this.name, a);
            }, a.stop = function() {
                (this.active || this.nextStyle) && (this.active = !1, this.nextStyle = null, V(this.el, this.name, this.get()));
                var a = this.tween;
                a && a.context && a.destroy();
            }, a.convert = function(a, b) {
                if ("auto" == a && this.auto) return a;
                var c, e = "number" == typeof a, f = "string" == typeof a;
                switch(b){
                    case t:
                        if (e) return a;
                        if (f && "" === a.replace(r, "")) return +a;
                        c = "number(unitless)";
                        break;
                    case u:
                        if (f) {
                            if ("" === a && this.original) return this.original;
                            if (b.test(a)) return "#" == a.charAt(0) && 7 == a.length ? a : d(a);
                        }
                        c = "hex or rgb string";
                        break;
                    case v:
                        if (e) return a + this.unit;
                        if (f && b.test(a)) return a;
                        c = "number(px) or string(unit)";
                        break;
                    case w:
                        if (e) return a + this.unit;
                        if (f && b.test(a)) return a;
                        c = "number(px) or string(unit or %)";
                        break;
                    case x:
                        if (e) return a + this.angle;
                        if (f && b.test(a)) return a;
                        c = "number(deg) or string(angle)";
                        break;
                    case y:
                        if (e) return a;
                        if (f && w.test(a)) return a;
                        c = "number(unitless) or string(unit or %)";
                }
                return g(c, a), a;
            }, a.redraw = function() {
                this.el.offsetHeight;
            };
        }), O = l(N, function(a, b) {
            a.init = function() {
                b.init.apply(this, arguments), this.original || (this.original = this.convert(this.get(), u));
            };
        }), P = l(N, function(a, b) {
            a.init = function() {
                b.init.apply(this, arguments), this.animate = this.fallback;
            }, a.get = function() {
                return this.$el[this.name]();
            }, a.update = function(a) {
                this.$el[this.name](a);
            };
        }), Q = l(N, function(a, b) {
            function c(a, b) {
                var c, d, e, f, g;
                for(c in a)f = Z[c], e = f[0], d = f[1] || c, g = this.convert(a[c], e), b.call(this, d, g, e);
            }
            a.init = function() {
                b.init.apply(this, arguments), this.current || (this.current = {}, Z.perspective && U.perspective && (this.current.perspective = U.perspective, V(this.el, this.name, this.style(this.current)), this.redraw()));
            }, a.set = function(a) {
                c.call(this, a, function(a, b) {
                    this.current[a] = b;
                }), V(this.el, this.name, this.style(this.current)), this.redraw();
            }, a.transition = function(a) {
                var b = this.values(a);
                this.tween = new T({
                    current: this.current,
                    values: b,
                    duration: this.duration,
                    delay: this.delay,
                    ease: this.ease
                });
                var c, d = {};
                for(c in this.current)d[c] = c in b ? b[c] : this.current[c];
                this.active = !0, this.nextStyle = this.style(d);
            }, a.fallback = function(a) {
                var b = this.values(a);
                this.tween = new T({
                    current: this.current,
                    values: b,
                    duration: this.duration,
                    delay: this.delay,
                    ease: this.ease,
                    update: this.update,
                    context: this
                });
            }, a.update = function() {
                V(this.el, this.name, this.style(this.current));
            }, a.style = function(a) {
                var b, c = "";
                for(b in a)c += b + "(" + a[b] + ") ";
                return c;
            }, a.values = function(a) {
                var b, d = {};
                return c.call(this, a, function(a, c, e) {
                    d[a] = c, void 0 === this.current[a] && (b = 0, ~a.indexOf("scale") && (b = 1), this.current[a] = this.convert(b, e));
                }), d;
            };
        }), R = l(function(b) {
            function c(a) {
                1 === n.push(a) && J(g);
            }
            function g() {
                var a, b, c, d = n.length;
                if (d) for(J(g), b = K(), a = d; a--;)c = n[a], c && c.render(b);
            }
            function i(b) {
                var c, d = a.inArray(b, n);
                d >= 0 && (c = n.slice(d + 1), n.length = d, c.length && (n = n.concat(c)));
            }
            function j(a) {
                return Math.round(a * o) / o;
            }
            function k(a, b, c) {
                return e(a[0] + c * (b[0] - a[0]), a[1] + c * (b[1] - a[1]), a[2] + c * (b[2] - a[2]));
            }
            var l = {
                ease: m.ease[1],
                from: 0,
                to: 1
            };
            b.init = function(a) {
                this.duration = a.duration || 0, this.delay = a.delay || 0;
                var b = a.ease || l.ease;
                m[b] && (b = m[b][1]), "function" != typeof b && (b = l.ease), this.ease = b, this.update = a.update || f, this.complete = a.complete || f, this.context = a.context || this, this.name = a.name;
                var c = a.from, d = a.to;
                void 0 === c && (c = l.from), void 0 === d && (d = l.to), this.unit = a.unit || "", "number" == typeof c && "number" == typeof d ? (this.begin = c, this.change = d - c) : this.format(d, c), this.value = this.begin + this.unit, this.start = K(), a.autoplay !== !1 && this.play();
            }, b.play = function() {
                this.active || (this.start || (this.start = K()), this.active = !0, c(this));
            }, b.stop = function() {
                this.active && (this.active = !1, i(this));
            }, b.render = function(a) {
                var b, c = a - this.start;
                if (this.delay) {
                    if (c <= this.delay) return;
                    c -= this.delay;
                }
                if (c < this.duration) {
                    var d = this.ease(c, 0, 1, this.duration);
                    return b = this.startRGB ? k(this.startRGB, this.endRGB, d) : j(this.begin + d * this.change), this.value = b + this.unit, void this.update.call(this.context, this.value);
                }
                b = this.endHex || this.begin + this.change, this.value = b + this.unit, this.update.call(this.context, this.value), this.complete.call(this.context), this.destroy();
            }, b.format = function(a, b) {
                if (b += "", a += "", "#" == a.charAt(0)) return this.startRGB = d(b), this.endRGB = d(a), this.endHex = a, this.begin = 0, void (this.change = 1);
                if (!this.unit) {
                    var c = b.replace(r, ""), e = a.replace(r, "");
                    c !== e && h("tween", b, a), this.unit = c;
                }
                b = parseFloat(b), a = parseFloat(a), this.begin = this.value = b, this.change = a - b;
            }, b.destroy = function() {
                this.stop(), this.context = null, this.ease = this.update = this.complete = f;
            };
            var n = [], o = 1e3;
        }), S = l(R, function(a) {
            a.init = function(a) {
                this.duration = a.duration || 0, this.complete = a.complete || f, this.context = a.context, this.play();
            }, a.render = function(a) {
                var b = a - this.start;
                b < this.duration || (this.complete.call(this.context), this.destroy());
            };
        }), T = l(R, function(a, b) {
            a.init = function(a) {
                this.context = a.context, this.update = a.update, this.tweens = [], this.current = a.current;
                var b, c;
                for(b in a.values)c = a.values[b], this.current[b] !== c && this.tweens.push(new R({
                    name: b,
                    from: this.current[b],
                    to: c,
                    duration: a.duration,
                    delay: a.delay,
                    ease: a.ease,
                    autoplay: !1
                }));
                this.play();
            }, a.render = function(a) {
                var b, c, d = this.tweens.length, e = !1;
                for(b = d; b--;)c = this.tweens[b], c.context && (c.render(a), this.current[c.name] = c.value, e = !0);
                return e ? void (this.update && this.update.call(this.context)) : this.destroy();
            }, a.destroy = function() {
                if (b.destroy.call(this), this.tweens) {
                    var a, c = this.tweens.length;
                    for(a = c; a--;)this.tweens[a].destroy();
                    this.tweens = null, this.current = null;
                }
            };
        }), U = b.config = {
            debug: !1,
            defaultUnit: "px",
            defaultAngle: "deg",
            keepInherited: !1,
            hideBackface: !1,
            perspective: "",
            fallback: !G.transition,
            agentTests: []
        };
        b.fallback = function(a) {
            if (!G.transition) return U.fallback = !0;
            U.agentTests.push("(" + a + ")");
            var b = new RegExp(U.agentTests.join("|"), "i");
            U.fallback = b.test(navigator.userAgent);
        }, b.fallback("6.0.[2-5] Safari"), b.tween = function(a) {
            return new R(a);
        }, b.delay = function(a, b, c) {
            return new S({
                complete: b,
                duration: a,
                context: c
            });
        }, a.fn.tram = function(a) {
            return b.call(null, this, a);
        };
        var V = a.style, W = a.css, X = {
            transform: G.transform && G.transform.css
        }, Y = {
            color: [
                O,
                u
            ],
            background: [
                O,
                u,
                "background-color"
            ],
            "outline-color": [
                O,
                u
            ],
            "border-color": [
                O,
                u
            ],
            "border-top-color": [
                O,
                u
            ],
            "border-right-color": [
                O,
                u
            ],
            "border-bottom-color": [
                O,
                u
            ],
            "border-left-color": [
                O,
                u
            ],
            "border-width": [
                N,
                v
            ],
            "border-top-width": [
                N,
                v
            ],
            "border-right-width": [
                N,
                v
            ],
            "border-bottom-width": [
                N,
                v
            ],
            "border-left-width": [
                N,
                v
            ],
            "border-spacing": [
                N,
                v
            ],
            "letter-spacing": [
                N,
                v
            ],
            margin: [
                N,
                v
            ],
            "margin-top": [
                N,
                v
            ],
            "margin-right": [
                N,
                v
            ],
            "margin-bottom": [
                N,
                v
            ],
            "margin-left": [
                N,
                v
            ],
            padding: [
                N,
                v
            ],
            "padding-top": [
                N,
                v
            ],
            "padding-right": [
                N,
                v
            ],
            "padding-bottom": [
                N,
                v
            ],
            "padding-left": [
                N,
                v
            ],
            "outline-width": [
                N,
                v
            ],
            opacity: [
                N,
                t
            ],
            top: [
                N,
                w
            ],
            right: [
                N,
                w
            ],
            bottom: [
                N,
                w
            ],
            left: [
                N,
                w
            ],
            "font-size": [
                N,
                w
            ],
            "text-indent": [
                N,
                w
            ],
            "word-spacing": [
                N,
                w
            ],
            width: [
                N,
                w
            ],
            "min-width": [
                N,
                w
            ],
            "max-width": [
                N,
                w
            ],
            height: [
                N,
                w
            ],
            "min-height": [
                N,
                w
            ],
            "max-height": [
                N,
                w
            ],
            "line-height": [
                N,
                y
            ],
            "scroll-top": [
                P,
                t,
                "scrollTop"
            ],
            "scroll-left": [
                P,
                t,
                "scrollLeft"
            ]
        }, Z = {};
        G.transform && (Y.transform = [
            Q
        ], Z = {
            x: [
                w,
                "translateX"
            ],
            y: [
                w,
                "translateY"
            ],
            rotate: [
                x
            ],
            rotateX: [
                x
            ],
            rotateY: [
                x
            ],
            scale: [
                t
            ],
            scaleX: [
                t
            ],
            scaleY: [
                t
            ],
            skew: [
                x
            ],
            skewX: [
                x
            ],
            skewY: [
                x
            ]
        }), G.transform && G.backface && (Z.z = [
            w,
            "translateZ"
        ], Z.rotateZ = [
            x
        ], Z.scaleZ = [
            t
        ], Z.perspective = [
            v
        ]);
        var $ = /ms/, _ = /s|\./;
        return a.tram = b;
    }(window.jQuery);
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    35756: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    // Include tram for frame-throttling
    /* globals window */ 
    var $ = window.$;
    var tram = __webpack_require__(95487) && $.tram;
    /*!
     * Webflow._ (aka) Underscore.js 1.6.0 (custom build)
     *
     * http://underscorejs.org
     * (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     * Underscore may be freely distributed under the MIT license.
     * @license MIT
     */ /**
     * Webflow custom build of Underscore.js 1.6.0
     * https://github.com/jashkenas/underscore/tree/1.6.0
     *
     * _.each
     * _.map
     * _.find
     * _.filter
     * _.any
     * _.contains
     * _.delay
     * _.defer
     * _.throttle (webflow)
     * _.debounce
     * _.keys
     * _.has
     * _.now
     * _.template (webflow: upgraded to 1.13.6)
     */ module.exports = function() {
        var _ = {};
        // Current version.
        _.VERSION = '1.6.0-Webflow';
        // Establish the object that gets returned to break out of a loop iteration.
        var breaker = {};
        // Save bytes in the minified (but not gzipped) version:
        /* eslint-disable one-var */ var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
        /* eslint-enable one-var */ // Create quick reference variables for speed access to core prototypes.
        /* eslint-disable one-var, unused-imports/no-unused-vars */ var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
        /* eslint-enable one-var, unused-imports/no-unused-vars */ // All **ECMAScript 5** native function implementations that we hope to use
        // are declared here.
        /* eslint-disable one-var, unused-imports/no-unused-vars */ var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
        /* eslint-enable one-var, unused-imports/no-unused-vars */ // Collection Functions
        // --------------------
        // The cornerstone, an `each` implementation, aka `forEach`.
        // Handles objects with the built-in `forEach`, arrays, and raw objects.
        // Delegates to **ECMAScript 5**'s native `forEach` if available.
        var each = _.each = _.forEach = function(obj, iterator, context) {
            /* jshint shadow:true */ if (obj == null) return obj;
            if (nativeForEach && obj.forEach === nativeForEach) {
                obj.forEach(iterator, context);
            // eslint-disable-next-line no-implicit-coercion
            } else if (obj.length === +obj.length) {
                for(var i = 0, length = obj.length; i < length; i++){
                    if (iterator.call(context, obj[i], i, obj) === breaker) return;
                }
            } else {
                var keys = _.keys(obj);
                // eslint-disable-next-line no-redeclare
                for(var i = 0, length = keys.length; i < length; i++){
                    if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
                }
            }
            return obj;
        };
        // Return the results of applying the iterator to each element.
        // Delegates to **ECMAScript 5**'s native `map` if available.
        _.map = _.collect = function(obj, iterator, context) {
            var results = [];
            if (obj == null) return results;
            if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
            each(obj, function(value, index, list) {
                results.push(iterator.call(context, value, index, list));
            });
            return results;
        };
        // Return the first value which passes a truth test. Aliased as `detect`.
        _.find = _.detect = function(obj, predicate, context) {
            var result;
            any(obj, function(value, index, list) {
                if (predicate.call(context, value, index, list)) {
                    result = value;
                    return true;
                }
            });
            return result;
        };
        // Return all the elements that pass a truth test.
        // Delegates to **ECMAScript 5**'s native `filter` if available.
        // Aliased as `select`.
        _.filter = _.select = function(obj, predicate, context) {
            var results = [];
            if (obj == null) return results;
            if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
            each(obj, function(value, index, list) {
                if (predicate.call(context, value, index, list)) results.push(value);
            });
            return results;
        };
        // Determine if at least one element in the object matches a truth test.
        // Delegates to **ECMAScript 5**'s native `some` if available.
        // Aliased as `any`.
        var any = _.some = _.any = function(obj, predicate, context) {
            predicate || (predicate = _.identity);
            var result = false;
            if (obj == null) return result;
            if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
            each(obj, function(value, index, list) {
                if (result || (result = predicate.call(context, value, index, list))) return breaker;
            });
            return !!result; // eslint-disable-line no-implicit-coercion
        };
        // Determine if the array or object contains a given value (using `===`).
        // Aliased as `include`.
        _.contains = _.include = function(obj, target) {
            if (obj == null) return false;
            if (nativeIndexOf && obj.indexOf === nativeIndexOf) // eslint-disable-next-line eqeqeq
            return obj.indexOf(target) != -1;
            return any(obj, function(value) {
                return value === target;
            });
        };
        // Function (ahem) Functions
        // --------------------
        // Delays a function for the given number of milliseconds, and then calls
        // it with the arguments supplied.
        _.delay = function(func, wait) {
            var args = slice.call(arguments, 2);
            return setTimeout(function() {
                return func.apply(null, args);
            }, wait);
        };
        // Defers a function, scheduling it to run after the current call stack has
        // cleared.
        _.defer = function(func) {
            return _.delay.apply(_, [
                func,
                1
            ].concat(slice.call(arguments, 1)));
        };
        // Returns a function, that, when invoked, will only be triggered once every
        // browser animation frame - using tram's requestAnimationFrame polyfill.
        _.throttle = function(func) {
            // eslint-disable-next-line one-var
            var wait, args, context;
            return function() {
                if (wait) return;
                wait = true;
                args = arguments;
                context = this;
                tram.frame(function() {
                    wait = false;
                    func.apply(context, args);
                });
            };
        };
        // Returns a function, that, as long as it continues to be invoked, will not
        // be triggered. The function will be called after it stops being called for
        // N milliseconds. If `immediate` is passed, trigger the function on the
        // leading edge, instead of the trailing.
        _.debounce = function(func, wait, immediate) {
            // eslint-disable-next-line one-var
            var timeout, args, context, timestamp, result;
            var later = function() {
                var last = _.now() - timestamp;
                if (last < wait) {
                    timeout = setTimeout(later, wait - last);
                } else {
                    timeout = null;
                    if (!immediate) {
                        result = func.apply(context, args);
                        context = args = null;
                    }
                }
            };
            return function() {
                context = this;
                args = arguments;
                timestamp = _.now();
                var callNow = immediate && !timeout;
                if (!timeout) {
                    timeout = setTimeout(later, wait);
                }
                if (callNow) {
                    result = func.apply(context, args);
                    context = args = null;
                }
                return result;
            };
        };
        // Object Functions
        // ----------------
        // Fill in a given object with default properties.
        _.defaults = function(obj) {
            if (!_.isObject(obj)) return obj;
            for(var i = 1, length = arguments.length; i < length; i++){
                var source = arguments[i];
                for(var prop in source){
                    // eslint-disable-next-line no-void
                    if (obj[prop] === void 0) obj[prop] = source[prop];
                }
            }
            return obj;
        };
        // Retrieve the names of an object's properties.
        // Delegates to **ECMAScript 5**'s native `Object.keys`
        _.keys = function(obj) {
            if (!_.isObject(obj)) return [];
            if (nativeKeys) return nativeKeys(obj);
            var keys = [];
            for(var key in obj)if (_.has(obj, key)) keys.push(key);
            return keys;
        };
        // Shortcut function for checking if an object has a given property directly
        // on itself (in other words, not on a prototype).
        _.has = function(obj, key) {
            return hasOwnProperty.call(obj, key);
        };
        // Is a given variable an object?
        _.isObject = function(obj) {
            return obj === Object(obj);
        };
        // Utility Functions
        // -----------------
        // A (possibly faster) way to get the current timestamp as an integer.
        _.now = Date.now || function() {
            return new Date().getTime();
        };
        // By default, Underscore uses ERB-style template delimiters, change the
        // following template settings to use alternative delimiters.
        _.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
        };
        // When customizing `templateSettings`, if you don't want to define an
        // interpolation, evaluation or escaping regex, we need one that is
        // guaranteed not to match.
        var noMatch = /(.)^/;
        // Certain characters need to be escaped so that they can be put into a
        // string literal.
        var escapes = {
            "'": "'",
            '\\': '\\',
            '\r': 'r',
            '\n': 'n',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        };
        var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
        var escapeChar = function(match) {
            return '\\' + escapes[match];
        };
        // In order to prevent third-party code injection through
        // `_.templateSettings.variable`, we test it against the following regular
        // expression. It is intentionally a bit more liberal than just matching valid
        // identifiers, but still prevents possible loopholes through defaults or
        // destructuring assignment.
        var bareIdentifier = /^\s*(\w|\$)+\s*$/;
        // JavaScript micro-templating, similar to John Resig's implementation.
        // Underscore templating handles arbitrary delimiters, preserves whitespace,
        // and correctly escapes quotes within interpolated code.
        // NB: `oldSettings` only exists for backwards compatibility.
        _.template = function(text, settings, oldSettings) {
            if (!settings && oldSettings) settings = oldSettings;
            settings = _.defaults({}, settings, _.templateSettings);
            // Combine delimiters into one regular expression via alternation.
            var matcher = RegExp([
                (settings.escape || noMatch).source,
                (settings.interpolate || noMatch).source,
                (settings.evaluate || noMatch).source
            ].join('|') + '|$', 'g');
            // Compile the template source, escaping string literals appropriately.
            var index = 0;
            var source = "__p+='";
            text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
                index = offset + match.length;
                if (escape) {
                    source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                } else if (interpolate) {
                    source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                } else if (evaluate) {
                    source += "';\n" + evaluate + "\n__p+='";
                }
                // Adobe VMs need the match returned to produce the correct offset.
                return match;
            });
            source += "';\n";
            var argument = settings.variable;
            if (argument) {
                // Insure against third-party code injection. (CVE-2021-23358)
                if (!bareIdentifier.test(argument)) throw new Error('variable is not a bare identifier: ' + argument);
            } else {
                // If a variable is not specified, place data values in local scope.
                source = 'with(obj||{}){\n' + source + '}\n';
                argument = 'obj';
            }
            source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';
            var render;
            try {
                // eslint-disable-next-line no-new-func
                render = new Function(settings.variable || 'obj', '_', source);
            } catch (e) {
                e.source = source;
                throw e;
            }
            var template = function(data) {
                return render.call(this, data, _);
            };
            // Provide the compiled source as a convenience for precompilation.
            template.source = 'function(' + argument + '){\n' + source + '}';
            return template;
        };
        // Export underscore
        return _;
    }();
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuZGVyc2NvcmUtY3VzdG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEluY2x1ZGUgdHJhbSBmb3IgZnJhbWUtdGhyb3R0bGluZ1xuLyogZ2xvYmFscyB3aW5kb3cgKi9cblxudmFyICQgPSB3aW5kb3cuJDtcbnZhciB0cmFtID0gcmVxdWlyZSgnLi90cmFtLW1pbicpICYmICQudHJhbTtcblxuLyohXG4gKiBXZWJmbG93Ll8gKGFrYSkgVW5kZXJzY29yZS5qcyAxLjYuMCAoY3VzdG9tIGJ1aWxkKVxuICpcbiAqIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4gKiAoYykgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbi8qKlxuICogV2ViZmxvdyBjdXN0b20gYnVpbGQgb2YgVW5kZXJzY29yZS5qcyAxLjYuMFxuICogaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3RyZWUvMS42LjBcbiAqXG4gKiBfLmVhY2hcbiAqIF8ubWFwXG4gKiBfLmZpbmRcbiAqIF8uZmlsdGVyXG4gKiBfLmFueVxuICogXy5jb250YWluc1xuICogXy5kZWxheVxuICogXy5kZWZlclxuICogXy50aHJvdHRsZSAod2ViZmxvdylcbiAqIF8uZGVib3VuY2VcbiAqIF8ua2V5c1xuICogXy5oYXNcbiAqIF8ubm93XG4gKiBfLnRlbXBsYXRlICh3ZWJmbG93OiB1cGdyYWRlZCB0byAxLjEzLjYpXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIF8gPSB7fTtcblxuICAvLyBDdXJyZW50IHZlcnNpb24uXG4gIF8uVkVSU0lPTiA9ICcxLjYuMC1XZWJmbG93JztcblxuICAvLyBFc3RhYmxpc2ggdGhlIG9iamVjdCB0aGF0IGdldHMgcmV0dXJuZWQgdG8gYnJlYWsgb3V0IG9mIGEgbG9vcCBpdGVyYXRpb24uXG4gIHZhciBicmVha2VyID0ge307XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgLyogZXNsaW50LWRpc2FibGUgb25lLXZhciAqL1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAvKiBlc2xpbnQtZW5hYmxlIG9uZS12YXIgKi9cblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgLyogZXNsaW50LWRpc2FibGUgb25lLXZhciwgdW51c2VkLWltcG9ydHMvbm8tdW51c2VkLXZhcnMgKi9cbiAgdmFyIHB1c2ggPSBBcnJheVByb3RvLnB1c2gsXG4gICAgc2xpY2UgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIGNvbmNhdCA9IEFycmF5UHJvdG8uY29uY2F0LFxuICAgIHRvU3RyaW5nID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgaGFzT3duUHJvcGVydHkgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcbiAgLyogZXNsaW50LWVuYWJsZSBvbmUtdmFyLCB1bnVzZWQtaW1wb3J0cy9uby11bnVzZWQtdmFycyAqL1xuXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuICAvLyBhcmUgZGVjbGFyZWQgaGVyZS5cbiAgLyogZXNsaW50LWRpc2FibGUgb25lLXZhciwgdW51c2VkLWltcG9ydHMvbm8tdW51c2VkLXZhcnMgKi9cbiAgdmFyIG5hdGl2ZUZvckVhY2ggPSBBcnJheVByb3RvLmZvckVhY2gsXG4gICAgbmF0aXZlTWFwID0gQXJyYXlQcm90by5tYXAsXG4gICAgbmF0aXZlUmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2UsXG4gICAgbmF0aXZlUmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0LFxuICAgIG5hdGl2ZUZpbHRlciA9IEFycmF5UHJvdG8uZmlsdGVyLFxuICAgIG5hdGl2ZUV2ZXJ5ID0gQXJyYXlQcm90by5ldmVyeSxcbiAgICBuYXRpdmVTb21lID0gQXJyYXlQcm90by5zb21lLFxuICAgIG5hdGl2ZUluZGV4T2YgPSBBcnJheVByb3RvLmluZGV4T2YsXG4gICAgbmF0aXZlTGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLFxuICAgIG5hdGl2ZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgPSBPYmplY3Qua2V5cyxcbiAgICBuYXRpdmVCaW5kID0gRnVuY1Byb3RvLmJpbmQ7XG4gIC8qIGVzbGludC1lbmFibGUgb25lLXZhciwgdW51c2VkLWltcG9ydHMvbm8tdW51c2VkLXZhcnMgKi9cblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIG9iamVjdHMgd2l0aCB0aGUgYnVpbHQtaW4gYGZvckVhY2hgLCBhcnJheXMsIGFuZCByYXcgb2JqZWN0cy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGZvckVhY2hgIGlmIGF2YWlsYWJsZS5cbiAgdmFyIGVhY2ggPVxuICAgIChfLmVhY2ggPVxuICAgIF8uZm9yRWFjaCA9XG4gICAgICBmdW5jdGlvbiAob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgICAgICAvKiBqc2hpbnQgc2hhZG93OnRydWUgKi9cbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgICAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkge1xuICAgICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb25cbiAgICAgICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopID09PSBicmVha2VyKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9KTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdG9yIHRvIGVhY2ggZWxlbWVudC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYG1hcGAgaWYgYXZhaWxhYmxlLlxuICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uIChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzO1xuICAgIGlmIChuYXRpdmVNYXAgJiYgb2JqLm1hcCA9PT0gbmF0aXZlTWFwKSByZXR1cm4gb2JqLm1hcChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJlc3VsdHMucHVzaChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbiAob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGFueShvYmosIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS5cbiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC5cbiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uIChvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlRmlsdGVyICYmIG9iai5maWx0ZXIgPT09IG5hdGl2ZUZpbHRlcilcbiAgICAgIHJldHVybiBvYmouZmlsdGVyKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgc29tZWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxuICB2YXIgYW55ID1cbiAgICAoXy5zb21lID1cbiAgICBfLmFueSA9XG4gICAgICBmdW5jdGlvbiAob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBfLmlkZW50aXR5KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGlmIChuYXRpdmVTb21lICYmIG9iai5zb21lID09PSBuYXRpdmVTb21lKVxuICAgICAgICAgIHJldHVybiBvYmouc29tZShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgICBlYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgfHwgKHJlc3VsdCA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKVxuICAgICAgICAgICAgcmV0dXJuIGJyZWFrZXI7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gISFyZXN1bHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW1wbGljaXQtY29lcmNpb25cbiAgICAgIH0pO1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbiAob2JqLCB0YXJnZXQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBvYmouaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZilcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICAgIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xO1xuICAgIHJldHVybiBhbnkob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IGZ1bmN0aW9uIChmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH07XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgb25jZSBldmVyeVxuICAvLyBicm93c2VyIGFuaW1hdGlvbiBmcmFtZSAtIHVzaW5nIHRyYW0ncyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwuXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvbmUtdmFyXG4gICAgdmFyIHdhaXQsIGFyZ3MsIGNvbnRleHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh3YWl0KSByZXR1cm47XG4gICAgICB3YWl0ID0gdHJ1ZTtcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIHRyYW0uZnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICB3YWl0ID0gZmFsc2U7XG4gICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uIChmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb25lLXZhclxuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBsYXN0ID0gXy5ub3coKSAtIHRpbWVzdGFtcDtcbiAgICAgIGlmIChsYXN0IDwgd2FpdCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHRpbWVzdGFtcCA9IF8ubm93KCk7XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICB9XG4gICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdm9pZFxuICAgICAgICBpZiAob2JqW3Byb3BdID09PSB2b2lkIDApIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gT2JqZWN0KG9iaik7XG4gIH07XG5cbiAgLy8gVXRpbGl0eSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID1cbiAgICBEYXRlLm5vdyB8fFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZTogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICBpbnRlcnBvbGF0ZTogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlOiAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgfTtcblxuICAvLyBXaGVuIGN1c3RvbWl6aW5nIGB0ZW1wbGF0ZVNldHRpbmdzYCwgaWYgeW91IGRvbid0IHdhbnQgdG8gZGVmaW5lIGFuXG4gIC8vIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24gb3IgZXNjYXBpbmcgcmVnZXgsIHdlIG5lZWQgb25lIHRoYXQgaXNcbiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG4gIHZhciBub01hdGNoID0gLyguKV4vO1xuXG4gIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXG4gIC8vIHN0cmluZyBsaXRlcmFsLlxuICB2YXIgZXNjYXBlcyA9IHtcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOScsXG4gIH07XG5cbiAgdmFyIGVzY2FwZVJlZ0V4cCA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBJbiBvcmRlciB0byBwcmV2ZW50IHRoaXJkLXBhcnR5IGNvZGUgaW5qZWN0aW9uIHRocm91Z2hcbiAgLy8gYF8udGVtcGxhdGVTZXR0aW5ncy52YXJpYWJsZWAsIHdlIHRlc3QgaXQgYWdhaW5zdCB0aGUgZm9sbG93aW5nIHJlZ3VsYXJcbiAgLy8gZXhwcmVzc2lvbi4gSXQgaXMgaW50ZW50aW9uYWxseSBhIGJpdCBtb3JlIGxpYmVyYWwgdGhhbiBqdXN0IG1hdGNoaW5nIHZhbGlkXG4gIC8vIGlkZW50aWZpZXJzLCBidXQgc3RpbGwgcHJldmVudHMgcG9zc2libGUgbG9vcGhvbGVzIHRocm91Z2ggZGVmYXVsdHMgb3JcbiAgLy8gZGVzdHJ1Y3R1cmluZyBhc3NpZ25tZW50LlxuICB2YXIgYmFyZUlkZW50aWZpZXIgPSAvXlxccyooXFx3fFxcJCkrXFxzKiQvO1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uICh0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChcbiAgICAgIFtcbiAgICAgICAgKHNldHRpbmdzLmVzY2FwZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICBdLmpvaW4oJ3wnKSArICd8JCcsXG4gICAgICAnZydcbiAgICApO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShcbiAgICAgIG1hdGNoZXIsXG4gICAgICBmdW5jdGlvbiAobWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHtcbiAgICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVSZWdFeHAsIGVzY2FwZUNoYXIpO1xuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZnNldC5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuICAgICk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIHZhciBhcmd1bWVudCA9IHNldHRpbmdzLnZhcmlhYmxlO1xuICAgIGlmIChhcmd1bWVudCkge1xuICAgICAgLy8gSW5zdXJlIGFnYWluc3QgdGhpcmQtcGFydHkgY29kZSBpbmplY3Rpb24uIChDVkUtMjAyMS0yMzM1OClcbiAgICAgIGlmICghYmFyZUlkZW50aWZpZXIudGVzdChhcmd1bWVudCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndmFyaWFibGUgaXMgbm90IGEgYmFyZSBpZGVudGlmaWVyOiAnICsgYXJndW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgICAgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcbiAgICAgIGFyZ3VtZW50ID0gJ29iaic7XG4gICAgfVxuXG4gICAgc291cmNlID1cbiAgICAgIFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgK1xuICAgICAgJ3JldHVybiBfX3A7XFxuJztcblxuICAgIHZhciByZW5kZXI7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIGFyZ3VtZW50ICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBFeHBvcnQgdW5kZXJzY29yZVxuICByZXR1cm4gXztcbn0pKCk7XG4iXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsInRyYW0iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIl8iLCJWRVJTSU9OIiwiYnJlYWtlciIsIkFycmF5UHJvdG8iLCJBcnJheSIsInByb3RvdHlwZSIsIk9ialByb3RvIiwiT2JqZWN0IiwiRnVuY1Byb3RvIiwiRnVuY3Rpb24iLCJwdXNoIiwic2xpY2UiLCJjb25jYXQiLCJ0b1N0cmluZyIsImhhc093blByb3BlcnR5IiwibmF0aXZlRm9yRWFjaCIsImZvckVhY2giLCJuYXRpdmVNYXAiLCJtYXAiLCJuYXRpdmVSZWR1Y2UiLCJyZWR1Y2UiLCJuYXRpdmVSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwibmF0aXZlRmlsdGVyIiwiZmlsdGVyIiwibmF0aXZlRXZlcnkiLCJldmVyeSIsIm5hdGl2ZVNvbWUiLCJzb21lIiwibmF0aXZlSW5kZXhPZiIsImluZGV4T2YiLCJuYXRpdmVMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwibmF0aXZlSXNBcnJheSIsImlzQXJyYXkiLCJuYXRpdmVLZXlzIiwia2V5cyIsIm5hdGl2ZUJpbmQiLCJiaW5kIiwiZWFjaCIsIm9iaiIsIml0ZXJhdG9yIiwiY29udGV4dCIsImxlbmd0aCIsImkiLCJjYWxsIiwiY29sbGVjdCIsInJlc3VsdHMiLCJ2YWx1ZSIsImluZGV4IiwibGlzdCIsImZpbmQiLCJkZXRlY3QiLCJwcmVkaWNhdGUiLCJyZXN1bHQiLCJhbnkiLCJzZWxlY3QiLCJpZGVudGl0eSIsImNvbnRhaW5zIiwiaW5jbHVkZSIsInRhcmdldCIsImRlbGF5IiwiZnVuYyIsIndhaXQiLCJhcmdzIiwiYXJndW1lbnRzIiwic2V0VGltZW91dCIsImFwcGx5IiwiZGVmZXIiLCJ0aHJvdHRsZSIsImZyYW1lIiwiZGVib3VuY2UiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwidGltZXN0YW1wIiwibGF0ZXIiLCJsYXN0Iiwibm93IiwiY2FsbE5vdyIsImRlZmF1bHRzIiwiaXNPYmplY3QiLCJzb3VyY2UiLCJwcm9wIiwia2V5IiwiaGFzIiwiRGF0ZSIsImdldFRpbWUiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsImVzY2FwZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiZXNjYXBlUmVnRXhwIiwiZXNjYXBlQ2hhciIsIm1hdGNoIiwiYmFyZUlkZW50aWZpZXIiLCJ0ZW1wbGF0ZSIsInRleHQiLCJzZXR0aW5ncyIsIm9sZFNldHRpbmdzIiwibWF0Y2hlciIsIlJlZ0V4cCIsImpvaW4iLCJyZXBsYWNlIiwib2Zmc2V0IiwiYXJndW1lbnQiLCJ2YXJpYWJsZSIsInRlc3QiLCJFcnJvciIsInJlbmRlciIsImUiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQSxvQ0FBb0M7QUFDcEMsa0JBQWtCO0FBRWxCLElBQUlBLElBQUlDLE9BQU9ELENBQUM7QUFDaEIsSUFBSUUsT0FBT0MsUUFBUSxpQkFBaUJILEVBQUVFLElBQUk7QUFFMUM7Ozs7Ozs7Q0FPQyxHQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDREUsT0FBT0MsT0FBTyxHQUFHLEFBQUM7SUFDaEIsSUFBSUMsSUFBSSxDQUFDO0lBRVQsbUJBQW1CO0lBQ25CQSxFQUFFQyxPQUFPLEdBQUc7SUFFWiw0RUFBNEU7SUFDNUUsSUFBSUMsVUFBVSxDQUFDO0lBRWYsd0RBQXdEO0lBQ3hELDBCQUEwQixHQUMxQixJQUFJQyxhQUFhQyxNQUFNQyxTQUFTLEVBQzlCQyxXQUFXQyxPQUFPRixTQUFTLEVBQzNCRyxZQUFZQyxTQUFTSixTQUFTO0lBQ2hDLHlCQUF5QixHQUV6Qix3RUFBd0U7SUFDeEUseURBQXlELEdBQ3pELElBQUlLLE9BQU9QLFdBQVdPLElBQUksRUFDeEJDLFFBQVFSLFdBQVdRLEtBQUssRUFDeEJDLFNBQVNULFdBQVdTLE1BQU0sRUFDMUJDLFdBQVdQLFNBQVNPLFFBQVEsRUFDNUJDLGlCQUFpQlIsU0FBU1EsY0FBYztJQUMxQyx3REFBd0QsR0FFeEQsMkVBQTJFO0lBQzNFLHFCQUFxQjtJQUNyQix5REFBeUQsR0FDekQsSUFBSUMsZ0JBQWdCWixXQUFXYSxPQUFPLEVBQ3BDQyxZQUFZZCxXQUFXZSxHQUFHLEVBQzFCQyxlQUFlaEIsV0FBV2lCLE1BQU0sRUFDaENDLG9CQUFvQmxCLFdBQVdtQixXQUFXLEVBQzFDQyxlQUFlcEIsV0FBV3FCLE1BQU0sRUFDaENDLGNBQWN0QixXQUFXdUIsS0FBSyxFQUM5QkMsYUFBYXhCLFdBQVd5QixJQUFJLEVBQzVCQyxnQkFBZ0IxQixXQUFXMkIsT0FBTyxFQUNsQ0Msb0JBQW9CNUIsV0FBVzZCLFdBQVcsRUFDMUNDLGdCQUFnQjdCLE1BQU04QixPQUFPLEVBQzdCQyxhQUFhNUIsT0FBTzZCLElBQUksRUFDeEJDLGFBQWE3QixVQUFVOEIsSUFBSTtJQUM3Qix3REFBd0QsR0FFeEQsdUJBQXVCO0lBQ3ZCLHVCQUF1QjtJQUV2Qiw0REFBNEQ7SUFDNUQsd0VBQXdFO0lBQ3hFLGlFQUFpRTtJQUNqRSxJQUFJQyxPQUNEdkMsRUFBRXVDLElBQUksR0FDUHZDLEVBQUVnQixPQUFPLEdBQ1AsU0FBVXdCLEdBQUcsRUFBRUMsUUFBUSxFQUFFQyxPQUFPO1FBQzlCLHNCQUFzQixHQUN0QixJQUFJRixPQUFPLE1BQU0sT0FBT0E7UUFDeEIsSUFBSXpCLGlCQUFpQnlCLElBQUl4QixPQUFPLEtBQUtELGVBQWU7WUFDbER5QixJQUFJeEIsT0FBTyxDQUFDeUIsVUFBVUM7UUFDdEIsZ0RBQWdEO1FBQ2xELE9BQU8sSUFBSUYsSUFBSUcsTUFBTSxLQUFLLENBQUNILElBQUlHLE1BQU0sRUFBRTtZQUNyQyxJQUFLLElBQUlDLElBQUksR0FBR0QsU0FBU0gsSUFBSUcsTUFBTSxFQUFFQyxJQUFJRCxRQUFRQyxJQUFLO2dCQUNwRCxJQUFJSCxTQUFTSSxJQUFJLENBQUNILFNBQVNGLEdBQUcsQ0FBQ0ksRUFBRSxFQUFFQSxHQUFHSixTQUFTdEMsU0FBUztZQUMxRDtRQUNGLE9BQU87WUFDTCxJQUFJa0MsT0FBT3BDLEVBQUVvQyxJQUFJLENBQUNJO1lBQ2xCLHdDQUF3QztZQUN4QyxJQUFLLElBQUlJLElBQUksR0FBR0QsU0FBU1AsS0FBS08sTUFBTSxFQUFFQyxJQUFJRCxRQUFRQyxJQUFLO2dCQUNyRCxJQUFJSCxTQUFTSSxJQUFJLENBQUNILFNBQVNGLEdBQUcsQ0FBQ0osSUFBSSxDQUFDUSxFQUFFLENBQUMsRUFBRVIsSUFBSSxDQUFDUSxFQUFFLEVBQUVKLFNBQVN0QyxTQUN6RDtZQUNKO1FBQ0Y7UUFDQSxPQUFPc0M7SUFDVDtJQUVKLCtEQUErRDtJQUMvRCw2REFBNkQ7SUFDN0R4QyxFQUFFa0IsR0FBRyxHQUFHbEIsRUFBRThDLE9BQU8sR0FBRyxTQUFVTixHQUFHLEVBQUVDLFFBQVEsRUFBRUMsT0FBTztRQUNsRCxJQUFJSyxVQUFVLEVBQUU7UUFDaEIsSUFBSVAsT0FBTyxNQUFNLE9BQU9PO1FBQ3hCLElBQUk5QixhQUFhdUIsSUFBSXRCLEdBQUcsS0FBS0QsV0FBVyxPQUFPdUIsSUFBSXRCLEdBQUcsQ0FBQ3VCLFVBQVVDO1FBQ2pFSCxLQUFLQyxLQUFLLFNBQVVRLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJO1lBQ3BDSCxRQUFRckMsSUFBSSxDQUFDK0IsU0FBU0ksSUFBSSxDQUFDSCxTQUFTTSxPQUFPQyxPQUFPQztRQUNwRDtRQUNBLE9BQU9IO0lBQ1Q7SUFFQSx5RUFBeUU7SUFDekUvQyxFQUFFbUQsSUFBSSxHQUFHbkQsRUFBRW9ELE1BQU0sR0FBRyxTQUFVWixHQUFHLEVBQUVhLFNBQVMsRUFBRVgsT0FBTztRQUNuRCxJQUFJWTtRQUNKQyxJQUFJZixLQUFLLFNBQVVRLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJO1lBQ25DLElBQUlHLFVBQVVSLElBQUksQ0FBQ0gsU0FBU00sT0FBT0MsT0FBT0MsT0FBTztnQkFDL0NJLFNBQVNOO2dCQUNULE9BQU87WUFDVDtRQUNGO1FBQ0EsT0FBT007SUFDVDtJQUVBLGtEQUFrRDtJQUNsRCxnRUFBZ0U7SUFDaEUsdUJBQXVCO0lBQ3ZCdEQsRUFBRXdCLE1BQU0sR0FBR3hCLEVBQUV3RCxNQUFNLEdBQUcsU0FBVWhCLEdBQUcsRUFBRWEsU0FBUyxFQUFFWCxPQUFPO1FBQ3JELElBQUlLLFVBQVUsRUFBRTtRQUNoQixJQUFJUCxPQUFPLE1BQU0sT0FBT087UUFDeEIsSUFBSXhCLGdCQUFnQmlCLElBQUloQixNQUFNLEtBQUtELGNBQ2pDLE9BQU9pQixJQUFJaEIsTUFBTSxDQUFDNkIsV0FBV1g7UUFDL0JILEtBQUtDLEtBQUssU0FBVVEsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUk7WUFDcEMsSUFBSUcsVUFBVVIsSUFBSSxDQUFDSCxTQUFTTSxPQUFPQyxPQUFPQyxPQUFPSCxRQUFRckMsSUFBSSxDQUFDc0M7UUFDaEU7UUFDQSxPQUFPRDtJQUNUO0lBRUEsd0VBQXdFO0lBQ3hFLDhEQUE4RDtJQUM5RCxvQkFBb0I7SUFDcEIsSUFBSVEsTUFDRHZELEVBQUU0QixJQUFJLEdBQ1A1QixFQUFFdUQsR0FBRyxHQUNILFNBQVVmLEdBQUcsRUFBRWEsU0FBUyxFQUFFWCxPQUFPO1FBQy9CVyxhQUFjQSxDQUFBQSxZQUFZckQsRUFBRXlELFFBQVEsQUFBRDtRQUNuQyxJQUFJSCxTQUFTO1FBQ2IsSUFBSWQsT0FBTyxNQUFNLE9BQU9jO1FBQ3hCLElBQUkzQixjQUFjYSxJQUFJWixJQUFJLEtBQUtELFlBQzdCLE9BQU9hLElBQUlaLElBQUksQ0FBQ3lCLFdBQVdYO1FBQzdCSCxLQUFLQyxLQUFLLFNBQVVRLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJO1lBQ3BDLElBQUlJLFVBQVdBLENBQUFBLFNBQVNELFVBQVVSLElBQUksQ0FBQ0gsU0FBU00sT0FBT0MsT0FBT0MsS0FBSSxHQUNoRSxPQUFPaEQ7UUFDWDtRQUNBLE9BQU8sQ0FBQyxDQUFDb0QsUUFBUSwyQ0FBMkM7SUFDOUQ7SUFFSix5RUFBeUU7SUFDekUsd0JBQXdCO0lBQ3hCdEQsRUFBRTBELFFBQVEsR0FBRzFELEVBQUUyRCxPQUFPLEdBQUcsU0FBVW5CLEdBQUcsRUFBRW9CLE1BQU07UUFDNUMsSUFBSXBCLE9BQU8sTUFBTSxPQUFPO1FBQ3hCLElBQUlYLGlCQUFpQlcsSUFBSVYsT0FBTyxLQUFLRCxlQUNuQyxrQ0FBa0M7UUFDbEMsT0FBT1csSUFBSVYsT0FBTyxDQUFDOEIsV0FBVyxDQUFDO1FBQ2pDLE9BQU9MLElBQUlmLEtBQUssU0FBVVEsS0FBSztZQUM3QixPQUFPQSxVQUFVWTtRQUNuQjtJQUNGO0lBRUEsNEJBQTRCO0lBQzVCLHVCQUF1QjtJQUV2Qix5RUFBeUU7SUFDekUsa0NBQWtDO0lBQ2xDNUQsRUFBRTZELEtBQUssR0FBRyxTQUFVQyxJQUFJLEVBQUVDLElBQUk7UUFDNUIsSUFBSUMsT0FBT3JELE1BQU1rQyxJQUFJLENBQUNvQixXQUFXO1FBQ2pDLE9BQU9DLFdBQVc7WUFDaEIsT0FBT0osS0FBS0ssS0FBSyxDQUFDLE1BQU1IO1FBQzFCLEdBQUdEO0lBQ0w7SUFFQSwyRUFBMkU7SUFDM0UsV0FBVztJQUNYL0QsRUFBRW9FLEtBQUssR0FBRyxTQUFVTixJQUFJO1FBQ3RCLE9BQU85RCxFQUFFNkQsS0FBSyxDQUFDTSxLQUFLLENBQUNuRSxHQUFHO1lBQUM4RDtZQUFNO1NBQUUsQ0FBQ2xELE1BQU0sQ0FBQ0QsTUFBTWtDLElBQUksQ0FBQ29CLFdBQVc7SUFDakU7SUFFQSw0RUFBNEU7SUFDNUUseUVBQXlFO0lBQ3pFakUsRUFBRXFFLFFBQVEsR0FBRyxTQUFVUCxJQUFJO1FBQ3pCLG1DQUFtQztRQUNuQyxJQUFJQyxNQUFNQyxNQUFNdEI7UUFDaEIsT0FBTztZQUNMLElBQUlxQixNQUFNO1lBQ1ZBLE9BQU87WUFDUEMsT0FBT0M7WUFDUHZCLFVBQVUsSUFBSTtZQUNkOUMsS0FBSzBFLEtBQUssQ0FBQztnQkFDVFAsT0FBTztnQkFDUEQsS0FBS0ssS0FBSyxDQUFDekIsU0FBU3NCO1lBQ3RCO1FBQ0Y7SUFDRjtJQUVBLDRFQUE0RTtJQUM1RSw0RUFBNEU7SUFDNUUsd0VBQXdFO0lBQ3hFLHlDQUF5QztJQUN6Q2hFLEVBQUV1RSxRQUFRLEdBQUcsU0FBVVQsSUFBSSxFQUFFQyxJQUFJLEVBQUVTLFNBQVM7UUFDMUMsbUNBQW1DO1FBQ25DLElBQUlDLFNBQVNULE1BQU10QixTQUFTZ0MsV0FBV3BCO1FBRXZDLElBQUlxQixRQUFRO1lBQ1YsSUFBSUMsT0FBTzVFLEVBQUU2RSxHQUFHLEtBQUtIO1lBQ3JCLElBQUlFLE9BQU9iLE1BQU07Z0JBQ2ZVLFVBQVVQLFdBQVdTLE9BQU9aLE9BQU9hO1lBQ3JDLE9BQU87Z0JBQ0xILFVBQVU7Z0JBQ1YsSUFBSSxDQUFDRCxXQUFXO29CQUNkbEIsU0FBU1EsS0FBS0ssS0FBSyxDQUFDekIsU0FBU3NCO29CQUM3QnRCLFVBQVVzQixPQUFPO2dCQUNuQjtZQUNGO1FBQ0Y7UUFFQSxPQUFPO1lBQ0x0QixVQUFVLElBQUk7WUFDZHNCLE9BQU9DO1lBQ1BTLFlBQVkxRSxFQUFFNkUsR0FBRztZQUNqQixJQUFJQyxVQUFVTixhQUFhLENBQUNDO1lBQzVCLElBQUksQ0FBQ0EsU0FBUztnQkFDWkEsVUFBVVAsV0FBV1MsT0FBT1o7WUFDOUI7WUFDQSxJQUFJZSxTQUFTO2dCQUNYeEIsU0FBU1EsS0FBS0ssS0FBSyxDQUFDekIsU0FBU3NCO2dCQUM3QnRCLFVBQVVzQixPQUFPO1lBQ25CO1lBRUEsT0FBT1Y7UUFDVDtJQUNGO0lBRUEsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUVuQixrREFBa0Q7SUFDbER0RCxFQUFFK0UsUUFBUSxHQUFHLFNBQVV2QyxHQUFHO1FBQ3hCLElBQUksQ0FBQ3hDLEVBQUVnRixRQUFRLENBQUN4QyxNQUFNLE9BQU9BO1FBQzdCLElBQUssSUFBSUksSUFBSSxHQUFHRCxTQUFTc0IsVUFBVXRCLE1BQU0sRUFBRUMsSUFBSUQsUUFBUUMsSUFBSztZQUMxRCxJQUFJcUMsU0FBU2hCLFNBQVMsQ0FBQ3JCLEVBQUU7WUFDekIsSUFBSyxJQUFJc0MsUUFBUUQsT0FBUTtnQkFDdkIsbUNBQW1DO2dCQUNuQyxJQUFJekMsR0FBRyxDQUFDMEMsS0FBSyxLQUFLLEtBQUssR0FBRzFDLEdBQUcsQ0FBQzBDLEtBQUssR0FBR0QsTUFBTSxDQUFDQyxLQUFLO1lBQ3BEO1FBQ0Y7UUFDQSxPQUFPMUM7SUFDVDtJQUVBLGdEQUFnRDtJQUNoRCx1REFBdUQ7SUFDdkR4QyxFQUFFb0MsSUFBSSxHQUFHLFNBQVVJLEdBQUc7UUFDcEIsSUFBSSxDQUFDeEMsRUFBRWdGLFFBQVEsQ0FBQ3hDLE1BQU0sT0FBTyxFQUFFO1FBQy9CLElBQUlMLFlBQVksT0FBT0EsV0FBV0s7UUFDbEMsSUFBSUosT0FBTyxFQUFFO1FBQ2IsSUFBSyxJQUFJK0MsT0FBTzNDLElBQUssSUFBSXhDLEVBQUVvRixHQUFHLENBQUM1QyxLQUFLMkMsTUFBTS9DLEtBQUsxQixJQUFJLENBQUN5RTtRQUNwRCxPQUFPL0M7SUFDVDtJQUVBLDRFQUE0RTtJQUM1RSxrREFBa0Q7SUFDbERwQyxFQUFFb0YsR0FBRyxHQUFHLFNBQVU1QyxHQUFHLEVBQUUyQyxHQUFHO1FBQ3hCLE9BQU9yRSxlQUFlK0IsSUFBSSxDQUFDTCxLQUFLMkM7SUFDbEM7SUFFQSxpQ0FBaUM7SUFDakNuRixFQUFFZ0YsUUFBUSxHQUFHLFNBQVV4QyxHQUFHO1FBQ3hCLE9BQU9BLFFBQVFqQyxPQUFPaUM7SUFDeEI7SUFFQSxvQkFBb0I7SUFDcEIsb0JBQW9CO0lBRXBCLHNFQUFzRTtJQUN0RXhDLEVBQUU2RSxHQUFHLEdBQ0hRLEtBQUtSLEdBQUcsSUFDUjtRQUNFLE9BQU8sSUFBSVEsT0FBT0MsT0FBTztJQUMzQjtJQUVGLHdFQUF3RTtJQUN4RSw2REFBNkQ7SUFDN0R0RixFQUFFdUYsZ0JBQWdCLEdBQUc7UUFDbkJDLFVBQVU7UUFDVkMsYUFBYTtRQUNiQyxRQUFRO0lBQ1Y7SUFFQSxzRUFBc0U7SUFDdEUsbUVBQW1FO0lBQ25FLDJCQUEyQjtJQUMzQixJQUFJQyxVQUFVO0lBRWQsdUVBQXVFO0lBQ3ZFLGtCQUFrQjtJQUNsQixJQUFJQyxVQUFVO1FBQ1osS0FBSztRQUNMLE1BQU07UUFDTixNQUFNO1FBQ04sTUFBTTtRQUNOLFVBQVU7UUFDVixVQUFVO0lBQ1o7SUFFQSxJQUFJQyxlQUFlO0lBRW5CLElBQUlDLGFBQWEsU0FBVUMsS0FBSztRQUM5QixPQUFPLE9BQU9ILE9BQU8sQ0FBQ0csTUFBTTtJQUM5QjtJQUVBLHlEQUF5RDtJQUN6RCwwRUFBMEU7SUFDMUUsOEVBQThFO0lBQzlFLHlFQUF5RTtJQUN6RSw0QkFBNEI7SUFDNUIsSUFBSUMsaUJBQWlCO0lBRXJCLHVFQUF1RTtJQUN2RSw0RUFBNEU7SUFDNUUseURBQXlEO0lBQ3pELDZEQUE2RDtJQUM3RGhHLEVBQUVpRyxRQUFRLEdBQUcsU0FBVUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLFdBQVc7UUFDaEQsSUFBSSxDQUFDRCxZQUFZQyxhQUFhRCxXQUFXQztRQUN6Q0QsV0FBV25HLEVBQUUrRSxRQUFRLENBQUMsQ0FBQyxHQUFHb0IsVUFBVW5HLEVBQUV1RixnQkFBZ0I7UUFFdEQsa0VBQWtFO1FBQ2xFLElBQUljLFVBQVVDLE9BQ1o7WUFDR0gsQ0FBQUEsU0FBU1QsTUFBTSxJQUFJQyxPQUFNLEVBQUdWLE1BQU07WUFDbENrQixDQUFBQSxTQUFTVixXQUFXLElBQUlFLE9BQU0sRUFBR1YsTUFBTTtZQUN2Q2tCLENBQUFBLFNBQVNYLFFBQVEsSUFBSUcsT0FBTSxFQUFHVixNQUFNO1NBQ3RDLENBQUNzQixJQUFJLENBQUMsT0FBTyxNQUNkO1FBR0YsdUVBQXVFO1FBQ3ZFLElBQUl0RCxRQUFRO1FBQ1osSUFBSWdDLFNBQVM7UUFDYmlCLEtBQUtNLE9BQU8sQ0FDVkgsU0FDQSxTQUFVTixLQUFLLEVBQUVMLE1BQU0sRUFBRUQsV0FBVyxFQUFFRCxRQUFRLEVBQUVpQixNQUFNO1lBQ3BEeEIsVUFBVWlCLEtBQUt2RixLQUFLLENBQUNzQyxPQUFPd0QsUUFBUUQsT0FBTyxDQUFDWCxjQUFjQztZQUMxRDdDLFFBQVF3RCxTQUFTVixNQUFNcEQsTUFBTTtZQUU3QixJQUFJK0MsUUFBUTtnQkFDVlQsVUFBVSxnQkFBZ0JTLFNBQVM7WUFDckMsT0FBTyxJQUFJRCxhQUFhO2dCQUN0QlIsVUFBVSxnQkFBZ0JRLGNBQWM7WUFDMUMsT0FBTyxJQUFJRCxVQUFVO2dCQUNuQlAsVUFBVSxTQUFTTyxXQUFXO1lBQ2hDO1lBRUEsbUVBQW1FO1lBQ25FLE9BQU9PO1FBQ1Q7UUFFRmQsVUFBVTtRQUVWLElBQUl5QixXQUFXUCxTQUFTUSxRQUFRO1FBQ2hDLElBQUlELFVBQVU7WUFDWiw4REFBOEQ7WUFDOUQsSUFBSSxDQUFDVixlQUFlWSxJQUFJLENBQUNGLFdBQ3ZCLE1BQU0sSUFBSUcsTUFBTSx3Q0FBd0NIO1FBQzVELE9BQU87WUFDTCxvRUFBb0U7WUFDcEV6QixTQUFTLHFCQUFxQkEsU0FBUztZQUN2Q3lCLFdBQVc7UUFDYjtRQUVBekIsU0FDRSw2Q0FDQSxzREFDQUEsU0FDQTtRQUVGLElBQUk2QjtRQUNKLElBQUk7WUFDRix1Q0FBdUM7WUFDdkNBLFNBQVMsSUFBSXJHLFNBQVMwRixTQUFTUSxRQUFRLElBQUksT0FBTyxLQUFLMUI7UUFDekQsRUFBRSxPQUFPOEIsR0FBRztZQUNWQSxFQUFFOUIsTUFBTSxHQUFHQTtZQUNYLE1BQU04QjtRQUNSO1FBRUEsSUFBSWQsV0FBVyxTQUFVZSxJQUFJO1lBQzNCLE9BQU9GLE9BQU9qRSxJQUFJLENBQUMsSUFBSSxFQUFFbUUsTUFBTWhIO1FBQ2pDO1FBRUEsbUVBQW1FO1FBQ25FaUcsU0FBU2hCLE1BQU0sR0FBRyxjQUFjeUIsV0FBVyxTQUFTekIsU0FBUztRQUU3RCxPQUFPZ0I7SUFDVDtJQUVBLG9CQUFvQjtJQUNwQixPQUFPakc7QUFDVCJ9
    
    }),
    9461: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals document, window, navigator */ /**
     * Webflow: Brand pages on the subdomain
     */ 
    var Webflow = __webpack_require__(43949);
    Webflow.define('brand', module.exports = function($) {
        var api = {};
        var doc = document;
        var $html = $('html');
        var $body = $('body');
        var namespace = '.w-webflow-badge';
        var location = window.location;
        var isPhantom = /PhantomJS/i.test(navigator.userAgent);
        var fullScreenEvents = 'fullscreenchange webkitfullscreenchange mozfullscreenchange msfullscreenchange';
        var brandElement;
        // -----------------------------------
        // Module methods
        api.ready = function() {
            var shouldBrand = $html.attr('data-wf-status');
            var publishedDomain = $html.attr('data-wf-domain') || '';
            if (/\.webflow\.io$/i.test(publishedDomain) && location.hostname !== publishedDomain) {
                shouldBrand = true;
            }
            if (shouldBrand && !isPhantom) {
                brandElement = brandElement || createBadge();
                ensureBrand();
                setTimeout(ensureBrand, 500);
                $(doc).off(fullScreenEvents, onFullScreenChange).on(fullScreenEvents, onFullScreenChange);
            }
        };
        function onFullScreenChange() {
            var fullScreen = doc.fullScreen || doc.mozFullScreen || doc.webkitIsFullScreen || doc.msFullscreenElement || Boolean(doc.webkitFullscreenElement);
            $(brandElement).attr('style', fullScreen ? 'display: none !important;' : '');
        }
        function createBadge() {
            var $brand = $('<a class="w-webflow-badge"></a>').attr('href', 'https://webflow.com?utm_campaign=brandjs');
            var $logoArt = $('<img>').attr('src', 'https://d3e54v103j8qbb.cloudfront.net/img/webflow-badge-icon-d2.89e12c322e.svg').attr('alt', '').css({
                marginRight: '4px',
                width: '26px'
            });
            var $logoText = $('<img>').attr('src', 'https://d3e54v103j8qbb.cloudfront.net/img/webflow-badge-text-d2.c82cec3b78.svg').attr('alt', 'Made in Webflow');
            $brand.append($logoArt, $logoText);
            return $brand[0];
        }
        function ensureBrand() {
            var found = $body.children(namespace);
            var match = found.length && found.get(0) === brandElement;
            var inEditor = Webflow.env('editor');
            if (match) {
                // Remove brand when Editor is active
                if (inEditor) {
                    found.remove();
                }
                // Exit early, brand is in place
                return;
            }
            // Remove any invalid brand elements
            if (found.length) {
                found.remove();
            }
            // Append the brand (unless Editor is active)
            if (!inEditor) {
                $body.append(brandElement);
            }
        }
        // Export module
        return api;
    });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctYnJhbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBkb2N1bWVudCwgd2luZG93LCBuYXZpZ2F0b3IgKi9cblxuLyoqXG4gKiBXZWJmbG93OiBCcmFuZCBwYWdlcyBvbiB0aGUgc3ViZG9tYWluXG4gKi9cblxudmFyIFdlYmZsb3cgPSByZXF1aXJlKCcuL3dlYmZsb3ctbGliJyk7XG5cbldlYmZsb3cuZGVmaW5lKFxuICAnYnJhbmQnLFxuICAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJCkge1xuICAgIHZhciBhcGkgPSB7fTtcbiAgICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gICAgdmFyICRodG1sID0gJCgnaHRtbCcpO1xuICAgIHZhciAkYm9keSA9ICQoJ2JvZHknKTtcbiAgICB2YXIgbmFtZXNwYWNlID0gJy53LXdlYmZsb3ctYmFkZ2UnO1xuICAgIHZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB2YXIgaXNQaGFudG9tID0gL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIGZ1bGxTY3JlZW5FdmVudHMgPVxuICAgICAgJ2Z1bGxzY3JlZW5jaGFuZ2Ugd2Via2l0ZnVsbHNjcmVlbmNoYW5nZSBtb3pmdWxsc2NyZWVuY2hhbmdlIG1zZnVsbHNjcmVlbmNoYW5nZSc7XG4gICAgdmFyIGJyYW5kRWxlbWVudDtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTW9kdWxlIG1ldGhvZHNcblxuICAgIGFwaS5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzaG91bGRCcmFuZCA9ICRodG1sLmF0dHIoJ2RhdGEtd2Ytc3RhdHVzJyk7XG4gICAgICB2YXIgcHVibGlzaGVkRG9tYWluID0gJGh0bWwuYXR0cignZGF0YS13Zi1kb21haW4nKSB8fCAnJztcbiAgICAgIGlmIChcbiAgICAgICAgL1xcLndlYmZsb3dcXC5pbyQvaS50ZXN0KHB1Ymxpc2hlZERvbWFpbikgJiZcbiAgICAgICAgbG9jYXRpb24uaG9zdG5hbWUgIT09IHB1Ymxpc2hlZERvbWFpblxuICAgICAgKSB7XG4gICAgICAgIHNob3VsZEJyYW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRCcmFuZCAmJiAhaXNQaGFudG9tKSB7XG4gICAgICAgIGJyYW5kRWxlbWVudCA9IGJyYW5kRWxlbWVudCB8fCBjcmVhdGVCYWRnZSgpO1xuICAgICAgICBlbnN1cmVCcmFuZCgpO1xuICAgICAgICBzZXRUaW1lb3V0KGVuc3VyZUJyYW5kLCA1MDApO1xuXG4gICAgICAgICQoZG9jKVxuICAgICAgICAgIC5vZmYoZnVsbFNjcmVlbkV2ZW50cywgb25GdWxsU2NyZWVuQ2hhbmdlKVxuICAgICAgICAgIC5vbihmdWxsU2NyZWVuRXZlbnRzLCBvbkZ1bGxTY3JlZW5DaGFuZ2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvbkZ1bGxTY3JlZW5DaGFuZ2UoKSB7XG4gICAgICB2YXIgZnVsbFNjcmVlbiA9XG4gICAgICAgIGRvYy5mdWxsU2NyZWVuIHx8XG4gICAgICAgIGRvYy5tb3pGdWxsU2NyZWVuIHx8XG4gICAgICAgIGRvYy53ZWJraXRJc0Z1bGxTY3JlZW4gfHxcbiAgICAgICAgZG9jLm1zRnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgQm9vbGVhbihkb2Mud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQpO1xuICAgICAgJChicmFuZEVsZW1lbnQpLmF0dHIoXG4gICAgICAgICdzdHlsZScsXG4gICAgICAgIGZ1bGxTY3JlZW4gPyAnZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OycgOiAnJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVCYWRnZSgpIHtcbiAgICAgIHZhciAkYnJhbmQgPSAkKCc8YSBjbGFzcz1cInctd2ViZmxvdy1iYWRnZVwiPjwvYT4nKS5hdHRyKFxuICAgICAgICAnaHJlZicsXG4gICAgICAgICdodHRwczovL3dlYmZsb3cuY29tP3V0bV9jYW1wYWlnbj1icmFuZGpzJ1xuICAgICAgKTtcblxuICAgICAgdmFyICRsb2dvQXJ0ID0gJCgnPGltZz4nKVxuICAgICAgICAuYXR0cihcbiAgICAgICAgICAnc3JjJyxcbiAgICAgICAgICAnaHR0cHM6Ly9kM2U1NHYxMDNqOHFiYi5jbG91ZGZyb250Lm5ldC9pbWcvd2ViZmxvdy1iYWRnZS1pY29uLWQyLjg5ZTEyYzMyMmUuc3ZnJ1xuICAgICAgICApXG4gICAgICAgIC5hdHRyKCdhbHQnLCAnJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgbWFyZ2luUmlnaHQ6ICc0cHgnLFxuICAgICAgICAgIHdpZHRoOiAnMjZweCcsXG4gICAgICAgIH0pO1xuXG4gICAgICB2YXIgJGxvZ29UZXh0ID0gJCgnPGltZz4nKVxuICAgICAgICAuYXR0cihcbiAgICAgICAgICAnc3JjJyxcbiAgICAgICAgICAnaHR0cHM6Ly9kM2U1NHYxMDNqOHFiYi5jbG91ZGZyb250Lm5ldC9pbWcvd2ViZmxvdy1iYWRnZS10ZXh0LWQyLmM4MmNlYzNiNzguc3ZnJ1xuICAgICAgICApXG4gICAgICAgIC5hdHRyKCdhbHQnLCAnTWFkZSBpbiBXZWJmbG93Jyk7XG5cbiAgICAgICRicmFuZC5hcHBlbmQoJGxvZ29BcnQsICRsb2dvVGV4dCk7XG4gICAgICByZXR1cm4gJGJyYW5kWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuc3VyZUJyYW5kKCkge1xuICAgICAgdmFyIGZvdW5kID0gJGJvZHkuY2hpbGRyZW4obmFtZXNwYWNlKTtcbiAgICAgIHZhciBtYXRjaCA9IGZvdW5kLmxlbmd0aCAmJiBmb3VuZC5nZXQoMCkgPT09IGJyYW5kRWxlbWVudDtcbiAgICAgIHZhciBpbkVkaXRvciA9IFdlYmZsb3cuZW52KCdlZGl0b3InKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAvLyBSZW1vdmUgYnJhbmQgd2hlbiBFZGl0b3IgaXMgYWN0aXZlXG4gICAgICAgIGlmIChpbkVkaXRvcikge1xuICAgICAgICAgIGZvdW5kLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4aXQgZWFybHksIGJyYW5kIGlzIGluIHBsYWNlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBhbnkgaW52YWxpZCBicmFuZCBlbGVtZW50c1xuICAgICAgaWYgKGZvdW5kLmxlbmd0aCkge1xuICAgICAgICBmb3VuZC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIC8vIEFwcGVuZCB0aGUgYnJhbmQgKHVubGVzcyBFZGl0b3IgaXMgYWN0aXZlKVxuICAgICAgaWYgKCFpbkVkaXRvcikge1xuICAgICAgICAkYm9keS5hcHBlbmQoYnJhbmRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeHBvcnQgbW9kdWxlXG4gICAgcmV0dXJuIGFwaTtcbiAgfSlcbik7XG4iXSwibmFtZXMiOlsiV2ViZmxvdyIsInJlcXVpcmUiLCJkZWZpbmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiJCIsImFwaSIsImRvYyIsImRvY3VtZW50IiwiJGh0bWwiLCIkYm9keSIsIm5hbWVzcGFjZSIsImxvY2F0aW9uIiwid2luZG93IiwiaXNQaGFudG9tIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImZ1bGxTY3JlZW5FdmVudHMiLCJicmFuZEVsZW1lbnQiLCJyZWFkeSIsInNob3VsZEJyYW5kIiwiYXR0ciIsInB1Ymxpc2hlZERvbWFpbiIsImhvc3RuYW1lIiwiY3JlYXRlQmFkZ2UiLCJlbnN1cmVCcmFuZCIsInNldFRpbWVvdXQiLCJvZmYiLCJvbkZ1bGxTY3JlZW5DaGFuZ2UiLCJvbiIsImZ1bGxTY3JlZW4iLCJtb3pGdWxsU2NyZWVuIiwid2Via2l0SXNGdWxsU2NyZWVuIiwibXNGdWxsc2NyZWVuRWxlbWVudCIsIkJvb2xlYW4iLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIiRicmFuZCIsIiRsb2dvQXJ0IiwiY3NzIiwibWFyZ2luUmlnaHQiLCJ3aWR0aCIsIiRsb2dvVGV4dCIsImFwcGVuZCIsImZvdW5kIiwiY2hpbGRyZW4iLCJtYXRjaCIsImxlbmd0aCIsImdldCIsImluRWRpdG9yIiwiZW52IiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUMsR0FFdkM7O0NBRUM7QUFFRCxJQUFJQSxVQUFVQyxRQUFRO0FBRXRCRCxRQUFRRSxNQUFNLENBQ1osU0FDQ0MsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLENBQUM7SUFDM0IsSUFBSUMsTUFBTSxDQUFDO0lBQ1gsSUFBSUMsTUFBTUM7SUFDVixJQUFJQyxRQUFRSixFQUFFO0lBQ2QsSUFBSUssUUFBUUwsRUFBRTtJQUNkLElBQUlNLFlBQVk7SUFDaEIsSUFBSUMsV0FBV0MsT0FBT0QsUUFBUTtJQUM5QixJQUFJRSxZQUFZLGFBQWFDLElBQUksQ0FBQ0MsVUFBVUMsU0FBUztJQUNyRCxJQUFJQyxtQkFDRjtJQUNGLElBQUlDO0lBRUosc0NBQXNDO0lBQ3RDLGlCQUFpQjtJQUVqQmIsSUFBSWMsS0FBSyxHQUFHO1FBQ1YsSUFBSUMsY0FBY1osTUFBTWEsSUFBSSxDQUFDO1FBQzdCLElBQUlDLGtCQUFrQmQsTUFBTWEsSUFBSSxDQUFDLHFCQUFxQjtRQUN0RCxJQUNFLGtCQUFrQlAsSUFBSSxDQUFDUSxvQkFDdkJYLFNBQVNZLFFBQVEsS0FBS0QsaUJBQ3RCO1lBQ0FGLGNBQWM7UUFDaEI7UUFDQSxJQUFJQSxlQUFlLENBQUNQLFdBQVc7WUFDN0JLLGVBQWVBLGdCQUFnQk07WUFDL0JDO1lBQ0FDLFdBQVdELGFBQWE7WUFFeEJyQixFQUFFRSxLQUNDcUIsR0FBRyxDQUFDVixrQkFBa0JXLG9CQUN0QkMsRUFBRSxDQUFDWixrQkFBa0JXO1FBQzFCO0lBQ0Y7SUFFQSxTQUFTQTtRQUNQLElBQUlFLGFBQ0Z4QixJQUFJd0IsVUFBVSxJQUNkeEIsSUFBSXlCLGFBQWEsSUFDakJ6QixJQUFJMEIsa0JBQWtCLElBQ3RCMUIsSUFBSTJCLG1CQUFtQixJQUN2QkMsUUFBUTVCLElBQUk2Qix1QkFBdUI7UUFDckMvQixFQUFFYyxjQUFjRyxJQUFJLENBQ2xCLFNBQ0FTLGFBQWEsOEJBQThCO0lBRS9DO0lBRUEsU0FBU047UUFDUCxJQUFJWSxTQUFTaEMsRUFBRSxtQ0FBbUNpQixJQUFJLENBQ3BELFFBQ0E7UUFHRixJQUFJZ0IsV0FBV2pDLEVBQUUsU0FDZGlCLElBQUksQ0FDSCxPQUNBLGtGQUVEQSxJQUFJLENBQUMsT0FBTyxJQUNaaUIsR0FBRyxDQUFDO1lBQ0hDLGFBQWE7WUFDYkMsT0FBTztRQUNUO1FBRUYsSUFBSUMsWUFBWXJDLEVBQUUsU0FDZmlCLElBQUksQ0FDSCxPQUNBLGtGQUVEQSxJQUFJLENBQUMsT0FBTztRQUVmZSxPQUFPTSxNQUFNLENBQUNMLFVBQVVJO1FBQ3hCLE9BQU9MLE1BQU0sQ0FBQyxFQUFFO0lBQ2xCO0lBRUEsU0FBU1g7UUFDUCxJQUFJa0IsUUFBUWxDLE1BQU1tQyxRQUFRLENBQUNsQztRQUMzQixJQUFJbUMsUUFBUUYsTUFBTUcsTUFBTSxJQUFJSCxNQUFNSSxHQUFHLENBQUMsT0FBTzdCO1FBQzdDLElBQUk4QixXQUFXakQsUUFBUWtELEdBQUcsQ0FBQztRQUMzQixJQUFJSixPQUFPO1lBQ1QscUNBQXFDO1lBQ3JDLElBQUlHLFVBQVU7Z0JBQ1pMLE1BQU1PLE1BQU07WUFDZDtZQUNBLGdDQUFnQztZQUNoQztRQUNGO1FBQ0Esb0NBQW9DO1FBQ3BDLElBQUlQLE1BQU1HLE1BQU0sRUFBRTtZQUNoQkgsTUFBTU8sTUFBTTtRQUNkO1FBQ0EsNkNBQTZDO1FBQzdDLElBQUksQ0FBQ0YsVUFBVTtZQUNidkMsTUFBTWlDLE1BQU0sQ0FBQ3hCO1FBQ2Y7SUFDRjtJQUVBLGdCQUFnQjtJQUNoQixPQUFPYjtBQUNUIn0=
    
    }),
    60322: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals document, window, localStorage, WEBFLOW_API_HOST, WEBFLOW_DEFAULT_HOST */ /**
     * Webflow: Editor loader
     */ 
    var Webflow = __webpack_require__(43949);
    Webflow.define('edit', module.exports = function($, _, options) {
        options = options || {};
        // Exit early in test env or when inside an iframe
        if (Webflow.env('test') || Webflow.env('frame')) {
            // Allow test fixtures to continue
            if (!options.fixture && !inTestRunner()) {
                return {
                    exit: 1
                };
            }
        }
        var api = {};
        var $win = $(window);
        var $html = $(document.documentElement);
        var location = document.location;
        var hashchange = 'hashchange';
        var loaded;
        var loadEditor = options.load || load;
        var hasLocalStorage = false;
        try {
            // Check localStorage for editor data
            hasLocalStorage = localStorage && localStorage.getItem && localStorage.getItem('WebflowEditor');
        } catch (e) {
        // SecurityError: browser storage has been disabled
        }
        if (hasLocalStorage) {
            loadEditor();
        } else if (location.search) {
            // Check url query for `edit` parameter or any url ending in `?edit`
            if (/[?&](edit)(?:[=&?]|$)/.test(location.search) || /\?edit$/.test(location.href)) {
                loadEditor();
            }
        } else {
            // Check hash fragment to support `#hash?edit`
            $win.on(hashchange, checkHash).triggerHandler(hashchange);
        }
        function checkHash() {
            if (loaded) {
                return;
            }
            // Load editor when hash contains `?edit`
            if (/\?edit/.test(location.hash)) {
                loadEditor();
            }
        }
        function load() {
            loaded = true;
            // Predefine global immediately to benefit Webflow.env
            window.WebflowEditor = true;
            $win.off(hashchange, checkHash);
            checkThirdPartyCookieSupport(function(thirdPartyCookiesSupported) {
                $.ajax({
                    url: cleanSlashes("https://editor-api.webflow.com" + '/api/editor/view'),
                    data: {
                        siteId: $html.attr('data-wf-site')
                    },
                    xhrFields: {
                        withCredentials: true
                    },
                    dataType: 'json',
                    crossDomain: true,
                    success: success(thirdPartyCookiesSupported)
                });
            });
        }
        function success(thirdPartyCookiesSupported) {
            return function(data) {
                if (!data) {
                    console.error('Could not load editor data');
                    return;
                }
                data.thirdPartyCookiesSupported = thirdPartyCookiesSupported;
                getScript(prefix(data.scriptPath), function() {
                    window.WebflowEditor(data);
                });
            };
        }
        function getScript(url, done) {
            $.ajax({
                type: 'GET',
                url,
                dataType: 'script',
                cache: true
            }).then(done, error);
        }
        function error(jqXHR, textStatus, errorThrown) {
            console.error('Could not load editor script: ' + textStatus);
            throw errorThrown;
        }
        function prefix(url) {
            return url.indexOf('//') >= 0 ? url : cleanSlashes("https://editor-api.webflow.com" + url);
        }
        function cleanSlashes(url) {
            return url.replace(/([^:])\/\//g, '$1/');
        }
        function checkThirdPartyCookieSupport(callback) {
            var iframe = window.document.createElement('iframe');
            iframe.src = "https://webflow.com" + '/site/third-party-cookie-check.html';
            iframe.style.display = 'none';
            iframe.sandbox = 'allow-scripts allow-same-origin';
            var handleMessage = function(event) {
                if (event.data === 'WF_third_party_cookies_unsupported') {
                    cleanUpCookieCheckerIframe(iframe, handleMessage);
                    callback(false);
                } else if (event.data === 'WF_third_party_cookies_supported') {
                    cleanUpCookieCheckerIframe(iframe, handleMessage);
                    callback(true);
                }
            };
            iframe.onerror = function() {
                cleanUpCookieCheckerIframe(iframe, handleMessage);
                callback(false);
            };
            window.addEventListener('message', handleMessage, false);
            window.document.body.appendChild(iframe);
        }
        function cleanUpCookieCheckerIframe(iframe, listener) {
            window.removeEventListener('message', listener, false);
            iframe.remove();
        }
        // Export module
        return api;
    });
    function inTestRunner() {
        try {
            return Boolean(window.top.__Cypress__ || window.PLAYWRIGHT_TEST);
        } catch (e) {
            return false;
        }
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    12338: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals window, document */ /**
     * Webflow: focus-visible
     */ 
    var Webflow = __webpack_require__(43949);
    /*
     * This polyfill comes from https://github.com/WICG/focus-visible
     */ Webflow.define('focus-visible', module.exports = function() {
        /**
         * Applies the :focus-visible polyfill at the given scope.
         * A scope in this case is either the top-level Document or a Shadow Root.
         *
         * @param {(Document|ShadowRoot)} scope
         * @see https://github.com/WICG/focus-visible
         */ function applyFocusVisiblePolyfill(scope) {
            var hadKeyboardEvent = true;
            var hadFocusVisibleRecently = false;
            var hadFocusVisibleRecentlyTimeout = null;
            var inputTypesAllowlist = {
                text: true,
                search: true,
                url: true,
                tel: true,
                email: true,
                password: true,
                number: true,
                date: true,
                month: true,
                week: true,
                time: true,
                datetime: true,
                'datetime-local': true
            };
            /**
           * Helper function for legacy browsers and iframes which sometimes focus
           * elements like document, body, and non-interactive SVG.
           * @param {Element} el
           */ function isValidFocusTarget(el) {
                if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {
                    return true;
                }
                return false;
            }
            /**
           * Computes whether the given element should automatically trigger the
           * `focus-visible` class being added, i.e. whether it should always match
           * `:focus-visible` when focused.
           * @param {Element} el
           * @return {boolean}
           */ function focusTriggersKeyboardModality(el) {
                var type = el.type;
                var tagName = el.tagName;
                if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {
                    return true;
                }
                if (tagName === 'TEXTAREA' && !el.readOnly) {
                    return true;
                }
                if (el.isContentEditable) {
                    return true;
                }
                return false;
            }
            function addFocusVisibleAttribute(el) {
                if (el.getAttribute('data-wf-focus-visible')) {
                    return;
                }
                el.setAttribute('data-wf-focus-visible', 'true');
            }
            function removeFocusVisibleAttribute(el) {
                if (!el.getAttribute('data-wf-focus-visible')) {
                    return;
                }
                el.removeAttribute('data-wf-focus-visible');
            }
            /**
           * If the most recent user interaction was via the keyboard;
           * and the key press did not include a meta, alt/option, or control key;
           * then the modality is keyboard. Otherwise, the modality is not keyboard.
           * Apply `focus-visible` to any current active element and keep track
           * of our keyboard modality state with `hadKeyboardEvent`.
           * @param {KeyboardEvent} e
           */ function onKeyDown(e) {
                if (e.metaKey || e.altKey || e.ctrlKey) {
                    return;
                }
                if (isValidFocusTarget(scope.activeElement)) {
                    addFocusVisibleAttribute(scope.activeElement);
                }
                hadKeyboardEvent = true;
            }
            /**
           * If at any point a user clicks with a pointing device, ensure that we change
           * the modality away from keyboard.
           * This avoids the situation where a user presses a key on an already focused
           * element, and then clicks on a different element, focusing it with a
           * pointing device, while we still think we're in keyboard modality.
           * @param {Event} e
           */ function onPointerDown() {
                hadKeyboardEvent = false;
            }
            /**
           * On `focus`, add the `focus-visible` class to the target if:
           * - the target received focus as a result of keyboard navigation, or
           * - the event target is an element that will likely require interaction
           *   via the keyboard (e.g. a text box)
           * @param {Event} e
           */ function onFocus(e) {
                // Prevent IE from focusing the document or HTML element.
                if (!isValidFocusTarget(e.target)) {
                    return;
                }
                if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
                    addFocusVisibleAttribute(e.target);
                }
            }
            /**
           * On `blur`, remove the `focus-visible` class from the target.
           * @param {Event} e
           */ function onBlur(e) {
                if (!isValidFocusTarget(e.target)) {
                    return;
                }
                if (e.target.hasAttribute('data-wf-focus-visible')) {
                    // To detect a tab/window switch, we look for a blur event followed
                    // rapidly by a visibility change.
                    // If we don't see a visibility change within 100ms, it's probably a
                    // regular focus change.
                    hadFocusVisibleRecently = true;
                    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
                    hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
                        hadFocusVisibleRecently = false;
                    }, 100);
                    removeFocusVisibleAttribute(e.target);
                }
            }
            /**
           * If the user changes tabs, keep track of whether or not the previously
           * focused element had .focus-visible.
           * @param {Event} e
           */ function onVisibilityChange() {
                if (document.visibilityState === 'hidden') {
                    // If the tab becomes active again, the browser will handle calling focus
                    // on the element (Safari actually calls it twice).
                    // If this tab change caused a blur on an element with focus-visible,
                    // re-apply the class when the user switches back to the tab.
                    if (hadFocusVisibleRecently) {
                        hadKeyboardEvent = true;
                    }
                    addInitialPointerMoveListeners();
                }
            }
            /**
           * Add a group of listeners to detect usage of any pointing devices.
           * These listeners will be added when the polyfill first loads, and anytime
           * the window is blurred, so that they are active when the window regains
           * focus.
           */ function addInitialPointerMoveListeners() {
                document.addEventListener('mousemove', onInitialPointerMove);
                document.addEventListener('mousedown', onInitialPointerMove);
                document.addEventListener('mouseup', onInitialPointerMove);
                document.addEventListener('pointermove', onInitialPointerMove);
                document.addEventListener('pointerdown', onInitialPointerMove);
                document.addEventListener('pointerup', onInitialPointerMove);
                document.addEventListener('touchmove', onInitialPointerMove);
                document.addEventListener('touchstart', onInitialPointerMove);
                document.addEventListener('touchend', onInitialPointerMove);
            }
            function removeInitialPointerMoveListeners() {
                document.removeEventListener('mousemove', onInitialPointerMove);
                document.removeEventListener('mousedown', onInitialPointerMove);
                document.removeEventListener('mouseup', onInitialPointerMove);
                document.removeEventListener('pointermove', onInitialPointerMove);
                document.removeEventListener('pointerdown', onInitialPointerMove);
                document.removeEventListener('pointerup', onInitialPointerMove);
                document.removeEventListener('touchmove', onInitialPointerMove);
                document.removeEventListener('touchstart', onInitialPointerMove);
                document.removeEventListener('touchend', onInitialPointerMove);
            }
            /**
           * When the polfyill first loads, assume the user is in keyboard modality.
           * If any event is received from a pointing device (e.g. mouse, pointer,
           * touch), turn off keyboard modality.
           * This accounts for situations where focus enters the page from the URL bar.
           * @param {Event} e
           */ function onInitialPointerMove(e) {
                // Work around a Safari quirk that fires a mousemove on <html> whenever the
                // window blurs, even if you're tabbing out of the page. Â¯\_(ãƒ„)_/Â¯
                if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {
                    return;
                }
                hadKeyboardEvent = false;
                removeInitialPointerMoveListeners();
            }
            // For some kinds of state, we are interested in changes at the global scope
            // only. For example, global pointer input, global key presses and global
            // visibility change should affect the state at every scope:
            document.addEventListener('keydown', onKeyDown, true);
            document.addEventListener('mousedown', onPointerDown, true);
            document.addEventListener('pointerdown', onPointerDown, true);
            document.addEventListener('touchstart', onPointerDown, true);
            document.addEventListener('visibilitychange', onVisibilityChange, true);
            addInitialPointerMoveListeners();
            // For focus and blur, we specifically care about state changes in the local
            // scope. This is because focus / blur events that originate from within a
            // shadow root are not re-dispatched from the host element if it was already
            // the active element in its own scope:
            scope.addEventListener('focus', onFocus, true);
            scope.addEventListener('blur', onBlur, true);
        }
        function ready() {
            if (typeof document !== 'undefined') {
                try {
                    // check for native support; this will throw if the selector is not considered valid
                    document.querySelector(':focus-visible');
                } catch (e) {
                    // :focus-visible pseudo-selector is not supported natively
                    applyFocusVisiblePolyfill(document);
                }
            }
        }
        // Export module
        return {
            ready
        };
    });
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    8334: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals document, MouseEvent */ /**
     * Webflow: focus
     */ 
    var Webflow = __webpack_require__(43949);
    /*
     * Safari has a weird bug where it doesn't support :focus for links with hrefs,
     * buttons, and input[type=button|submit], so we listen for mousedown events
     * instead and force the element to emit a focus event in those cases.
    
     * See these webkit bugs for reference:
     * https://bugs.webkit.org/show_bug.cgi?id=22261
     * https://bugs.webkit.org/show_bug.cgi?id=229895
     */ Webflow.define('focus', module.exports = function() {
        var capturedEvents = [];
        var capturing = false;
        function captureEvent(e) {
            if (capturing) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                capturedEvents.unshift(e);
            }
        }
        /*
         * The only mousedown events we care about here are ones emanating from
         * (A) anchor links with href attribute,
         * (B) non-disabled buttons,
         * (C) non-disabled textarea,
         * (D) non-disabled inputs of type "button", "reset", "checkbox", "radio", "submit"
         * (E) non-interactive elements (button, a, input, textarea, select) that have a tabindex with a numeric value
         * (F) audio elements
         * (G) video elements with controls attribute
         */ function isPolyfilledFocusEvent(e) {
            var el = e.target;
            var tag = el.tagName;
            return /^a$/i.test(tag) && el.href != null || // (A)
            /^(button|textarea)$/i.test(tag) && el.disabled !== true || // (B) (C)
            /^input$/i.test(tag) && /^(button|reset|submit|radio|checkbox)$/i.test(el.type) && !el.disabled || // (D)
            !/^(button|input|textarea|select|a)$/i.test(tag) && !Number.isNaN(Number.parseFloat(el.tabIndex)) || // (E)
            /^audio$/i.test(tag) || // (F)
            /^video$/i.test(tag) && el.controls === true // (G)
            ;
        }
        function handler(e) {
            if (isPolyfilledFocusEvent(e)) {
                // start capturing possible out-of-order mouse events
                capturing = true;
                /*
             * enqueue the focus event _after_ the current batch of events, which
             * includes any blur events. The correct order of events is:
             *
             * [this element] MOUSEDOWN               <-- this event
             * [previously active element] BLUR
             * [previously active element] FOCUSOUT
             * [this element] FOCUS                   <-- forced event
             * [this element] FOCUSIN                 <-- forced event
             * [this element] MOUSEUP                 <-- possibly captured event (it may have fired _before_ the FOCUS event)
             * [this element] CLICK                   <-- possibly captured event (it may have fired _before_ the FOCUS event)
             */ setTimeout(()=>{
                    // stop capturing possible out-of-order mouse events
                    capturing = false;
                    // trigger focus event
                    e.target.focus();
                    // re-dispatch captured mouse events in order
                    while(capturedEvents.length > 0){
                        var event = capturedEvents.pop();
                        event.target.dispatchEvent(new MouseEvent(event.type, event));
                    }
                }, 0);
            }
        }
        function ready() {
            if (typeof document !== 'undefined' && document.body.hasAttribute('data-wf-focus-within') && Webflow.env.safari) {
                document.addEventListener('mousedown', handler, true);
                document.addEventListener('mouseup', captureEvent, true);
                document.addEventListener('click', captureEvent, true);
            }
        }
        // Export module
        return {
            ready
        };
    });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctZm9jdXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBkb2N1bWVudCwgTW91c2VFdmVudCAqL1xuXG4vKipcbiAqIFdlYmZsb3c6IGZvY3VzXG4gKi9cblxudmFyIFdlYmZsb3cgPSByZXF1aXJlKCcuL3dlYmZsb3ctbGliJyk7XG5cbi8qXG4gKiBTYWZhcmkgaGFzIGEgd2VpcmQgYnVnIHdoZXJlIGl0IGRvZXNuJ3Qgc3VwcG9ydCA6Zm9jdXMgZm9yIGxpbmtzIHdpdGggaHJlZnMsXG4gKiBidXR0b25zLCBhbmQgaW5wdXRbdHlwZT1idXR0b258c3VibWl0XSwgc28gd2UgbGlzdGVuIGZvciBtb3VzZWRvd24gZXZlbnRzXG4gKiBpbnN0ZWFkIGFuZCBmb3JjZSB0aGUgZWxlbWVudCB0byBlbWl0IGEgZm9jdXMgZXZlbnQgaW4gdGhvc2UgY2FzZXMuXG5cbiAqIFNlZSB0aGVzZSB3ZWJraXQgYnVncyBmb3IgcmVmZXJlbmNlOlxuICogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIyMjYxXG4gKiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjI5ODk1XG4gKi9cbldlYmZsb3cuZGVmaW5lKFxuICAnZm9jdXMnLFxuICAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhcHR1cmVkRXZlbnRzID0gW107XG4gICAgdmFyIGNhcHR1cmluZyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gY2FwdHVyZUV2ZW50KGUpIHtcbiAgICAgIGlmIChjYXB0dXJpbmcpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBjYXB0dXJlZEV2ZW50cy51bnNoaWZ0KGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogVGhlIG9ubHkgbW91c2Vkb3duIGV2ZW50cyB3ZSBjYXJlIGFib3V0IGhlcmUgYXJlIG9uZXMgZW1hbmF0aW5nIGZyb21cbiAgICAgKiAoQSkgYW5jaG9yIGxpbmtzIHdpdGggaHJlZiBhdHRyaWJ1dGUsXG4gICAgICogKEIpIG5vbi1kaXNhYmxlZCBidXR0b25zLFxuICAgICAqIChDKSBub24tZGlzYWJsZWQgdGV4dGFyZWEsXG4gICAgICogKEQpIG5vbi1kaXNhYmxlZCBpbnB1dHMgb2YgdHlwZSBcImJ1dHRvblwiLCBcInJlc2V0XCIsIFwiY2hlY2tib3hcIiwgXCJyYWRpb1wiLCBcInN1Ym1pdFwiXG4gICAgICogKEUpIG5vbi1pbnRlcmFjdGl2ZSBlbGVtZW50cyAoYnV0dG9uLCBhLCBpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCkgdGhhdCBoYXZlIGEgdGFiaW5kZXggd2l0aCBhIG51bWVyaWMgdmFsdWVcbiAgICAgKiAoRikgYXVkaW8gZWxlbWVudHNcbiAgICAgKiAoRykgdmlkZW8gZWxlbWVudHMgd2l0aCBjb250cm9scyBhdHRyaWJ1dGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BvbHlmaWxsZWRGb2N1c0V2ZW50KGUpIHtcbiAgICAgIHZhciBlbCA9IGUudGFyZ2V0O1xuICAgICAgdmFyIHRhZyA9IGVsLnRhZ05hbWU7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoL15hJC9pLnRlc3QodGFnKSAmJiBlbC5ocmVmICE9IG51bGwpIHx8IC8vIChBKVxuICAgICAgICAoL14oYnV0dG9ufHRleHRhcmVhKSQvaS50ZXN0KHRhZykgJiYgZWwuZGlzYWJsZWQgIT09IHRydWUpIHx8IC8vIChCKSAoQylcbiAgICAgICAgKC9eaW5wdXQkL2kudGVzdCh0YWcpICYmXG4gICAgICAgICAgL14oYnV0dG9ufHJlc2V0fHN1Ym1pdHxyYWRpb3xjaGVja2JveCkkL2kudGVzdChlbC50eXBlKSAmJlxuICAgICAgICAgICFlbC5kaXNhYmxlZCkgfHwgLy8gKEQpXG4gICAgICAgICghL14oYnV0dG9ufGlucHV0fHRleHRhcmVhfHNlbGVjdHxhKSQvaS50ZXN0KHRhZykgJiZcbiAgICAgICAgICAhTnVtYmVyLmlzTmFOKE51bWJlci5wYXJzZUZsb2F0KGVsLnRhYkluZGV4KSkpIHx8IC8vIChFKVxuICAgICAgICAvXmF1ZGlvJC9pLnRlc3QodGFnKSB8fCAvLyAoRilcbiAgICAgICAgKC9edmlkZW8kL2kudGVzdCh0YWcpICYmIGVsLmNvbnRyb2xzID09PSB0cnVlKSAvLyAoRylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlcihlKSB7XG4gICAgICBpZiAoaXNQb2x5ZmlsbGVkRm9jdXNFdmVudChlKSkge1xuICAgICAgICAvLyBzdGFydCBjYXB0dXJpbmcgcG9zc2libGUgb3V0LW9mLW9yZGVyIG1vdXNlIGV2ZW50c1xuICAgICAgICBjYXB0dXJpbmcgPSB0cnVlO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAqIGVucXVldWUgdGhlIGZvY3VzIGV2ZW50IF9hZnRlcl8gdGhlIGN1cnJlbnQgYmF0Y2ggb2YgZXZlbnRzLCB3aGljaFxuICAgICAgICAgKiBpbmNsdWRlcyBhbnkgYmx1ciBldmVudHMuIFRoZSBjb3JyZWN0IG9yZGVyIG9mIGV2ZW50cyBpczpcbiAgICAgICAgICpcbiAgICAgICAgICogW3RoaXMgZWxlbWVudF0gTU9VU0VET1dOICAgICAgICAgICAgICAgPC0tIHRoaXMgZXZlbnRcbiAgICAgICAgICogW3ByZXZpb3VzbHkgYWN0aXZlIGVsZW1lbnRdIEJMVVJcbiAgICAgICAgICogW3ByZXZpb3VzbHkgYWN0aXZlIGVsZW1lbnRdIEZPQ1VTT1VUXG4gICAgICAgICAqIFt0aGlzIGVsZW1lbnRdIEZPQ1VTICAgICAgICAgICAgICAgICAgIDwtLSBmb3JjZWQgZXZlbnRcbiAgICAgICAgICogW3RoaXMgZWxlbWVudF0gRk9DVVNJTiAgICAgICAgICAgICAgICAgPC0tIGZvcmNlZCBldmVudFxuICAgICAgICAgKiBbdGhpcyBlbGVtZW50XSBNT1VTRVVQICAgICAgICAgICAgICAgICA8LS0gcG9zc2libHkgY2FwdHVyZWQgZXZlbnQgKGl0IG1heSBoYXZlIGZpcmVkIF9iZWZvcmVfIHRoZSBGT0NVUyBldmVudClcbiAgICAgICAgICogW3RoaXMgZWxlbWVudF0gQ0xJQ0sgICAgICAgICAgICAgICAgICAgPC0tIHBvc3NpYmx5IGNhcHR1cmVkIGV2ZW50IChpdCBtYXkgaGF2ZSBmaXJlZCBfYmVmb3JlXyB0aGUgRk9DVVMgZXZlbnQpXG4gICAgICAgICAqL1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAvLyBzdG9wIGNhcHR1cmluZyBwb3NzaWJsZSBvdXQtb2Ytb3JkZXIgbW91c2UgZXZlbnRzXG4gICAgICAgICAgY2FwdHVyaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyB0cmlnZ2VyIGZvY3VzIGV2ZW50XG4gICAgICAgICAgZS50YXJnZXQuZm9jdXMoKTtcblxuICAgICAgICAgIC8vIHJlLWRpc3BhdGNoIGNhcHR1cmVkIG1vdXNlIGV2ZW50cyBpbiBvcmRlclxuICAgICAgICAgIHdoaWxlIChjYXB0dXJlZEV2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBjYXB0dXJlZEV2ZW50cy5wb3AoKTtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KGV2ZW50LnR5cGUsIGV2ZW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkeSgpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBkb2N1bWVudC5ib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS13Zi1mb2N1cy13aXRoaW4nKSAmJlxuICAgICAgICBXZWJmbG93LmVudi5zYWZhcmlcbiAgICAgICkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGNhcHR1cmVFdmVudCwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUV2ZW50LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeHBvcnQgbW9kdWxlXG4gICAgcmV0dXJuIHtyZWFkeX07XG4gIH0pXG4pO1xuIl0sIm5hbWVzIjpbIldlYmZsb3ciLCJyZXF1aXJlIiwiZGVmaW5lIiwibW9kdWxlIiwiZXhwb3J0cyIsImNhcHR1cmVkRXZlbnRzIiwiY2FwdHVyaW5nIiwiY2FwdHVyZUV2ZW50IiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidW5zaGlmdCIsImlzUG9seWZpbGxlZEZvY3VzRXZlbnQiLCJlbCIsInRhcmdldCIsInRhZyIsInRhZ05hbWUiLCJ0ZXN0IiwiaHJlZiIsImRpc2FibGVkIiwidHlwZSIsIk51bWJlciIsImlzTmFOIiwicGFyc2VGbG9hdCIsInRhYkluZGV4IiwiY29udHJvbHMiLCJoYW5kbGVyIiwic2V0VGltZW91dCIsImZvY3VzIiwibGVuZ3RoIiwiZXZlbnQiLCJwb3AiLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsInJlYWR5IiwiZG9jdW1lbnQiLCJib2R5IiwiaGFzQXR0cmlidXRlIiwiZW52Iiwic2FmYXJpIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUEsZ0NBQWdDLEdBRWhDOztDQUVDO0FBRUQsSUFBSUEsVUFBVUMsUUFBUTtBQUV0Qjs7Ozs7Ozs7Q0FRQyxHQUNERCxRQUFRRSxNQUFNLENBQ1osU0FDQ0MsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLElBQUlDLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUlDLFlBQVk7SUFFaEIsU0FBU0MsYUFBYUMsQ0FBQztRQUNyQixJQUFJRixXQUFXO1lBQ2JFLEVBQUVDLGNBQWM7WUFDaEJELEVBQUVFLGVBQWU7WUFDakJGLEVBQUVHLHdCQUF3QjtZQUMxQk4sZUFBZU8sT0FBTyxDQUFDSjtRQUN6QjtJQUNGO0lBRUE7Ozs7Ozs7OztLQVNDLEdBQ0QsU0FBU0ssdUJBQXVCTCxDQUFDO1FBQy9CLElBQUlNLEtBQUtOLEVBQUVPLE1BQU07UUFDakIsSUFBSUMsTUFBTUYsR0FBR0csT0FBTztRQUNwQixPQUNFLEFBQUMsT0FBT0MsSUFBSSxDQUFDRixRQUFRRixHQUFHSyxJQUFJLElBQUksUUFBUyxNQUFNO1FBQzlDLHVCQUF1QkQsSUFBSSxDQUFDRixRQUFRRixHQUFHTSxRQUFRLEtBQUssUUFBUyxVQUFVO1FBQ3ZFLFdBQVdGLElBQUksQ0FBQ0YsUUFDZiwwQ0FBMENFLElBQUksQ0FBQ0osR0FBR08sSUFBSSxLQUN0RCxDQUFDUCxHQUFHTSxRQUFRLElBQUssTUFBTTtRQUN4QixDQUFDLHNDQUFzQ0YsSUFBSSxDQUFDRixRQUMzQyxDQUFDTSxPQUFPQyxLQUFLLENBQUNELE9BQU9FLFVBQVUsQ0FBQ1YsR0FBR1csUUFBUSxNQUFPLE1BQU07UUFDMUQsV0FBV1AsSUFBSSxDQUFDRixRQUFRLE1BQU07UUFDN0IsV0FBV0UsSUFBSSxDQUFDRixRQUFRRixHQUFHWSxRQUFRLEtBQUssS0FBTSxNQUFNOztJQUV6RDtJQUVBLFNBQVNDLFFBQVFuQixDQUFDO1FBQ2hCLElBQUlLLHVCQUF1QkwsSUFBSTtZQUM3QixxREFBcUQ7WUFDckRGLFlBQVk7WUFFWjs7Ozs7Ozs7Ozs7U0FXQyxHQUNEc0IsV0FBVztnQkFDVCxvREFBb0Q7Z0JBQ3BEdEIsWUFBWTtnQkFFWixzQkFBc0I7Z0JBQ3RCRSxFQUFFTyxNQUFNLENBQUNjLEtBQUs7Z0JBRWQsNkNBQTZDO2dCQUM3QyxNQUFPeEIsZUFBZXlCLE1BQU0sR0FBRyxFQUFHO29CQUNoQyxJQUFJQyxRQUFRMUIsZUFBZTJCLEdBQUc7b0JBQzlCRCxNQUFNaEIsTUFBTSxDQUFDa0IsYUFBYSxDQUFDLElBQUlDLFdBQVdILE1BQU1WLElBQUksRUFBRVU7Z0JBQ3hEO1lBQ0YsR0FBRztRQUNMO0lBQ0Y7SUFFQSxTQUFTSTtRQUNQLElBQ0UsT0FBT0MsYUFBYSxlQUNwQkEsU0FBU0MsSUFBSSxDQUFDQyxZQUFZLENBQUMsMkJBQzNCdEMsUUFBUXVDLEdBQUcsQ0FBQ0MsTUFBTSxFQUNsQjtZQUNBSixTQUFTSyxnQkFBZ0IsQ0FBQyxhQUFhZCxTQUFTO1lBQ2hEUyxTQUFTSyxnQkFBZ0IsQ0FBQyxXQUFXbEMsY0FBYztZQUNuRDZCLFNBQVNLLGdCQUFnQixDQUFDLFNBQVNsQyxjQUFjO1FBQ25EO0lBQ0Y7SUFFQSxnQkFBZ0I7SUFDaEIsT0FBTztRQUFDNEI7SUFBSztBQUNmIn0=
    
    }),
    7199: (function (module) {
    "use strict";
    /* globals window */ /**
     * Webflow: IX Event triggers for other modules
     */ 
    var $ = window.jQuery;
    var api = {};
    var eventQueue = [];
    var namespace = '.w-ix';
    var eventTriggers = {
        reset: function(i, el) {
            el.__wf_intro = null;
        },
        intro: function(i, el) {
            if (el.__wf_intro) {
                return;
            }
            el.__wf_intro = true;
            $(el).triggerHandler(api.types.INTRO);
        },
        outro: function(i, el) {
            if (!el.__wf_intro) {
                return;
            }
            el.__wf_intro = null;
            $(el).triggerHandler(api.types.OUTRO);
        }
    };
    api.triggers = {};
    api.types = {
        INTRO: 'w-ix-intro' + namespace,
        OUTRO: 'w-ix-outro' + namespace
    };
    // Trigger any events in queue + restore trigger methods
    api.init = function() {
        var count = eventQueue.length;
        for(var i = 0; i < count; i++){
            var memo = eventQueue[i];
            memo[0](0, memo[1]);
        }
        eventQueue = [];
        $.extend(api.triggers, eventTriggers);
    };
    // Replace all triggers with async wrapper to queue events until init
    api.async = function() {
        for(var key in eventTriggers){
            var func = eventTriggers[key];
            if (!eventTriggers.hasOwnProperty(key)) {
                continue;
            }
            // Replace trigger method with async wrapper
            api.triggers[key] = function(i, el) {
                eventQueue.push([
                    func,
                    el
                ]);
            };
        }
    };
    // Default triggers to async queue
    api.async();
    module.exports = api;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctaXgtZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgd2luZG93ICovXG5cbi8qKlxuICogV2ViZmxvdzogSVggRXZlbnQgdHJpZ2dlcnMgZm9yIG90aGVyIG1vZHVsZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciAkID0gd2luZG93LmpRdWVyeTtcbnZhciBhcGkgPSB7fTtcbnZhciBldmVudFF1ZXVlID0gW107XG52YXIgbmFtZXNwYWNlID0gJy53LWl4JztcblxudmFyIGV2ZW50VHJpZ2dlcnMgPSB7XG4gIHJlc2V0OiBmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICBlbC5fX3dmX2ludHJvID0gbnVsbDtcbiAgfSxcbiAgaW50cm86IGZ1bmN0aW9uIChpLCBlbCkge1xuICAgIGlmIChlbC5fX3dmX2ludHJvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsLl9fd2ZfaW50cm8gPSB0cnVlO1xuICAgICQoZWwpLnRyaWdnZXJIYW5kbGVyKGFwaS50eXBlcy5JTlRSTyk7XG4gIH0sXG4gIG91dHJvOiBmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICBpZiAoIWVsLl9fd2ZfaW50cm8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWwuX193Zl9pbnRybyA9IG51bGw7XG4gICAgJChlbCkudHJpZ2dlckhhbmRsZXIoYXBpLnR5cGVzLk9VVFJPKTtcbiAgfSxcbn07XG5cbmFwaS50cmlnZ2VycyA9IHt9O1xuXG5hcGkudHlwZXMgPSB7XG4gIElOVFJPOiAndy1peC1pbnRybycgKyBuYW1lc3BhY2UsXG4gIE9VVFJPOiAndy1peC1vdXRybycgKyBuYW1lc3BhY2UsXG59O1xuXG4vLyBUcmlnZ2VyIGFueSBldmVudHMgaW4gcXVldWUgKyByZXN0b3JlIHRyaWdnZXIgbWV0aG9kc1xuYXBpLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb3VudCA9IGV2ZW50UXVldWUubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICB2YXIgbWVtbyA9IGV2ZW50UXVldWVbaV07XG4gICAgbWVtb1swXSgwLCBtZW1vWzFdKTtcbiAgfVxuICBldmVudFF1ZXVlID0gW107XG4gICQuZXh0ZW5kKGFwaS50cmlnZ2VycywgZXZlbnRUcmlnZ2Vycyk7XG59O1xuXG4vLyBSZXBsYWNlIGFsbCB0cmlnZ2VycyB3aXRoIGFzeW5jIHdyYXBwZXIgdG8gcXVldWUgZXZlbnRzIHVudGlsIGluaXRcbmFwaS5hc3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIga2V5IGluIGV2ZW50VHJpZ2dlcnMpIHtcbiAgICB2YXIgZnVuYyA9IGV2ZW50VHJpZ2dlcnNba2V5XTtcbiAgICBpZiAoIWV2ZW50VHJpZ2dlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZSB0cmlnZ2VyIG1ldGhvZCB3aXRoIGFzeW5jIHdyYXBwZXJcbiAgICBhcGkudHJpZ2dlcnNba2V5XSA9IGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgZXZlbnRRdWV1ZS5wdXNoKFtmdW5jLCBlbF0pO1xuICAgIH07XG4gIH1cbn07XG5cbi8vIERlZmF1bHQgdHJpZ2dlcnMgdG8gYXN5bmMgcXVldWVcbmFwaS5hc3luYygpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwaTtcbiJdLCJuYW1lcyI6WyIkIiwid2luZG93IiwialF1ZXJ5IiwiYXBpIiwiZXZlbnRRdWV1ZSIsIm5hbWVzcGFjZSIsImV2ZW50VHJpZ2dlcnMiLCJyZXNldCIsImkiLCJlbCIsIl9fd2ZfaW50cm8iLCJpbnRybyIsInRyaWdnZXJIYW5kbGVyIiwidHlwZXMiLCJJTlRSTyIsIm91dHJvIiwiT1VUUk8iLCJ0cmlnZ2VycyIsImluaXQiLCJjb3VudCIsImxlbmd0aCIsIm1lbW8iLCJleHRlbmQiLCJhc3luYyIsImtleSIsImZ1bmMiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsR0FFbEI7O0NBRUMsR0FFRDtBQUVBLElBQUlBLElBQUlDLE9BQU9DLE1BQU07QUFDckIsSUFBSUMsTUFBTSxDQUFDO0FBQ1gsSUFBSUMsYUFBYSxFQUFFO0FBQ25CLElBQUlDLFlBQVk7QUFFaEIsSUFBSUMsZ0JBQWdCO0lBQ2xCQyxPQUFPLFNBQVVDLENBQUMsRUFBRUMsRUFBRTtRQUNwQkEsR0FBR0MsVUFBVSxHQUFHO0lBQ2xCO0lBQ0FDLE9BQU8sU0FBVUgsQ0FBQyxFQUFFQyxFQUFFO1FBQ3BCLElBQUlBLEdBQUdDLFVBQVUsRUFBRTtZQUNqQjtRQUNGO1FBQ0FELEdBQUdDLFVBQVUsR0FBRztRQUNoQlYsRUFBRVMsSUFBSUcsY0FBYyxDQUFDVCxJQUFJVSxLQUFLLENBQUNDLEtBQUs7SUFDdEM7SUFDQUMsT0FBTyxTQUFVUCxDQUFDLEVBQUVDLEVBQUU7UUFDcEIsSUFBSSxDQUFDQSxHQUFHQyxVQUFVLEVBQUU7WUFDbEI7UUFDRjtRQUNBRCxHQUFHQyxVQUFVLEdBQUc7UUFDaEJWLEVBQUVTLElBQUlHLGNBQWMsQ0FBQ1QsSUFBSVUsS0FBSyxDQUFDRyxLQUFLO0lBQ3RDO0FBQ0Y7QUFFQWIsSUFBSWMsUUFBUSxHQUFHLENBQUM7QUFFaEJkLElBQUlVLEtBQUssR0FBRztJQUNWQyxPQUFPLGVBQWVUO0lBQ3RCVyxPQUFPLGVBQWVYO0FBQ3hCO0FBRUEsd0RBQXdEO0FBQ3hERixJQUFJZSxJQUFJLEdBQUc7SUFDVCxJQUFJQyxRQUFRZixXQUFXZ0IsTUFBTTtJQUM3QixJQUFLLElBQUlaLElBQUksR0FBR0EsSUFBSVcsT0FBT1gsSUFBSztRQUM5QixJQUFJYSxPQUFPakIsVUFBVSxDQUFDSSxFQUFFO1FBQ3hCYSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUdBLElBQUksQ0FBQyxFQUFFO0lBQ3BCO0lBQ0FqQixhQUFhLEVBQUU7SUFDZkosRUFBRXNCLE1BQU0sQ0FBQ25CLElBQUljLFFBQVEsRUFBRVg7QUFDekI7QUFFQSxxRUFBcUU7QUFDckVILElBQUlvQixLQUFLLEdBQUc7SUFDVixJQUFLLElBQUlDLE9BQU9sQixjQUFlO1FBQzdCLElBQUltQixPQUFPbkIsYUFBYSxDQUFDa0IsSUFBSTtRQUM3QixJQUFJLENBQUNsQixjQUFjb0IsY0FBYyxDQUFDRixNQUFNO1lBQ3RDO1FBQ0Y7UUFFQSw0Q0FBNEM7UUFDNUNyQixJQUFJYyxRQUFRLENBQUNPLElBQUksR0FBRyxTQUFVaEIsQ0FBQyxFQUFFQyxFQUFFO1lBQ2pDTCxXQUFXdUIsSUFBSSxDQUFDO2dCQUFDRjtnQkFBTWhCO2FBQUc7UUFDNUI7SUFDRjtBQUNGO0FBRUEsa0NBQWtDO0FBQ2xDTixJQUFJb0IsS0FBSztBQUVUSyxPQUFPQyxPQUFPLEdBQUcxQiJ9
    
    }),
    65134: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals window, document */ 
    var IXEvents = __webpack_require__(7199);
    function dispatchCustomEvent(element, eventName) {
        var event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, true, true, null);
        element.dispatchEvent(event);
    }
    /**
     * Webflow: IX Event triggers for other modules
     */ var $ = window.jQuery;
    var api = {};
    var namespace = '.w-ix';
    var eventTriggers = {
        reset: function(i, el) {
            IXEvents.triggers.reset(i, el);
        },
        intro: function(i, el) {
            IXEvents.triggers.intro(i, el);
            dispatchCustomEvent(el, 'COMPONENT_ACTIVE');
        },
        outro: function(i, el) {
            IXEvents.triggers.outro(i, el);
            dispatchCustomEvent(el, 'COMPONENT_INACTIVE');
        }
    };
    api.triggers = {};
    api.types = {
        INTRO: 'w-ix-intro' + namespace,
        OUTRO: 'w-ix-outro' + namespace
    };
    $.extend(api.triggers, eventTriggers);
    module.exports = api;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctaXgyLWV2ZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIHdpbmRvdywgZG9jdW1lbnQgKi9cblxuJ3VzZSBzdHJpY3QnO1xudmFyIElYRXZlbnRzID0gcmVxdWlyZSgnLi93ZWJmbG93LWl4LWV2ZW50cycpO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEN1c3RvbUV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSkge1xuICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgdHJ1ZSwgbnVsbCk7XG4gIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbi8qKlxuICogV2ViZmxvdzogSVggRXZlbnQgdHJpZ2dlcnMgZm9yIG90aGVyIG1vZHVsZXNcbiAqL1xuXG52YXIgJCA9IHdpbmRvdy5qUXVlcnk7XG52YXIgYXBpID0ge307XG52YXIgbmFtZXNwYWNlID0gJy53LWl4JztcblxudmFyIGV2ZW50VHJpZ2dlcnMgPSB7XG4gIHJlc2V0OiBmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICBJWEV2ZW50cy50cmlnZ2Vycy5yZXNldChpLCBlbCk7XG4gIH0sXG4gIGludHJvOiBmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICBJWEV2ZW50cy50cmlnZ2Vycy5pbnRybyhpLCBlbCk7XG4gICAgZGlzcGF0Y2hDdXN0b21FdmVudChlbCwgJ0NPTVBPTkVOVF9BQ1RJVkUnKTtcbiAgfSxcbiAgb3V0cm86IGZ1bmN0aW9uIChpLCBlbCkge1xuICAgIElYRXZlbnRzLnRyaWdnZXJzLm91dHJvKGksIGVsKTtcbiAgICBkaXNwYXRjaEN1c3RvbUV2ZW50KGVsLCAnQ09NUE9ORU5UX0lOQUNUSVZFJyk7XG4gIH0sXG59O1xuXG5hcGkudHJpZ2dlcnMgPSB7fTtcblxuYXBpLnR5cGVzID0ge1xuICBJTlRSTzogJ3ctaXgtaW50cm8nICsgbmFtZXNwYWNlLFxuICBPVVRSTzogJ3ctaXgtb3V0cm8nICsgbmFtZXNwYWNlLFxufTtcblxuJC5leHRlbmQoYXBpLnRyaWdnZXJzLCBldmVudFRyaWdnZXJzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhcGk7XG4iXSwibmFtZXMiOlsiSVhFdmVudHMiLCJyZXF1aXJlIiwiZGlzcGF0Y2hDdXN0b21FdmVudCIsImVsZW1lbnQiLCJldmVudE5hbWUiLCJldmVudCIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiJCIsIndpbmRvdyIsImpRdWVyeSIsImFwaSIsIm5hbWVzcGFjZSIsImV2ZW50VHJpZ2dlcnMiLCJyZXNldCIsImkiLCJlbCIsInRyaWdnZXJzIiwiaW50cm8iLCJvdXRybyIsInR5cGVzIiwiSU5UUk8iLCJPVVRSTyIsImV4dGVuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QixHQUU1QjtBQUNBLElBQUlBLFdBQVdDLFFBQVE7QUFFdkIsU0FBU0Msb0JBQW9CQyxPQUFPLEVBQUVDLFNBQVM7SUFDN0MsSUFBSUMsUUFBUUMsU0FBU0MsV0FBVyxDQUFDO0lBQ2pDRixNQUFNRyxlQUFlLENBQUNKLFdBQVcsTUFBTSxNQUFNO0lBQzdDRCxRQUFRTSxhQUFhLENBQUNKO0FBQ3hCO0FBRUE7O0NBRUMsR0FFRCxJQUFJSyxJQUFJQyxPQUFPQyxNQUFNO0FBQ3JCLElBQUlDLE1BQU0sQ0FBQztBQUNYLElBQUlDLFlBQVk7QUFFaEIsSUFBSUMsZ0JBQWdCO0lBQ2xCQyxPQUFPLFNBQVVDLENBQUMsRUFBRUMsRUFBRTtRQUNwQmxCLFNBQVNtQixRQUFRLENBQUNILEtBQUssQ0FBQ0MsR0FBR0M7SUFDN0I7SUFDQUUsT0FBTyxTQUFVSCxDQUFDLEVBQUVDLEVBQUU7UUFDcEJsQixTQUFTbUIsUUFBUSxDQUFDQyxLQUFLLENBQUNILEdBQUdDO1FBQzNCaEIsb0JBQW9CZ0IsSUFBSTtJQUMxQjtJQUNBRyxPQUFPLFNBQVVKLENBQUMsRUFBRUMsRUFBRTtRQUNwQmxCLFNBQVNtQixRQUFRLENBQUNFLEtBQUssQ0FBQ0osR0FBR0M7UUFDM0JoQixvQkFBb0JnQixJQUFJO0lBQzFCO0FBQ0Y7QUFFQUwsSUFBSU0sUUFBUSxHQUFHLENBQUM7QUFFaEJOLElBQUlTLEtBQUssR0FBRztJQUNWQyxPQUFPLGVBQWVUO0lBQ3RCVSxPQUFPLGVBQWVWO0FBQ3hCO0FBRUFKLEVBQUVlLE1BQU0sQ0FBQ1osSUFBSU0sUUFBUSxFQUFFSjtBQUV2QlcsT0FBT0MsT0FBTyxHQUFHZCJ9
    
    }),
    40941: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /**
     * Webflow: Interactions 2
     */ 
    var Webflow = __webpack_require__(43949);
    var ix2 = __webpack_require__(46011);
    ix2.setEnv(Webflow.env);
    Webflow.define('ix2', module.exports = function() {
        return ix2;
    });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctaXgyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2ViZmxvdzogSW50ZXJhY3Rpb25zIDJcbiAqL1xudmFyIFdlYmZsb3cgPSByZXF1aXJlKCcuL3dlYmZsb3ctbGliJyk7XG52YXIgaXgyID0gcmVxdWlyZSgnQHBhY2thZ2VzL3N5c3RlbXMvaXgyL2VuZ2luZScpO1xuXG5peDIuc2V0RW52KFdlYmZsb3cuZW52KTtcblxuV2ViZmxvdy5kZWZpbmUoXG4gICdpeDInLFxuICAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGl4MjtcbiAgfSlcbik7XG4iXSwibmFtZXMiOlsiV2ViZmxvdyIsInJlcXVpcmUiLCJpeDIiLCJzZXRFbnYiLCJlbnYiLCJkZWZpbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQztBQUNELElBQUlBLFVBQVVDLFFBQVE7QUFDdEIsSUFBSUMsTUFBTUQsUUFBUTtBQUVsQkMsSUFBSUMsTUFBTSxDQUFDSCxRQUFRSSxHQUFHO0FBRXRCSixRQUFRSyxNQUFNLENBQ1osT0FDQ0MsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLE9BQU9MO0FBQ1QifQ==
    
    }),
    43949: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals window, document, navigator, WEBFLOW_ENV_TEST */ /**
     * Webflow: Core site library
     */ 
    var Webflow = {};
    var modules = {};
    var primary = [];
    var secondary = window.Webflow || [];
    var $ = window.jQuery;
    var $win = $(window);
    var $doc = $(document);
    var isFunction = $.isFunction;
    var _ = Webflow._ = __webpack_require__(35756);
    var tram = Webflow.tram = __webpack_require__(95487) && $.tram;
    var domready = false;
    var destroyed = false;
    tram.config.hideBackface = false;
    tram.config.keepInherited = true;
    /**
     * Webflow.define - Define a named module
     * @param  {string} name
     * @param  {function} factory
     * @param  {object} [options]
     * @return {object}
     */ Webflow.define = function(name, factory, options) {
        if (modules[name]) {
            unbindModule(modules[name]);
        }
        var instance = modules[name] = factory($, _, options) || {};
        bindModule(instance);
        return instance;
    };
    /**
     * Webflow.require - Require a named module
     * @param  {string} name
     * @return {object}
     */ Webflow.require = function(name) {
        return modules[name];
    };
    function bindModule(module1) {
        // If running in Webflow app, subscribe to design/preview events
        if (Webflow.env()) {
            isFunction(module1.design) && $win.on('__wf_design', module1.design);
            isFunction(module1.preview) && $win.on('__wf_preview', module1.preview);
        }
        // Subscribe to front-end destroy event
        isFunction(module1.destroy) && $win.on('__wf_destroy', module1.destroy);
        // Look for ready method on module
        if (module1.ready && isFunction(module1.ready)) {
            addReady(module1);
        }
    }
    function addReady(module1) {
        // If domready has already happened, run ready method
        if (domready) {
            module1.ready();
            return;
        }
        // Otherwise add ready method to the primary queue (only once)
        if (_.contains(primary, module1.ready)) {
            return;
        }
        primary.push(module1.ready);
    }
    function unbindModule(module1) {
        // Unsubscribe module from window events
        isFunction(module1.design) && $win.off('__wf_design', module1.design);
        isFunction(module1.preview) && $win.off('__wf_preview', module1.preview);
        isFunction(module1.destroy) && $win.off('__wf_destroy', module1.destroy);
        // Remove ready method from primary queue
        if (module1.ready && isFunction(module1.ready)) {
            removeReady(module1);
        }
    }
    function removeReady(module1) {
        primary = _.filter(primary, function(readyFn) {
            return readyFn !== module1.ready;
        });
    }
    /**
     * Webflow.push - Add a ready handler into secondary queue
     * @param {function} ready  Callback to invoke on domready
     */ Webflow.push = function(ready) {
        // If domready has already happened, invoke handler
        if (domready) {
            isFunction(ready) && ready();
            return;
        }
        // Otherwise push into secondary queue
        secondary.push(ready);
    };
    /**
     * Webflow.env - Get the state of the Webflow app
     * @param {string} mode [optional]
     * @return {boolean}
     */ Webflow.env = function(mode) {
        var designFlag = window.__wf_design;
        var inApp = typeof designFlag !== 'undefined';
        if (!mode) {
            return inApp;
        }
        if (mode === 'design') {
            return inApp && designFlag;
        }
        if (mode === 'preview') {
            return inApp && !designFlag;
        }
        if (mode === 'slug') {
            return inApp && window.__wf_slug;
        }
        if (mode === 'editor') {
            return window.WebflowEditor;
        }
        if (mode === 'test') {
            return  false || window.__wf_test;
        }
        if (mode === 'frame') {
            return window !== window.top;
        }
    };
    // Feature detects + browser sniffs  à² _à² 
    var userAgent = navigator.userAgent.toLowerCase();
    var touch = Webflow.env.touch = 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch;
    var chrome = Webflow.env.chrome = /chrome/.test(userAgent) && /Google/.test(navigator.vendor) && parseInt(userAgent.match(/chrome\/(\d+)\./)[1], 10);
    var ios = Webflow.env.ios = /(ipod|iphone|ipad)/.test(userAgent);
    Webflow.env.safari = /safari/.test(userAgent) && !chrome && !ios;
    // Maintain current touch target to prevent late clicks on touch devices
    var touchTarget;
    // Listen for both events to support touch/mouse hybrid devices
    touch && $doc.on('touchstart mousedown', function(evt) {
        touchTarget = evt.target;
    });
    /**
     * Webflow.validClick - validate click target against current touch target
     * @param  {HTMLElement} clickTarget  Element being clicked
     * @return {Boolean}  True if click target is valid (always true on non-touch)
     */ Webflow.validClick = touch ? function(clickTarget) {
        return clickTarget === touchTarget || $.contains(clickTarget, touchTarget);
    } : function() {
        return true;
    };
    /**
     * Webflow.resize, Webflow.scroll - throttled event proxies
     */ var resizeEvents = 'resize.webflow orientationchange.webflow load.webflow';
    var scrollEvents = 'scroll.webflow ' + resizeEvents;
    Webflow.resize = eventProxy($win, resizeEvents);
    Webflow.scroll = eventProxy($win, scrollEvents);
    Webflow.redraw = eventProxy();
    // Create a proxy instance for throttled events
    function eventProxy(target, types) {
        // Set up throttled method (using custom frame-based _.throttle)
        var handlers = [];
        var proxy = {};
        proxy.up = _.throttle(function(evt) {
            _.each(handlers, function(h) {
                h(evt);
            });
        });
        // Bind events to target
        if (target && types) {
            target.on(types, proxy.up);
        }
        /**
       * Add an event handler
       * @param  {function} handler
       */ proxy.on = function(handler) {
            if (typeof handler !== 'function') {
                return;
            }
            if (_.contains(handlers, handler)) {
                return;
            }
            handlers.push(handler);
        };
        /**
       * Remove an event handler
       * @param  {function} handler
       */ proxy.off = function(handler) {
            // If no arguments supplied, clear all handlers
            if (!arguments.length) {
                handlers = [];
                return;
            }
            // Otherwise, remove handler from the list
            handlers = _.filter(handlers, function(h) {
                return h !== handler;
            });
        };
        return proxy;
    }
    // Webflow.location - Wrap window.location in api
    Webflow.location = function(url) {
        window.location = url;
    };
    if (Webflow.env()) {
        // Ignore redirects inside a Webflow design/edit environment
        Webflow.location = function() {};
    }
    // Webflow.ready - Call primary and secondary handlers
    Webflow.ready = function() {
        domready = true;
        // Restore modules after destroy
        if (destroyed) {
            restoreModules();
        // Otherwise run primary ready methods
        } else {
            _.each(primary, callReady);
        }
        // Run secondary ready methods
        _.each(secondary, callReady);
        // Trigger resize
        Webflow.resize.up();
    };
    function callReady(readyFn) {
        isFunction(readyFn) && readyFn();
    }
    function restoreModules() {
        destroyed = false;
        _.each(modules, bindModule);
    }
    /**
     * Webflow.load - Add a window load handler that will run even if load event has already happened
     * @param  {function} handler
     */ var deferLoad;
    Webflow.load = function(handler) {
        deferLoad.then(handler);
    };
    function bindLoad() {
        // Reject any previous deferred (to support destroy)
        if (deferLoad) {
            deferLoad.reject();
            $win.off('load', deferLoad.resolve);
        }
        // Create deferred and bind window load event
        deferLoad = new $.Deferred();
        $win.on('load', deferLoad.resolve);
    }
    // Webflow.destroy - Trigger a destroy event for all modules
    Webflow.destroy = function(options) {
        options = options || {};
        destroyed = true;
        $win.triggerHandler('__wf_destroy');
        // Allow domready reset for tests
        if (options.domready != null) {
            domready = options.domready;
        }
        // Unbind modules
        _.each(modules, unbindModule);
        // Clear any proxy event handlers
        Webflow.resize.off();
        Webflow.scroll.off();
        Webflow.redraw.off();
        // Clear any queued ready methods
        primary = [];
        secondary = [];
        // If load event has not yet fired, replace the deferred
        if (deferLoad.state() === 'pending') {
            bindLoad();
        }
    };
    // Listen for domready
    $(Webflow.ready);
    // Listen for window.onload and resolve deferred
    bindLoad();
    // Export commonjs module
    module.exports = window.Webflow = Webflow;
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    27624: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals window, document */ /**
     * Webflow: Auto-select links to current page or section
     */ 
    var Webflow = __webpack_require__(43949);
    Webflow.define('links', module.exports = function($, _) {
        var api = {};
        var $win = $(window);
        var designer;
        var inApp = Webflow.env();
        var location = window.location;
        var tempLink = document.createElement('a');
        var linkCurrent = 'w--current';
        var indexPage = /index\.(html|php)$/;
        var dirList = /\/$/;
        var anchors;
        var slug;
        // -----------------------------------
        // Module methods
        api.ready = api.design = api.preview = init;
        // -----------------------------------
        // Private methods
        function init() {
            designer = inApp && Webflow.env('design');
            slug = Webflow.env('slug') || location.pathname || '';
            // Reset scroll listener, init anchors
            Webflow.scroll.off(scroll);
            anchors = [];
            // Test all links for a selectable href
            var links = document.links;
            for(var i = 0; i < links.length; ++i){
                select(links[i]);
            }
            // Listen for scroll if any anchors exist
            if (anchors.length) {
                Webflow.scroll.on(scroll);
                scroll();
            }
        }
        function select(link) {
            // Ignore localized links
            if (link.getAttribute('hreflang')) {
                return;
            }
            var href = designer && link.getAttribute('href-disabled') || link.getAttribute('href');
            tempLink.href = href;
            // Ignore any hrefs with a colon to safely avoid all uri schemes
            if (href.indexOf(':') >= 0) {
                return;
            }
            var $link = $(link);
            // Check for all links with hash (eg (this-host)(/this-path)#section) to this page
            if (tempLink.hash.length > 1 && tempLink.host + tempLink.pathname === location.host + location.pathname) {
                // Ignore any hrefs with Google Translate type hash
                // Example: jQuery can't parse $('#googtrans(en|es)')
                // https://forum.webflow.com/t/dropdown-menus-not-working-on-site/87140
                if (!/^#[a-zA-Z0-9\-\_]+$/.test(tempLink.hash)) {
                    return;
                }
                var $section = $(tempLink.hash);
                $section.length && anchors.push({
                    link: $link,
                    sec: $section,
                    active: false
                });
                return;
            }
            // Ignore empty # links
            if (href === '#' || href === '') {
                return;
            }
            // Determine whether the link should be selected
            var match = tempLink.href === location.href || href === slug || indexPage.test(href) && dirList.test(slug);
            setClass($link, linkCurrent, match);
        }
        function scroll() {
            var viewTop = $win.scrollTop();
            var viewHeight = $win.height();
            // Check each anchor for a section in view
            _.each(anchors, function(anchor) {
                // Ignore localized links
                if (anchor.link.attr('hreflang')) {
                    return;
                }
                var $link = anchor.link;
                var $section = anchor.sec;
                var top = $section.offset().top;
                var height = $section.outerHeight();
                var offset = viewHeight * 0.5;
                var active = $section.is(':visible') && top + height - offset >= viewTop && top + offset <= viewTop + viewHeight;
                if (anchor.active === active) {
                    return;
                }
                anchor.active = active;
                setClass($link, linkCurrent, active);
            });
        }
        function setClass($elem, className, add) {
            var exists = $elem.hasClass(className);
            if (add && exists) {
                return;
            }
            if (!add && !exists) {
                return;
            }
            add ? $elem.addClass(className) : $elem.removeClass(className);
        }
        // Export module
        return api;
    });
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    30286: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals window, document */ /**
     * Webflow: Smooth scroll
     */ 
    var Webflow = __webpack_require__(43949);
    Webflow.define('scroll', module.exports = function($) {
        /**
         * A collection of namespaced events found in this module.
         * Namespaced events encapsulate our code, and make it safer and easier
         * for designers to apply custom code overrides.
         * @see https://api.jquery.com/on/#event-names
         * @typedef {Object.<string>} NamespacedEventsCollection
         */ var NS_EVENTS = {
            WF_CLICK_EMPTY: 'click.wf-empty-link',
            WF_CLICK_SCROLL: 'click.wf-scroll'
        };
        var loc = window.location;
        var history = inIframe() ? null : window.history;
        var $win = $(window);
        var $doc = $(document);
        var $body = $(document.body);
        var animate = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) {
            window.setTimeout(fn, 15);
        };
        var rootTag = Webflow.env('editor') ? '.w-editor-body' : 'body';
        var headerSelector = 'header, ' + rootTag + ' > .header, ' + rootTag + ' > .w-nav:not([data-no-scroll])';
        var emptyHrefSelector = 'a[href="#"]';
        /**
         * Select only links whose href:
         * - contains a #
         * - is not one of our namespaced TabLink elements
         * - is not _only_ a #
         */ var localHrefSelector = 'a[href*="#"]:not(.w-tab-link):not(' + emptyHrefSelector + ')';
        var scrollTargetOutlineCSS = '.wf-force-outline-none[tabindex="-1"]:focus{outline:none;}';
        var focusStylesEl = document.createElement('style');
        focusStylesEl.appendChild(document.createTextNode(scrollTargetOutlineCSS));
        function inIframe() {
            try {
                return Boolean(window.frameElement);
            } catch (e) {
                return true;
            }
        }
        var validHash = /^#[a-zA-Z0-9][\w:.-]*$/;
        /**
         * Determine if link navigates to current page
         * @param {HTMLAnchorElement} link
         */ function linksToCurrentPage(link) {
            return validHash.test(link.hash) && link.host + link.pathname === loc.host + loc.pathname;
        }
        /**
         * Check if the designer has indicated that this page should
         * have no scroll animation, or if the end user has set
         * prefers-reduced-motion in their OS
         */ const reducedMotionMediaQuery = typeof window.matchMedia === 'function' && window.matchMedia('(prefers-reduced-motion: reduce)');
        function reducedMotionEnabled() {
            return document.body.getAttribute('data-wf-scroll-motion') === 'none' || reducedMotionMediaQuery.matches;
        }
        function setFocusable($el, action) {
            var initialTabindex;
            switch(action){
                case 'add':
                    initialTabindex = $el.attr('tabindex');
                    if (initialTabindex) {
                        $el.attr('data-wf-tabindex-swap', initialTabindex);
                    } else {
                        $el.attr('tabindex', '-1');
                    }
                    break;
                case 'remove':
                    initialTabindex = $el.attr('data-wf-tabindex-swap');
                    if (initialTabindex) {
                        $el.attr('tabindex', initialTabindex);
                        $el.removeAttr('data-wf-tabindex-swap');
                    } else {
                        $el.removeAttr('tabindex');
                    }
                    break;
            }
            $el.toggleClass('wf-force-outline-none', action === 'add');
        }
        /**
         * Determine if we should execute custom scroll
         */ function validateScroll(evt) {
            var target = evt.currentTarget;
            if (// Bail if in Designer
            Webflow.env('design') || // Ignore links being used by jQuery mobile
            window.$.mobile && /(?:^|\s)ui-link(?:$|\s)/.test(target.className)) {
                return;
            }
            var hash = linksToCurrentPage(target) ? target.hash : '';
            if (hash === '') return;
            var $el = $(hash);
            if (!$el.length) {
                return;
            }
            if (evt) {
                evt.preventDefault();
                evt.stopPropagation();
            }
            updateHistory(hash, evt);
            window.setTimeout(function() {
                scroll($el, function setFocus() {
                    setFocusable($el, 'add');
                    $el.get(0).focus({
                        preventScroll: true
                    });
                    setFocusable($el, 'remove');
                });
            }, evt ? 0 : 300);
        }
        function updateHistory(hash) {
            // Push new history state
            if (loc.hash !== hash && history && history.pushState && // Navigation breaks Chrome when the protocol is `file:`.
            !(Webflow.env.chrome && loc.protocol === 'file:')) {
                var oldHash = history.state && history.state.hash;
                if (oldHash !== hash) {
                    history.pushState({
                        hash
                    }, '', hash);
                }
            }
        }
        function scroll($targetEl, cb) {
            var start = $win.scrollTop();
            var end = calculateScrollEndPosition($targetEl);
            if (start === end) return;
            var duration = calculateScrollDuration($targetEl, start, end);
            var clock = Date.now();
            var step = function() {
                var elapsed = Date.now() - clock;
                window.scroll(0, getY(start, end, elapsed, duration));
                if (elapsed <= duration) {
                    animate(step);
                } else if (typeof cb === 'function') {
                    cb();
                }
            };
            animate(step);
        }
        function calculateScrollEndPosition($targetEl) {
            // If a fixed header exists, offset for the height
            var $header = $(headerSelector);
            var offsetY = $header.css('position') === 'fixed' ? $header.outerHeight() : 0;
            var end = $targetEl.offset().top - offsetY;
            // If specified, scroll so that the element ends up in the middle of the viewport
            if ($targetEl.data('scroll') === 'mid') {
                var available = $win.height() - offsetY;
                var elHeight = $targetEl.outerHeight();
                if (elHeight < available) {
                    end -= Math.round((available - elHeight) / 2);
                }
            }
            return end;
        }
        function calculateScrollDuration($targetEl, start, end) {
            if (reducedMotionEnabled()) return 0;
            var mult = 1;
            // Check for custom time multiplier on the body and the scroll target
            $body.add($targetEl).each(function(_, el) {
                var time = parseFloat(el.getAttribute('data-scroll-time'));
                if (!isNaN(time) && time >= 0) {
                    mult = time;
                }
            });
            return (472.143 * Math.log(Math.abs(start - end) + 125) - 2000) * mult;
        }
        function getY(start, end, elapsed, duration) {
            if (elapsed > duration) {
                return end;
            }
            return start + (end - start) * ease(elapsed / duration);
        }
        function ease(t) {
            return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        }
        function ready() {
            var { WF_CLICK_EMPTY, WF_CLICK_SCROLL } = NS_EVENTS;
            $doc.on(WF_CLICK_SCROLL, localHrefSelector, validateScroll);
            /**
           * Prevent empty hash links from triggering scroll.
           * Legacy feature to preserve: use the default "#" link
           * to trigger an interaction, and do not want the page
           * to scroll to the top.
           */ $doc.on(WF_CLICK_EMPTY, emptyHrefSelector, function(e) {
                e.preventDefault();
            });
            document.head.insertBefore(focusStylesEl, document.head.firstChild);
        }
        // Export module
        return {
            ready
        };
    });
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    93695: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals document, window */ /**
     * Webflow: Touch events
     * Supports legacy 'tap' event
     * Adds a 'swipe' event to desktop and mobile
     */ 
    var Webflow = __webpack_require__(43949);
    Webflow.define('touch', module.exports = function($) {
        var api = {};
        var getSelection = window.getSelection;
        // Delegate all legacy 'tap' events to 'click'
        $.event.special.tap = {
            bindType: 'click',
            delegateType: 'click'
        };
        api.init = function(el) {
            el = typeof el === 'string' ? $(el).get(0) : el;
            return el ? new Touch(el) : null;
        };
        function Touch(el) {
            var active = false;
            var useTouch = false;
            var thresholdX = Math.min(Math.round(window.innerWidth * 0.04), 40);
            var startX;
            var lastX;
            el.addEventListener('touchstart', start, false);
            el.addEventListener('touchmove', move, false);
            el.addEventListener('touchend', end, false);
            el.addEventListener('touchcancel', cancel, false);
            el.addEventListener('mousedown', start, false);
            el.addEventListener('mousemove', move, false);
            el.addEventListener('mouseup', end, false);
            el.addEventListener('mouseout', cancel, false);
            function start(evt) {
                // We donâ€™t handle multi-touch events yet.
                var touches = evt.touches;
                if (touches && touches.length > 1) {
                    return;
                }
                active = true;
                if (touches) {
                    useTouch = true;
                    startX = touches[0].clientX;
                } else {
                    startX = evt.clientX;
                }
                lastX = startX;
            }
            function move(evt) {
                if (!active) {
                    return;
                }
                if (useTouch && evt.type === 'mousemove') {
                    evt.preventDefault();
                    evt.stopPropagation();
                    return;
                }
                var touches = evt.touches;
                var x = touches ? touches[0].clientX : evt.clientX;
                var velocityX = x - lastX;
                lastX = x;
                // Allow swipes while pointer is down, but prevent them during text selection
                if (Math.abs(velocityX) > thresholdX && getSelection && String(getSelection()) === '') {
                    triggerEvent('swipe', evt, {
                        direction: velocityX > 0 ? 'right' : 'left'
                    });
                    cancel();
                }
            }
            function end(evt) {
                if (!active) {
                    return;
                }
                active = false;
                if (useTouch && evt.type === 'mouseup') {
                    evt.preventDefault();
                    evt.stopPropagation();
                    useTouch = false;
                    return;
                }
            }
            function cancel() {
                active = false;
            }
            function destroy() {
                el.removeEventListener('touchstart', start, false);
                el.removeEventListener('touchmove', move, false);
                el.removeEventListener('touchend', end, false);
                el.removeEventListener('touchcancel', cancel, false);
                el.removeEventListener('mousedown', start, false);
                el.removeEventListener('mousemove', move, false);
                el.removeEventListener('mouseup', end, false);
                el.removeEventListener('mouseout', cancel, false);
                el = null;
            }
            // Public instance methods
            this.destroy = destroy;
        }
        // Wrap native event to supoprt preventdefault + stopPropagation
        function triggerEvent(type, evt, data) {
            var newEvent = $.Event(type, {
                originalEvent: evt
            });
            $(evt.target).trigger(newEvent, data);
        }
        // Listen for touch events on all nodes by default.
        api.instance = api.init(document);
        // Export module
        return api;
    });
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    69147: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return StyleMapObserver;
        }
    }));
    const _merge = /*#__PURE__*/ _interop_require_default(__webpack_require__(90139));
    const _tinycolor2 = /*#__PURE__*/ _interop_require_default(__webpack_require__(86304));
    const _breakpointsconfig = __webpack_require__(66725);
    const _breakpointids = __webpack_require__(82216);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const STYLE_MAP_ATTR = 'data-wf-style-map';
    /**
     * In order of application, where each query values
     * overrides the media queries above it.
     */ const orderedBreakpointIds = [
        _breakpointids.BREAKPOINT_ID_MAIN,
        _breakpointids.BREAKPOINT_ID_LARGE,
        _breakpointids.BREAKPOINT_ID_XL,
        _breakpointids.BREAKPOINT_ID_XXL,
        _breakpointids.BREAKPOINT_ID_MEDIUM,
        _breakpointids.BREAKPOINT_ID_SMALL,
        _breakpointids.BREAKPOINT_ID_TINY
    ];
    const ORDERED_MEDIA_QUERIES = orderedBreakpointIds.map((breakpointId)=>{
        const config = _breakpointsconfig.LARGER_BREAKPOINTS_CONFIG[breakpointId];
        let prop;
        let value;
        // @ts-expect-error - TS18048 - 'config' is possibly 'undefined'.
        if ('minWidth' in config) {
            prop = 'min-width';
            value = config.minWidth;
        }
        // @ts-expect-error - TS18048 - 'config' is possibly 'undefined'.
        if ('maxWidth' in config) {
            prop = 'max-width';
            value = config.maxWidth;
        }
        if (prop === undefined || value === undefined) {
            throw new Error('Bad breakpoint config, expected either "minWidth" or "maxWidth".');
        }
        return {
            name: breakpointId,
            query: `(${prop}: ${value}px)`
        };
    });
    class StyleMapObserver {
        styles = undefined;
        observer = undefined;
        mediaQueries = [];
        options = {
            onChange: ()=>{}
        };
        static appliedStylesToStripeElementStyles = (appliedStylesMap)=>{
            if (!appliedStylesMap) {
                return {};
            }
            // Need to update color values to rgba because Stripe doesn't accept hsla format
            const appliedStylesMapWithUpdatedColorValues = Object.keys(appliedStylesMap).reduce((updatedStyles, styleKey)=>{
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
                const colorVal = appliedStylesMap[styleKey].color;
                const textShadowVal = // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
                appliedStylesMap[styleKey].textShadow && // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
                appliedStylesMap[styleKey].textShadow.split(/(?=hsla)/);
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
                updatedStyles[styleKey] = appliedStylesMap[styleKey];
                // Update color to rgba string
                if (colorVal) {
                    updatedStyles[styleKey].color = (0, _tinycolor2.default)(colorVal).toRgbString();
                }
                // Want to update only if hsla val is within textShaodw string
                if (textShadowVal && textShadowVal.length > 1) {
                    updatedStyles[styleKey].textShadow = textShadowVal[0] + (0, _tinycolor2.default)(textShadowVal[1]).toRgbString();
                }
                return updatedStyles;
            }, {});
            const styles = {
                ...appliedStylesMapWithUpdatedColorValues.noPseudo,
                ':hover': appliedStylesMapWithUpdatedColorValues.hover,
                ':focus': appliedStylesMapWithUpdatedColorValues.focus,
                '::placeholder': appliedStylesMapWithUpdatedColorValues.placeholder
            };
            return {
                base: styles,
                invalid: styles,
                empty: styles,
                complete: styles
            };
        };
        constructor(element, options){
            this.options = options;
            if (element.hasAttribute(STYLE_MAP_ATTR)) {
                const styleMapJSON = element.getAttribute(STYLE_MAP_ATTR);
                if (styleMapJSON) {
                    this.setStylesFromJSON(styleMapJSON);
                    const doc = element.ownerDocument;
                    const win = doc.defaultView;
                    this.mediaQueries = ORDERED_MEDIA_QUERIES.map((mq)=>({
                            ...mq,
                            // @ts-expect-error - TS18047 - 'win' is possibly 'null'.
                            listener: win.matchMedia(mq.query)
                        }));
                    // @ts-expect-error - TS18047 - 'win' is possibly 'null'.
                    this.observer = new win.MutationObserver(this.handleMutationObserver);
                    this.observer.observe(element, {
                        attributes: true
                    });
                    this.mediaQueries.forEach(({ listener })=>{
                        listener.addListener(this.dispatch);
                    });
                    this.dispatch();
                }
            }
        }
        setStylesFromJSON(styleMapJSON) {
            try {
                this.styles = JSON.parse(styleMapJSON);
            } catch (e) {
                this.styles = {};
            }
        }
        getAppliedStyles() {
            if (!this.styles) {
                return;
            }
            const styles = this.styles;
            const appliedStyles = this.mediaQueries.reduce((stylesMap, { listener, name })=>listener.matches ? (0, _merge.default)(stylesMap, styles[name]) : stylesMap, {});
            return appliedStyles;
        }
        dispatch = ()=>{
            this.options.onChange(this.getAppliedStyles());
        };
        handleMutationObserver = (mutationList)=>{
            mutationList.forEach((mutation)=>{
                if (mutation.type === 'attributes' && mutation.attributeName === STYLE_MAP_ATTR && mutation.target.hasAttribute(STYLE_MAP_ATTR)) {
                    const styleMapJSON = mutation.target.getAttribute(STYLE_MAP_ATTR);
                    if (styleMapJSON) {
                        this.setStylesFromJSON(styleMapJSON);
                        this.dispatch();
                    }
                }
            });
        };
        destroy() {
            if (this.observer) {
                this.observer.disconnect();
            }
            this.mediaQueries.forEach(({ listener })=>{
                listener.removeListener(this.dispatch);
            });
        }
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    84303: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals document, window, Element, HTMLElement, CustomEvent, HTMLFormElement, HTMLInputElement, HTMLSelectElement, HTMLAnchorElement*/ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        default: function() {
            return _default;
        },
        register: function() {
            return register;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    const _constants = __webpack_require__(10873);
    const _constants1 = __webpack_require__(7462);
    const _constants2 = __webpack_require__(29197);
    const _constants3 = __webpack_require__(48935);
    const _utils = __webpack_require__(73392);
    const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
    const _site = __webpack_require__(32949);
    const _commerceUtils = __webpack_require__(54556);
    const _RenderingUtils = __webpack_require__(86078);
    const _CurrencyUtils = __webpack_require__(60937);
    const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
    const _forEach = /*#__PURE__*/ _interop_require_default(__webpack_require__(32397));
    const _find = /*#__PURE__*/ _interop_require_default(__webpack_require__(19777));
    const _rendering = __webpack_require__(91898);
    const _addToCartStore = __webpack_require__(21465);
    const _PillGroup = __webpack_require__(14155);
    const _siteBundles = __webpack_require__(66551);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const { fetchFromStore, updateStore, addStoreWatcher } = (0, _addToCartStore.createNewStore)();
    const getInstanceId = (form)=>{
        const instanceId = form.getAttribute(_constants.DATA_ATTR_COMMERCE_PRODUCT_ID);
        if (instanceId) {
            return instanceId;
        } else {
            throw new Error('Incorrect form instance provided, has no instance ID');
        }
    };
    function trackAddToCartUsage(skuId, count, itemPrice) {
        const { decimalValue, unit } = itemPrice;
        if (typeof fbq === 'function') {
            fbq('track', 'AddToCart', {
                value: count * decimalValue,
                currency: unit,
                content_ids: [
                    skuId
                ],
                content_type: 'product',
                contents: [
                    {
                        id: skuId,
                        quantity: count,
                        item_price: decimalValue
                    }
                ]
            });
        }
        if (typeof gtag === 'function') {
            gtag('event', 'add_to_cart', {
                items: [
                    {
                        id: skuId,
                        quantity: count,
                        price: decimalValue
                    }
                ]
            });
        }
    }
    const addToCartMutation = (0, _graphqltag.default)`
      mutation AddToCart($skuId: String!, $count: Int!, $buyNow: Boolean) {
        ecommerceAddToCart(sku: $skuId, count: $count, buyNow: $buyNow) {
          ok
          itemId
          itemCount
          itemPrice {
            unit
            decimalValue
          }
        }
      }
    `;
    const collectionsQuery = `
          collections {
            c_sku_ {
              id
              items(filter: {f_product_: {eq: $productId}}) {
                id
                f_price_ {
                  value
                  unit
                }
                f_weight_
                f_width_
                f_length_
                f_height_
                f_sku_
                f_main_image_4dr {
                  url
                }
                f_more_images_4dr {
                  url
                  alt
                  file {
                    origFileName
                  }
                }
                f_sku_values_3dr {
                  value {
                    id
                  }
                  property {
                    id
                  }
                }
                inventory {
                  type
                  quantity
                }
                f_compare_at_price_7dr10dr {
                  unit
                  value
                }
                f_ec_sku_billing_method_2dr6dr14dr
              }
            }
            c_product_ {
              id
              items(filter: {id: {eq: $productId}}) {
                id
                f_default_sku_7dr {
                  id
                }
                f_ec_product_type_2dr10dr {
                  name
                }
              }
            }
          }`;
    const getAllVariants = (0, _graphqltag.default)`
      query FetchAllVariants($productId: BasicId!) {
        database {
          id
          ${collectionsQuery}
        }
      }
    `;
    const getAllVariantsAndMemberships = (0, _graphqltag.default)`
      query FetchAllVariantsAndMemberships($productId: BasicId!) {
        database {
          id
          ${collectionsQuery}
          commerceMemberships(productIds: [$productId]) {
            productId
            orderId
            active
          }
        }
      }
    `;
    // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type.
    const findCollectionItemWrapper = (node)=>{
        const dynamoItemSelector = `.${_constants3.CLASS_NAME_DYNAMIC_LIST_ITEM}:not(.${_constants3.CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM})`;
        return $(node).closest(dynamoItemSelector)[0] || document.body;
    };
    const addToCartFormEventTargetMatcher = (event)=>{
        if (event != null && event.target instanceof HTMLElement && event.target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM) {
            return event.target;
        }
        return false;
    };
    const getErrorType = (error)=>{
        const defaultErrorType = 'general';
        if (error && error.graphQLErrors && error.graphQLErrors.length > 0) {
            switch(error.graphQLErrors[0].code){
                case 'OutOfInventory':
                    return 'quantity';
                case 'MixedCartError':
                    return 'mixed-cart';
                default:
                    return defaultErrorType;
            }
        }
        return defaultErrorType;
    };
    const handleAtcSubmit = (event, apolloClient)=>{
        event.preventDefault();
        const eventTarget = event.currentTarget;
        if (!(eventTarget instanceof HTMLFormElement && eventTarget.parentNode instanceof Element) || eventTarget.hasAttribute(_constants.ADD_TO_CART_LOADING)) {
            return;
        }
        const { parentNode } = eventTarget;
        const inputButton = eventTarget.querySelector('input[type="submit"]');
        if (!(0, _commerceUtils.isProtocolHttps)()) {
            window.alert('This site is currently unsecured so you cannot add products to your cart.');
            return;
        }
        if (!(inputButton instanceof HTMLInputElement)) {
            return;
        }
        const errorElement = parentNode.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR}"]`);
        if (errorElement instanceof Element) {
            // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
            errorElement.style.display = 'none';
        }
        eventTarget.setAttribute(_constants.ADD_TO_CART_LOADING, '');
        const previousButtonValue = inputButton.value;
        // We moved the data here to the actual button node but will fallback to old value on the wrapper if not set
        const loadingTextFromButton = inputButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
        inputButton.value = loadingTextFromButton ? loadingTextFromButton : eventTarget.getAttribute(_constants.DATA_ATTR_LOADING_TEXT) || '';
        inputButton.setAttribute('aria-busy', 'true');
        const skuId = fetchFromStore(getInstanceId(eventTarget), 'selectedSku') || '';
        const formData = (0, _commerceUtils.formToObject)(eventTarget);
        const formCount = formData[_constants.NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT];
        const count = formCount ? parseInt(formCount, 10) : 1;
        // if no SKU id, then all options need to be selected
        // this is only shown for pills, as dropdowns will be caught by reportValidity above
        if (!skuId && errorElement instanceof Element) {
            eventTarget.removeAttribute(_constants.ADD_TO_CART_LOADING);
            inputButton.value = previousButtonValue;
            inputButton.setAttribute('aria-busy', 'false');
            const errorMsg = errorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
            if (!errorMsg) {
                return;
            }
            const errorText = errorMsg.getAttribute((0, _constants.getATCErrorMessageForType)('select-all-options')) || 'Please select an option in each set.';
            errorMsg.textContent = errorText;
            // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
            errorElement.style.removeProperty('display');
            return;
        }
        // Redirect to sign up if the purchase requires a user session and there is none
        const requiresUserSession = fetchFromStore(getInstanceId(eventTarget), 'requiresUserSession');
        const hasUserSession = document.cookie.split(';').some((cookie)=>cookie.indexOf(_constants1.LOGGEDIN_COOKIE_NAME) > -1);
        if (requiresUserSession && !hasUserSession) {
            (0, _siteBundles.redirectWithUsrdir)(`/${_constants1.USYS_PAGE_SETTINGS.signup.slug}`);
            return;
        }
        apolloClient.mutate({
            mutation: addToCartMutation,
            variables: {
                skuId,
                count,
                buyNow: false
            }
        }).then(({ data })=>{
            (0, _commerceUtils.addLoadingCallback)(()=>{
                eventTarget.removeAttribute(_constants.ADD_TO_CART_LOADING);
                inputButton.value = previousButtonValue;
                inputButton.setAttribute('aria-busy', 'false');
                const cartElements = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_CART_WRAPPER}"][${_constants.DATA_ATTR_OPEN_PRODUCT}]`);
                cartElements.forEach((cart)=>{
                    const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                        bubbles: true,
                        detail: {
                            open: true
                        }
                    });
                    cart.dispatchEvent(evt);
                });
            });
            (0, _commerceUtils.triggerRender)(null);
            const itemPrice = data.ecommerceAddToCart.itemPrice || {};
            trackAddToCartUsage(skuId, count, itemPrice);
        }).catch((error)=>{
            eventTarget.removeAttribute(_constants.ADD_TO_CART_LOADING);
            inputButton.value = previousButtonValue;
            inputButton.setAttribute('aria-busy', 'false');
            if (errorElement) {
                // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                errorElement.style.removeProperty('display');
                const errorMsg = errorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
                if (!errorMsg) {
                    return;
                }
                const errorMessage = (0, _constants.getATCErrorMessageForType)(getErrorType(error));
                const errorText = errorMsg.getAttribute(errorMessage) || '';
                errorMsg.textContent = errorText;
            }
            _debug.default.error(error);
            (0, _commerceUtils.triggerRender)(null);
        });
    };
    const addToCartOptionSelectEventTargetMatcher = (event)=>{
        if (event != null && event.target instanceof HTMLElement && event.target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT) {
            return event.target;
        }
        return false;
    };
    const queryAllWithoutOtherItemWrapperContents = (collectionItemWrapper, selector)=>{
        return Array.from(collectionItemWrapper.querySelectorAll(selector)).filter((node)=>findCollectionItemWrapper(node) === collectionItemWrapper);
    };
    const queryAllReferenceRepeaters = (collectionItemWrapper)=>{
        return Array.from(collectionItemWrapper.querySelectorAll(`.${_constants3.CLASS_NAME_DYNAMIC_LIST_REPEATER_REF}`));
    };
    const removeClass = (element, className)=>{
        element && element.classList instanceof DOMTokenList && element.classList.remove(className);
        if (element.classList.length === 0) {
            element.removeAttribute('class');
        }
    };
    const showElement = (element)=>removeClass(element, 'w-dyn-hide');
    const hideElement = (element)=>element && element.classList instanceof DOMTokenList && element.classList.add('w-dyn-hide');
    const updateEmptyStateVisibility = (node, fn1, fn2)=>{
        const emptyStateNodes = Array.from(node.querySelectorAll('.w-dyn-empty'));
        const emptyStateMoreImageFieldNodes = emptyStateNodes.filter((n)=>{
            // @ts-expect-error - TS18046 - 'n' is of type 'unknown'.
            const itemsList = n.parentElement.querySelector('.w-dyn-items');
            return itemsList.dataset && itemsList.dataset.wfCollection && itemsList.dataset.wfCollection === 'f_more_images_4dr';
        });
        return emptyStateMoreImageFieldNodes && emptyStateMoreImageFieldNodes.map((n)=>{
            fn1(n);
            // @ts-expect-error - TS18046 - 'n' is of type 'unknown'.
            const itemsList = n.parentElement.querySelector('.w-dyn-items');
            if (itemsList && itemsList.dataset && itemsList.dataset.wfCollection && itemsList.dataset.wfCollection === 'f_more_images_4dr' && itemsList.classList instanceof DOMTokenList && itemsList.parentElement.classList.contains(_constants3.CLASS_NAME_DYNAMIC_LIST_REPEATER_REF)) {
                return fn2(itemsList);
            }
        });
    };
    const showEmptyStateAndHideItemsList = (node)=>{
        updateEmptyStateVisibility(node, showElement, hideElement);
    };
    const hideEmptyStateAndShowItemsList = (node)=>{
        updateEmptyStateVisibility(node, hideElement, showElement);
    };
    const updateDropdownsOnPage = (instanceId)=>(newSkuValues)=>{
            const dropdownsForProduct = Array.from(document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST}"][${_constants.DATA_ATTR_COMMERCE_PRODUCT_ID}="${instanceId}"] [${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT}"]`));
            for (const optionSetId of Object.keys(newSkuValues)){
                const optionSetValue = newSkuValues[optionSetId];
                const matchingDropdownsForOptionSet = dropdownsForProduct.filter((d)=>d.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) === optionSetId);
                for (const dropdown of matchingDropdownsForOptionSet){
                    dropdown.value = String(optionSetValue);
                }
            }
        };
    const disableOptionsOnChange = ({ apolloClient, productId, optionSets, optionSetId })=>{
        apolloClient.query({
            query: getAllVariants,
            variables: {
                productId
            }
        }).then(({ data })=>{
            // That's a lot of question marks! What do they mean?
            // The `?.` is optional chaining, which lets you safely access deeply nested properties,
            // with it bailing out if the property doesn't exist: https://github.com/TC39/proposal-optional-chaining
            // The `??` is nullish coalescing, which is similar to `||` when wanting to ensure something is defined,
            // but only tripping if the value it's checking `null` or `undefined`, to prevent odd `false` and `false`-ish tripping false positives
            // https://github.com/tc39/proposal-nullish-coalescing
            const items = data?.database?.collections?.c_sku_?.items ?? [];
            // Get all the data we're going to use, we need to know which selectors were previously selected, which are currently
            // selected vs. which are not, and the most recently updated one
            const optionSetData = optionSets.reduce((parsedSelectorOptionSets, selectorOptionSet)=>{
                if (selectorOptionSet.value) {
                    parsedSelectorOptionSets.selectedOptionSets.push(selectorOptionSet);
                    if (selectorOptionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) === optionSetId) {
                        parsedSelectorOptionSets.recentlySelectedOptionSet = selectorOptionSet;
                    } else {
                        parsedSelectorOptionSets.previouslySelectedOptionSets.push(selectorOptionSet);
                    }
                } else {
                    parsedSelectorOptionSets.unselectedOptionSets.push(selectorOptionSet);
                }
                return parsedSelectorOptionSets;
            }, {
                selectedOptionSets: [],
                recentlySelectedOptionSet: undefined,
                previouslySelectedOptionSets: [],
                unselectedOptionSets: []
            });
            let { selectedOptionSets, unselectedOptionSets } = optionSetData;
            const { recentlySelectedOptionSet, previouslySelectedOptionSets } = optionSetData;
            // Deselect previously selected option sets if they are uncompatible with the current selection.
            if (recentlySelectedOptionSet && selectedOptionSets.length > 1) {
                const recentlySelectedOptionSetValue = recentlySelectedOptionSet.value;
                (0, _forEach.default)(previouslySelectedOptionSets, (previouslySelectedOptionSet)=>{
                    const optionSetValueCombinationWithMostRecent = [
                        recentlySelectedOptionSetValue,
                        previouslySelectedOptionSet.value
                    ];
                    // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                    const someAvailableItem = items.some((item)=>{
                        if (item.inventory.type === _constants.INVENTORY_TYPE_FINITE && item.inventory.quantity <= 0) {
                            return false;
                        }
                        const itemMappedBySkuValues = item.f_sku_values_3dr.map(// @ts-expect-error - TS7006 - Parameter 'skuValues' implicitly has an 'any' type.
                        (skuValues)=>skuValues.value.id);
                        return optionSetValueCombinationWithMostRecent.every((value)=>itemMappedBySkuValues.includes(value));
                    });
                    if (!someAvailableItem) {
                        previouslySelectedOptionSet.selectedIndex = 0;
                        selectedOptionSets = selectedOptionSets.filter(// @ts-expect-error - TS7006 - Parameter 'selectedOptionSet' implicitly has an 'any' type.
                        (selectedOptionSet)=>selectedOptionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) !== previouslySelectedOptionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID));
                        unselectedOptionSets = unselectedOptionSets.concat(previouslySelectedOptionSet);
                    }
                });
            }
            // For the (remaining after above deselection) selected ones we want to disable any options that simply have no possible stock
            (0, _forEach.default)(selectedOptionSets, (optionSet)=>{
                const id = optionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
                (0, _forEach.default)(optionSet.options, (option)=>{
                    if (!option.value) {
                        option.enabled = true;
                    } else {
                        disableVariantsWithNoStock(items, id, option);
                    }
                });
            });
            // For the remaining unselected ones we want to disable any options that aren't possible given current selections
            (0, _forEach.default)(unselectedOptionSets, (optionSet)=>{
                const id = optionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
                disableVariantsWithNoStockForRemainingSelections(items, selectedOptionSets, optionSet, id);
            });
        });
    };
    const handleAtcOptionSelectChange = (event, apolloClient)=>{
        const eventTarget = event.currentTarget;
        if (!(eventTarget instanceof HTMLSelectElement)) {
            return;
        }
        // @ts-expect-error - TS2339 - Property 'jQuery' does not exist on type 'Window & typeof globalThis'.
        const $1 = window.jQuery;
        const optionSetId = eventTarget.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
        const optionSetValue = eventTarget.value;
        const optionListElement = $1(eventTarget).closest(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST}"]`)[0];
        const addToCartForm = $1(eventTarget).closest(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM}"]`)[0];
        if (!(optionListElement instanceof Element) || !optionSetId || !(addToCartForm instanceof HTMLFormElement)) {
            return;
        }
        const instanceId = getInstanceId(addToCartForm);
        const currentSkuValues = fetchFromStore(instanceId, 'skuValues');
        const newSkuValues = {
            ...currentSkuValues,
            [optionSetId]: optionSetValue
        };
        updateStore(instanceId, {
            skuValues: newSkuValues
        });
        const productId = optionListElement && optionListElement.getAttribute(_constants.DATA_ATTR_COMMERCE_PRODUCT_ID);
        const allVariantSelectorsInCartForm = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT, addToCartForm);
        if (productId && allVariantSelectorsInCartForm.length > 0) {
            disableOptionsOnChange({
                apolloClient,
                productId,
                optionSets: allVariantSelectorsInCartForm,
                optionSetId
            });
        }
    };
    const updateSkuBindings = (binding, node, newSkuItem)=>{
        if ([
            'f_weight_',
            'f_width_',
            'f_length_',
            'f_height_',
            'f_sku_'
        ].some((slug)=>binding.from === slug)) {
            node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = newSkuItem[binding.from] || '';
            updateTextNodeVisibility(node);
        }
        if (binding.from === 'f_price_' && newSkuItem.f_price_) {
            node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = (0, _CurrencyUtils.renderPriceFromSettings)(newSkuItem.f_price_, // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
            window.__WEBFLOW_CURRENCY_SETTINGS);
            updateTextNodeVisibility(node);
        }
        if (binding.from === 'f_compare_at_price_7dr10dr') {
            if (newSkuItem.f_compare_at_price_7dr10dr) {
                // if compare-at is available, apply the binding
                node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = (0, _CurrencyUtils.renderPriceFromSettings)(newSkuItem.f_compare_at_price_7dr10dr, // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
                window.__WEBFLOW_CURRENCY_SETTINGS);
            } else {
                // otherwise, we need to specifically clear it; it could have been set
                // by a previously-selected product option
                node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = '';
            }
            updateTextNodeVisibility(node);
        }
        if (binding.from === 'f_main_image_4dr' || binding.from === 'f_main_image_4dr.url') {
            const mainImage = (0, _get.default)(newSkuItem, binding.from.replace(/\.url$/, ''));
            if (binding.to === 'style.background-image') {
                node.style.backgroundImage = mainImage && mainImage.url ? `url("${mainImage.url}")` : 'none';
            } else if (binding.to === 'media') {
                if (node.classList.contains('w-lightbox')) {
                    updateLightboxJson(node, mainImage);
                }
            } else if (binding.to === 'src') {
                if (mainImage && mainImage.url) {
                    node.src = mainImage.url;
                    (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
                    // Temporary solution for responsive images for product variants
                    if (node.hasAttribute('srcset')) {
                        node.removeAttribute('srcset');
                    }
                } else {
                    node.removeAttribute('src');
                    node.classList.add(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY);
                }
            }
        }
        if (binding.from === 'f_more_images_4dr' || binding.from.startsWith('f_more_images_4dr.')) {
            const image = (0, _get.default)(newSkuItem, binding.from.replace(/\.url$/, ''));
            if (binding.to === 'style.background-image') {
                node.style.backgroundImage = image ? `url("${image.url}")` : 'none';
            } else if (binding.to === 'media') {
                if (node.classList.contains('w-lightbox')) {
                    updateLightboxJson(node, image);
                }
            } else if (binding.to === 'src') {
                if (image && image.url) {
                    node.src = image.url;
                    node.alt = image.alt || '';
                    (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
                    // Temporary solution for responsive images for product variants
                    if (node.hasAttribute('srcset')) {
                        node.removeAttribute('srcset');
                        node.removeAttribute('sizes');
                    }
                } else {
                    node.removeAttribute('src');
                    node.removeAttribute('srcset');
                    node.removeAttribute('sizes');
                    node.removeAttribute('alt');
                    node.classList.add(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY);
                }
            }
        }
        if (binding.from === 'ecSkuInventoryQuantity') {
            const inventoryQuantity = (0, _get.default)(newSkuItem, 'inventory.type') === 'infinite' ? null : (0, _get.default)(newSkuItem, 'inventory.quantity');
            node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = inventoryQuantity;
            updateTextNodeVisibility(node);
        }
    };
    const updatePageWithNewSkuValuesData = (instanceId, apolloClient)=>(newSkuValues)=>{
            // @ts-expect-error - TS2339 - Property 'jQuery' does not exist on type 'Window & typeof globalThis'.
            const $1 = window.jQuery;
            apolloClient.query({
                query: getAllVariants,
                variables: {
                    productId: instanceId
                }
            }).then(({ data })=>{
                const items = data?.database?.collections?.c_sku_?.items ?? [];
                const products = data?.database?.collections?.c_product_?.items ?? [];
                const productType = products[0] ? products[0].f_ec_product_type_2dr10dr.name : 'Advanced';
                const newSkuItem = (0, _find.default)(items, (item)=>{
                    if (item.f_sku_values_3dr && Array.isArray(item.f_sku_values_3dr)) {
                        const skuValues = (0, _site.simplifySkuValues)(item.f_sku_values_3dr);
                        return Object.keys(newSkuValues).every((key)=>newSkuValues[key] === skuValues[key]);
                    }
                });
                if (newSkuItem && newSkuItem.id) {
                    updateStore(instanceId, {
                        selectedSku: newSkuItem.id
                    });
                    if (newSkuItem['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription' || productType === 'Membership') {
                        updateStore(instanceId, {
                            requiresUserSession: true
                        });
                    }
                    const formsForProduct = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM}"][${_constants.DATA_ATTR_COMMERCE_PRODUCT_ID}="${instanceId}"]`);
                    Array.from(formsForProduct).forEach((addToCartForm)=>{
                        const collectionItemWrapper = findCollectionItemWrapper(addToCartForm);
                        const referenceRepeaters = queryAllReferenceRepeaters(collectionItemWrapper);
                        // Update the state of the buy now button text to handle subscription
                        const buyNowButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_BUY_NOW_BUTTON, addToCartForm);
                        if (buyNowButton) {
                            if (newSkuItem['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription') {
                                const addToCartButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON, addToCartForm);
                                const buyNowSubscriptionText = buyNowButton.getAttribute(_constants.DATA_ATTR_SUBSCRIPTION_TEXT) || 'Subscribe now';
                                hideElement(addToCartButton);
                                buyNowButton.innerText = buyNowSubscriptionText;
                            } else {
                                const buyNowDefaultText = buyNowButton.getAttribute(_constants.DATA_ATTR_DEFAULT_TEXT) || 'Buy now';
                                buyNowButton.innerText = buyNowDefaultText;
                            }
                        }
                        const moreImagesFieldLength = newSkuItem.f_more_images_4dr && newSkuItem.f_more_images_4dr.length || 0;
                        if (referenceRepeaters.length > 0) {
                            referenceRepeaters.forEach((referenceRepeater)=>{
                                // @ts-expect-error - TS2345 - Argument of type 'unknown' is not assignable to parameter of type 'Element'.
                                (0, _rendering.renderTree)(referenceRepeater, {
                                    data: newSkuItem
                                });
                                if (moreImagesFieldLength > 0) {
                                    hideEmptyStateAndShowItemsList(referenceRepeater);
                                } else {
                                    showEmptyStateAndHideItemsList(referenceRepeater);
                                }
                            });
                        }
                        const skuBoundNodes = queryAllWithoutOtherItemWrapperContents(collectionItemWrapper, `[${_constants.WF_SKU_BINDING_DATA_KEY}]`);
                        (0, _forEach.default)(skuBoundNodes, (node)=>{
                            // @ts-expect-error - TS18046 - 'node' is of type 'unknown'.
                            const skuBindingsData = node.getAttribute(_constants.WF_SKU_BINDING_DATA_KEY);
                            if (skuBindingsData) {
                                const skuBindings = (0, _commerceUtils.safeParseJson)(skuBindingsData);
                                if (Array.isArray(skuBindings)) {
                                    skuBindings.forEach((binding)=>updateSkuBindings(binding, node, newSkuItem));
                                }
                            }
                        });
                        const skuConditionBoundNodes = queryAllWithoutOtherItemWrapperContents(collectionItemWrapper, `[${_constants.WF_SKU_CONDITION_DATA_KEY}]`);
                        (0, _forEach.default)(skuConditionBoundNodes, (node)=>{
                            const conditionData = (0, _commerceUtils.safeParseJson)(// @ts-expect-error - TS18046 - 'node' is of type 'unknown'.
                            node.getAttribute(_constants.WF_SKU_CONDITION_DATA_KEY));
                            if (conditionData) {
                                (0, _rendering.applySkuBoundConditionalVisibility)({
                                    conditionData,
                                    newSkuItem,
                                    // @ts-expect-error - TS2322 - Type 'unknown' is not assignable to type 'Element'.
                                    node
                                });
                            }
                        });
                        const errorElement = $1(collectionItemWrapper).siblings(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR}"]`)[0];
                        if (errorElement instanceof Element) {
                            // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                            errorElement.style.display = 'none';
                        }
                    });
                    // In case there are lightboxes bound, we need to initialize the events again after each script
                    // was updated with the right data in updateSkuBindings
                    if (window.Webflow.require('lightbox')) {
                        window.Webflow.require('lightbox').ready();
                    }
                } else {
                    // if we can't find a valid SKU, we've deselected one of the variant selectors
                    // as such, we need to clear the selected SKU in the store
                    updateStore(instanceId, {
                        selectedSku: ''
                    });
                }
            });
        };
    const updateSkuValuesOnPillSelect = (instanceId, apolloClient)=>// @ts-expect-error - TS7031 - Binding element 'optionId' implicitly has an 'any' type. | TS7031 - Binding element 'optionSetId' implicitly has an 'any' type. | TS7031 - Binding element 'groups' implicitly has an 'any' type.
        ({ optionId, optionSetId, groups })=>{
            const currentSkuValues = fetchFromStore(instanceId, 'skuValues');
            const newSkuValues = {
                ...currentSkuValues,
                [optionSetId]: optionId
            };
            updateStore(instanceId, {
                skuValues: newSkuValues
            });
            disableOptionsOnChange({
                apolloClient,
                productId: instanceId,
                optionSets: Object.values(groups),
                optionSetId
            });
        };
    const handleAtcPageLoad = (event, apolloClient, stripeStore)=>{
        if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
            return;
        }
        const addToCartForms = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM}"]`);
        // allow pills to work only in preview
        if (window.Webflow.env('preview')) {
            if (event.detail.isInitial) {
                (0, _forEach.default)(addToCartForms, (addToCartForm)=>{
                    // set up pill groups
                    const groups = new _PillGroup.PillGroups(// @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    addToCartForm, ({ optionId, optionSetId })=>{
                        groups.setSelectedPillsForSkuValues({
                            [optionSetId]: optionId
                        });
                    });
                    groups.init();
                });
            }
            return;
        }
        // otherwise, return for designer
        if (window.Webflow.env('design')) {
            return;
        }
        (0, _forEach.default)(addToCartForms, (addToCartForm)=>{
            const addToCartButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON, addToCartForm);
            // If this form has an add to cart button, set the `aria-haspopup` to `dialog` or `false`
            // depending on at least one Cart element having the setting for "Open when product is added"
            if (addToCartButton) {
                const cartElementsThatOpenOnAdd = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_CART_WRAPPER}"][${_constants.DATA_ATTR_OPEN_PRODUCT}]`);
                addToCartButton.setAttribute('aria-haspopup', cartElementsThatOpenOnAdd.length > 0 ? 'dialog' : 'false');
            }
            const buyNowButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_BUY_NOW_BUTTON, addToCartForm);
            // Hide the Buy now button if Stripe is not connected
            if (stripeStore && !stripeStore.isInitialized()) {
                if (buyNowButton) {
                    hideElement(buyNowButton);
                }
            }
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLFormElement'.
            const instanceId = getInstanceId(addToCartForm);
            if (event.detail.isInitial) {
                // only set the selected SKU from the DOM on the initial render event, as after that we want to
                // rely on the store as the source of truth. without this, the selected SKU could get reset on any render
                updateStore(instanceId, {
                    // @ts-expect-error - TS2322 - Type 'string | null' is not assignable to type 'string | undefined'.
                    selectedSku: addToCartForm instanceof Element ? addToCartForm.getAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID) : ''
                });
                // add watcher for sku values change to update the page as needed
                addStoreWatcher(instanceId, 'skuValues', updatePageWithNewSkuValuesData(instanceId, apolloClient));
                // add watcher for dropdowns to update on sku change
                addStoreWatcher(instanceId, 'skuValues', updateDropdownsOnPage(instanceId));
                // set up pill groups
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                if (_PillGroup.PillGroups.hasPillGroups(addToCartForm)) {
                    const pillGroup = new _PillGroup.PillGroups(// @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    addToCartForm, updateSkuValuesOnPillSelect(instanceId, apolloClient));
                    addStoreWatcher(instanceId, 'skuValues', (newSkuValues)=>{
                        pillGroup.setSelectedPillsForSkuValues(newSkuValues);
                    });
                    pillGroup.init();
                }
            }
            const currentSkuId = fetchFromStore(instanceId, 'selectedSku');
            if (!currentSkuId) {
                return;
            }
            const productId = addToCartForm && addToCartForm.getAttribute(_constants.DATA_ATTR_COMMERCE_PRODUCT_ID);
            if (productId) {
                apolloClient.query({
                    query: getAllVariantsAndMemberships,
                    variables: {
                        productId
                    }
                }).then(({ data })=>{
                    const items = data?.database?.collections?.c_sku_?.items ?? [];
                    const products = data?.database?.collections?.c_product_?.items ?? [];
                    const productType = products[0] ? products[0].f_ec_product_type_2dr10dr.name : 'Advanced';
                    // build the possible sku values for the given product
                    // since all items have the same sku values, we just use the first
                    // then we iterate over the skus, and create an object of [propertyId: string]: ''
                    // to represent that by default, no property has been selected yet
                    if (event.detail.isInitial && items[0].f_sku_values_3dr && items[0].f_sku_values_3dr.length > 0) {
                        // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments.
                        const skuValuesMap = items[0].f_sku_values_3dr.reduce((map, sku)=>{
                            map[sku.property.id] = '';
                            return map;
                        }, {});
                        updateStore(instanceId, {
                            skuValues: skuValuesMap
                        });
                    }
                    const memberships = data?.database?.commerceMemberships ?? [];
                    const hasActiveMemebership = Boolean(memberships[0]?.active);
                    if (hasActiveMemebership) {
                        if (buyNowButton) {
                            buyNowButton.removeAttribute('href');
                            // without href <a> doesn't have an implicit role, so adding it back here for accesibility
                            buyNowButton.setAttribute('role', 'link');
                            buyNowButton.setAttribute('aria-disabled', 'true');
                            buyNowButton.classList.add('w--ecommerce-buy-now-disabled');
                        }
                        if (addToCartButton) {
                            addToCartButton.setAttribute('disabled', 'true');
                            addToCartButton.classList.add('w--ecommerce-add-to-cart-disabled');
                        }
                    }
                    // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                    const currentSku = items.find((item)=>item.id === currentSkuId);
                    if (currentSku) {
                        if (currentSku['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription' || productType === 'Membership') {
                            updateStore(instanceId, {
                                requiresUserSession: true
                            });
                        }
                        // Set buy now text to subscription state if subscription
                        if (currentSku['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription') {
                            hideElement(addToCartButton);
                            if (buyNowButton) {
                                const buyNowSubscriptionText = buyNowButton.getAttribute(_constants.DATA_ATTR_SUBSCRIPTION_TEXT) || 'Subscribe now';
                                buyNowButton.innerText = buyNowSubscriptionText;
                            }
                        } else if (buyNowButton) {
                            const buyNowDefaultText = buyNowButton.getAttribute(_constants.DATA_ATTR_DEFAULT_TEXT) || 'Buy now';
                            buyNowButton.innerText = buyNowDefaultText;
                        }
                        const addToCartWrapper = addToCartForm.parentElement;
                        const optionListElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST, // @ts-expect-error - TS2345 - Argument of type 'HTMLElement | null' is not assignable to parameter of type 'Document | Element | undefined'.
                        addToCartWrapper);
                        const outOfStockState = addToCartWrapper && addToCartWrapper.getElementsByClassName('w-commerce-commerceaddtocartoutofstock')[0];
                        // Check if exist a variant with stock
                        const hasVariantsWithStock = items.some(// @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
                        (variant)=>variant.inventory.type === _constants.INVENTORY_TYPE_FINITE && variant.inventory.quantity > 0 || variant.inventory.type === _constants.INVENTORY_TYPE_INFINITE);
                        if (!hasVariantsWithStock && outOfStockState) {
                            // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                            outOfStockState.style.display = '';
                            // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                            addToCartForm.style.display = 'none';
                        }
                        // Update select options based on stock
                        const optionSetsToUpdate = items[0].f_sku_values_3dr.map(// @ts-expect-error - TS7006 - Parameter 'skuValue' implicitly has an 'any' type.
                        (skuValue)=>skuValue.property.id);
                        // @ts-expect-error - TS7006 - Parameter 'optionToUpdateSetId' implicitly has an 'any' type.
                        optionSetsToUpdate.forEach((optionToUpdateSetId)=>{
                            // Get the select we will update
                            let optionSet = addToCartForm.querySelector(`[${_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID}="${optionToUpdateSetId}"]`);
                            if (!(optionSet instanceof HTMLElement)) {
                                return;
                            }
                            const optionSetId = optionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
                            if (optionSet.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP) {
                                // if we're using a pill group, we need to get the PillGroup class for the given element
                                // so that we have access to the getters we defined to give us compatibility with the `select` API
                                // @ts-expect-error - TS2339 - Property '_wfPillGroup' does not exist on type 'HTMLElement'.
                                optionSet = optionSet._wfPillGroup;
                            }
                            // @ts-expect-error - TS18047 - 'optionSet' is possibly 'null'. | TS2339 - Property 'options' does not exist on type 'Element'.
                            (0, _forEach.default)(optionSet.options, (option)=>{
                                // Get the variant that has the current option combined with other selected options that in this case, since it's in the on load
                                // it will be the default variant
                                if (!option.value) {
                                    // The default options should be always enabled
                                    option.enabled = true;
                                } else {
                                    disableVariantsWithNoStock(items, optionSetId, option);
                                }
                            });
                            // Make sure that if this is render occurs with option sets already selected that we disable based on available options
                            const selectedOptionSets = optionSetsToUpdate.filter(// @ts-expect-error - TS7006 - Parameter 'optionSetToUpdate' implicitly has an 'any' type.
                            (optionSetToUpdate)=>optionSetToUpdate.value);
                            disableVariantsWithNoStockForRemainingSelections(items, selectedOptionSets, optionSet, optionSetId);
                            // Preselect the default variant if setting has been enabled and initial render
                            if (event.detail.isInitial && optionListElement && optionListElement.getAttribute(_constants.DATA_ATTR_PRESELECT_DEFAULT_VARIANT) === 'true') {
                                const defaultSkuId = (0, _get.default)(data, [
                                    'database',
                                    'collections',
                                    'c_product_',
                                    'items',
                                    0,
                                    'f_default_sku_7dr',
                                    'id'
                                ]);
                                const defaultSku = items.find(// @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                                (item)=>item.id === defaultSkuId);
                                // Ensure the default variant is in stock before preselecting
                                if (defaultSku && !(defaultSku.inventory.type === _constants.INVENTORY_TYPE_FINITE && defaultSku.inventory.quantity <= 0)) {
                                    const defaultSkuIndex = Array.from(// @ts-expect-error - TS18047 - 'optionSet' is possibly 'null'. | TS2339 - Property 'options' does not exist on type 'Element'.
                                    optionSet.options).findIndex((option)=>defaultSku.f_sku_values_3dr.some(// @ts-expect-error - TS7006 - Parameter 'value' implicitly has an 'any' type. | TS18046 - 'option' is of type 'unknown'.
                                        (value)=>value.value.id === option.value));
                                    if (defaultSkuIndex > -1) {
                                        // @ts-expect-error - TS18047 - 'optionSet' is possibly 'null'. | TS2339 - Property 'selectedIndex' does not exist on type 'Element'.
                                        optionSet.selectedIndex = defaultSkuIndex;
                                        updateStore(instanceId, {
                                            selectedSku: defaultSku.id,
                                            // update the sku values map to set each property id to the value id
                                            // for the current variant
                                            skuValues: (0, _site.simplifySkuValues)(defaultSku.f_sku_values_3dr)
                                        });
                                    }
                                }
                            }
                        });
                    }
                });
            }
        });
    };
    const disableVariantsWithNoStockForRemainingSelections = (items, // @ts-expect-error - TS7006 - Parameter 'selectedOptionSets' implicitly has an 'any' type.
    selectedOptionSets, optionSet, id)=>{
        // Get all the possible variants given our current selections
        // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
        let possibleVariantSelections = items.filter((item)=>{
            const itemMappedBySkuValues = item.f_sku_values_3dr.map(// @ts-expect-error - TS7006 - Parameter 'skuValues' implicitly has an 'any' type.
            (skuValues)=>skuValues.value.id);
            const currentlySelectedSkuValues = selectedOptionSets.map(// @ts-expect-error - TS7006 - Parameter 'selectedOptionSet' implicitly has an 'any' type.
            (selectedOptionSet)=>selectedOptionSet.value);
            // @ts-expect-error - TS7006 - Parameter 'selectedValue' implicitly has an 'any' type.
            return currentlySelectedSkuValues.every((selectedValue)=>itemMappedBySkuValues.includes(selectedValue));
        });
        // Reset them if there is only 1 left i.e. user has selected all 3 options
        if (possibleVariantSelections.length === 1) {
            possibleVariantSelections = items;
        }
        (0, _forEach.default)(optionSet.options, (option)=>{
            // Get the variant that has the current option combined with other selected options that in this case, since it's in the on load
            // it will be the default variant
            if (!option.value) {
                // The default options should be always enabled
                option.enabled = true;
            } else {
                // @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
                const variantsFiltered = possibleVariantSelections.filter((variant)=>{
                    const sku = variant.f_sku_values_3dr.find(// @ts-expect-error - TS7006 - Parameter 'value' implicitly has an 'any' type.
                    (value)=>value.property.id === id);
                    return sku.value.id === option.value;
                });
                const hasVariantsWithStock = variantsFiltered.some(// @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
                (variant)=>variant.inventory.type === _constants.INVENTORY_TYPE_FINITE && variant.inventory.quantity > 0 || variant.inventory.type === _constants.INVENTORY_TYPE_INFINITE);
                if (!hasVariantsWithStock) {
                    option.disabled = true;
                } else {
                    option.disabled = false;
                }
            }
        });
    };
    const disableVariantsWithNoStock = (items, optionSetId, option)=>{
        if (!option.value) {
            return;
        }
        // @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
        const variantsFiltered = items.filter((variant)=>{
            const sku = variant.f_sku_values_3dr.find(// @ts-expect-error - TS7006 - Parameter 'value' implicitly has an 'any' type.
            (value)=>value.property.id === optionSetId);
            return sku.value.id === option.value;
        });
        const hasVariantsWithStock = variantsFiltered.some(// @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
        (variant)=>variant.inventory.type === _constants.INVENTORY_TYPE_FINITE && variant.inventory.quantity > 0 || variant.inventory.type === _constants.INVENTORY_TYPE_INFINITE);
        if (!hasVariantsWithStock) {
            option.disabled = true;
        } else {
            option.disabled = false;
        }
    };
    const updateTextNodeVisibility = (node)=>{
        if (node.innerText) {
            (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
        }
        if (!node.innerText && !node.classList.contains(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY)) {
            node.classList.add(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY);
        }
    };
    const updateLightboxJson = (node, binding)=>{
        const lightboxScript = node.querySelector('script.w-json');
        if (lightboxScript) {
            const nodeJsonData = JSON.parse(lightboxScript.innerHTML);
            // if the JSON created from bound media is `null`,
            // we replace `script` tag contents with placeholder data
            // that retains the `group` property
            lightboxScript.innerHTML = JSON.stringify((0, _utils.createJsonFromBoundMedia)(binding, nodeJsonData) || {
                items: [],
                group: nodeJsonData && nodeJsonData.group
            });
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isBuyNowButtonEvent = ({ target })=>target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_BUY_NOW_BUTTON;
    // @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
    const handleBuyNow = (event, apolloClient)=>{
        event.preventDefault();
        // Don't try and do anything in preview mode
        if (window.Webflow.env('preview')) {
            return;
        }
        const buyNowButton = event.target;
        const addToCartForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM, // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget'.
        buyNowButton);
        if (!(buyNowButton instanceof HTMLAnchorElement) || !(addToCartForm instanceof HTMLFormElement)) {
            return;
        }
        if (buyNowButton.classList.contains('w--ecommerce-buy-now-disabled')) {
            return;
        }
        const addToCartWrapper = addToCartForm.parentElement;
        if (!(addToCartWrapper instanceof Element)) {
            return;
        }
        const addToCartErrorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR, addToCartWrapper);
        if (!(addToCartErrorElement instanceof Element)) {
            return;
        }
        addToCartErrorElement.style.display = 'none';
        if (!(0, _commerceUtils.isProtocolHttps)()) {
            window.alert('This site is currently unsecured so you cannot purchase this item.');
            return;
        }
        // Confirm atc selection is valid
        if (!addToCartForm.reportValidity()) {
            return;
        }
        // Redirect to sign up if the purchase requires a user session and there is none
        const requiresUserSession = fetchFromStore(getInstanceId(addToCartForm), 'requiresUserSession');
        const hasUserSession = document.cookie.split(';').some((cookie)=>cookie.indexOf(_constants1.LOGGEDIN_COOKIE_NAME) > -1);
        if (requiresUserSession && !hasUserSession) {
            (0, _siteBundles.redirectWithUsrdir)(`/${_constants1.USYS_PAGE_SETTINGS.signup.slug}`);
            return;
        }
        const publishableKey = buyNowButton.getAttribute(_constants.DATA_ATTR_PUBLISHABLE_KEY);
        // If no publishable key checkout is not enabled
        if (!publishableKey) {
            const errorMsg = addToCartErrorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
            if (!errorMsg) {
                return;
            }
            const errorText = errorMsg.getAttribute(_constants.CHECKOUT_DISABLED_ERROR_MESSAGE) || 'Checkout is disabled.';
            errorMsg.textContent = errorText;
            addToCartErrorElement.style.removeProperty('display');
            return;
        }
        const skuId = fetchFromStore(getInstanceId(addToCartForm), 'selectedSku') || '';
        const formData = (0, _commerceUtils.formToObject)(addToCartForm);
        const formCount = formData[_constants.NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT];
        const count = formCount ? parseInt(formCount, 10) : 1;
        // if no SKU id, then all options need to be selected
        // this is only shown for pills, as dropdowns will be caught by reportValidity above
        if (!skuId) {
            const errorMsg = addToCartErrorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
            if (!errorMsg) {
                return;
            }
            const errorText = errorMsg.getAttribute((0, _constants.getATCErrorMessageForType)('select-all-options')) || 'Please select an option in each set.';
            errorMsg.textContent = errorText;
            addToCartErrorElement.style.removeProperty('display');
            return;
        }
        apolloClient.mutate({
            mutation: addToCartMutation,
            variables: {
                skuId,
                count,
                buyNow: true
            }
        })// @ts-expect-error - TS7031 - Binding element 'data' implicitly has an 'any' type.
        .then(({ data })=>{
            const itemPrice = data.ecommerceAddToCart.itemPrice || {};
            trackAddToCartUsage(skuId, count, itemPrice);
            // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
            window.location = buyNowButton.href;
        })// @ts-expect-error - TS7006 - Parameter 'error' implicitly has an 'any' type.
        .catch((error)=>{
            if (addToCartErrorElement) {
                addToCartErrorElement.style.removeProperty('display');
                const errorMsg = addToCartErrorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
                if (!errorMsg) {
                    return;
                }
                const errorType = error.graphQLErrors && error.graphQLErrors.length > 0 && error.graphQLErrors[0].code === 'OutOfInventory' ? 'quantity' : 'buy-now';
                const errorText = errorMsg.getAttribute((0, _constants.getATCErrorMessageForType)(errorType)) || '';
                errorMsg.textContent = errorText;
            }
            _debug.default.error(error);
            (0, _commerceUtils.triggerRender)(null);
        });
    };
    const register = (handlerProxy)=>{
        handlerProxy.on('submit', addToCartFormEventTargetMatcher, handleAtcSubmit);
        handlerProxy.on('change', addToCartOptionSelectEventTargetMatcher, handleAtcOptionSelectChange);
        handlerProxy.on('click', isBuyNowButtonEvent, handleBuyNow);
        handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleAtcPageLoad);
    };
    const _default = {
        register
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    21465: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "createNewStore", ({
        enumerable: true,
        get: function() {
            return createNewStore;
        }
    }));
    const initialState = {
        selectedSku: '',
        skuValues: {},
        requiresUserSession: false
    };
    const createNewStore = ()=>{
        const store = {};
        const watchers = {};
        const fetchFromStore = (instanceId, key)=>{
            return store[instanceId] ? store[instanceId][key] : undefined;
        };
        const updateStore = (instanceId, newValues)=>{
            if (!store[instanceId]) {
                store[instanceId] = {
                    ...initialState
                };
            }
            for (const key of Object.keys(newValues)){
                if (!store[instanceId].hasOwnProperty(key)) {
                    continue;
                }
                const previousValue = store[instanceId][key];
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<StoreShape>'.
                store[instanceId][key] = newValues[key];
                if (watchers[instanceId] && watchers[instanceId][key]) {
                    for (const watcher of watchers[instanceId][key]){
                        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<StoreShape>'.
                        watcher(newValues[key], previousValue);
                    }
                }
            }
        };
        const addStoreWatcher = (instanceId, key, cb)=>{
            if (!watchers[instanceId]) {
                watchers[instanceId] = {};
            }
            if (watchers[instanceId][key]) {
                watchers[instanceId][key].push(cb);
            } else {
                watchers[instanceId][key] = [
                    cb
                ];
            }
        };
        return {
            fetchFromStore,
            updateStore,
            addStoreWatcher
        };
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZFRvQ2FydFN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgU3RvcmVTaGFwZSA9IHtcbiAgc2VsZWN0ZWRTa3U6IHN0cmluZztcbiAgc2t1VmFsdWVzOiBTa3VWYWx1ZXM7XG4gIHJlcXVpcmVzVXNlclNlc3Npb246IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgU2t1VmFsdWVzID0ge1xuICBbcHJvcGVydHlJZDogc3RyaW5nXTogc3RyaW5nO1xufTtcblxuaW50ZXJmYWNlIFN0b3JlRmV0Y2hlciB7XG4gIChpbnN0YW5jZUlkOiBzdHJpbmcsIGtleTogJ3NlbGVjdGVkU2t1Jyk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIChpbnN0YW5jZUlkOiBzdHJpbmcsIGtleTogJ3NrdVZhbHVlcycpOiBTa3VWYWx1ZXMgfCBudWxsIHwgdW5kZWZpbmVkO1xuICAoaW5zdGFuY2VJZDogc3RyaW5nLCBrZXk6ICdyZXF1aXJlc1VzZXJTZXNzaW9uJyk6IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkO1xufVxudHlwZSBTdG9yZVVwZGF0ZXIgPSAoXG4gIGluc3RhbmNlSWQ6IHN0cmluZyxcbiAgbmV3VmFsdWVzOiBQYXJ0aWFsPFN0b3JlU2hhcGU+XG4pID0+IHZvaWQ7XG50eXBlIEFkZFN0b3JlV2F0Y2hlciA9IChcbiAgaW5zdGFuY2VJZDogc3RyaW5nLFxuICBrZXk6IGtleW9mIFN0b3JlU2hhcGUsXG4gIGNiOiAoY3VycmVudFZhbHVlPzogYW55LCBwcmV2aW91c1ZhbHVlPzogYW55KSA9PiB2b2lkXG4pID0+IHZvaWQ7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogU3RvcmVTaGFwZSA9IHtcbiAgc2VsZWN0ZWRTa3U6ICcnLFxuICBza3VWYWx1ZXM6IHt9LFxuICByZXF1aXJlc1VzZXJTZXNzaW9uOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVOZXdTdG9yZSA9ICgpOiB7XG4gIGZldGNoRnJvbVN0b3JlOiBTdG9yZUZldGNoZXI7XG4gIHVwZGF0ZVN0b3JlOiBTdG9yZVVwZGF0ZXI7XG4gIGFkZFN0b3JlV2F0Y2hlcjogQWRkU3RvcmVXYXRjaGVyO1xufSA9PiB7XG4gIGNvbnN0IHN0b3JlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIGNvbnN0IHdhdGNoZXJzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG5cbiAgY29uc3QgZmV0Y2hGcm9tU3RvcmU6IFN0b3JlRmV0Y2hlciA9IChpbnN0YW5jZUlkLCBrZXkpID0+IHtcbiAgICByZXR1cm4gc3RvcmVbaW5zdGFuY2VJZF0gPyBzdG9yZVtpbnN0YW5jZUlkXVtrZXldIDogdW5kZWZpbmVkO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVN0b3JlOiBTdG9yZVVwZGF0ZXIgPSAoaW5zdGFuY2VJZCwgbmV3VmFsdWVzKSA9PiB7XG4gICAgaWYgKCFzdG9yZVtpbnN0YW5jZUlkXSkge1xuICAgICAgc3RvcmVbaW5zdGFuY2VJZF0gPSB7Li4uaW5pdGlhbFN0YXRlfTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdWYWx1ZXMpKSB7XG4gICAgICBpZiAoIXN0b3JlW2luc3RhbmNlSWRdLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBzdG9yZVtpbnN0YW5jZUlkXVtrZXldO1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzA1MyAtIEVsZW1lbnQgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZSBiZWNhdXNlIGV4cHJlc3Npb24gb2YgdHlwZSAnc3RyaW5nJyBjYW4ndCBiZSB1c2VkIHRvIGluZGV4IHR5cGUgJ1BhcnRpYWw8U3RvcmVTaGFwZT4nLlxuICAgICAgc3RvcmVbaW5zdGFuY2VJZF1ba2V5XSA9IG5ld1ZhbHVlc1trZXldO1xuICAgICAgaWYgKHdhdGNoZXJzW2luc3RhbmNlSWRdICYmIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0pIHtcbiAgICAgICAgZm9yIChjb25zdCB3YXRjaGVyIG9mIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0pIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFM3MDUzIC0gRWxlbWVudCBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlIGJlY2F1c2UgZXhwcmVzc2lvbiBvZiB0eXBlICdzdHJpbmcnIGNhbid0IGJlIHVzZWQgdG8gaW5kZXggdHlwZSAnUGFydGlhbDxTdG9yZVNoYXBlPicuXG4gICAgICAgICAgd2F0Y2hlcihuZXdWYWx1ZXNba2V5XSwgcHJldmlvdXNWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkU3RvcmVXYXRjaGVyOiBBZGRTdG9yZVdhdGNoZXIgPSAoaW5zdGFuY2VJZCwga2V5LCBjYikgPT4ge1xuICAgIGlmICghd2F0Y2hlcnNbaW5zdGFuY2VJZF0pIHtcbiAgICAgIHdhdGNoZXJzW2luc3RhbmNlSWRdID0ge307XG4gICAgfVxuXG4gICAgaWYgKHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0pIHtcbiAgICAgIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0ucHVzaChjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0gPSBbY2JdO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge2ZldGNoRnJvbVN0b3JlLCB1cGRhdGVTdG9yZSwgYWRkU3RvcmVXYXRjaGVyfTtcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlTmV3U3RvcmUiLCJpbml0aWFsU3RhdGUiLCJzZWxlY3RlZFNrdSIsInNrdVZhbHVlcyIsInJlcXVpcmVzVXNlclNlc3Npb24iLCJzdG9yZSIsIndhdGNoZXJzIiwiZmV0Y2hGcm9tU3RvcmUiLCJpbnN0YW5jZUlkIiwia2V5IiwidW5kZWZpbmVkIiwidXBkYXRlU3RvcmUiLCJuZXdWYWx1ZXMiLCJPYmplY3QiLCJrZXlzIiwiaGFzT3duUHJvcGVydHkiLCJwcmV2aW91c1ZhbHVlIiwid2F0Y2hlciIsImFkZFN0b3JlV2F0Y2hlciIsImNiIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE4QmFBOzs7ZUFBQUE7OztBQU5iLE1BQU1DLGVBQTJCO0lBQy9CQyxhQUFhO0lBQ2JDLFdBQVcsQ0FBQztJQUNaQyxxQkFBcUI7QUFDdkI7QUFFTyxNQUFNSixpQkFBaUI7SUFLNUIsTUFBTUssUUFBNkIsQ0FBQztJQUNwQyxNQUFNQyxXQUFnQyxDQUFDO0lBRXZDLE1BQU1DLGlCQUErQixDQUFDQyxZQUFZQztRQUNoRCxPQUFPSixLQUFLLENBQUNHLFdBQVcsR0FBR0gsS0FBSyxDQUFDRyxXQUFXLENBQUNDLElBQUksR0FBR0M7SUFDdEQ7SUFFQSxNQUFNQyxjQUE0QixDQUFDSCxZQUFZSTtRQUM3QyxJQUFJLENBQUNQLEtBQUssQ0FBQ0csV0FBVyxFQUFFO1lBQ3RCSCxLQUFLLENBQUNHLFdBQVcsR0FBRztnQkFBQyxHQUFHUCxZQUFZO1lBQUE7UUFDdEM7UUFFQSxLQUFLLE1BQU1RLE9BQU9JLE9BQU9DLElBQUksQ0FBQ0YsV0FBWTtZQUN4QyxJQUFJLENBQUNQLEtBQUssQ0FBQ0csV0FBVyxDQUFDTyxjQUFjLENBQUNOLE1BQU07Z0JBQzFDO1lBQ0Y7WUFFQSxNQUFNTyxnQkFBZ0JYLEtBQUssQ0FBQ0csV0FBVyxDQUFDQyxJQUFJO1lBQzVDLDBKQUEwSjtZQUMxSkosS0FBSyxDQUFDRyxXQUFXLENBQUNDLElBQUksR0FBR0csU0FBUyxDQUFDSCxJQUFJO1lBQ3ZDLElBQUlILFFBQVEsQ0FBQ0UsV0FBVyxJQUFJRixRQUFRLENBQUNFLFdBQVcsQ0FBQ0MsSUFBSSxFQUFFO2dCQUNyRCxLQUFLLE1BQU1RLFdBQVdYLFFBQVEsQ0FBQ0UsV0FBVyxDQUFDQyxJQUFJLENBQUU7b0JBQy9DLDBKQUEwSjtvQkFDMUpRLFFBQVFMLFNBQVMsQ0FBQ0gsSUFBSSxFQUFFTztnQkFDMUI7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxNQUFNRSxrQkFBbUMsQ0FBQ1YsWUFBWUMsS0FBS1U7UUFDekQsSUFBSSxDQUFDYixRQUFRLENBQUNFLFdBQVcsRUFBRTtZQUN6QkYsUUFBUSxDQUFDRSxXQUFXLEdBQUcsQ0FBQztRQUMxQjtRQUVBLElBQUlGLFFBQVEsQ0FBQ0UsV0FBVyxDQUFDQyxJQUFJLEVBQUU7WUFDN0JILFFBQVEsQ0FBQ0UsV0FBVyxDQUFDQyxJQUFJLENBQUNXLElBQUksQ0FBQ0Q7UUFDakMsT0FBTztZQUNMYixRQUFRLENBQUNFLFdBQVcsQ0FBQ0MsSUFBSSxHQUFHO2dCQUFDVTthQUFHO1FBQ2xDO0lBQ0Y7SUFFQSxPQUFPO1FBQUNaO1FBQWdCSTtRQUFhTztJQUFlO0FBQ3REIn0=
    
    }),
    82150: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals document, window, Element, HTMLElement, CustomEvent, HTMLFormElement, HTMLInputElement, HTMLCollection, HTMLAnchorElement */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        default: function() {
            return _default;
        },
        register: function() {
            return register;
        },
        renderCart: function() {
            return renderCart;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    const _mergeWith = /*#__PURE__*/ _interop_require_default(__webpack_require__(93794));
    const _forEach = /*#__PURE__*/ _interop_require_default(__webpack_require__(32397));
    const _constants = __webpack_require__(10873);
    const _commerceUtils = __webpack_require__(54556);
    const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
    const _webPaymentsEvents = __webpack_require__(94492);
    const _rendering = __webpack_require__(91898);
    const _defaultTo = /*#__PURE__*/ _interop_require_default(__webpack_require__(34075));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const { MODAL, LEFT_SIDEBAR, RIGHT_SIDEBAR, LEFT_DROPDOWN, RIGHT_DROPDOWN } = _constants.CART_TYPES;
    const { REMOVE_ITEM, UPDATE_ITEM_QUANTITY } = _constants.COMMERCE_CART_PUBLISHED_SITE_ACTIONS;
    const updateItemQuantityMutation = (0, _graphqltag.default)`
      mutation AddToCart($skuId: String!, $count: Int!) {
        ecommerceUpdateCartItem(sku: $skuId, count: $count) {
          ok
          itemId
          itemCount
        }
      }
    `;
    const forEachElementInForm = (form, callback)=>{
        if (form instanceof HTMLFormElement && form.elements instanceof HTMLCollection) {
            Array.from(form.elements).forEach((input)=>{
                if (input instanceof HTMLInputElement) {
                    callback(input);
                }
            });
        }
    };
    const disableAllFormElements = (form)=>{
        forEachElementInForm(form, (input)=>{
            input.disabled = true;
        });
    };
    const enableAllFormElements = (form)=>{
        forEachElementInForm(form, (input)=>{
            input.disabled = false;
        });
    };
    // Recursively searches up the tree to find the remove link anchor element
    // @ts-expect-error - TS7023 - 'searchTreeForRemoveLink' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
    const searchTreeForRemoveLink = (element)=>{
        if (element instanceof Element && element.hasAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) && element.getAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) === REMOVE_ITEM && element.hasAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID)) {
            return element;
        } else {
            return element instanceof Element && element.parentElement ? searchTreeForRemoveLink(element.parentElement) : false;
        }
    };
    // Matchers:
    const isItemRemovedEvent = (event)=>{
        // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget | Element'.
        return searchTreeForRemoveLink(event.target);
    };
    const isItemQuantityChangedEvent = (event)=>event.target instanceof Element && event.target.hasAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) && event.target.getAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) === UPDATE_ITEM_QUANTITY && event.target.hasAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID) && event.target;
    const isItemQuantityInputEvent = (event)=>event.target instanceof Element && event.target.hasAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) && event.target.getAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) === UPDATE_ITEM_QUANTITY && event.target.hasAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID) && event.target;
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isCartButtonEvent = ({ target })=>{
        const cartOpenLink = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK, target);
        const cartCloseLink = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CLOSE_LINK, target);
        if (cartOpenLink) {
            return cartOpenLink;
        } else if (cartCloseLink) {
            return cartCloseLink;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isCartCheckoutButtonEvent = ({ target })=>{
        const cartCheckoutButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON, target);
        if (cartCheckoutButton) {
            return cartCheckoutButton;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isCartWrapperEvent = ({ target })=>target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_WRAPPER && target;
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isCartFormEvent = ({ target })=>target instanceof Element && target.hasAttribute(_constants.DATA_ATTR_NODE_TYPE) && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_FORM;
    // @ts-expect-error - TS7023 - 'getFormElement' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
    const getFormElement = (element)=>{
        if (!(element instanceof Element)) {
            return null;
        }
        return element instanceof HTMLFormElement ? element : getFormElement(element.parentElement);
    };
    // Event handlers:
    const handleItemRemoved = (event, apolloClient)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        event.preventDefault();
        const { currentTarget } = event;
        if (!(currentTarget instanceof HTMLElement)) {
            return;
        }
        const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, currentTarget);
        if (!(commerceCartWrapper instanceof Element)) {
            return;
        }
        const errorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, commerceCartWrapper);
        if (!(errorElement instanceof Element)) {
            return;
        }
        errorElement.style.setProperty('display', 'none');
        const skuId = currentTarget.getAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID);
        const count = 0;
        const form = getFormElement(currentTarget);
        disableAllFormElements(form);
        const cartItem = (0, _commerceUtils.findClosestElementByClassName)('w-commerce-commercecartitem', currentTarget);
        if (!(cartItem instanceof Element)) {
            return;
        }
        (0, _commerceUtils.addLoadingCallback)((0, _commerceUtils.setElementLoading)(cartItem));
        // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget | Element'.
        const removeLinkElement = searchTreeForRemoveLink(event.target);
        // It always will be an anchor element here, but this is mostly a Flow-complaint-fixer
        if (removeLinkElement instanceof HTMLAnchorElement) {
            // Disable click events on the Remove link
            removeLinkElement.style.pointerEvents = 'none';
        }
        apolloClient.mutate({
            mutation: updateItemQuantityMutation,
            variables: {
                skuId,
                count
            }
        }).then(()=>{
            (0, _commerceUtils.triggerRender)(null);
        }, (error)=>{
            _debug.default.error(error);
            errorElement.style.removeProperty('display');
            const errorMsg = errorElement.querySelector(_constants.CART_ERROR_MESSAGE_SELECTOR);
            if (!errorMsg) {
                return;
            }
            // Only general error should be triggered when removing items
            const errorText = errorMsg.getAttribute(_constants.CART_GENERAL_ERROR_MESSAGE) || '';
            errorMsg.textContent = errorText;
            (0, _commerceUtils.triggerRender)(error);
        }).then(()=>{
            if (removeLinkElement instanceof HTMLAnchorElement) {
                // Re-enable click events on the Remove link
                removeLinkElement.style.pointerEvents = 'auto';
            }
            // When cart is becoming empty, focus on the first thing that can be focused
            const cartContainer = currentTarget.closest('.w-commerce-commercecartcontainer');
            if (cartContainer instanceof HTMLElement) {
                const itemContainer = cartContainer.getElementsByClassName('w-commerce-commercecartitem');
                const focusableContent = getFocusableElements(cartContainer);
                if (itemContainer.length === 1 && focusableContent.length > 0) {
                    // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                    focusableContent[0].focus();
                }
            }
        });
    };
    const handleItemQuantityChanged = (event, apolloClient)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        event.preventDefault();
        const { currentTarget } = event;
        if (!(currentTarget instanceof HTMLInputElement)) {
            return;
        }
        if (currentTarget.form instanceof HTMLFormElement && currentTarget.form.reportValidity() === false) {
            return;
        }
        const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, currentTarget);
        if (!(commerceCartWrapper instanceof Element)) {
            return;
        }
        const errorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, commerceCartWrapper);
        if (!(errorElement instanceof Element)) {
            return;
        }
        errorElement.style.setProperty('display', 'none');
        const cartItem = currentTarget.parentElement;
        if (!(cartItem instanceof Element)) {
            return;
        }
        (0, _commerceUtils.addLoadingCallback)((0, _commerceUtils.setElementLoading)(cartItem));
        const skuId = currentTarget.getAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID);
        const count = currentTarget.value;
        disableAllFormElements(currentTarget.form);
        apolloClient.mutate({
            mutation: updateItemQuantityMutation,
            variables: {
                skuId,
                count
            }
        }).then(()=>{
            enableAllFormElements(currentTarget.form);
            (0, _commerceUtils.triggerRender)(null);
        }, (error)=>{
            enableAllFormElements(currentTarget.form);
            _debug.default.error(error);
            errorElement.style.removeProperty('display');
            const errorMsg = errorElement.querySelector(_constants.CART_ERROR_MESSAGE_SELECTOR);
            if (!errorMsg) {
                return;
            }
            const errorType = error.graphQLErrors && error.graphQLErrors.length > 0 && error.graphQLErrors[0].code === 'OutOfInventory' ? 'quantity' : 'general';
            const errorText = errorMsg.getAttribute((0, _constants.getCartErrorMessageForType)(errorType)) || '';
            errorMsg.textContent = errorText;
            (0, _commerceUtils.triggerRender)(error);
        });
    };
    const handleItemInputChanged = (event)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        event.preventDefault();
        const { currentTarget } = event;
        if (!(currentTarget instanceof HTMLInputElement)) {
            return;
        }
        if (currentTarget.validity.valid === false && currentTarget.form instanceof HTMLFormElement) {
            currentTarget.form.reportValidity();
        }
    };
    const handleChangeCartStateEvent = (event)=>{
        if (!(event.currentTarget instanceof Element) || !(event instanceof CustomEvent)) {
            return;
        }
        const { currentTarget, detail } = event;
        const isOpen = currentTarget.hasAttribute(_constants.CART_OPEN);
        const shouldOpen = detail && detail.open != null ? detail.open : !isOpen;
        const wrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER, currentTarget);
        if (!wrapper) {
            return;
        }
        const cartContainer = getCartContainer(wrapper);
        if (!cartContainer) {
            return;
        }
        const cartElement = wrapper.parentElement;
        if (!cartElement) {
            return;
        }
        const cartType = cartElement.getAttribute(_constants.CART_TYPE);
        const duration = (0, _defaultTo.default)(cartElement.getAttribute(_constants.DATA_ATTR_ANIMATION_DURATION), _constants.ANIMATION_DURATION_DEFAULT) + 'ms';
        const containerEasing = (0, _defaultTo.default)(cartElement.getAttribute(_constants.DATA_ATTR_ANIMATION_EASING), _constants.ANIMATION_EASING_DEFAULT);
        const wrapperTransition = `opacity ${duration} ease 0ms`;
        const containerOutDelay = '50ms';
        const shouldAnimate = duration !== '0ms';
        let containerStepA;
        let containerStepB;
        switch(cartType){
            case MODAL:
                {
                    containerStepA = {
                        scale: 0.95
                    };
                    containerStepB = {
                        scale: 1.0
                    };
                    break;
                }
            case LEFT_SIDEBAR:
                {
                    containerStepA = {
                        x: -30
                    };
                    containerStepB = {
                        x: 0
                    };
                    break;
                }
            case RIGHT_SIDEBAR:
                {
                    containerStepA = {
                        x: 30
                    };
                    containerStepB = {
                        x: 0
                    };
                    break;
                }
            case LEFT_DROPDOWN:
            case RIGHT_DROPDOWN:
                {
                    containerStepA = {
                        y: -10
                    };
                    containerStepB = {
                        y: 0
                    };
                    break;
                }
        }
        if (shouldOpen) {
            document.addEventListener('keydown', handleCartFocusTrap);
            currentTarget.setAttribute(_constants.CART_OPEN, '');
            wrapper.style.removeProperty('display');
            // Ensures that the first focusable element in the cart gets focus
            // on cart launching.
            const focusableContent = getFocusableElements(cartContainer);
            if (focusableContent.length > 0) {
                // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                focusableContent[0].focus();
            }
            if (shouldAnimate && !isOpen) {
                // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                window.Webflow.tram(wrapper).add(wrapperTransition).set({
                    opacity: 0
                }).start({
                    opacity: 1
                });
                // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                window.Webflow.tram(cartContainer).add(`transform ${duration} ${containerEasing} 0ms`).set(containerStepA).start(containerStepB);
            }
        } else {
            document.removeEventListener('keydown', handleCartFocusTrap);
            currentTarget.removeAttribute(_constants.CART_OPEN);
            if (shouldAnimate) {
                // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                window.Webflow.tram(wrapper).add(wrapperTransition).start({
                    opacity: 0
                }).then(()=>{
                    wrapper.style.display = 'none';
                    // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                    window.Webflow.tram(cartContainer).stop();
                });
                // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                window.Webflow.tram(cartContainer).add(`transform ${duration} ${containerEasing} ${containerOutDelay}`).start(containerStepA);
            } else {
                wrapper.style.display = 'none';
            }
            const cartOpenButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK, cartElement);
            if (cartOpenButton instanceof Element) {
                cartOpenButton.focus();
            }
        }
    };
    const handleCartButton = (event)=>{
        // Don't handle events when we're in design mode
        if (window.Webflow.env('design')) {
            return;
        }
        const { currentTarget, type } = event;
        if (!(currentTarget instanceof Element)) {
            return;
        }
        const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, currentTarget);
        if (!(commerceCartWrapper instanceof Element)) {
            return;
        }
        const cartContainerWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER, commerceCartWrapper);
        let evt;
        if (type === 'click' && (currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_CLOSE_LINK || currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK && !commerceCartWrapper.hasAttribute(_constants.DATA_ATTR_OPEN_ON_HOVER))) {
            evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                bubbles: true
            });
            if (cartContainerWrapper && currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_CLOSE_LINK) {
                cartContainerWrapper.removeEventListener('mouseleave', handleCartContainerLeave);
                // @ts-expect-error - TS2769 - No overload matches this call.
                commerceCartWrapper.removeEventListener('mouseleave', handleCartContainerLeave);
            }
        } else if (type === 'mouseover' && commerceCartWrapper.hasAttribute(_constants.DATA_ATTR_OPEN_ON_HOVER) && currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK) {
            evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                bubbles: true,
                detail: {
                    open: true
                }
            });
            if (cartContainerWrapper) {
                cartContainerWrapper.addEventListener('mouseleave', handleCartContainerLeave);
                // @ts-expect-error - TS2769 - No overload matches this call.
                currentTarget.addEventListener('mouseleave', handleCartContainerLeave);
            }
        }
        if (evt) {
            commerceCartWrapper.dispatchEvent(evt);
        }
    };
    const handleCartCheckoutButton = (event)=>{
        // Don't want to continue with validation in preview mode
        if (window.Webflow.env('preview')) {
            return;
        }
        event.preventDefault();
        const { currentTarget: checkoutButton } = event;
        if (!(checkoutButton instanceof Element)) {
            return;
        }
        if (!(0, _commerceUtils.isProtocolHttps)()) {
            window.alert('This site is currently unsecured so you cannot enter checkout.');
            return;
        }
        const loadingText = checkoutButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
        const buttonText = checkoutButton.innerHTML;
        checkoutButton.innerHTML = loadingText ? loadingText : _constants.CART_CHECKOUT_LOADING_TEXT_DEFAULT;
        const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, checkoutButton);
        if (!(commerceCartWrapper instanceof Element)) {
            return;
        }
        // To determine if we should continue with checkout, we check for the existence of
        // either the Stripe publishable key (only added when Stripe is enabled), or the
        // PayPal script element. If neither exists, we want to block checkout, as this means
        // no payment gateway has been enabled, and therefore, checkout cannot be enabled.
        // In the future, we may need to expand this to be more comprehensive, if we allow
        // for free orders on sites without a payment gateway attached, or if/when we add
        // more possible payment gateways.
        const publishableKey = checkoutButton.getAttribute(_constants.DATA_ATTR_PUBLISHABLE_KEY);
        const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
        if (!publishableKey && !paypalElement) {
            const errorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, commerceCartWrapper);
            if (!(errorElement instanceof Element)) {
                return;
            }
            errorElement.style.setProperty('display', 'none');
            errorElement.style.removeProperty('display');
            const errorMsg = errorElement.querySelector('.w-cart-error-msg');
            if (!errorMsg) {
                return;
            }
            // Render checkout error message
            const errorText = errorMsg.getAttribute(`data-w-cart-checkout-error`) || '';
            errorMsg.textContent = errorText;
            checkoutButton.innerHTML = buttonText ? buttonText : _constants.CART_CHECKOUT_BUTTON_TEXT_DEFAULT;
            return;
        }
        if (!(checkoutButton instanceof HTMLAnchorElement)) {
            checkoutButton.innerHTML = buttonText ? buttonText : _constants.CART_CHECKOUT_BUTTON_TEXT_DEFAULT;
            return;
        }
        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
        window.location = checkoutButton.href;
    };
    const handleSubmitForm = (event)=>{
        if (window.Webflow.env('preview')) {
            return;
        }
        event.preventDefault();
    };
    const handleCartContainerLeave = (event)=>{
        const { target, relatedTarget } = event;
        if (!(target instanceof Element) || !(relatedTarget instanceof Element)) {
            return;
        }
        const { parentElement } = target;
        if (!(parentElement instanceof Element)) {
            return;
        }
        // Don't want to close cart if switching between the button and the container
        const cartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, relatedTarget);
        const cartContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER, relatedTarget);
        if (cartWrapper || cartContainer) {
            return;
        }
        const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
            bubbles: true,
            detail: {
                open: false
            }
        });
        parentElement.dispatchEvent(evt);
        cartWrapper && // @ts-expect-error - TS2358 - The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
        cartWrapper instanceof Element && // @ts-expect-error - TS2339 - Property 'removeEventListener' does not exist on type 'never'.
        cartWrapper.removeEventListener('mouseleave', handleCartContainerLeave);
        cartContainer && // @ts-expect-error - TS2358 - The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
        cartContainer instanceof Element && // @ts-expect-error - TS2339 - Property 'removeEventListener' does not exist on type 'never'.
        cartContainer.removeEventListener('mouseleave', handleCartContainerLeave);
    };
    let cartContainerStates = [];
    const handlePreviewMode = ()=>{
        // When we change to preview mode, we start by getting all of the cart wrappers on the page
        const cartContainerElements = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER);
        cartContainerElements.forEach((element)=>{
            // We then store the container element and its state in the designer
            const wasOpen = element.style.display !== 'none';
            cartContainerStates.push({
                element,
                wasOpen
            });
            // If it was open, we then dispatch the cart change event on the wrapper outside
            // to mirror what the functionality is in the `handleCartButton` function, so that
            // when the user tries to close the cart in the preview, it works as expected
            if (wasOpen) {
                const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                    bubbles: true,
                    detail: {
                        open: true
                    }
                });
                const { parentElement } = element;
                if (parentElement) {
                    parentElement.dispatchEvent(evt);
                }
            }
        });
    };
    const handleDesignMode = ()=>{
        // When we change back to design mode, we iterate over all the stored elements and states
        // and return them back to what they were when the user changed to preview mode.
        // While it would be nice if we could update the state that's stored in the designer,
        // this would require some ugly hacks to access the outer frame of the designer.
        cartContainerStates.forEach(({ element: wrapper, wasOpen })=>{
            // Remove quick animation style data
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.tram(wrapper).destroy();
            wrapper.style.opacity = '1';
            const cartContainer = getCartContainer(wrapper);
            if (cartContainer) {
                // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                window.Webflow.tram(cartContainer).destroy();
                cartContainer.style.transform = '';
            }
            // Reset the wrapper display property
            if (wasOpen) {
                wrapper.style.removeProperty('display');
            } else {
                wrapper.style.display = 'none';
            }
            // We reset the associated outer wrapper's state, so that we're back exactly to the state
            // of the DOM as it was in the designer.
            const cartElement = wrapper.parentElement;
            if (cartElement) {
                cartElement.removeAttribute(_constants.CART_OPEN);
            }
        });
        // We then clear out the states after the iteration has completed. It's possible we could keep them, and then
        // do some diff-ing or something so we don't have to iterate over them again in `handlePreviewMode`, but I think
        // that would be more computational work than just re-querying the DOM.
        cartContainerStates = [];
    };
    const doForAllMatchingClass = (cart, className, // @ts-expect-error - TS7006 - Parameter 'fn' implicitly has an 'any' type.
    fn)=>Array.from(cart.getElementsByClassName(className)).forEach(fn);
    const showCartDefaultState = (cart)=>{
        doForAllMatchingClass(cart, 'w-commerce-commercecartemptystate', _commerceUtils.hideElement);
        doForAllMatchingClass(cart, 'w-commerce-commercecartform', _commerceUtils.showElement);
    };
    const showCartEmptyState = (cart)=>{
        doForAllMatchingClass(cart, 'w-commerce-commercecartemptystate', _commerceUtils.showElement);
        doForAllMatchingClass(cart, 'w-commerce-commercecartform', _commerceUtils.hideElement);
    };
    const hideErrorState = (cart)=>{
        doForAllMatchingClass(cart, 'w-commerce-commercecarterrorstate', _commerceUtils.hideElement);
    };
    const showErrorState = (cart)=>{
        doForAllMatchingClass(cart, 'w-commerce-commercecarterrorstate', _commerceUtils.showElement);
    };
    const hasItems = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.userItems && response.data.database.commerceOrder.userItems.length > 0;
    const hasErrors = (response)=>response && response.errors && response.errors.length > 0;
    const updateCartA11Y = (cart)=>{
        doForAllMatchingClass(cart, 'w-commerce-commercecartopenlinkcount', // @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type.
        (element)=>{
            doForAllMatchingClass(cart, 'w-commerce-commercecartopenlink', // @ts-expect-error - TS7006 - Parameter 'openLinkElement' implicitly has an 'any' type.
            (openLinkElement)=>{
                openLinkElement.setAttribute('aria-label', element.textContent === '0' ? 'Open empty cart' : `Open cart containing ${element.textContent} items`);
            });
        });
    };
    const renderCart = (cart, data, stripeStore)=>{
        hideErrorState(cart);
        if (hasErrors(data)) {
            showErrorState(cart);
        }
        doForAllMatchingClass(cart, 'w-commerce-commercecartopenlinkcount', // @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type.
        (element)=>{
            const hideRule = element.getAttribute(_constants.DATA_ATTR_COUNT_HIDE_RULE);
            if (hideRule === _constants.CART_COUNT_HIDE_RULES.ALWAYS || hideRule === _constants.CART_COUNT_HIDE_RULES.EMPTY && !hasItems(data)) {
                (0, _commerceUtils.hideElement)(element);
            } else {
                (0, _commerceUtils.showElement)(element);
            }
        });
        // If it is a newly published site the commerceOrder will be null, causing the cart counter to render
        // an empty div if hide cart when empty is false and userItemsCount is not set to 0
        const dataWithDefaults = (0, _mergeWith.default)({}, data, (obj, src, key)=>{
            if (key === 'commerceOrder' && src === null) {
                return {
                    userItemsCount: 0
                };
            }
        });
        (0, _rendering.renderTree)(cart, dataWithDefaults);
        if (hasItems(data)) {
            showCartDefaultState(cart);
        } else {
            showCartEmptyState(cart);
        }
        const cartForm = cart.querySelector('form');
        if (cartForm instanceof HTMLFormElement) {
            enableAllFormElements(cartForm);
        }
        // we hide the button when the paypal sdk is on the page (only appears when paypal linked and checkout enabled)
        // and when the stripe store reports that it's not initialized. we don't pass stripe store for some errors,
        // so this ensures that the button will be shown still if there was an error.
        const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
        const checkoutButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON, cart);
        if (checkoutButton && paypalElement && stripeStore && !stripeStore.isInitialized()) {
            if ((0, _commerceUtils.isFreeOrder)(data)) {
                (0, _commerceUtils.showElement)(checkoutButton);
            } else {
                (0, _commerceUtils.hideElement)(checkoutButton);
            }
        }
        const paypalButton = cart.querySelector(`[${_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE}]`);
        if (paypalElement && paypalButton) {
            if ((0, _commerceUtils.isFreeOrder)(data) || (0, _commerceUtils.hasSubscription)(data)) {
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                (0, _commerceUtils.hideElement)(paypalButton);
            } else {
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                (0, _commerceUtils.showElement)(paypalButton);
            }
        }
        (0, _webPaymentsEvents.updateWebPaymentsButton)(cart, data, stripeStore);
        return cart;
    };
    const handleRenderCart = (event, apolloClient, stripeStore)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
            return;
        }
        const errors = [];
        const { detail } = event;
        if (detail != null && detail.error) {
            errors.push(detail.error);
        }
        const orderConfirmationContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER);
        // stop cart render on order confirmation page as it will always be empty, this query was setting commerceOrder to null
        // and overwritting a second query in `handleRenderOrderConfirmation`
        if (orderConfirmationContainer) {
            return;
        }
        const carts = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER);
        if (!carts.length) {
            (0, _commerceUtils.executeLoadingCallbacks)();
            return;
        }
        carts.forEach((cart)=>{
            apolloClient.query({
                query: (0, _graphqltag.default)`
              ${cart.getAttribute(_constants.CART_QUERY)}
            `,
                fetchPolicy: 'network-only',
                errorPolicy: 'all'
            }).then((data)=>{
                (0, _commerceUtils.executeLoadingCallbacks)();
                renderCart(cart, {
                    ...data,
                    errors: errors.concat(data.errors).filter(Boolean)
                }, stripeStore);
                updateCartA11Y(cart);
            }).catch((err)=>{
                (0, _commerceUtils.executeLoadingCallbacks)();
                errors.push(err);
                renderCart(cart, {
                    errors
                });
                updateCartA11Y(cart);
            });
        });
    };
    const handleCartKeyUp = (event)=>{
        // Escape
        // @ts-expect-error - TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
        if (event.keyCode === 27) {
            const openCarts = Array.from(document.querySelectorAll(`[${_constants.CART_OPEN}]`));
            (0, _forEach.default)(openCarts, (cart)=>{
                const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                    bubbles: true,
                    detail: {
                        open: false
                    }
                });
                cart.dispatchEvent(evt);
            });
        }
        // Spacebar
        // @ts-expect-error - TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
        if (event.keyCode === 32 && event.target instanceof HTMLElement) {
            // Flow was being a bit strange with typing and only assuming HTMLElement
            // the first time it was used. So setting it as a new variable here to
            // persist that type.
            const htmlElement = event.target;
            // Make sure element being checked is intended to work as a link or button and
            // is a child of `commerce-cart-wrapper`
            // This will prevent the keyboard trigger applying to elements that don't
            // belong to the Cart or otherwise shouldn't be interactable in this manner.
            if ((htmlElement.getAttribute('role') === 'button' || htmlElement.getAttribute('role') === 'link' || htmlElement.hasAttribute('href') || htmlElement.hasAttribute('onClick')) && (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, event.target) != null) {
                event.preventDefault();
                htmlElement.click();
            }
        }
    };
    const getCartContainer = (parent)=>(0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER, parent);
    const handleClickCloseCart = ({ target })=>{
        if (!(target instanceof Element)) {
            return;
        }
        const openCarts = Array.from(document.querySelectorAll(`[${_constants.CART_OPEN}]`));
        (0, _forEach.default)(openCarts, (cart)=>{
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            const cartContainer = getCartContainer(cart);
            const cartOpenButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK, cart);
            if (!(cartContainer instanceof Element) || !(cartOpenButton instanceof Element)) {
                return;
            }
            const cartType = cart.getAttribute(_constants.CART_TYPE);
            // on dropdown, we close if outside the cart is clicked, and on modal/sidebar, we close if outside the container or open button is clicked
            const isNotInside = cartType === LEFT_DROPDOWN || cartType === RIGHT_DROPDOWN ? !cart.contains(target) : !cartContainer.contains(target) && !cartOpenButton.contains(target);
            if (isNotInside) {
                const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                    bubbles: true,
                    detail: {
                        open: false
                    }
                });
                cart.dispatchEvent(evt);
            }
        });
    };
    const getFocusableElements = (container)=>{
        const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
        return [
            ...container.querySelectorAll(focusableElements)
        ].filter(// @ts-expect-error - TS2339 - Property 'offsetHeight' does not exist on type 'Element'.
        (element)=>!element.hasAttribute('disabled') && element.offsetHeight > 0);
    };
    const handleCartFocusTrap = (event)=>{
        // @ts-expect-error - TS2339 - Property 'key' does not exist on type 'Event | KeyboardEvent'. | TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
        if (event.key !== 'Tab' && event.keyCode !== 9) {
            return;
        }
        const openCarts = Array.from(document.querySelectorAll(`[${_constants.CART_OPEN}]`));
        (0, _forEach.default)(openCarts, (cart)=>{
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            const cartContainer = getCartContainer(cart);
            if (!(cartContainer instanceof Element)) {
                return;
            }
            const focusableContent = getFocusableElements(cartContainer);
            const firstFocusableElement = focusableContent[0];
            const lastFocusableElement = focusableContent[focusableContent.length - 1];
            // @ts-expect-error - TS2339 - Property 'shiftKey' does not exist on type 'Event | KeyboardEvent'.
            if (event.shiftKey) {
                if (document.activeElement === firstFocusableElement) {
                    // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                    lastFocusableElement.focus();
                    event.preventDefault();
                }
            } else {
                if (document.activeElement === lastFocusableElement) {
                    // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                    firstFocusableElement.focus();
                    event.preventDefault();
                }
            }
        });
    };
    const register = (handlerProxy)=>{
        handlerProxy.on('click', isItemRemovedEvent, handleItemRemoved);
        handlerProxy.on('change', isItemQuantityChangedEvent, handleItemQuantityChanged);
        handlerProxy.on('focus', isItemQuantityInputEvent, handleItemInputChanged);
        handlerProxy.on('click', isCartButtonEvent, handleCartButton);
        handlerProxy.on('click', isCartCheckoutButtonEvent, handleCartCheckoutButton);
        handlerProxy.on('mouseover', isCartButtonEvent, handleCartButton);
        handlerProxy.on(_constants.CHANGE_CART_EVENT, isCartWrapperEvent, handleChangeCartStateEvent);
        handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderCart);
        // Needed to avoid submission of cart form when only one item is in cart and user hits
        // enter key while in quantity input (acts as submit if only 1 input and no submit)
        handlerProxy.on('submit', isCartFormEvent, handleSubmitForm);
        handlerProxy.on('keyup', Boolean, handleCartKeyUp);
        handlerProxy.on('click', Boolean, handleClickCloseCart);
        // These events are for handling the back and forth between preview and designer
        // and must be registered directly to the window, otherwise they are not registered
        // when the canvas is created.
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            window.addEventListener('__wf_preview', handlePreviewMode);
            window.addEventListener('__wf_design', handleDesignMode);
        }
    };
    const _default = {
        register
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    69773: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        isCartOpen: function() {
            return isCartOpen;
        },
        showErrorMessageForError: function() {
            return showErrorMessageForError;
        }
    });
    const _constants = __webpack_require__(10873);
    const _commerceUtils = __webpack_require__(54556);
    const isCartOpen = ()=>{
        const cartContainerEl = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER);
        if (!cartContainerEl) return false;
        return window.getComputedStyle(cartContainerEl).display !== 'none';
    };
    const updateErrorMessage = (element, error)=>{
        const errorText = element.querySelector(_constants.CART_ERROR_MESSAGE_SELECTOR);
        if (!errorText) return;
        const errorType = getErrorType(error);
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly QUANTITY: { readonly id: "QUANTITY_ERROR"; readonly name: "Quantity not available"; readonly category: { readonly id: "GENERAL"; readonly label: "General Errors"; }; readonly copy: "Product is not available in this quantity."; readonly path: readonly [...]; }; readonly GENERAL: { ...; }; readonly CHECKOUT...'.
        const errorData = _constants.CART_ERRORS[errorType.toUpperCase()] || {};
        const defaultErrorMessage = errorData.msg;
        const errorMessage = errorText.getAttribute((0, _constants.getCheckoutErrorMessageForType)(errorType)) || defaultErrorMessage;
        errorText.textContent = errorMessage;
        if (errorData.requiresRefresh) {
            errorText.setAttribute(_constants.NEEDS_REFRESH, 'true');
        } else {
            errorText.removeAttribute(_constants.NEEDS_REFRESH);
        }
    };
    const errorCodeToCartErrorType = (code, msg)=>{
        switch(code){
            case 'OrderTotalRange':
                {
                    if (msg && msg.match(/too small/i)) {
                        return 'cart_order_min';
                    }
                    return 'general';
                }
            default:
                return 'general';
        }
    };
    const getErrorType = (error)=>{
        if (error.graphQLErrors && error.graphQLErrors.length > 0) {
            return errorCodeToCartErrorType(error.graphQLErrors[0].code, error.graphQLErrors[0].message);
        }
        if (error.code) {
            return errorCodeToCartErrorType(error.code, error.message);
        }
        return 'general';
    };
    const showErrorMessageForError = (err, scope)=>{
        const cartErrorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, scope);
        if (cartErrorState) {
            cartErrorState.style.removeProperty('display');
            updateErrorMessage(cartErrorState, err);
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcnRVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIHdpbmRvdyAqL1xuaW1wb3J0IHtcbiAgTk9ERV9UWVBFX0NPTU1FUkNFX0NBUlRfRVJST1IsXG4gIE5PREVfVFlQRV9DT01NRVJDRV9DQVJUX0NPTlRBSU5FUl9XUkFQUEVSLFxuICBDQVJUX0VSUk9SUyxcbiAgQ0FSVF9FUlJPUl9NRVNTQUdFX1NFTEVDVE9SLFxuICBnZXRDaGVja291dEVycm9yTWVzc2FnZUZvclR5cGUsXG4gIE5FRURTX1JFRlJFU0gsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2NvbW1lcmNlL2NvbnN0YW50cyc7XG5pbXBvcnQge2ZpbmRFbGVtZW50QnlOb2RlVHlwZX0gZnJvbSAnLi9jb21tZXJjZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGlzQ2FydE9wZW4gPSAoKSA9PiB7XG4gIGNvbnN0IGNhcnRDb250YWluZXJFbCA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0FSVF9DT05UQUlORVJfV1JBUFBFUlxuICApO1xuXG4gIGlmICghY2FydENvbnRhaW5lckVsKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNhcnRDb250YWluZXJFbCkuZGlzcGxheSAhPT0gJ25vbmUnO1xufTtcblxuY29uc3QgdXBkYXRlRXJyb3JNZXNzYWdlID0gKGVsZW1lbnQ6IEVsZW1lbnQsIGVycm9yOiBSZWNvcmQ8YW55LCBhbnk+KSA9PiB7XG4gIGNvbnN0IGVycm9yVGV4dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihDQVJUX0VSUk9SX01FU1NBR0VfU0VMRUNUT1IpO1xuICBpZiAoIWVycm9yVGV4dCkgcmV0dXJuO1xuXG4gIGNvbnN0IGVycm9yVHlwZSA9IGdldEVycm9yVHlwZShlcnJvcik7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzA1MyAtIEVsZW1lbnQgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZSBiZWNhdXNlIGV4cHJlc3Npb24gb2YgdHlwZSAnc3RyaW5nJyBjYW4ndCBiZSB1c2VkIHRvIGluZGV4IHR5cGUgJ3sgcmVhZG9ubHkgUVVBTlRJVFk6IHsgcmVhZG9ubHkgaWQ6IFwiUVVBTlRJVFlfRVJST1JcIjsgcmVhZG9ubHkgbmFtZTogXCJRdWFudGl0eSBub3QgYXZhaWxhYmxlXCI7IHJlYWRvbmx5IGNhdGVnb3J5OiB7IHJlYWRvbmx5IGlkOiBcIkdFTkVSQUxcIjsgcmVhZG9ubHkgbGFiZWw6IFwiR2VuZXJhbCBFcnJvcnNcIjsgfTsgcmVhZG9ubHkgY29weTogXCJQcm9kdWN0IGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBxdWFudGl0eS5cIjsgcmVhZG9ubHkgcGF0aDogcmVhZG9ubHkgWy4uLl07IH07IHJlYWRvbmx5IEdFTkVSQUw6IHsgLi4uOyB9OyByZWFkb25seSBDSEVDS09VVC4uLicuXG4gIGNvbnN0IGVycm9yRGF0YSA9IENBUlRfRVJST1JTW2Vycm9yVHlwZS50b1VwcGVyQ2FzZSgpXSB8fCB7fTtcbiAgY29uc3QgZGVmYXVsdEVycm9yTWVzc2FnZSA9IGVycm9yRGF0YS5tc2c7XG5cbiAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICBlcnJvclRleHQuZ2V0QXR0cmlidXRlKGdldENoZWNrb3V0RXJyb3JNZXNzYWdlRm9yVHlwZShlcnJvclR5cGUpKSB8fFxuICAgIGRlZmF1bHRFcnJvck1lc3NhZ2U7XG5cbiAgZXJyb3JUZXh0LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuXG4gIGlmIChlcnJvckRhdGEucmVxdWlyZXNSZWZyZXNoKSB7XG4gICAgZXJyb3JUZXh0LnNldEF0dHJpYnV0ZShORUVEU19SRUZSRVNILCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIGVycm9yVGV4dC5yZW1vdmVBdHRyaWJ1dGUoTkVFRFNfUkVGUkVTSCk7XG4gIH1cbn07XG5cbmNvbnN0IGVycm9yQ29kZVRvQ2FydEVycm9yVHlwZSA9IChjb2RlPzogc3RyaW5nLCBtc2c/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlICdPcmRlclRvdGFsUmFuZ2UnOiB7XG4gICAgICBpZiAobXNnICYmIG1zZy5tYXRjaCgvdG9vIHNtYWxsL2kpKSB7XG4gICAgICAgIHJldHVybiAnY2FydF9vcmRlcl9taW4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ2dlbmVyYWwnO1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ2dlbmVyYWwnO1xuICB9XG59O1xuXG5jb25zdCBnZXRFcnJvclR5cGUgPSAoZXJyb3I6IFJlY29yZDxhbnksIGFueT4pID0+IHtcbiAgaWYgKGVycm9yLmdyYXBoUUxFcnJvcnMgJiYgZXJyb3IuZ3JhcGhRTEVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGVycm9yQ29kZVRvQ2FydEVycm9yVHlwZShcbiAgICAgIGVycm9yLmdyYXBoUUxFcnJvcnNbMF0uY29kZSxcbiAgICAgIGVycm9yLmdyYXBoUUxFcnJvcnNbMF0ubWVzc2FnZVxuICAgICk7XG4gIH1cblxuICBpZiAoZXJyb3IuY29kZSkge1xuICAgIHJldHVybiBlcnJvckNvZGVUb0NhcnRFcnJvclR5cGUoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gJ2dlbmVyYWwnO1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dFcnJvck1lc3NhZ2VGb3JFcnJvciA9IChcbiAgZXJyOiBSZWNvcmQ8YW55LCBhbnk+LFxuICBzY29wZT86IEVsZW1lbnQgfCBEb2N1bWVudFxuKSA9PiB7XG4gIGNvbnN0IGNhcnRFcnJvclN0YXRlID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DQVJUX0VSUk9SLFxuICAgIHNjb3BlXG4gICk7XG4gIGlmIChjYXJ0RXJyb3JTdGF0ZSkge1xuICAgIGNhcnRFcnJvclN0YXRlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4gICAgdXBkYXRlRXJyb3JNZXNzYWdlKGNhcnRFcnJvclN0YXRlLCBlcnIpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImlzQ2FydE9wZW4iLCJzaG93RXJyb3JNZXNzYWdlRm9yRXJyb3IiLCJjYXJ0Q29udGFpbmVyRWwiLCJmaW5kRWxlbWVudEJ5Tm9kZVR5cGUiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0FSVF9DT05UQUlORVJfV1JBUFBFUiIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwidXBkYXRlRXJyb3JNZXNzYWdlIiwiZWxlbWVudCIsImVycm9yIiwiZXJyb3JUZXh0IiwicXVlcnlTZWxlY3RvciIsIkNBUlRfRVJST1JfTUVTU0FHRV9TRUxFQ1RPUiIsImVycm9yVHlwZSIsImdldEVycm9yVHlwZSIsImVycm9yRGF0YSIsIkNBUlRfRVJST1JTIiwidG9VcHBlckNhc2UiLCJkZWZhdWx0RXJyb3JNZXNzYWdlIiwibXNnIiwiZXJyb3JNZXNzYWdlIiwiZ2V0QXR0cmlidXRlIiwiZ2V0Q2hlY2tvdXRFcnJvck1lc3NhZ2VGb3JUeXBlIiwidGV4dENvbnRlbnQiLCJyZXF1aXJlc1JlZnJlc2giLCJzZXRBdHRyaWJ1dGUiLCJORUVEU19SRUZSRVNIIiwicmVtb3ZlQXR0cmlidXRlIiwiZXJyb3JDb2RlVG9DYXJ0RXJyb3JUeXBlIiwiY29kZSIsIm1hdGNoIiwiZ3JhcGhRTEVycm9ycyIsImxlbmd0aCIsIm1lc3NhZ2UiLCJlcnIiLCJzY29wZSIsImNhcnRFcnJvclN0YXRlIiwiTk9ERV9UWVBFX0NPTU1FUkNFX0NBUlRfRVJST1IiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0I7Ozs7Ozs7Ozs7O0lBV0xBLFVBQVU7ZUFBVkE7O0lBK0RBQyx3QkFBd0I7ZUFBeEJBOzs7MkJBbEVOOytCQUM2QjtBQUU3QixNQUFNRCxhQUFhO0lBQ3hCLE1BQU1FLGtCQUFrQkMsSUFBQUEsb0NBQXFCLEVBQzNDQyxvREFBeUM7SUFHM0MsSUFBSSxDQUFDRixpQkFBaUIsT0FBTztJQUU3QixPQUFPRyxPQUFPQyxnQkFBZ0IsQ0FBQ0osaUJBQWlCSyxPQUFPLEtBQUs7QUFDOUQ7QUFFQSxNQUFNQyxxQkFBcUIsQ0FBQ0MsU0FBa0JDO0lBQzVDLE1BQU1DLFlBQVlGLFFBQVFHLGFBQWEsQ0FBQ0Msc0NBQTJCO0lBQ25FLElBQUksQ0FBQ0YsV0FBVztJQUVoQixNQUFNRyxZQUFZQyxhQUFhTDtJQUUvQix1Y0FBdWM7SUFDdmMsTUFBTU0sWUFBWUMsc0JBQVcsQ0FBQ0gsVUFBVUksV0FBVyxHQUFHLElBQUksQ0FBQztJQUMzRCxNQUFNQyxzQkFBc0JILFVBQVVJLEdBQUc7SUFFekMsTUFBTUMsZUFDSlYsVUFBVVcsWUFBWSxDQUFDQyxJQUFBQSx5Q0FBOEIsRUFBQ1QsZUFDdERLO0lBRUZSLFVBQVVhLFdBQVcsR0FBR0g7SUFFeEIsSUFBSUwsVUFBVVMsZUFBZSxFQUFFO1FBQzdCZCxVQUFVZSxZQUFZLENBQUNDLHdCQUFhLEVBQUU7SUFDeEMsT0FBTztRQUNMaEIsVUFBVWlCLGVBQWUsQ0FBQ0Qsd0JBQWE7SUFDekM7QUFDRjtBQUVBLE1BQU1FLDJCQUEyQixDQUFDQyxNQUFlVjtJQUMvQyxPQUFRVTtRQUNOLEtBQUs7WUFBbUI7Z0JBQ3RCLElBQUlWLE9BQU9BLElBQUlXLEtBQUssQ0FBQyxlQUFlO29CQUNsQyxPQUFPO2dCQUNUO2dCQUVBLE9BQU87WUFDVDtRQUVBO1lBQ0UsT0FBTztJQUNYO0FBQ0Y7QUFFQSxNQUFNaEIsZUFBZSxDQUFDTDtJQUNwQixJQUFJQSxNQUFNc0IsYUFBYSxJQUFJdEIsTUFBTXNCLGFBQWEsQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7UUFDekQsT0FBT0oseUJBQ0xuQixNQUFNc0IsYUFBYSxDQUFDLEVBQUUsQ0FBQ0YsSUFBSSxFQUMzQnBCLE1BQU1zQixhQUFhLENBQUMsRUFBRSxDQUFDRSxPQUFPO0lBRWxDO0lBRUEsSUFBSXhCLE1BQU1vQixJQUFJLEVBQUU7UUFDZCxPQUFPRCx5QkFBeUJuQixNQUFNb0IsSUFBSSxFQUFFcEIsTUFBTXdCLE9BQU87SUFDM0Q7SUFFQSxPQUFPO0FBQ1Q7QUFFTyxNQUFNakMsMkJBQTJCLENBQ3RDa0MsS0FDQUM7SUFFQSxNQUFNQyxpQkFBaUJsQyxJQUFBQSxvQ0FBcUIsRUFDMUNtQyx3Q0FBNkIsRUFDN0JGO0lBRUYsSUFBSUMsZ0JBQWdCO1FBQ2xCQSxlQUFlRSxLQUFLLENBQUNDLGNBQWMsQ0FBQztRQUNwQ2hDLG1CQUFtQjZCLGdCQUFnQkY7SUFDckM7QUFDRiJ9
    
    }),
    82333: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window, Element, CustomEvent, HTMLElement */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        default: function() {
            return _default;
        },
        register: function() {
            return register;
        }
    });
    const _debounce = /*#__PURE__*/ _interop_require_default(__webpack_require__(18305));
    const _constants = __webpack_require__(10873);
    const _commerceUtils = __webpack_require__(54556);
    const _checkoutUtils = __webpack_require__(17696);
    const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isInputInsideCustomerInfoEvent = ({ target })=>{
        // ensures this event's logic doesn't run on non-checkout pages
        const checkoutFormContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
        if (!checkoutFormContainer) {
            return false;
        }
        const customerInfoWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER, target);
        if (customerInfoWrapper && target instanceof Element && target.tagName === 'INPUT') {
            return target;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isInputInsideAddressWrapperEvent = ({ target })=>{
        // ensures this event's logic doesn't run on non-checkout pages
        const checkoutFormContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
        if (!checkoutFormContainer || !(target instanceof Element)) {
            return false;
        }
        const shippingAddressWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, target);
        const billingAddressWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, target);
        if (shippingAddressWrapper) {
            return shippingAddressWrapper;
        } else if (billingAddressWrapper) {
            return billingAddressWrapper;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isInputInsideShippingMethodEvent = ({ target })=>{
        // ensures this event's logic doesn't run on non-checkout pages
        const checkoutFormContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER) || (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER);
        if (!checkoutFormContainer) {
            return false;
        }
        const shippingMethodWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, target);
        if (shippingMethodWrapper && target instanceof Element && target.tagName === 'INPUT') {
            return target;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isBillingAddressToggleEvent = ({ target })=>{
        if (target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX) {
            return target;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isPlaceOrderButtonEvent = ({ target })=>{
        const placeOrderButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, target);
        if (placeOrderButton && target instanceof Element) {
            return target;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isApplyDiscountFormEvent = ({ target })=>{
        if (target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM) {
            return target;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isFormInsideCheckoutContainerEvent = ({ target })=>{
        const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, target);
        if (target instanceof HTMLFormElement && checkoutForm) {
            return target;
        } else {
            return false;
        }
    };
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isInputInsideCheckoutFormEvent = ({ target })=>{
        const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, target);
        if (target instanceof HTMLInputElement && checkoutForm) {
            return target;
        } else {
            return false;
        }
    };
    const handleRenderCheckout = (event, apolloClient, stripeStore)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
            return;
        }
        const errors = [];
        const { detail } = event;
        if (detail != null && detail.error) {
            errors.push(detail.error);
        }
        const focusedEle = window.document.activeElement;
        const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'EventTarget'.
        focusedEle);
        let prevFocusedInput = null;
        // Only trigger for focused elements in a checkout form
        if (focusedEle instanceof HTMLInputElement && checkoutForm) {
            prevFocusedInput = focusedEle.id;
            if (!prevFocusedInput) {
                prevFocusedInput = focusedEle.getAttribute('data-wf-bindings');
            }
            // Move from empty string to null
            prevFocusedInput = prevFocusedInput ? null : prevFocusedInput;
        }
        const checkoutFormContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
        (0, _checkoutUtils.renderCheckoutFormContainers)(checkoutFormContainers, errors, apolloClient, stripeStore, prevFocusedInput);
    };
    const checkFormValidity = ({ customerInfo, shippingAddress, shippingInfo, billingAddress, billingAddressToggle, additionalInfo, requiresShipping })=>{
        // reportValidity isn't supported in IE, so we need to check if it exists
        // for our IE users. they'll have to rely on the server error, which isn't
        // too bad from a UX experience, since they'll still know something went wrong
        if (!HTMLFormElement.prototype.reportValidity) {
            return true;
        }
        // because we have multiple form elements, what we do is ask the browser to report
        // the validity of each form, which triggers the UI that would usually be seen
        // when someone submitted a regular form. we return if it's not valid, so that
        // the browser doesn't jump ahead to the next element, allowing the user to
        // fix their mistakes. we don't check the stripe elements, since we can't
        // directly get the status of those, as that's handled by stripe. however, if
        // the user is missing a field and tries to submit the form, they will get
        // an error when we try to create the token, so we'll display an error then
        if (!customerInfo.reportValidity() || requiresShipping && !shippingAddress.reportValidity() || requiresShipping && !shippingInfo.reportValidity() || // only check the billing address if the toggle is off, i.e. the billing address
        // form is being shown or if it does not require shipping
        (!requiresShipping || !billingAddressToggle.checked) && !billingAddress.reportValidity() || additionalInfo && additionalInfo instanceof HTMLFormElement && !additionalInfo.reportValidity()) {
            return false;
        }
        return true;
    };
    let placingOrder = false;
    const startOrderFlow = (placeOrderButton)=>{
        placingOrder = true;
        window.addEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
        const buttonText = placeOrderButton.innerHTML;
        const loadingText = placeOrderButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
        placeOrderButton.innerHTML = loadingText ? loadingText : _constants.CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT;
        const finishOrderFlow = (isRedirecting = false)=>{
            // we only set `placingOrder` to false if we're not redirecting to the
            // confirmation page. this is so that while waiting for the confirmation
            // page to load, the user can't attempt to submit the order again
            if (!isRedirecting) {
                placingOrder = false;
            }
            window.removeEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
            placeOrderButton.innerHTML = buttonText ? buttonText : _constants.CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT;
        };
        return finishOrderFlow;
    };
    const handlePlaceOrder = (event, apolloClient, stripeStore)=>{
        // Want to skip placing order if in design/preview mode, or an order place is in progress
        if (window.Webflow.env('design') || window.Webflow.env('preview') || placingOrder) {
            return;
        }
        const { currentTarget } = event;
        if (!(currentTarget instanceof Element)) {
            return;
        }
        const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, currentTarget);
        if (!(checkoutFormContainer instanceof Element)) {
            return;
        }
        const errorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE, checkoutFormContainer);
        const customerInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER, checkoutFormContainer);
        const shippingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, checkoutFormContainer);
        const shippingInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, checkoutFormContainer);
        const billingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkoutFormContainer);
        const billingAddressToggle = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX, checkoutFormContainer);
        const placeOrderButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, checkoutFormContainer);
        const additionalInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO, checkoutFormContainer);
        if (!(errorState instanceof HTMLElement) || !(customerInfo instanceof HTMLFormElement) || !(shippingAddress instanceof HTMLFormElement) || !(shippingInfo instanceof HTMLFormElement) || !(billingAddress instanceof HTMLFormElement) || !(billingAddressToggle instanceof HTMLInputElement) || !(placeOrderButton instanceof Element)) {
            return;
        }
        const errorMessage = errorState.querySelector(_constants.CART_CHECKOUT_ERROR_MESSAGE_SELECTOR);
        // If the error message has this attribute, we want to block the order from
        // being submitted as the user is being forced to refresh the checkout page.
        if (errorMessage && errorMessage.hasAttribute(_constants.NEEDS_REFRESH)) {
            return;
        }
        const hasAdditionalInfo = additionalInfo && additionalInfo instanceof HTMLElement;
        const finishOrderFlow = startOrderFlow(placeOrderButton);
        errorState.style.setProperty('display', 'none');
        (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping, isFreeOrder })=>{
            const isFormValid = checkFormValidity({
                customerInfo,
                shippingAddress,
                shippingInfo,
                billingAddress,
                billingAddressToggle,
                additionalInfo,
                requiresShipping
            });
            if (!isFormValid) {
                finishOrderFlow();
                return;
            }
            // final sync with server, to ensure validity
            const customerInfoFormData = (0, _commerceUtils.formToObject)(customerInfo);
            const email = String(customerInfoFormData.email).trim();
            const shippingAddressInfo = {
                type: 'shipping',
                ...(0, _commerceUtils.formToObject)(shippingAddress, true)
            };
            const billingAddressInfo = {
                type: 'billing',
                ...(0, _commerceUtils.formToObject)(!billingAddressToggle.checked || !requiresShipping ? billingAddress : shippingAddress, true)
            };
            const stripeBillingAddressInfo = {
                billing_details: {
                    // @ts-expect-error - TS2339 - Property 'name' does not exist on type '{ readonly type: "billing"; }'.
                    name: billingAddressInfo.name,
                    email,
                    address: {
                        // @ts-expect-error - TS2339 - Property 'address_line1' does not exist on type '{ readonly type: "billing"; }'.
                        line1: billingAddressInfo.address_line1,
                        // @ts-expect-error - TS2339 - Property 'address_line2' does not exist on type '{ readonly type: "billing"; }'.
                        line2: billingAddressInfo.address_line2,
                        // @ts-expect-error - TS2339 - Property 'address_city' does not exist on type '{ readonly type: "billing"; }'.
                        city: billingAddressInfo.address_city,
                        // @ts-expect-error - TS2339 - Property 'address_state' does not exist on type '{ readonly type: "billing"; }'.
                        state: billingAddressInfo.address_state,
                        // @ts-expect-error - TS2339 - Property 'address_country' does not exist on type '{ readonly type: "billing"; }'.
                        country: billingAddressInfo.address_country,
                        // @ts-expect-error - TS2339 - Property 'address_zip' does not exist on type '{ readonly type: "billing"; }'.
                        postal_code: billingAddressInfo.address_zip
                    }
                }
            };
            let shippingMethodId = '';
            // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
            if (requiresShipping && shippingInfo.elements['shipping-method-choice']) {
                // this is an IE11-safe way of just doing shippingInfo.elements['shipping-method-choice'].value
                const shippingMethodChoice = shippingInfo.querySelector('input[name="shipping-method-choice"]:checked');
                // this should never be falsey, but Flow
                if (shippingMethodChoice) {
                    shippingMethodId = shippingMethodChoice.value;
                }
            }
            const customData = hasAdditionalInfo ? (0, _commerceUtils.customDataFormToArray)(additionalInfo) : [];
            const syncCheckoutForm = Promise.all([
                (0, _checkoutUtils.createOrderIdentityMutation)(apolloClient, email),
                (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, billingAddressInfo),
                requiresShipping ? (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, shippingAddressInfo) : Promise.resolve(),
                requiresShipping ? (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, shippingMethodId) : Promise.resolve(),
                hasAdditionalInfo ? (0, _checkoutUtils.createCustomDataMutation)(apolloClient, customData) : Promise.resolve()
            ]);
            syncCheckoutForm.then(()=>{
                if (isFreeOrder) {
                    return Promise.resolve();
                }
                if (!stripeStore.isInitialized()) {
                    return Promise.reject(new Error("Stripe has not been set up for this project â€“ Go to the project's Ecommerce Payment settings in the Designer to link Stripe."));
                }
                const stripe = stripeStore.getStripeInstance();
                const checkoutFormInstance = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
                checkoutFormContainer.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
                const card = stripeStore.getElement('cardNumber', checkoutFormInstance);
                return stripe.createPaymentMethod('card', card, stripeBillingAddressInfo);
            })// @ts-expect-error - Argument of type '(data: any) => Promise<FetchResult<any>> | Promise<void>' is not assignable to parameter of type '(value: any) => FetchResult<any> | PromiseLike<FetchResult<any>>'.
            .then((data)=>{
                if (!data || isFreeOrder) {
                    return Promise.resolve();
                }
                if (data.error) {
                    return Promise.reject(data.error);
                }
                return (0, _checkoutUtils.createStripePaymentMethodMutation)(apolloClient, data.paymentMethod.id);
            }).then(()=>{
                return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                    checkoutType: 'normal'
                });
            }).then((data)=>{
                _debug.default.log(data);
                const order = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(data);
                if ((0, _checkoutUtils.orderRequiresAdditionalAction)(order.status)) {
                    const stripe = stripeStore.getStripeInstance();
                    return stripe.retrievePaymentIntent(order.clientSecret)// @ts-expect-error - TS7006 - Parameter 'retrieveResult' implicitly has an 'any' type.
                    .then((retrieveResult)=>{
                        const intent = retrieveResult && retrieveResult.paymentIntent || {};
                        const actionPromise = intent.confirmation_method === 'automatic' ? stripe.confirmCardPayment(order.clientSecret) : stripe.handleCardAction(order.clientSecret);
                        // @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type.
                        return actionPromise.then((result)=>{
                            if (result.error) {
                                return Promise.reject(result.error);
                            }
                            return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                                checkoutType: 'normal',
                                paymentIntentId: result.paymentIntent.id
                            }).then((resp)=>{
                                const finishedOrder = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(resp);
                                if (finishedOrder.ok) {
                                    finishOrderFlow(true);
                                    (0, _checkoutUtils.redirectToOrderConfirmation)(finishedOrder);
                                }
                            });
                        });
                    });
                }
                if (order.ok) {
                    finishOrderFlow(true);
                    (0, _checkoutUtils.redirectToOrderConfirmation)(order);
                }
            }).catch((err)=>{
                finishOrderFlow();
                _debug.default.error(err);
                errorState.style.removeProperty('display');
                (0, _checkoutUtils.updateErrorMessage)(errorState, err);
            });
        });
    };
    // @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
    const handleApplyDiscount = (event, apolloClient)=>{
        event.preventDefault(); // prevent submit
        event.stopImmediatePropagation(); // do not trigger submission of any other forms (we have forms in forms :())
        const { currentTarget } = event;
        if (!(currentTarget instanceof Element)) {
            return;
        }
        const inputEl = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT, currentTarget);
        const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, currentTarget) || (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER, currentTarget);
        if (!checkoutFormContainer) {
            return;
        }
        const errorStateEl = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE, checkoutFormContainer);
        if (!(inputEl instanceof HTMLInputElement && errorStateEl instanceof HTMLElement)) {
            return;
        }
        const discountCode = inputEl.value.trim().toUpperCase();
        (0, _checkoutUtils.applyDiscount)(apolloClient, {
            discountCode
        }).then(()=>{
            inputEl.value = '';
            errorStateEl.style.display = 'none';
            (0, _commerceUtils.triggerRender)(null);
        }).catch((error)=>(0, _checkoutUtils.showErrorMessageForError)(error, checkoutFormContainer));
    };
    // @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
    const handleUpdateCustomerInfo = (event, apolloClient)=>{
        const { currentTarget } = event;
        if (!(currentTarget instanceof HTMLInputElement)) {
            return;
        }
        const value = currentTarget.value.trim();
        const email = value == null || value === '' ? null : value;
        (0, _checkoutUtils.createOrderIdentityMutation)(apolloClient, email).then(()=>{
            (0, _commerceUtils.triggerRender)(null);
        }).catch((err)=>{
            (0, _commerceUtils.triggerRender)(err);
        });
    };
    const handleUpdateAddress = (0, _debounce.default)((event, apolloClient)=>{
        const { currentTarget } = event;
        if (!(currentTarget instanceof HTMLFormElement)) {
            return;
        }
        const type = currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER ? 'shipping' : 'billing';
        const addressInfo = {
            type,
            ...(0, _commerceUtils.formToObject)(currentTarget, true)
        };
        (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, addressInfo).then(()=>{
            (0, _commerceUtils.triggerRender)(null);
        }).catch((err)=>{
            (0, _commerceUtils.triggerRender)(err);
        });
    }, 500);
    // @ts-expect-error - TS7031 - Binding element 'currentTarget' implicitly has an 'any' type.
    const handleToggleBillingAddress = ({ currentTarget })=>{
        const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, currentTarget);
        if (!checkoutFormContainer) {
            return;
        }
        const billingAddressWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkoutFormContainer);
        if (!billingAddressWrapper || !(currentTarget instanceof HTMLInputElement)) {
            return;
        }
        if (currentTarget.checked) {
            billingAddressWrapper.style.setProperty('display', 'none');
        } else {
            billingAddressWrapper.style.removeProperty('display');
        }
    };
    const handleChooseShippingMethod = (// @ts-expect-error - TS7031 - Binding element 'currentTarget' implicitly has an 'any' type.
    { currentTarget }, apolloClient)=>{
        if (!(currentTarget instanceof HTMLInputElement)) {
            return;
        }
        (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, currentTarget.id).then(()=>{
            (0, _commerceUtils.triggerRender)(null);
        }).catch((err)=>{
            (0, _commerceUtils.triggerRender)(err);
        });
    };
    const handleSubmitFormInsideCheckoutContainer = (event, apolloClient)=>{
        if (event.type === 'submit') {
            event.preventDefault();
        }
        if (// @ts-expect-error - TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
        event.type === 'keyup' && event.keyCode !== 13 || !(event.currentTarget instanceof Element)) {
            return;
        }
        if (event.target === (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT)) {
            return;
        }
        const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, event.currentTarget);
        if (!(checkoutFormContainer instanceof Element)) {
            return;
        }
        const customerInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER, checkoutFormContainer);
        const shippingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, checkoutFormContainer);
        const shippingInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, checkoutFormContainer);
        const billingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkoutFormContainer);
        const billingAddressToggle = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX, checkoutFormContainer);
        const additionalInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO, checkoutFormContainer);
        if (!(customerInfo instanceof HTMLFormElement) || !(shippingAddress instanceof HTMLFormElement) || !(shippingInfo instanceof HTMLFormElement) || !(billingAddress instanceof HTMLFormElement) || !(billingAddressToggle instanceof HTMLInputElement)) {
            return;
        }
        const hasAdditionalInfo = additionalInfo && additionalInfo instanceof HTMLFormElement;
        (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping })=>{
            checkFormValidity({
                customerInfo,
                shippingAddress,
                shippingInfo,
                billingAddress,
                billingAddressToggle,
                additionalInfo: hasAdditionalInfo ? additionalInfo : null,
                requiresShipping
            });
        });
    };
    const register = (handlerProxy)=>{
        handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderCheckout);
        handlerProxy.on('click', isPlaceOrderButtonEvent, handlePlaceOrder);
        handlerProxy.on('keydown', isPlaceOrderButtonEvent, // eslint-disable-next-line @typescript-eslint/no-shadow
        (event, apolloClient, StripeStore)=>{
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 32) {
                // prevent scrolling on spacebar key press
                event.preventDefault();
            }
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 13) {
                // enter key press
                return handlePlaceOrder(event, apolloClient, StripeStore);
            }
        });
        handlerProxy.on('keyup', isPlaceOrderButtonEvent, // eslint-disable-next-line @typescript-eslint/no-shadow
        (event, apolloClient, StripeStore)=>{
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 32) {
                // spacebar key press
                return handlePlaceOrder(event, apolloClient, StripeStore);
            }
        });
        handlerProxy.on('submit', isApplyDiscountFormEvent, handleApplyDiscount);
        // we use blur events on the text inputs, and change event on the country select
        // so that we update faster (blur on a select element requires going into another field)
        handlerProxy.on('change', isInputInsideCustomerInfoEvent, handleUpdateCustomerInfo);
        handlerProxy.on('change', isInputInsideAddressWrapperEvent, handleUpdateAddress);
        handlerProxy.on('change', isBillingAddressToggleEvent, handleToggleBillingAddress);
        handlerProxy.on('change', isInputInsideShippingMethodEvent, handleChooseShippingMethod);
        handlerProxy.on('submit', isFormInsideCheckoutContainerEvent, handleSubmitFormInsideCheckoutContainer);
        // we have to add a keyup event for the enter key on forms to run the validity check
        // as forms with multiple inputs but no submit input don't fire the submit event
        // however we do still need that above submit check, as the email form only has one
        // input, and a browser will fire the submit event if the form has just one input
        // even if it has no submit input
        handlerProxy.on('keyup', isInputInsideCheckoutFormEvent, handleSubmitFormInsideCheckoutContainer);
    };
    const _default = {
        register
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    94797: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        applyDiscountMutation: function() {
            return applyDiscountMutation;
        },
        attemptSubmitOrderMutation: function() {
            return attemptSubmitOrderMutation;
        },
        estimateOrderTaxesMutation: function() {
            return estimateOrderTaxesMutation;
        },
        recalcOrderEstimationsMutation: function() {
            return recalcOrderEstimationsMutation;
        },
        requestPayPalOrderMutation: function() {
            return requestPayPalOrderMutation;
        },
        syncPayPalOrderInfo: function() {
            return syncPayPalOrderInfo;
        },
        updateCustomData: function() {
            return updateCustomData;
        },
        updateObfuscatedOrderAddressMutation: function() {
            return updateObfuscatedOrderAddressMutation;
        },
        updateOrderAddressMutation: function() {
            return updateOrderAddressMutation;
        },
        updateOrderIdentityMutation: function() {
            return updateOrderIdentityMutation;
        },
        updateOrderShippingMethodMutation: function() {
            return updateOrderShippingMethodMutation;
        },
        updateOrderStripePaymentMethodMutation: function() {
            return updateOrderStripePaymentMethodMutation;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const updateOrderIdentityMutation = (0, _graphqltag.default)`
      mutation CheckoutUpdateOrderIdentity($email: String) {
        ecommerceUpdateIdentity(email: $email) {
          ok
        }
      }
    `;
    const updateOrderAddressMutation = (0, _graphqltag.default)`
      mutation CheckoutUpdateOrderAddress(
        $type: String!
        $name: String
        $address_line1: String
        $address_line2: String
        $address_city: String
        $address_state: String
        $address_country: String
        $address_zip: String
      ) {
        ecommerceUpdateAddress(
          type: $type
          addressee: $name
          line1: $address_line1
          line2: $address_line2
          city: $address_city
          state: $address_state
          country: $address_country
          postalCode: $address_zip
        ) {
          ok
        }
      }
    `;
    const updateObfuscatedOrderAddressMutation = (0, _graphqltag.default)`
      mutation CheckoutUpdateObfuscatedOrderAddress(
        $type: String!
        $name: String
        $address_line1: String
        $address_line2: String
        $address_city: String
        $address_state: String
        $address_country: String
        $address_zip: String
      ) {
        ecommerceUpdateObfuscatedAddress(
          type: $type
          addressee: $name
          line1: $address_line1
          line2: $address_line2
          city: $address_city
          state: $address_state
          country: $address_country
          postalCode: $address_zip
        ) {
          ok
        }
      }
    `;
    const updateOrderShippingMethodMutation = (0, _graphqltag.default)`
      mutation CheckoutUpdateShippingMethod($id: String) {
        ecommerceUpdateShippingMethod(methodId: $id) {
          ok
        }
      }
    `;
    const updateOrderStripePaymentMethodMutation = (0, _graphqltag.default)`
      mutation CheckoutUpdateStripePaymentMethod($paymentMethod: String!) {
        ecommerceStoreStripePaymentMethod(paymentMethod: $paymentMethod) {
          ok
        }
      }
    `;
    const updateCustomData = (0, _graphqltag.default)`
      mutation CheckoutUpdateCustomData(
        $customData: [mutation_commerce_update_custom_data]!
      ) {
        ecommerceUpdateCustomData(customData: $customData) {
          ok
        }
      }
    `;
    const estimateOrderTaxesMutation = (0, _graphqltag.default)`
      mutation CheckoutEstimateOrderTaxes {
        ecommerceEstimateTaxes {
          ok
        }
      }
    `;
    const recalcOrderEstimationsMutation = (0, _graphqltag.default)`
      mutation CheckoutRecalcOrderEstimations {
        ecommerceRecalcEstimations {
          ok
        }
      }
    `;
    const requestPayPalOrderMutation = (0, _graphqltag.default)`
      mutation CheckoutRequestPayPalOrder {
        ecommercePaypalOrderRequest {
          orderId
        }
      }
    `;
    const syncPayPalOrderInfo = (0, _graphqltag.default)`
      mutation CheckoutSyncPayPalInfo {
        ecommerceSyncPaypalOrderInfoToWF {
          ok
        }
      }
    `;
    const attemptSubmitOrderMutation = (0, _graphqltag.default)`
      mutation CheckoutAttemptSubmitOrder(
        $checkoutType: mutation_commerce_checkout_type
        $paymentIntentId: String
      ) {
        ecommerceAttemptSubmitOrder(
          checkoutType: $checkoutType
          paymentIntentId: $paymentIntentId
        ) {
          orderId
          token
          ok
          customerPaid {
            decimalValue
            unit
          }
          purchasedItems {
            id
            name
            count
            price {
              decimalValue
            }
          }
          status
          clientSecret
          nextAction
        }
      }
    `;
    const applyDiscountMutation = (0, _graphqltag.default)`
      mutation CheckoutApplyDiscount($discountCode: String!) {
        ecommerceApplyDiscount(discountCode: $discountCode) {
          ok
        }
      }
    `;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrb3V0TXV0YXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlT3JkZXJJZGVudGl0eU11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFVwZGF0ZU9yZGVySWRlbnRpdHkoJGVtYWlsOiBTdHJpbmcpIHtcbiAgICBlY29tbWVyY2VVcGRhdGVJZGVudGl0eShlbWFpbDogJGVtYWlsKSB7XG4gICAgICBva1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZU9yZGVyQWRkcmVzc011dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFVwZGF0ZU9yZGVyQWRkcmVzcyhcbiAgICAkdHlwZTogU3RyaW5nIVxuICAgICRuYW1lOiBTdHJpbmdcbiAgICAkYWRkcmVzc19saW5lMTogU3RyaW5nXG4gICAgJGFkZHJlc3NfbGluZTI6IFN0cmluZ1xuICAgICRhZGRyZXNzX2NpdHk6IFN0cmluZ1xuICAgICRhZGRyZXNzX3N0YXRlOiBTdHJpbmdcbiAgICAkYWRkcmVzc19jb3VudHJ5OiBTdHJpbmdcbiAgICAkYWRkcmVzc196aXA6IFN0cmluZ1xuICApIHtcbiAgICBlY29tbWVyY2VVcGRhdGVBZGRyZXNzKFxuICAgICAgdHlwZTogJHR5cGVcbiAgICAgIGFkZHJlc3NlZTogJG5hbWVcbiAgICAgIGxpbmUxOiAkYWRkcmVzc19saW5lMVxuICAgICAgbGluZTI6ICRhZGRyZXNzX2xpbmUyXG4gICAgICBjaXR5OiAkYWRkcmVzc19jaXR5XG4gICAgICBzdGF0ZTogJGFkZHJlc3Nfc3RhdGVcbiAgICAgIGNvdW50cnk6ICRhZGRyZXNzX2NvdW50cnlcbiAgICAgIHBvc3RhbENvZGU6ICRhZGRyZXNzX3ppcFxuICAgICkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVPYmZ1c2NhdGVkT3JkZXJBZGRyZXNzTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0VXBkYXRlT2JmdXNjYXRlZE9yZGVyQWRkcmVzcyhcbiAgICAkdHlwZTogU3RyaW5nIVxuICAgICRuYW1lOiBTdHJpbmdcbiAgICAkYWRkcmVzc19saW5lMTogU3RyaW5nXG4gICAgJGFkZHJlc3NfbGluZTI6IFN0cmluZ1xuICAgICRhZGRyZXNzX2NpdHk6IFN0cmluZ1xuICAgICRhZGRyZXNzX3N0YXRlOiBTdHJpbmdcbiAgICAkYWRkcmVzc19jb3VudHJ5OiBTdHJpbmdcbiAgICAkYWRkcmVzc196aXA6IFN0cmluZ1xuICApIHtcbiAgICBlY29tbWVyY2VVcGRhdGVPYmZ1c2NhdGVkQWRkcmVzcyhcbiAgICAgIHR5cGU6ICR0eXBlXG4gICAgICBhZGRyZXNzZWU6ICRuYW1lXG4gICAgICBsaW5lMTogJGFkZHJlc3NfbGluZTFcbiAgICAgIGxpbmUyOiAkYWRkcmVzc19saW5lMlxuICAgICAgY2l0eTogJGFkZHJlc3NfY2l0eVxuICAgICAgc3RhdGU6ICRhZGRyZXNzX3N0YXRlXG4gICAgICBjb3VudHJ5OiAkYWRkcmVzc19jb3VudHJ5XG4gICAgICBwb3N0YWxDb2RlOiAkYWRkcmVzc196aXBcbiAgICApIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlT3JkZXJTaGlwcGluZ01ldGhvZE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFVwZGF0ZVNoaXBwaW5nTWV0aG9kKCRpZDogU3RyaW5nKSB7XG4gICAgZWNvbW1lcmNlVXBkYXRlU2hpcHBpbmdNZXRob2QobWV0aG9kSWQ6ICRpZCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVPcmRlclN0cmlwZVBheW1lbnRNZXRob2RNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gQ2hlY2tvdXRVcGRhdGVTdHJpcGVQYXltZW50TWV0aG9kKCRwYXltZW50TWV0aG9kOiBTdHJpbmchKSB7XG4gICAgZWNvbW1lcmNlU3RvcmVTdHJpcGVQYXltZW50TWV0aG9kKHBheW1lbnRNZXRob2Q6ICRwYXltZW50TWV0aG9kKSB7XG4gICAgICBva1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUN1c3RvbURhdGEgPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0VXBkYXRlQ3VzdG9tRGF0YShcbiAgICAkY3VzdG9tRGF0YTogW211dGF0aW9uX2NvbW1lcmNlX3VwZGF0ZV9jdXN0b21fZGF0YV0hXG4gICkge1xuICAgIGVjb21tZXJjZVVwZGF0ZUN1c3RvbURhdGEoY3VzdG9tRGF0YTogJGN1c3RvbURhdGEpIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgZXN0aW1hdGVPcmRlclRheGVzTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0RXN0aW1hdGVPcmRlclRheGVzIHtcbiAgICBlY29tbWVyY2VFc3RpbWF0ZVRheGVzIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgcmVjYWxjT3JkZXJFc3RpbWF0aW9uc011dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFJlY2FsY09yZGVyRXN0aW1hdGlvbnMge1xuICAgIGVjb21tZXJjZVJlY2FsY0VzdGltYXRpb25zIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgcmVxdWVzdFBheVBhbE9yZGVyTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0UmVxdWVzdFBheVBhbE9yZGVyIHtcbiAgICBlY29tbWVyY2VQYXlwYWxPcmRlclJlcXVlc3Qge1xuICAgICAgb3JkZXJJZFxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHN5bmNQYXlQYWxPcmRlckluZm8gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0U3luY1BheVBhbEluZm8ge1xuICAgIGVjb21tZXJjZVN5bmNQYXlwYWxPcmRlckluZm9Ub1dGIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgYXR0ZW1wdFN1Ym1pdE9yZGVyTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0QXR0ZW1wdFN1Ym1pdE9yZGVyKFxuICAgICRjaGVja291dFR5cGU6IG11dGF0aW9uX2NvbW1lcmNlX2NoZWNrb3V0X3R5cGVcbiAgICAkcGF5bWVudEludGVudElkOiBTdHJpbmdcbiAgKSB7XG4gICAgZWNvbW1lcmNlQXR0ZW1wdFN1Ym1pdE9yZGVyKFxuICAgICAgY2hlY2tvdXRUeXBlOiAkY2hlY2tvdXRUeXBlXG4gICAgICBwYXltZW50SW50ZW50SWQ6ICRwYXltZW50SW50ZW50SWRcbiAgICApIHtcbiAgICAgIG9yZGVySWRcbiAgICAgIHRva2VuXG4gICAgICBva1xuICAgICAgY3VzdG9tZXJQYWlkIHtcbiAgICAgICAgZGVjaW1hbFZhbHVlXG4gICAgICAgIHVuaXRcbiAgICAgIH1cbiAgICAgIHB1cmNoYXNlZEl0ZW1zIHtcbiAgICAgICAgaWRcbiAgICAgICAgbmFtZVxuICAgICAgICBjb3VudFxuICAgICAgICBwcmljZSB7XG4gICAgICAgICAgZGVjaW1hbFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YXR1c1xuICAgICAgY2xpZW50U2VjcmV0XG4gICAgICBuZXh0QWN0aW9uXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgYXBwbHlEaXNjb3VudE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dEFwcGx5RGlzY291bnQoJGRpc2NvdW50Q29kZTogU3RyaW5nISkge1xuICAgIGVjb21tZXJjZUFwcGx5RGlzY291bnQoZGlzY291bnRDb2RlOiAkZGlzY291bnRDb2RlKSB7XG4gICAgICBva1xuICAgIH1cbiAgfVxuYDtcbiJdLCJuYW1lcyI6WyJhcHBseURpc2NvdW50TXV0YXRpb24iLCJhdHRlbXB0U3VibWl0T3JkZXJNdXRhdGlvbiIsImVzdGltYXRlT3JkZXJUYXhlc011dGF0aW9uIiwicmVjYWxjT3JkZXJFc3RpbWF0aW9uc011dGF0aW9uIiwicmVxdWVzdFBheVBhbE9yZGVyTXV0YXRpb24iLCJzeW5jUGF5UGFsT3JkZXJJbmZvIiwidXBkYXRlQ3VzdG9tRGF0YSIsInVwZGF0ZU9iZnVzY2F0ZWRPcmRlckFkZHJlc3NNdXRhdGlvbiIsInVwZGF0ZU9yZGVyQWRkcmVzc011dGF0aW9uIiwidXBkYXRlT3JkZXJJZGVudGl0eU11dGF0aW9uIiwidXBkYXRlT3JkZXJTaGlwcGluZ01ldGhvZE11dGF0aW9uIiwidXBkYXRlT3JkZXJTdHJpcGVQYXltZW50TWV0aG9kTXV0YXRpb24iLCJncWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBdUphQSxxQkFBcUI7ZUFBckJBOztJQS9CQUMsMEJBQTBCO2VBQTFCQTs7SUFoQ0FDLDBCQUEwQjtlQUExQkE7O0lBUUFDLDhCQUE4QjtlQUE5QkE7O0lBUUFDLDBCQUEwQjtlQUExQkE7O0lBUUFDLG1CQUFtQjtlQUFuQkE7O0lBbENBQyxnQkFBZ0I7ZUFBaEJBOztJQTFDQUMsb0NBQW9DO2VBQXBDQTs7SUExQkFDLDBCQUEwQjtlQUExQkE7O0lBUkFDLDJCQUEyQjtlQUEzQkE7O0lBNERBQyxpQ0FBaUM7ZUFBakNBOztJQVFBQyxzQ0FBc0M7ZUFBdENBOzs7bUVBdEVHOzs7Ozs7QUFFVCxNQUFNRiw4QkFBOEJHLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTS9DLENBQUM7QUFFTSxNQUFNSiw2QkFBNkJJLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0I5QyxDQUFDO0FBRU0sTUFBTUwsdUNBQXVDSyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCeEQsQ0FBQztBQUVNLE1BQU1GLG9DQUFvQ0UsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7QUFNckQsQ0FBQztBQUVNLE1BQU1ELHlDQUF5Q0MsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7QUFNMUQsQ0FBQztBQUVNLE1BQU1OLG1CQUFtQk0sSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7OztBQVFwQyxDQUFDO0FBRU0sTUFBTVYsNkJBQTZCVSxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU05QyxDQUFDO0FBRU0sTUFBTVQsaUNBQWlDUyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU1sRCxDQUFDO0FBRU0sTUFBTVIsNkJBQTZCUSxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU05QyxDQUFDO0FBRU0sTUFBTVAsc0JBQXNCTyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU12QyxDQUFDO0FBRU0sTUFBTVgsNkJBQTZCVyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkI5QyxDQUFDO0FBRU0sTUFBTVosd0JBQXdCWSxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU16QyxDQUFDIn0=
    
    }),
    17696: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window, document, HTMLInputElement */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        applyDiscount: function() {
            return applyDiscount;
        },
        beforeUnloadHandler: function() {
            return beforeUnloadHandler;
        },
        createAttemptSubmitOrderRequest: function() {
            return createAttemptSubmitOrderRequest;
        },
        createCustomDataMutation: function() {
            return createCustomDataMutation;
        },
        createOrderAddressMutation: function() {
            return createOrderAddressMutation;
        },
        createOrderIdentityMutation: function() {
            return createOrderIdentityMutation;
        },
        createOrderShippingMethodMutation: function() {
            return createOrderShippingMethodMutation;
        },
        createRecalcOrderEstimationsMutation: function() {
            return createRecalcOrderEstimationsMutation;
        },
        createStripePaymentMethodMutation: function() {
            return createStripePaymentMethodMutation;
        },
        createUpdateObfuscatedOrderAddressMutation: function() {
            return createUpdateObfuscatedOrderAddressMutation;
        },
        getOrderDataFromGraphQLResponse: function() {
            return getOrderDataFromGraphQLResponse;
        },
        initializeStripeElements: function() {
            return initializeStripeElements;
        },
        orderRequiresAdditionalAction: function() {
            return orderRequiresAdditionalAction;
        },
        redirectToOrderConfirmation: function() {
            return redirectToOrderConfirmation;
        },
        renderCheckoutFormContainers: function() {
            return renderCheckoutFormContainers;
        },
        showErrorMessageForError: function() {
            return showErrorMessageForError;
        },
        updateErrorMessage: function() {
            return updateErrorMessage;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    const _commerceUtils = __webpack_require__(54556);
    const _StyleMapObserver = /*#__PURE__*/ _interop_require_default(__webpack_require__(69147));
    const _constants = __webpack_require__(10873);
    const _rendering = __webpack_require__(91898);
    const _webPaymentsEvents = __webpack_require__(94492);
    const _checkoutMutations = __webpack_require__(94797);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const syncStylesToStripeElement = (stripeElement)=>(appliedStyles)=>{
            stripeElement.update({
                style: _StyleMapObserver.default.appliedStylesToStripeElementStyles(appliedStyles)
            });
        };
    const initializeStripeElements = (store)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview') || !store.isInitialized()) {
            return;
        }
        const checkoutFormContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
        const cartWrappers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER);
        const allStripeElements = [
            ...checkoutFormContainers,
            ...cartWrappers
        ];
        allStripeElements.forEach((element, index)=>{
            store.createElementsInstance(index);
            element.setAttribute(_constants.STRIPE_ELEMENT_INSTANCE, String(index));
        });
        const stripeElements = document.querySelectorAll(`[${_constants.STRIPE_ELEMENT_TYPE}]`);
        Array.from(stripeElements).forEach((element)=>{
            const type = element.getAttribute(_constants.STRIPE_ELEMENT_TYPE);
            if (!type) {
                throw new Error('Stripe element missing type string');
            }
            const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, element);
            if (!checkoutFormContainer) {
                return;
            }
            const index = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
            checkoutFormContainer.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
            const el = store.createElement(type, index, {
                style: (0, _commerceUtils.safeParseJson)(element.getAttribute(_constants.STRIPE_ELEMENT_STYLE) || '{}'),
                classes: {
                    focus: '-wfp-focus'
                }
            });
            el.mount(element);
            // eslint-disable-next-line unused-imports/no-unused-vars, unused-imports/no-unused-vars
            const styleMapObserver = new _StyleMapObserver.default(element, {
                onChange: syncStylesToStripeElement(el)
            });
        });
    };
    const errorCodeToCheckoutErrorType = (code, msg)=>{
        switch(code){
            case 'OrderTotalRange':
                if (msg && msg.match(/too small/i)) {
                    return 'minimum';
                } else {
                    return 'info';
                }
            case 'OrderExtrasChanged':
                return 'extras';
            case 'PriceChanged':
                return 'pricing';
            case 'StripeRejected':
                return 'billing';
            case 'NeedShippingAddress':
            case 'InvalidShippingAddress':
            case 'NeedShippingMethod':
                return 'shipping';
            case 'NeedPaymentMethod':
            case 'StripeFailure':
                return 'payment';
            case 'ItemNotFound':
                return 'product';
            // 'InvalidDiscount' has been renamed to 'DiscountInvalid', but it needs
            // to be listed here to support sites that haven't been published since this change.
            case 'InvalidDiscount':
            case 'DiscountInvalid':
            case 'DiscountDoesNotExist':
                {
                    return 'invalid-discount';
                }
            case 'DiscountExpired':
                {
                    return 'expired-discount';
                }
            case 'DiscountUsageReached':
                {
                    return 'usage-reached-discount';
                }
            case 'DiscountRequirementsNotMet':
                {
                    return 'requirements-not-met';
                }
            default:
                return 'info';
        }
    };
    const getErrorType = (error)=>{
        if (error.graphQLErrors && error.graphQLErrors.length > 0) {
            return errorCodeToCheckoutErrorType(error.graphQLErrors[0].extensions?.code, error.graphQLErrors[0].message);
        }
        if (error.code) {
            return errorCodeToCheckoutErrorType(error.code, error.message);
        }
        return 'info';
    };
    const updateErrorMessage = (element, error)=>{
        const errorText = element.querySelector(_constants.CART_CHECKOUT_ERROR_MESSAGE_SELECTOR);
        if (!errorText) {
            return;
        }
        // Handle Stripe.js client-side errors. We use Stripe.js's error message
        // as this error typically indicates that the user forgot to enter part of
        // their CC, or entered invalid data. The more specific the error, the more
        // helpful it will be for the user.
        if (error.type && error.type === 'validation_error') {
            errorText.textContent = error.message;
            return;
        }
        const errorType = getErrorType(error);
        // Get the default error message incase the node does not have the error attribute yet.
        const errorData = // @ts-expect-error Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{...}'
        _constants.CHECKOUT_ERRORS[errorType.toUpperCase().replace(/\W/g, '_')] || {};
        const defaultErrorMessage = errorData.copy;
        const errorMessage = errorText.getAttribute((0, _constants.getCheckoutErrorMessageForType)(errorType)) || defaultErrorMessage;
        errorText.textContent = errorMessage;
        if (errorData.requiresRefresh) {
            errorText.setAttribute(_constants.NEEDS_REFRESH, 'true');
        } else {
            errorText.removeAttribute(_constants.NEEDS_REFRESH);
        }
        if (errorType === 'shipping') {
            updateRequiredFields(error);
        }
    };
    const elementNameByGraphQLError = {
        MISSING_STATE: 'address_state'
    };
    const updateRequiredFields = (error)=>{
        if (!error.graphQLErrors || error.graphQLErrors.length === 0) {
            return;
        }
        const invalidShippingAddressError = error.graphQLErrors.find(// @ts-expect-error - TS7006 - Parameter 'gqlError' implicitly has an 'any' type.
        (gqlError)=>gqlError.code === 'InvalidShippingAddress');
        if (!invalidShippingAddressError) {
            return;
        }
        // @ts-expect-error - TS7006 - Parameter 'problem' implicitly has an 'any' type.
        invalidShippingAddressError.problems.forEach((problem)=>{
            const { type } = problem;
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly MISSING_STATE: "address_state"; }'.
            const elementName = elementNameByGraphQLError[type];
            if (!elementName) {
                return;
            }
            const element = document.getElementsByName(elementName)[0];
            if (!(element instanceof HTMLInputElement)) {
                return;
            }
            element.required = true;
            // IE11 doesn't support the reportValidity API
            if (typeof element.reportValidity === 'function') {
                element.reportValidity();
            }
        });
    };
    const showErrorMessageForError = (err, scope)=>{
        const errorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE, scope);
        if (errorState) {
            errorState.style.removeProperty('display');
            updateErrorMessage(errorState, err);
        }
    };
    const beforeUnloadHandler = (e)=>{
        e.preventDefault();
        e.returnValue = '';
    };
    const createOrderIdentityMutation = (apolloClient, email)=>apolloClient.mutate({
            mutation: _checkoutMutations.updateOrderIdentityMutation,
            variables: {
                email
            }
        });
    const createOrderAddressMutation = (apolloClient, addressInfo)=>apolloClient.mutate({
            mutation: _checkoutMutations.updateOrderAddressMutation,
            variables: addressInfo
        });
    const createOrderShippingMethodMutation = (apolloClient, id)=>apolloClient.mutate({
            mutation: _checkoutMutations.updateOrderShippingMethodMutation,
            variables: {
                id
            }
        });
    const createCustomDataMutation = (apolloClient, customData)=>apolloClient.mutate({
            mutation: _checkoutMutations.updateCustomData,
            variables: {
                customData
            }
        });
    const createStripePaymentMethodMutation = (apolloClient, id)=>apolloClient.mutate({
            mutation: _checkoutMutations.updateOrderStripePaymentMethodMutation,
            variables: {
                paymentMethod: id
            }
        });
    const createRecalcOrderEstimationsMutation = (apolloClient)=>apolloClient.mutate({
            mutation: _checkoutMutations.recalcOrderEstimationsMutation,
            errorPolicy: 'ignore'
        });
    const createUpdateObfuscatedOrderAddressMutation = (apolloClient, addressInfo)=>apolloClient.mutate({
            mutation: _checkoutMutations.updateObfuscatedOrderAddressMutation,
            variables: addressInfo
        });
    const renderCheckout = (checkout, data, prevFocusedInput)=>{
        (0, _rendering.renderTree)(checkout, data);
        const shippingMethodsList = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST, checkout);
        const shippingMethodsEmpty = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE, checkout);
        const shippingAddressWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, checkout);
        const billingAddressWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkout);
        const billingAddressToggle = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX, checkout);
        const paymentInfoWrapper = checkout.querySelector('.w-commerce-commercecheckoutpaymentinfowrapper');
        if (!(shippingMethodsList instanceof Element) || !(shippingAddressWrapper instanceof Element) || !(billingAddressWrapper instanceof Element) || !(billingAddressToggle instanceof HTMLInputElement) || !(paymentInfoWrapper instanceof Element)) {
            return;
        }
        if (data.data && data.data.database && data.data.database.commerceOrder) {
            const { data: { database: { commerceOrder: { availableShippingMethods, statusFlags: { requiresShipping, isFreeOrder, shippingAddressRequiresPostalCode, billingAddressRequiresPostalCode, hasSubscription } } } } } = data;
            const shippingZipField = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD, shippingAddressWrapper);
            if (shippingZipField instanceof HTMLInputElement) {
                shippingZipField.required = shippingAddressRequiresPostalCode;
            }
            const billingZipField = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD, billingAddressWrapper);
            if (billingZipField instanceof HTMLInputElement) {
                billingZipField.required = billingAddressRequiresPostalCode;
            }
            const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
            const paypalButton = checkout.querySelector(`[${_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE}]`);
            if (paypalElement && paypalButton) {
                if (isFreeOrder || hasSubscription) {
                    // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    (0, _commerceUtils.hideElement)(paypalButton);
                } else {
                    // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    (0, _commerceUtils.showElement)(paypalButton);
                }
            }
            // Edge case: need to make sure if billing address is hidden because of default "same as shipping" checked, but
            // toggle itself is hidden because doesn't require shipping, the billing address is still visible
            if (!requiresShipping && billingAddressToggle.checked && billingAddressToggle.parentElement && billingAddressToggle.parentElement.classList.contains('w-condition-invisible')) {
                (0, _commerceUtils.showElement)(billingAddressWrapper);
            }
            if (!availableShippingMethods || availableShippingMethods.length < 1) {
                (0, _commerceUtils.hideElement)(shippingMethodsList);
                // TODO: remove this ugliness when we've properly constrained & restructured the checkout form
                // It is possible to remove the empty state so we can't return early, but don't want to crash here
                if (shippingMethodsEmpty instanceof Element) {
                    (0, _commerceUtils.showElement)(shippingMethodsEmpty);
                }
            } else {
                // TODO remove after migration
                if (shippingMethodsEmpty instanceof Element) {
                    (0, _commerceUtils.hideElement)(shippingMethodsEmpty);
                }
                (0, _commerceUtils.showElement)(shippingMethodsList);
            }
            if (isFreeOrder) {
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                (0, _commerceUtils.hideElement)(paymentInfoWrapper);
            } else if (!isFreeOrder && // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
            paymentInfoWrapper.style.getPropertyValue('display') === 'none') {
                // was previously hidden
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                (0, _commerceUtils.showElement)(paymentInfoWrapper);
            }
        } else {
            (0, _commerceUtils.hideElement)(shippingMethodsList);
            // TODO remove after migration
            if (shippingMethodsEmpty instanceof Element) {
                (0, _commerceUtils.showElement)(shippingMethodsEmpty);
            }
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            (0, _commerceUtils.showElement)(paymentInfoWrapper);
        }
        if (data.errors.length === 0 && prevFocusedInput) {
            let prevFocusedInputEle = document.getElementById(prevFocusedInput);
            if (!prevFocusedInputEle) {
                prevFocusedInputEle = document.querySelector(`[data-wf-bindings="${prevFocusedInput}"]`);
            }
            if (prevFocusedInputEle) {
                prevFocusedInputEle.focus();
            }
        }
    };
    const runRenderOnCheckoutElement = (checkoutFormContainer, data, errors, stripeStore, prevFocusedInput)=>{
        renderCheckout(checkoutFormContainer, {
            ...data,
            errors: errors.concat(data.errors).filter(Boolean)
        }, prevFocusedInput);
        if (stripeStore) {
            (0, _webPaymentsEvents.updateWebPaymentsButton)(checkoutFormContainer, data, stripeStore);
        }
    };
    const renderCheckoutFormContainers = (checkoutFormContainers, errors, apolloClient, stripeStore, prevFocusedInput)=>{
        if (checkoutFormContainers.length === 0) {
            return;
        }
        checkoutFormContainers.forEach((checkoutFormContainer)=>{
            const queryOptions = {
                query: (0, _graphqltag.default)`
            ${checkoutFormContainer.getAttribute(_constants.CHECKOUT_QUERY)}
          `,
                fetchPolicy: 'network-only',
                // errorPolicy is set to `all` so that we continue to get the cart data when an error occurs
                // this is important in cases like when the address entered doesn't have a shipping zone, as that returns
                // a graphQL error, but we still want to render what the customer has entered
                errorPolicy: 'all'
            };
            apolloClient.query(queryOptions).then((data)=>{
                if (data.data && data.data.database && data.data.database.commerceOrder && data.data.database.commerceOrder.availableShippingMethods) {
                    const { data: { database: { commerceOrder: { availableShippingMethods, statusFlags: { requiresShipping } } } } } = data;
                    const selectedMethod = availableShippingMethods.find(// @ts-expect-error - TS7006 - Parameter 'method' implicitly has an 'any' type.
                    (method)=>method.selected === true);
                    if (!selectedMethod && requiresShipping) {
                        const id = availableShippingMethods[0] ? availableShippingMethods[0].id : null;
                        return createOrderShippingMethodMutation(apolloClient, id).then(()=>{
                            return createRecalcOrderEstimationsMutation(apolloClient);
                        }).then(()=>{
                            return apolloClient.query(queryOptions);
                        }).then((newData)=>{
                            runRenderOnCheckoutElement(checkoutFormContainer, newData, errors, stripeStore, prevFocusedInput);
                        });
                    }
                }
                if (data.data && data.data.database && data.data.database.commerceOrder && data.data.database.commerceOrder.statusFlags && data.data.database.commerceOrder.statusFlags.shouldRecalc) {
                    return createRecalcOrderEstimationsMutation(apolloClient).then(()=>{
                        return apolloClient.query(queryOptions);
                    }).then((newData)=>{
                        runRenderOnCheckoutElement(checkoutFormContainer, newData, errors, stripeStore, prevFocusedInput);
                    });
                } else {
                    runRenderOnCheckoutElement(checkoutFormContainer, data, errors, stripeStore, prevFocusedInput);
                }
            }).catch((err)=>{
                errors.push(err);
                renderCheckout(checkoutFormContainer, {
                    errors
                }, prevFocusedInput);
            });
        });
    };
    const createAttemptSubmitOrderRequest = (apolloClient, variables)=>{
        return apolloClient.mutate({
            mutation: _checkoutMutations.attemptSubmitOrderMutation,
            variables
        });
    };
    const getOrderDataFromGraphQLResponse = (data)=>{
        return data && data.data && data.data.ecommerceAttemptSubmitOrder;
    };
    const orderRequiresAdditionalAction = (status)=>status === _constants.REQUIRES_ACTION;
    const redirectToOrderConfirmation = (order, isPayPal = false)=>{
        const redirectUrl = `/order-confirmation?orderId=${order.orderId}&token=${order.token}`;
        if (isPayPal) {
            const message = {
                isWebflow: true,
                type: 'success',
                detail: redirectUrl
            };
            window.parent.postMessage(JSON.stringify(message), window.location.origin);
        } else {
            window.location.href = redirectUrl;
        }
    };
    const applyDiscount = (apolloClient, variables)=>{
        return apolloClient.mutate({
            mutation: _checkoutMutations.applyDiscountMutation,
            variables
        });
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    54556: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals document, window, CustomEvent */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        addLoadingCallback: function() {
            return addLoadingCallback;
        },
        customDataFormToArray: function() {
            return customDataFormToArray;
        },
        executeLoadingCallbacks: function() {
            return executeLoadingCallbacks;
        },
        fetchOrderStatusFlags: function() {
            return fetchOrderStatusFlags;
        },
        findAllElementsByNodeType: function() {
            return findAllElementsByNodeType;
        },
        findClosestElementByClassName: function() {
            return findClosestElementByClassName;
        },
        findClosestElementByNodeType: function() {
            return findClosestElementByNodeType;
        },
        findClosestElementWithAttribute: function() {
            return findClosestElementWithAttribute;
        },
        findElementByNodeType: function() {
            return findElementByNodeType;
        },
        formToObject: function() {
            return formToObject;
        },
        hasSubscription: function() {
            return hasSubscription;
        },
        hideElement: function() {
            return hideElement;
        },
        isFreeOrder: function() {
            return isFreeOrder;
        },
        isProductionLikeEnv: function() {
            return isProductionLikeEnv;
        },
        isProtocolHttps: function() {
            return isProtocolHttps;
        },
        safeParseJson: function() {
            return safeParseJson;
        },
        setElementLoading: function() {
            return setElementLoading;
        },
        showElement: function() {
            return showElement;
        },
        trackOrder: function() {
            return trackOrder;
        },
        triggerRender: function() {
            return triggerRender;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    const _constants = __webpack_require__(10873);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const safeParseJson = (jsonString)=>{
        let json = null;
        try {
            if (jsonString != null) {
                json = JSON.parse(decodeURIComponent(jsonString));
            }
        } catch (e) {
            if (!(e instanceof SyntaxError && e.message.match(/\bJSON\b/i))) {
                throw e;
            }
        } finally{
            return json;
        }
    };
    const findElementByNodeType = (type, scope = document)=>{
        // @ts-expect-error - TS2322 - Type 'Element | null' is not assignable to type 'HTMLElement | null | undefined'.
        return scope.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${type}"]`);
    };
    const findAllElementsByNodeType = (type, scope = document)=>{
        return Array.from(scope.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${type}"]`));
    };
    const findClosestElementByNodeType = (nodeType, element)=>{
        let target = element;
        while(target){
            if (target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === nodeType) {
                return target;
            } else {
                // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'EventTarget'.
                target = target instanceof Element ? target.parentElement : null;
            }
        }
        return target;
    };
    const findClosestElementWithAttribute = (dataAttribute, element)=>{
        let target = element;
        while(target){
            if (target instanceof Element && target.hasAttribute(dataAttribute)) {
                return target;
            } else {
                // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'EventTarget'.
                target = target instanceof Element ? target.parentElement : null;
            }
        }
        return target;
    };
    const findClosestElementByClassName = (className, element)=>{
        let target = element;
        while(target){
            if (target instanceof Element && target.classList.contains(className)) {
                return target;
            } else {
                // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'EventTarget'.
                target = target instanceof Element ? target.parentElement : null;
            }
        }
        return target;
    };
    const triggerRender = (error, isInitial = false)=>{
        const renderEvent = new CustomEvent(_constants.RENDER_TREE_EVENT, {
            detail: {
                error,
                isInitial
            }
        });
        window.dispatchEvent(renderEvent);
    };
    const isProductionLikeEnv = ()=> true || 0;
    const isProtocolHttps = ()=>!isProductionLikeEnv() || window.location.protocol === 'https:';
    const formToObject = (form, toString)=>{
        const values = {};
        // @ts-expect-error - TS2345 - Argument of type '(element: ElementWithValue) => void' is not assignable to parameter of type '(value: Element, index: number, array: Element[]) => void'.
        Array.from(form.elements).forEach((element)=>{
            const name = element.getAttribute('name');
            if (name && name !== '') {
                const value = toString ? String(element.value).trim() : element.value;
                values[name] = value == null || value === '' ? null : value;
            }
        });
        return values;
    };
    const customDataFormToArray = (form)=>{
        // @ts-expect-error - TS7034 - Variable 'customData' implicitly has type 'any[]' in some locations where its type cannot be determined.
        const customData = [];
        if (!form || !(form instanceof HTMLFormElement)) {
            // @ts-expect-error - TS7005 - Variable 'customData' implicitly has an 'any[]' type.
            return customData;
        }
        Array.from(form.elements).forEach(// @ts-expect-error - TS2345 - Argument of type '(element: HTMLElement | HTMLInputElement | HTMLTextAreaElement) => void' is not assignable to parameter of type '(value: Element, index: number, array: Element[]) => void'.
        (element)=>{
            const name = element.getAttribute('name');
            if (element instanceof HTMLTextAreaElement && element.value) {
                customData.push({
                    name: name ? name : 'Textarea',
                    textArea: element.value
                });
            } else if (element instanceof HTMLInputElement) {
                if (element.type === 'checkbox') {
                    customData.push({
                        name: name ? name : 'Checkbox',
                        checkbox: element.checked
                    });
                } else if (element.value) {
                    customData.push({
                        name: name ? name : 'Text Input',
                        textInput: element.value
                    });
                }
            }
        });
        // @ts-expect-error - TS7005 - Variable 'customData' implicitly has an 'any[]' type.
        return customData;
    };
    const setElementLoading = (el)=>{
        // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
        const tr = window.Webflow.tram(el);
        tr.set({
            opacity: 0.2
        });
        tr.add('opacity 500ms ease-in-out');
        const animate = ()=>{
            tr.start({
                opacity: 0.2
            }).then({
                opacity: 0.4
            }).then(animate);
        };
        animate();
        return ()=>tr.destroy();
    };
    const loadingCallbacks = [];
    const addLoadingCallback = (cb)=>{
        loadingCallbacks.push(cb);
    };
    const executeLoadingCallbacks = ()=>{
        let finishLoading;
        while((finishLoading = loadingCallbacks.shift()) !== undefined){
            finishLoading();
        }
    };
    const isFreeOrder = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.statusFlags && response.data.database.commerceOrder.statusFlags.isFreeOrder === true;
    const hasSubscription = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.statusFlags && response.data.database.commerceOrder.statusFlags.hasSubscription === true;
    const showElement = (element)=>element.style.removeProperty('display');
    const hideElement = (element)=>element.style.setProperty('display', 'none');
    // the @client directive ensures we only fetch this from the local cache so that we don't wait on network
    // we can only use this safely inside a rendered cart/checkout/confirmation container
    // as to render that view, a query had to be made which *always* includes the flags listed below.
    // if you are adding new flags to this, please ensure that the flags are *always* included
    // for all types of commerce elements in `packages/systems/dynamo/utils/DynamoQuery/DynamoQuery.js`
    const orderStatusFlagsQuery = (0, _graphqltag.default)`
      query FetchCartInfo {
        database @client {
          id
          commerceOrder {
            id
            statusFlags {
              requiresShipping
              isFreeOrder
              hasSubscription
            }
          }
        }
      }
    `;
    const fetchOrderStatusFlags = (apolloClient)=>apolloClient.query({
            query: orderStatusFlagsQuery
        }).then((data)=>{
            return data && data.data && data.data.database && data.data.database.commerceOrder && data.data.database.commerceOrder.statusFlags;
        });
    const acceptedOrderDataQuery = (0, _graphqltag.default)`
      query FetchAcceptedOrderData(
        $finalizedOrder: commerce_order_finalized_order_args
      ) {
        database {
          id
          commerceOrder(finalizedOrder: $finalizedOrder) {
            id
            total {
              decimalValue
              unit
            }
            userItems {
              id
              count
              product {
                id
                f_name_: name
              }
              sku {
                id
              }
              price {
                decimalValue
              }
            }
          }
        }
      }
    `;
    const fetchAcceptedOrderData = (apolloClient, finalizedOrder)=>apolloClient.query({
            query: acceptedOrderDataQuery,
            variables: {
                finalizedOrder
            }
        }).then((data)=>data?.data?.database?.commerceOrder);
    const trackOrder = (apolloClient, finalizedOrder)=>{
        // early return if both facebook and google don't exist on the page
        // we don't need to fetch this data if we're not doing any analytics
        if (typeof fbq === 'undefined' && typeof gtag === 'undefined') {
            return;
        }
        // check to see if this order was tracked already, and if it was, return early
        let trackedOrders = {};
        try {
            const storedTrackedOrders = window.localStorage.getItem('wf-seen-orders');
            if (storedTrackedOrders) {
                trackedOrders = JSON.parse(storedTrackedOrders);
            }
        } catch (err) {
            return;
        }
        if (trackedOrders[finalizedOrder.orderId]) {
            return;
        }
        // we have to fetch the accepted order data, instead of relying on the pending order data
        // that's fetched on the order confirmation page, because we only get the purchased items
        // data if the user has an Order Items element on the page. while i would presume that most
        // people would keep that element on the page, it's not a guarantee, so we need to separately
        // fetch it here to ensure that we always send the analytics, regardless of how the user has
        // customized their order confirmation page.
        fetchAcceptedOrderData(apolloClient, finalizedOrder).then((order)=>{
            if (!order) {
                return;
            }
            const { decimalValue, unit } = order.total;
            if (typeof fbq !== 'undefined' && typeof fbq === 'function') {
                fbq('track', 'Purchase', {
                    value: decimalValue,
                    currency: unit,
                    // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                    content_ids: (order.userItems || []).map((item)=>item.sku.id),
                    content_type: 'product',
                    // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                    contents: (order.userItems || []).map((item)=>({
                            id: item.sku.id,
                            quantity: item.count,
                            item_price: item.price.decimalValue
                        }))
                });
            }
            if (typeof gtag !== 'undefined' && typeof gtag === 'function') {
                gtag('event', 'purchase', {
                    transaction_id: order.id,
                    value: decimalValue,
                    currency: unit,
                    // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                    items: (order.userItems || []).map((item)=>({
                            id: item.sku.id,
                            name: item.product.f_name_,
                            quantity: item.count,
                            price: item.price.decimalValue
                        }))
                });
            }
            trackedOrders[finalizedOrder.orderId] = true;
            try {
                window.localStorage.setItem('wf-seen-orders', JSON.stringify(trackedOrders));
            } catch (err) {
                return;
            }
        });
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    14155: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "PillGroups", ({
        enumerable: true,
        get: function() {
            return PillGroups;
        }
    }));
    const _constants = __webpack_require__(10873);
    const KEY_CODES = Object.freeze({
        RETURN: 13,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
    });
    class PillGroups {
        form;
        pillGroups;
        onSelect;
        static hasPillGroups(form) {
            return form.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP}"]`).length > 0;
        }
        constructor(form, onSelect){
            this.form = form;
            this.pillGroups = {};
            this.onSelect = onSelect;
        }
        init() {
            const groupNodes = this.form.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP}"]`);
            for (const group of groupNodes){
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                const pillGroup = new PillGroup(group, this.onSelect, this);
                pillGroup.init();
                this.pillGroups[pillGroup.optionSetId] = pillGroup;
            }
        }
        setSelectedPillsForSkuValues(skuValues) {
            for (const optionSetId of Object.keys(skuValues)){
                const optionId = skuValues[optionSetId];
                const pillGroup = this.pillGroups[optionSetId];
                if (pillGroup) {
                    const pill = pillGroup.findPillById(String(optionId));
                    pillGroup.updatePillsWithNewSelected(pill);
                }
            }
        }
    }
    class PillGroup {
        node;
        optionSetId;
        onSelect;
        pills;
        groups;
        constructor(node, onSelect, groups){
            this.node = node;
            this.optionSetId = String(node.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID));
            this.onSelect = onSelect;
            this.pills = [];
            this.groups = groups;
        }
        get firstEnabledPill() {
            // find returns the first one it finds, and the pills are in order
            return this.pills.find((pill)=>pill.disabled === false);
        }
        // hacky fake option set compat
        get value() {
            const possiblePill = this.pills.find((pill)=>pill.checked === true);
            return possiblePill ? possiblePill.value : '';
        }
        // hacky fake option set compat
        get options() {
            return this.pills;
        }
        // hacky fake option set compat
        // eslint-disable-next-line accessor-pairs
        set selectedIndex(index) {
            const pill = this.pills[index] || null;
            // @ts-expect-error - TS2345 - Argument of type 'Pill | null' is not assignable to parameter of type 'Pill'.
            this.emitSelected(pill);
        }
        // hacky fake option set compat
        // we only want to support the one DOM attribute, which we have on this group, just not
        // directly exposed, as we don't directly expose the DOM element for the group
        getAttribute(attr) {
            if (attr === _constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) {
                return this.optionSetId;
            } else {
                throw new Error(`PillGroup: Attempted to fetch unsupported attribute ${attr}`);
            }
        }
        init() {
            const pills = this.node.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL}"]`);
            this.pills = Array.from(pills).map((pillNode)=>{
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                const pill = new Pill(pillNode, this);
                pill.init();
                return pill;
            });
            // if this group has any enabled pills, we set the first one's tab index so it can be focused
            if (this.firstEnabledPill) {
                this.firstEnabledPill.tabIndex = 0;
            }
            // @zach: store reference to this group on the node so we can access it later
            // we shouldn't be doing this but it's a lot easier than creating some global store
            // i tried the global store method first but the problem is our instance IDs are just the product IDs
            // so if you have two ATCs for the same product, they'd overwrite each other, and only one option list would work
            // so just storing it on the DOM element, and then grabbing it when updating all the option sets is a lot easier :)
            // @ts-expect-error - TS2339 - Property '_wfPillGroup' does not exist on type 'HTMLElement'.
            this.node._wfPillGroup = this;
        }
        findPillById(optionId) {
            return this.pills.find((pill)=>pill.optionId === optionId);
        }
        updatePillsWithNewSelected(selectedPill) {
            // we unselect all of the pills in the pill group
            for (const pill of this.pills){
                pill.tabIndex = -1;
                pill.checked = false;
            }
            if (selectedPill instanceof Pill) {
                // if passed a pill, we give it the proper tab index, and set the aria checked
                selectedPill.tabIndex = 0;
                selectedPill.checked = true;
            } else {
                // if not passed a pill, we're deselecting any option in this group
                // so we call set the tabIndex to the first enabled pill,
                // so tab focus goes back to the first pill on the next enter
                if (this.firstEnabledPill) {
                    this.firstEnabledPill.tabIndex = 0;
                }
            }
        }
        emitSelected(selectedPill) {
            this.onSelect({
                optionId: selectedPill.optionId,
                optionSetId: this.optionSetId,
                groups: Object.values(this.groups.pillGroups)
            });
        }
        traverseAndEmitSelected(currentPill, direction) {
            const currentIndex = this.pills.indexOf(currentPill);
            let found = false;
            let idx = currentIndex;
            let nextIndex;
            while(!found){
                if (direction === 'previous') {
                    nextIndex = idx - 1;
                    // if we reached the start of the list, go to the end
                    if (nextIndex < 0) {
                        nextIndex = this.pills.length - 1;
                    }
                } else if (direction === 'next') {
                    nextIndex = idx + 1;
                    // if we reached the end of the list, go to the start
                    if (nextIndex === this.pills.length) {
                        nextIndex = 0;
                    }
                } else {
                    throw new Error(`Unknown pill traversal direction "${direction}", use "previous" or "next"`);
                }
                // if we're back at the pill we started with, we went through the entire list
                // and didn't find any other enabled pills, so we keep this one selected
                if (nextIndex === currentIndex) {
                    break;
                }
                const pill = this.pills[nextIndex];
                // @ts-expect-error - TS18048 - 'pill' is possibly 'undefined'.
                if (!pill.disabled) {
                    // if the next pill is enabled, we emit it as selected, focus it now that we know what pill should be
                    // and finally, break the loop
                    // @ts-expect-error - TS2345 - Argument of type 'Pill | undefined' is not assignable to parameter of type 'Pill'.
                    this.emitSelected(pill);
                    // @ts-expect-error - TS18048 - 'pill' is possibly 'undefined'.
                    pill.focus();
                    found = true;
                } else {
                    // otherwise, we increment our loop index, so we can start the loop again
                    // and check the next pill
                    idx = nextIndex;
                }
            }
        }
    }
    class Pill {
        node;
        optionId;
        group;
        constructor(node, group){
            this.node = node;
            this.optionId = String(this.node.getAttribute('data-option-id'));
            this.group = group;
        }
        init() {
            this.tabIndex = -1;
            this.checked = false;
            this.node.addEventListener('keydown', this.handleKeyDown);
            this.node.addEventListener('click', this.handleClick);
        }
        get tabIndex() {
            return this.node.tabIndex;
        }
        set tabIndex(index) {
            this.node.tabIndex = index;
        }
        get value() {
            return this.optionId;
        }
        get checked() {
            return this.node.getAttribute('aria-checked') === 'true';
        }
        set checked(checked) {
            this.node.setAttribute('aria-checked', String(checked));
            if (checked) {
                this.node.classList.add('w--ecommerce-pill-selected');
            } else {
                this.node.classList.remove('w--ecommerce-pill-selected');
            }
        }
        get disabled() {
            return this.node.getAttribute('aria-disabled') === 'true';
        }
        set disabled(disabled) {
            this.node.setAttribute('aria-disabled', String(disabled));
            if (disabled) {
                // if we pragmatically disable a pill, we want to make sure it's not checked
                // and that it can't be focused by the browser
                this.node.classList.add('w--ecommerce-pill-disabled');
                this.checked = false;
                this.tabIndex = -1;
            } else {
                this.node.classList.remove('w--ecommerce-pill-disabled');
            }
        }
        get enabled() {
            return !this.disabled;
        }
        set enabled(enabled) {
            this.disabled = !enabled;
        }
        focus() {
            this.node.focus();
        }
        handleKeyDown = (ev)=>{
            let eventHandled = false;
            // we don't want to handle events when holding down alt or cmd
            // as these are navigation shortcuts that we don't want to break
            if (ev.altKey || ev.metaKey) {
                return;
            }
            switch(ev.keyCode){
                // return and space should act like a click on the pill, selecting/deselecting as needed
                case KEY_CODES.RETURN:
                case KEY_CODES.SPACE:
                    this.handleClick();
                    eventHandled = true;
                    break;
                // up and left go to the previous pill in the group
                case KEY_CODES.UP:
                case KEY_CODES.LEFT:
                    this.group.traverseAndEmitSelected(this, 'previous');
                    eventHandled = true;
                    break;
                // down and right go to the next pill in the group
                case KEY_CODES.DOWN:
                case KEY_CODES.RIGHT:
                    this.group.traverseAndEmitSelected(this, 'next');
                    eventHandled = true;
                    break;
                default:
                    break;
            }
            // we only want to stop keyboard events for the keys we're trying to intercept
            if (eventHandled) {
                ev.stopPropagation();
                ev.preventDefault();
            }
        };
        handleClick = ()=>{
            if (this.disabled || this.checked) {
                return;
            }
            this.focus();
            this.group.emitSelected(this);
        };
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    85986: (function (__unused_webpack_module, exports) {
    "use strict";
    // Added a Flow type here since
    // our bundle builder when stripping Flow types
    // uses a newer version of flow-parser (0.203)
    // which requires a variable declaration to have
    // a type
    // eslint-disable-next-line no-var
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return _default;
        }
    }));
    const _default = {
        log: (...args)=>{
            if (false) {}
        },
        error: (...args)=>{
            if (false) {}
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFkZGVkIGEgRmxvdyB0eXBlIGhlcmUgc2luY2Vcbi8vIG91ciBidW5kbGUgYnVpbGRlciB3aGVuIHN0cmlwcGluZyBGbG93IHR5cGVzXG4vLyB1c2VzIGEgbmV3ZXIgdmVyc2lvbiBvZiBmbG93LXBhcnNlciAoMC4yMDMpXG4vLyB3aGljaCByZXF1aXJlcyBhIHZhcmlhYmxlIGRlY2xhcmF0aW9uIHRvIGhhdmVcbi8vIGEgdHlwZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhclxuZGVjbGFyZSB2YXIgcHJvY2VzczogYW55O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvZzogKC4uLmFyZ3M6IEFycmF5PHVua25vd24+KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICBjb25zb2xlLmxvZyguLi5hcmdzKTtcbiAgICB9XG4gIH0sXG4gIGVycm9yOiAoLi4uYXJnczogQXJyYXk8dW5rbm93bj4pID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuICAgIH1cbiAgfSxcbn07XG4iXSwibmFtZXMiOlsibG9nIiwiYXJncyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQy9CLCtDQUErQztBQUMvQyw4Q0FBOEM7QUFDOUMsZ0RBQWdEO0FBQ2hELFNBQVM7QUFDVCxrQ0FBa0M7Ozs7OytCQUdsQzs7O2VBQUE7OztNQUFBLFdBQWU7SUFDYkEsS0FBSyxDQUFDLEdBQUdDO1FBQ1AsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssZUFBZTtZQUMxQ0MsUUFBUUwsR0FBRyxJQUFJQztRQUNqQjtJQUNGO0lBQ0FLLE9BQU8sQ0FBQyxHQUFHTDtRQUNULElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLGVBQWU7WUFDMUNDLFFBQVFMLEdBQUcsSUFBSUM7UUFDakI7SUFDRjtBQUNGIn0=
    
    }),
    48873: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return EventHandlerProxyWithApolloClient;
        }
    }));
    // @ts-expect-error - TS7023 - 'enumeratePrototypeProps' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
    const enumeratePrototypeProps = (obj, propNames = [])=>{
        if (obj == null) {
            return propNames;
        }
        return propNames.concat(enumeratePrototypeProps(Object.getPrototypeOf(obj)))// @ts-expect-error - TS2769 - No overload matches this call.
        .concat(Object.keys(obj));
    };
    const createEventProxy = (event, currentTarget)=>{
        // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments.
        const propertyDefinitions = enumeratePrototypeProps(event)// @ts-expect-error - TS7006 - Parameter 'propName' implicitly has an 'any' type.
        .filter((propName)=>propName !== 'currentTarget')// @ts-expect-error - TS7006 - Parameter 'proxies' implicitly has an 'any' type. | TS7006 - Parameter 'propName' implicitly has an 'any' type.
        .reduce((proxies, propName)=>{
            proxies[propName] = // @ts-expect-error Object.keys is "unsound", always infers `string` as output
            typeof event[propName] === 'function' ? // @ts-expect-error Object.keys is "unsound", always infers `string` as output
            {
                value: (...args)=>event[propName](...args)
            } : // @ts-expect-error Object.keys is "unsound", always infers `string` as output
            {
                get: ()=>event[propName]
            };
            return proxies;
        }, {});
        const retargetedEvent = Object.create(event, {
            // set currentTarget to the matched node:
            currentTarget: {
                value: currentTarget
            },
            ...propertyDefinitions
        });
        return retargetedEvent;
    };
    class EventHandlerProxyWithApolloClient {
        apolloClient;
        stripeStore;
        eventHandlers;
        constructor(apolloClient, stripeStore){
            this.eventHandlers = {};
            this.apolloClient = apolloClient;
            this.stripeStore = stripeStore;
        }
        on = (eventName, eventMatcher, handler)=>{
            const existingHandlers = this.eventHandlers[eventName] instanceof Array ? this.eventHandlers[eventName] : [];
            this.eventHandlers[eventName] = [
                ...existingHandlers,
                this.createHandlerProxy(eventName, eventMatcher, handler)
            ];
            return this;
        };
        createHandlerProxy = (eventName, eventMatcher, handler)=>(event)=>{
                const match = eventMatcher(event);
                const eventProxy = match instanceof Element ? createEventProxy(event, match) : event;
                if (match) {
                    handler(eventProxy, this.apolloClient, this.stripeStore);
                }
            };
        attachHandlers = (target)=>{
            Object.keys(this.eventHandlers).forEach((eventName)=>{
                const handlerProxies = this.eventHandlers[eventName];
                // @ts-expect-error - TS18048 - 'handlerProxies' is possibly 'undefined'.
                handlerProxies.forEach((handlerProxy)=>target.addEventListener(eventName, handlerProxy, true));
            });
            return this;
        };
        removeHandlers = (target)=>{
            Object.keys(this.eventHandlers).forEach((eventName)=>{
                const handlerProxies = this.eventHandlers[eventName];
                // @ts-expect-error - TS18048 - 'handlerProxies' is possibly 'undefined'.
                handlerProxies.forEach((handlerProxy)=>target.removeEventListener(eventName, handlerProxy, true));
            });
            return this;
        };
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    2330: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window, document */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        design: function() {
            return design;
        },
        destroy: function() {
            return destroy;
        },
        init: function() {
            return init;
        },
        preview: function() {
            return preview;
        }
    });
    __webpack_require__(84037);
    __webpack_require__(68259);
    __webpack_require__(60033);
    __webpack_require__(9246);
    __webpack_require__(67321);
    __webpack_require__(52897);
    __webpack_require__(233);
    __webpack_require__(49754);
    __webpack_require__(30971);
    __webpack_require__(62374);
    __webpack_require__(55152);
    __webpack_require__(35273);
    __webpack_require__(30172);
    __webpack_require__(65723);
    __webpack_require__(48258);
    __webpack_require__(89433);
    const _apolloClient = __webpack_require__(25195);
    const _eventHandlerProxyWithApolloClient = /*#__PURE__*/ _interop_require_default(__webpack_require__(48873));
    const _addToCartEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(84303));
    const _cartEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(82150));
    const _checkoutEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(82333));
    const _orderConfirmationEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(45870));
    const _webPaymentsEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(94492));
    const _stripeStore = __webpack_require__(5841);
    const _commerceUtils = __webpack_require__(54556);
    __webpack_require__(67304);
    __webpack_require__(14362);
    const _checkoutUtils = __webpack_require__(17696);
    const _paypalEvents = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(86365));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    const GQL_QUERY_PATH = '/.wf_graphql/apollo';
    // @ts-expect-error - TS7034 - Variable 'handlerProxy' implicitly has type 'any' in some locations where its type cannot be determined.
    let handlerProxy;
    // @ts-expect-error - TS7034 - Variable 'apolloClient' implicitly has type 'any' in some locations where its type cannot be determined.
    let apolloClient;
    let stripeStore;
    function attachHandlers() {
        // @ts-expect-error - TS7005 - Variable 'handlerProxy' implicitly has an 'any' type.
        handlerProxy && handlerProxy.attachHandlers(window);
    }
    function detachHandlers() {
        // @ts-expect-error - TS7005 - Variable 'handlerProxy' implicitly has an 'any' type.
        handlerProxy && handlerProxy.removeHandlers(window);
    }
    // Can be called from published sites or the Designer engine
    // Published sites: call point is defined in /models/site.js
    // Designer: call point is in CommerceProxyEngine
    function init({ siteId }) {
        apolloClient = (0, _apolloClient.createApolloClient)({
            path: window.Webflow.env('design') || window.Webflow.env('preview') ? `/api/v2/sites/${siteId}/apollo` : GQL_QUERY_PATH,
            retryConfig: {
                maxAttempts: 5
            },
            useCsrf: true
        });
        stripeStore = new _stripeStore.StripeStore(document);
        handlerProxy = new _eventHandlerProxyWithApolloClient.default(apolloClient, stripeStore);
        _addToCartEvents.default.register(handlerProxy);
        _cartEvents.default.register(handlerProxy);
        _checkoutEvents.default.register(handlerProxy);
        _orderConfirmationEvents.default.register(handlerProxy);
        _webPaymentsEvents.default.register(handlerProxy);
        _paypalEvents.default.register(handlerProxy);
        (0, _checkoutUtils.initializeStripeElements)(stripeStore);
        detachHandlers();
        attachHandlers();
        (0, _commerceUtils.triggerRender)(null, true);
        // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
        if (!window.Webflow.env()) {
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.load((0, _paypalEvents.renderPaypalButtons)(apolloClient));
        }
    }
    // `preview` should always be called after `init`
    function preview() {
        detachHandlers();
        attachHandlers();
        (0, _commerceUtils.triggerRender)(null, true);
    }
    // `design` should always be called after `init`
    function design() {
        detachHandlers();
        // When variant option is changed, we need to reset the Apollo cache in oder to
        // render the right data for the selected variant (main-images, more-images, etc)
        // @ts-expect-error - TS7005 - Variable 'apolloClient' implicitly has an 'any' type.
        if (apolloClient && apolloClient.store) {
            apolloClient.resetStore();
        }
    }
    function destroy() {
        detachHandlers();
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    45870: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window, CustomEvent */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        default: function() {
            return _default;
        },
        register: function() {
            return register;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    const _qs = /*#__PURE__*/ _interop_require_default(__webpack_require__(26882));
    const _commerceUtils = __webpack_require__(54556);
    const _rendering = __webpack_require__(91898);
    const _constants = __webpack_require__(10873);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const renderOrderConfirmation = (orderConfirmation, data)=>{
        (0, _rendering.renderTree)(orderConfirmation, data);
    };
    const handleRenderOrderConfirmation = (event, apolloClient)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
            return;
        }
        const errors = [];
        const { detail } = event;
        if (detail != null && detail.error) {
            errors.push(detail.error);
        }
        const orderConfirmationContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER);
        if (!orderConfirmationContainer) {
            return;
        }
        const { orderId, token } = _qs.default.parse(window.location.search.substring(1));
        if (!orderId || !token) {
            return;
        }
        const finalizedOrder = {
            orderId,
            token
        };
        // runs the analytics (facebook and google pixel)
        // we don't block on it, since this isn't needed for any rendering
        // so it if fails, it can just fail silently
        (0, _commerceUtils.trackOrder)(apolloClient, finalizedOrder);
        const allOrderConfirmationContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER);
        apolloClient.query({
            query: (0, _graphqltag.default)`
            ${orderConfirmationContainer.getAttribute(_constants.ORDER_QUERY)}
          `,
            variables: {
                finalizedOrder
            },
            fetchPolicy: 'network-only',
            // errorPolicy is set to `all` so that we continue to get the cart data when an error occurs
            // this is important in cases like when the address entered doesn't have a shipping zone, as that returns
            // a graphQL error, but we still want to render what the customer has entered
            errorPolicy: 'all'
        }).then((data)=>{
            allOrderConfirmationContainers.forEach((orderConfirmationContainerNode)=>{
                renderOrderConfirmation(orderConfirmationContainerNode, {
                    ...data,
                    errors: errors.concat(data.errors).filter(Boolean)
                });
            });
        }).catch((err)=>{
            errors.push(err);
            allOrderConfirmationContainers.forEach((orderConfirmationContainerNode)=>{
                renderOrderConfirmation(orderConfirmationContainerNode, {
                    errors
                });
            });
        });
    };
    const register = (handlerProxy)=>{
        handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderOrderConfirmation);
    };
    const _default = {
        register
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yZGVyQ29uZmlybWF0aW9uRXZlbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgd2luZG93LCBDdXN0b21FdmVudCAqL1xuaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7XG5pbXBvcnQgcXMgZnJvbSAncXMnO1xuaW1wb3J0IEV2ZW50SGFuZGxlclByb3h5V2l0aEFwb2xsb0NsaWVudCBmcm9tICcuL2V2ZW50SGFuZGxlclByb3h5V2l0aEFwb2xsb0NsaWVudCc7XG5pbXBvcnQge1xuICBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUsXG4gIGZpbmRBbGxFbGVtZW50c0J5Tm9kZVR5cGUsXG4gIHRyYWNrT3JkZXIsXG59IGZyb20gJy4vY29tbWVyY2VVdGlscyc7XG5pbXBvcnQge3JlbmRlclRyZWV9IGZyb20gJy4vcmVuZGVyaW5nJztcbmltcG9ydCB7XG4gIE5PREVfVFlQRV9DT01NRVJDRV9PUkRFUl9DT05GSVJNQVRJT05fV1JBUFBFUixcbiAgUkVOREVSX1RSRUVfRVZFTlQsXG4gIE9SREVSX1FVRVJZLFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9jb21tZXJjZS9jb25zdGFudHMnO1xuaW1wb3J0IHtBcG9sbG9DbGllbnQsIE5vcm1hbGl6ZWRDYWNoZU9iamVjdH0gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xuXG5jb25zdCByZW5kZXJPcmRlckNvbmZpcm1hdGlvbiA9IChcbiAgb3JkZXJDb25maXJtYXRpb246IEVsZW1lbnQsXG4gIGRhdGE6IFJlY29yZDxhbnksIGFueT5cbikgPT4ge1xuICByZW5kZXJUcmVlKG9yZGVyQ29uZmlybWF0aW9uLCBkYXRhKTtcbn07XG5cbmNvbnN0IGhhbmRsZVJlbmRlck9yZGVyQ29uZmlybWF0aW9uID0gKFxuICBldmVudDogRXZlbnQgfCBDdXN0b21FdmVudCxcbiAgYXBvbGxvQ2xpZW50OiBBcG9sbG9DbGllbnQ8Tm9ybWFsaXplZENhY2hlT2JqZWN0PlxuKSA9PiB7XG4gIGlmICh3aW5kb3cuV2ViZmxvdy5lbnYoJ2Rlc2lnbicpIHx8IHdpbmRvdy5XZWJmbG93LmVudigncHJldmlldycpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKGV2ZW50IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gUkVOREVSX1RSRUVfRVZFTlQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZXJyb3JzOiBBcnJheTxhbnk+ID0gW107XG4gIGNvbnN0IHtkZXRhaWx9ID0gZXZlbnQ7XG4gIGlmIChkZXRhaWwgIT0gbnVsbCAmJiBkZXRhaWwuZXJyb3IpIHtcbiAgICBlcnJvcnMucHVzaChkZXRhaWwuZXJyb3IpO1xuICB9XG5cbiAgY29uc3Qgb3JkZXJDb25maXJtYXRpb25Db250YWluZXIgPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX09SREVSX0NPTkZJUk1BVElPTl9XUkFQUEVSXG4gICk7XG4gIGlmICghb3JkZXJDb25maXJtYXRpb25Db250YWluZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgb3JkZXJJZCxcbiAgICB0b2tlbixcbiAgfToge1xuICAgIG9yZGVySWQ/OiBzdHJpbmc7XG4gICAgdG9rZW4/OiBzdHJpbmc7XG4gIH0gPSBxcy5wYXJzZSh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gIGlmICghb3JkZXJJZCB8fCAhdG9rZW4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBmaW5hbGl6ZWRPcmRlciA9IHtvcmRlcklkLCB0b2tlbn0gYXMgY29uc3Q7XG5cbiAgLy8gcnVucyB0aGUgYW5hbHl0aWNzIChmYWNlYm9vayBhbmQgZ29vZ2xlIHBpeGVsKVxuICAvLyB3ZSBkb24ndCBibG9jayBvbiBpdCwgc2luY2UgdGhpcyBpc24ndCBuZWVkZWQgZm9yIGFueSByZW5kZXJpbmdcbiAgLy8gc28gaXQgaWYgZmFpbHMsIGl0IGNhbiBqdXN0IGZhaWwgc2lsZW50bHlcbiAgdHJhY2tPcmRlcihhcG9sbG9DbGllbnQsIGZpbmFsaXplZE9yZGVyKTtcblxuICBjb25zdCBhbGxPcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lcnMgPSBmaW5kQWxsRWxlbWVudHNCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9PUkRFUl9DT05GSVJNQVRJT05fV1JBUFBFUlxuICApO1xuXG4gIGFwb2xsb0NsaWVudFxuICAgIC5xdWVyeSh7XG4gICAgICBxdWVyeTogZ3FsYFxuICAgICAgICAke29yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyLmdldEF0dHJpYnV0ZShPUkRFUl9RVUVSWSl9XG4gICAgICBgLFxuICAgICAgdmFyaWFibGVzOiB7ZmluYWxpemVkT3JkZXJ9LFxuICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLFxuICAgICAgLy8gZXJyb3JQb2xpY3kgaXMgc2V0IHRvIGBhbGxgIHNvIHRoYXQgd2UgY29udGludWUgdG8gZ2V0IHRoZSBjYXJ0IGRhdGEgd2hlbiBhbiBlcnJvciBvY2N1cnNcbiAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGluIGNhc2VzIGxpa2Ugd2hlbiB0aGUgYWRkcmVzcyBlbnRlcmVkIGRvZXNuJ3QgaGF2ZSBhIHNoaXBwaW5nIHpvbmUsIGFzIHRoYXQgcmV0dXJuc1xuICAgICAgLy8gYSBncmFwaFFMIGVycm9yLCBidXQgd2Ugc3RpbGwgd2FudCB0byByZW5kZXIgd2hhdCB0aGUgY3VzdG9tZXIgaGFzIGVudGVyZWRcbiAgICAgIGVycm9yUG9saWN5OiAnYWxsJyxcbiAgICB9KVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICBhbGxPcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lcnMuZm9yRWFjaChcbiAgICAgICAgKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSkgPT4ge1xuICAgICAgICAgIHJlbmRlck9yZGVyQ29uZmlybWF0aW9uKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSwge1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIGVycm9yczogZXJyb3JzLmNvbmNhdChkYXRhLmVycm9ycykuZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICBhbGxPcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lcnMuZm9yRWFjaChcbiAgICAgICAgKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSkgPT4ge1xuICAgICAgICAgIHJlbmRlck9yZGVyQ29uZmlybWF0aW9uKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSwge2Vycm9yc30pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gKGhhbmRsZXJQcm94eTogRXZlbnRIYW5kbGVyUHJveHlXaXRoQXBvbGxvQ2xpZW50KSA9PiB7XG4gIGhhbmRsZXJQcm94eS5vbihSRU5ERVJfVFJFRV9FVkVOVCwgQm9vbGVhbiwgaGFuZGxlUmVuZGVyT3JkZXJDb25maXJtYXRpb24pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge3JlZ2lzdGVyfTtcbiJdLCJuYW1lcyI6WyJyZWdpc3RlciIsInJlbmRlck9yZGVyQ29uZmlybWF0aW9uIiwib3JkZXJDb25maXJtYXRpb24iLCJkYXRhIiwicmVuZGVyVHJlZSIsImhhbmRsZVJlbmRlck9yZGVyQ29uZmlybWF0aW9uIiwiZXZlbnQiLCJhcG9sbG9DbGllbnQiLCJ3aW5kb3ciLCJXZWJmbG93IiwiZW52IiwiQ3VzdG9tRXZlbnQiLCJ0eXBlIiwiUkVOREVSX1RSRUVfRVZFTlQiLCJlcnJvcnMiLCJkZXRhaWwiLCJlcnJvciIsInB1c2giLCJvcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lciIsImZpbmRFbGVtZW50QnlOb2RlVHlwZSIsIk5PREVfVFlQRV9DT01NRVJDRV9PUkRFUl9DT05GSVJNQVRJT05fV1JBUFBFUiIsIm9yZGVySWQiLCJ0b2tlbiIsInFzIiwicGFyc2UiLCJsb2NhdGlvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsImZpbmFsaXplZE9yZGVyIiwidHJhY2tPcmRlciIsImFsbE9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVycyIsImZpbmRBbGxFbGVtZW50c0J5Tm9kZVR5cGUiLCJxdWVyeSIsImdxbCIsImdldEF0dHJpYnV0ZSIsIk9SREVSX1FVRVJZIiwidmFyaWFibGVzIiwiZmV0Y2hQb2xpY3kiLCJlcnJvclBvbGljeSIsInRoZW4iLCJmb3JFYWNoIiwib3JkZXJDb25maXJtYXRpb25Db250YWluZXJOb2RlIiwiY29uY2F0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNhdGNoIiwiZXJyIiwiaGFuZGxlclByb3h5Iiwib24iXSwibWFwcGluZ3MiOiJBQUFBLCtCQUErQjs7Ozs7Ozs7Ozs7SUEwRy9CLE9BQTBCO2VBQTFCOztJQUphQSxRQUFRO2VBQVJBOzs7bUVBckdHOzJEQUNEOytCQU1SOzJCQUNrQjsyQkFLbEI7Ozs7OztBQUdQLE1BQU1DLDBCQUEwQixDQUM5QkMsbUJBQ0FDO0lBRUFDLElBQUFBLHFCQUFVLEVBQUNGLG1CQUFtQkM7QUFDaEM7QUFFQSxNQUFNRSxnQ0FBZ0MsQ0FDcENDLE9BQ0FDO0lBRUEsSUFBSUMsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYUYsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWTtRQUNqRTtJQUNGO0lBQ0EsSUFBSSxDQUFFSixDQUFBQSxpQkFBaUJLLGVBQWVMLE1BQU1NLElBQUksS0FBS0MsNEJBQWlCLEFBQUQsR0FBSTtRQUN2RTtJQUNGO0lBRUEsTUFBTUMsU0FBcUIsRUFBRTtJQUM3QixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHVDtJQUNqQixJQUFJUyxVQUFVLFFBQVFBLE9BQU9DLEtBQUssRUFBRTtRQUNsQ0YsT0FBT0csSUFBSSxDQUFDRixPQUFPQyxLQUFLO0lBQzFCO0lBRUEsTUFBTUUsNkJBQTZCQyxJQUFBQSxvQ0FBcUIsRUFDdERDLHdEQUE2QztJQUUvQyxJQUFJLENBQUNGLDRCQUE0QjtRQUMvQjtJQUNGO0lBRUEsTUFBTSxFQUNKRyxPQUFPLEVBQ1BDLEtBQUssRUFDTixHQUdHQyxXQUFFLENBQUNDLEtBQUssQ0FBQ2hCLE9BQU9pQixRQUFRLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDO0lBQzlDLElBQUksQ0FBQ04sV0FBVyxDQUFDQyxPQUFPO1FBQ3RCO0lBQ0Y7SUFFQSxNQUFNTSxpQkFBaUI7UUFBQ1A7UUFBU0M7SUFBSztJQUV0QyxpREFBaUQ7SUFDakQsa0VBQWtFO0lBQ2xFLDRDQUE0QztJQUM1Q08sSUFBQUEseUJBQVUsRUFBQ3RCLGNBQWNxQjtJQUV6QixNQUFNRSxpQ0FBaUNDLElBQUFBLHdDQUF5QixFQUM5RFgsd0RBQTZDO0lBRy9DYixhQUNHeUIsS0FBSyxDQUFDO1FBQ0xBLE9BQU9DLElBQUFBLG1CQUFHLENBQUEsQ0FBQztRQUNULEVBQUVmLDJCQUEyQmdCLFlBQVksQ0FBQ0Msc0JBQVcsRUFBRTtNQUN6RCxDQUFDO1FBQ0RDLFdBQVc7WUFBQ1I7UUFBYztRQUMxQlMsYUFBYTtRQUNiLDRGQUE0RjtRQUM1Rix5R0FBeUc7UUFDekcsNkVBQTZFO1FBQzdFQyxhQUFhO0lBQ2YsR0FDQ0MsSUFBSSxDQUFDLENBQUNwQztRQUNMMkIsK0JBQStCVSxPQUFPLENBQ3BDLENBQUNDO1lBQ0N4Qyx3QkFBd0J3QyxnQ0FBZ0M7Z0JBQ3RELEdBQUd0QyxJQUFJO2dCQUNQVyxRQUFRQSxPQUFPNEIsTUFBTSxDQUFDdkMsS0FBS1csTUFBTSxFQUFFNkIsTUFBTSxDQUFDQztZQUM1QztRQUNGO0lBRUosR0FDQ0MsS0FBSyxDQUFDLENBQUNDO1FBQ05oQyxPQUFPRyxJQUFJLENBQUM2QjtRQUNaaEIsK0JBQStCVSxPQUFPLENBQ3BDLENBQUNDO1lBQ0N4Qyx3QkFBd0J3QyxnQ0FBZ0M7Z0JBQUMzQjtZQUFNO1FBQ2pFO0lBRUo7QUFDSjtBQUVPLE1BQU1kLFdBQVcsQ0FBQytDO0lBQ3ZCQSxhQUFhQyxFQUFFLENBQUNuQyw0QkFBaUIsRUFBRStCLFNBQVN2QztBQUM5QztNQUVBLFdBQWU7SUFBQ0w7QUFBUSJ9
    
    }),
    86365: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* global window, document, Element, CustomEvent, HTMLElement, HTMLFormElement */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        default: function() {
            return _default;
        },
        renderPaypalButtons: function() {
            return renderPaypalButtons;
        }
    });
    const _commerceUtils = __webpack_require__(54556);
    const _checkoutUtils = __webpack_require__(17696);
    const _cartUtils = __webpack_require__(69773);
    const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
    const _checkoutMutations = __webpack_require__(94797);
    const _constants = __webpack_require__(10873);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isPlaceOrderButtonEvent = ({ target })=>{
        const placeOrderButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, target);
        if (placeOrderButton && target instanceof Element) {
            return target;
        } else {
            return false;
        }
    };
    let hasSyncedWithPaypal = false;
    const handleRenderPayPalCheckout = (event, apolloClient)=>{
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
            return;
        }
        const checkoutFormContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER);
        if (!checkoutFormContainers || checkoutFormContainers.length === 0) {
            return;
        }
        const errors = [];
        const { detail } = event;
        if (detail != null && detail.error) {
            errors.push(detail.error);
        }
        const focusedEle = window.document.activeElement;
        const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER, // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'EventTarget'.
        focusedEle);
        let prevFocusedInput = null;
        // Only trigger for focused elements in a checkout form
        if (focusedEle instanceof HTMLInputElement && checkoutForm) {
            prevFocusedInput = focusedEle.id;
            if (!prevFocusedInput) {
                prevFocusedInput = focusedEle.getAttribute('data-wf-bindings');
            }
            // Move from empty string to null
            prevFocusedInput = prevFocusedInput ? null : prevFocusedInput;
        }
        const syncWithPayPalIfNeeded = !hasSyncedWithPaypal ? apolloClient.mutate({
            mutation: _checkoutMutations.syncPayPalOrderInfo
        }) : Promise.resolve();
        syncWithPayPalIfNeeded.then(()=>{
            hasSyncedWithPaypal = true;
            (0, _checkoutUtils.renderCheckoutFormContainers)(checkoutFormContainers, errors, apolloClient, undefined, prevFocusedInput);
        });
    };
    let placingOrder = false;
    const startOrderFlow = (placeOrderButton)=>{
        placingOrder = true;
        window.addEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
        const buttonText = placeOrderButton.innerHTML;
        const loadingText = placeOrderButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
        placeOrderButton.innerHTML = loadingText ? loadingText : _constants.CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT;
        const finishOrderFlow = (isRedirecting = false)=>{
            // we only set `placingOrder` to false if we're not redirecting to the
            // confirmation page. this is so that while waiting for the confirmation
            // page to load, the user can't attempt to submit the order again
            if (!isRedirecting) {
                placingOrder = false;
            }
            window.removeEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
            placeOrderButton.innerHTML = buttonText ? buttonText : _constants.CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT;
        };
        return finishOrderFlow;
    };
    const checkFormValidity = ({ shippingInfo, additionalInfo, requiresShipping })=>{
        if (!HTMLFormElement.prototype.reportValidity) {
            return true;
        }
        if (requiresShipping && !shippingInfo.reportValidity() || additionalInfo && additionalInfo instanceof HTMLFormElement && !additionalInfo.reportValidity()) {
            return false;
        }
        return true;
    };
    // @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
    const handlePlaceOrder = (event, apolloClient)=>{
        // Want to skip placing order if in design/preview mode, or an order place is in progress
        if (window.Webflow.env('design') || window.Webflow.env('preview') || placingOrder) {
            return;
        }
        const { currentTarget } = event;
        if (!(currentTarget instanceof Element)) {
            return;
        }
        const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER, currentTarget);
        if (!(checkoutFormContainer instanceof Element)) {
            return;
        }
        const errorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE, checkoutFormContainer);
        const shippingInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, checkoutFormContainer);
        const placeOrderButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, checkoutFormContainer);
        const additionalInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO, checkoutFormContainer);
        if (!(errorState instanceof HTMLElement) || !(shippingInfo instanceof HTMLFormElement) || !(placeOrderButton instanceof Element)) {
            return;
        }
        const errorMessage = errorState.querySelector(_constants.CART_CHECKOUT_ERROR_MESSAGE_SELECTOR);
        // If the error message has this attribute, we want to block the order from
        // being submitted as the user is being forced to refresh the checkout page.
        if (errorMessage && errorMessage.hasAttribute(_constants.NEEDS_REFRESH)) {
            return;
        }
        const hasAdditionalInfo = additionalInfo && additionalInfo instanceof HTMLElement;
        const finishOrderFlow = startOrderFlow(placeOrderButton);
        errorState.style.setProperty('display', 'none');
        (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping })=>{
            const isFormValid = checkFormValidity({
                shippingInfo,
                additionalInfo,
                requiresShipping
            });
            if (!isFormValid) {
                finishOrderFlow();
                return;
            }
            // final sync with server, to ensure validity
            let shippingMethodId = '';
            // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
            if (requiresShipping && shippingInfo.elements['shipping-method-choice']) {
                // this is an IE11-safe way of just doing shippingInfo.elements['shipping-method-choice'].value
                const shippingMethodChoice = shippingInfo.querySelector('input[name="shipping-method-choice"]:checked');
                // this should never be falsey, but Flow
                if (shippingMethodChoice) {
                    shippingMethodId = shippingMethodChoice.value;
                }
            }
            const customData = hasAdditionalInfo ? (0, _commerceUtils.customDataFormToArray)(additionalInfo) : [];
            const syncPayPalCheckoutForm = Promise.all([
                requiresShipping ? (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, shippingMethodId) : Promise.resolve(),
                hasAdditionalInfo ? (0, _checkoutUtils.createCustomDataMutation)(apolloClient, customData) : Promise.resolve()
            ]);
            syncPayPalCheckoutForm.then(()=>{
                return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                    checkoutType: 'paypal'
                });
            }).then((data)=>{
                _debug.default.log(data);
                const order = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(data);
                if (order.ok) {
                    finishOrderFlow(true);
                    (0, _checkoutUtils.redirectToOrderConfirmation)(order, true);
                }
            }).catch((err)=>{
                finishOrderFlow();
                _debug.default.error(err);
                errorState.style.removeProperty('display');
                (0, _checkoutUtils.updateErrorMessage)(errorState, err);
                if (err.graphQLErrors && err.graphQLErrors[0] && err.graphQLErrors[0].message) {
                    const parsedError = (0, _commerceUtils.safeParseJson)(err.graphQLErrors[0].message);
                    if (!parsedError) {
                        return;
                    }
                    if (parsedError.details && parsedError.details[0] && parsedError.details[0].issue === 'INSTRUMENT_DECLINED') {
                        const message = {
                            isWebflow: true,
                            type: 'error',
                            detail: parsedError
                        };
                        window.parent.postMessage(JSON.stringify(message), window.location.origin);
                    }
                }
            });
        });
    };
    // width and height is defined twice, so that on older browsers that
    // don't support vw/vh, we get the 100% instead
    const iframeStyle = `
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      width: 100%;
      height: 100%;
      width: 100vw;
      height: 100vh;
      min-width: 100%;
      min-height: 100%;
      max-width: 100%;
      max-height: 100%;
      z-index: 2147483647;
      border: 0;
      background-color: #ffffff;
    `;
    const createConfirmationIframe = (actions)=>{
        const documentRoot = document.documentElement;
        // we use this instead of document.body to appease the flow gods
        const documentBody = document.querySelector('body');
        if (!documentRoot || !documentBody) {
            return;
        }
        const iframe = document.createElement('iframe');
        iframe.setAttribute('style', iframeStyle);
        iframe.setAttribute('src', '/paypal-checkout');
        if (!documentBody.parentNode) {
            return;
        }
        documentBody.parentNode.appendChild(iframe);
        const previousRootOverflow = documentRoot.style.overflow;
        documentRoot.style.overflow = 'hidden';
        const previousBodyDisplay = documentBody.style.display;
        documentBody.style.display = 'none';
        const paypalMessageHandler = (event)=>{
            if (event.origin !== window.location.origin) {
                return;
            }
            const data = (0, _commerceUtils.safeParseJson)(String(event.data));
            // we include an `isWebflow` since paypal sends some messages on the page
            // and we want to make sure that we don't accidentally intercept one of their messages
            if (!data || data.isWebflow !== true || !data.type || !data.detail) {
                return;
            }
            if (data.type === 'success') {
                window.removeEventListener('message', paypalMessageHandler);
                window.location.href = data.detail;
            }
            if (data.type === 'error') {
                window.removeEventListener('message', paypalMessageHandler);
                if (previousRootOverflow) {
                    documentRoot.style.overflow = previousRootOverflow;
                } else {
                    documentRoot.style.overflow = '';
                }
                if (previousBodyDisplay) {
                    documentBody.style.display = previousBodyDisplay;
                } else {
                    documentBody.style.display = '';
                }
                if (documentBody.parentNode) {
                    documentBody.parentNode.removeChild(iframe);
                }
                actions.restart();
            }
        };
        window.addEventListener('message', paypalMessageHandler);
    };
    const renderPaypalButtons = (apolloClient)=>()=>{
            const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
            const buttons = Array.from(document.querySelectorAll(`[${_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE}]`));
            if (paypalElement && buttons && buttons.length > 0) {
                buttons.forEach((button)=>{
                    const style = (0, _commerceUtils.safeParseJson)(button.getAttribute(_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE));
                    // @ts-expect-error - TS2551 - Property 'paypal' does not exist on type 'Window & typeof globalThis'. Did you mean 'Papa'?
                    window.paypal.Buttons({
                        style,
                        createOrder () {
                            return apolloClient.mutate({
                                mutation: _checkoutMutations.requestPayPalOrderMutation
                            }).then((data)=>{
                                const { data: { ecommercePaypalOrderRequest: { orderId } } } = data;
                                return orderId;
                            }).catch((err)=>{
                                (0, _checkoutUtils.showErrorMessageForError)(err);
                                if ((0, _cartUtils.isCartOpen)()) {
                                    (0, _cartUtils.showErrorMessageForError)(err);
                                }
                                throw err;
                            });
                        },
                        onApprove (data, actions) {
                            createConfirmationIframe(actions);
                        }
                    }).render(button);
                });
            }
        };
    const register = (handlerProxy)=>{
        handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderPayPalCheckout);
        handlerProxy.on('click', isPlaceOrderButtonEvent, handlePlaceOrder);
        handlerProxy.on('keydown', isPlaceOrderButtonEvent, (event, apolloClient)=>{
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 32) {
                // prevent scrolling on spacebar key press
                event.preventDefault();
            }
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 13) {
                // enter key press
                return handlePlaceOrder(event, apolloClient);
            }
        });
        handlerProxy.on('keyup', isPlaceOrderButtonEvent, (event, apolloClient)=>{
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 32) {
                // spacebar key press
                return handlePlaceOrder(event, apolloClient);
            }
        });
    };
    const _default = {
        register
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    91898: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window, document, HTMLElement */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        applySkuBoundConditionalVisibility: function() {
            return applySkuBoundConditionalVisibility;
        },
        renderTree: function() {
            return renderTree;
        }
    });
    const _Transformers = __webpack_require__(61649);
    const _escape = /*#__PURE__*/ _interop_require_default(__webpack_require__(28929));
    const _cloneDeep = /*#__PURE__*/ _interop_require_default(__webpack_require__(37252));
    const _transform = /*#__PURE__*/ _interop_require_default(__webpack_require__(16089));
    const _constants = __webpack_require__(10873);
    const _constants1 = __webpack_require__(29197);
    const _RenderingUtils = __webpack_require__(86078);
    const _commerceUtils = __webpack_require__(54556);
    const _DynamoFormattingUtils = __webpack_require__(82688);
    const _site = __webpack_require__(32949);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const allowedFieldTypes = {
        ..._constants1.SHARED_ALLOWED_FIELD_TYPES,
        'data-commerce-sku-id': [
            'ItemRef'
        ]
    };
    const isBindingPropToFieldTypeAllowed = (// @ts-expect-error - TS7006 - Parameter 'bindingProperty' implicitly has an 'any' type.
    bindingProperty, type)=>{
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly 'data-commerce-sku-id': readonly ["ItemRef"]; readonly innerHTML: { PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; ... 6 more ...; CommercePropValues: string; }; ... 11 more ...; readonly dataWHref: string[]; }'.
        const allowedTypes = allowedFieldTypes[bindingProperty];
        return allowedTypes instanceof Array ? allowedTypes.indexOf(type) > -1 : allowedTypes && type in allowedTypes;
    };
    // @ts-expect-error - TS7023 - 'getIn' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions. | TS7006 - Parameter 'object' implicitly has an 'any' type.
    const getIn = (object, path)=>{
        const nextDotIndex = path.indexOf('.');
        if (object == null) {
            return null;
        }
        if (nextDotIndex !== -1) {
            const pathPart = path.slice(0, nextDotIndex);
            const restOfPath = path.slice(nextDotIndex + 1, path.length);
            return getIn(object[pathPart], restOfPath);
        }
        return object[path];
    };
    const applyBindingsMutation = ({ // @ts-expect-error - TS7031 - Binding element 'bindingProperty' implicitly has an 'any' type.
    bindingProperty, // @ts-expect-error - TS7031 - Binding element 'type' implicitly has an 'any' type.
    type, // @ts-expect-error - TS7031 - Binding element 'filter' implicitly has an 'any' type.
    filter, // @ts-expect-error - TS7031 - Binding element 'path' implicitly has an 'any' type.
    path, // @ts-expect-error - TS7031 - Binding element 'timezone' implicitly has an 'any' type.
    timezone, // @ts-expect-error - TS7031 - Binding element 'pageLinkHrefPrefix' implicitly has an 'any' type.
    pageLinkHrefPrefix, collectionSlugMap = {}, // @ts-expect-error - TS7031 - Binding element 'data' implicitly has an 'any' type.
    data, // @ts-expect-error - TS7031 - Binding element 'node' implicitly has an 'any' type.
    node, emailLinkSubject = '' })=>{
        if (!isBindingPropToFieldTypeAllowed(bindingProperty, type)) {
            return;
        }
        const prefix = 'data.';
        let suffix = '';
        if (type === 'ImageRef' && bindingProperty === 'src') {
            suffix = '.url';
        }
        let rawValue;
        if (type === 'CommercePropValues') {
            rawValue = getCommercePropValue(data, `${prefix}${path}`);
        } else {
            rawValue = getIn(data, `${prefix}${path}${suffix}`);
        }
        const transformedValue = (0, _Transformers.transformers)(rawValue, filter, {
            timezone,
            pageLinkHrefPrefix,
            collectionSlugMap,
            // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
            currencySettings: window.__WEBFLOW_CURRENCY_SETTINGS
        });
        const propertyMutator = getPropertyMutator(bindingProperty, emailLinkSubject);
        if (typeof propertyMutator === 'function') {
            propertyMutator(node, type, transformedValue);
        }
    };
    const applyBindings = (bindings, data, node)=>{
        if (bindings == null) {
            return;
        }
        bindings.forEach((binding)=>{
            Object.keys(binding).forEach((bindingProperty)=>{
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"value" | "id" | "alt" | "data-commerce-sku-id" | "innerHTML" | "src" | "checked" | "for" | "style.color" | "style.background-color" | "style.border-color" | "style.background-image", Binding>>'.
                const bindingValue = binding[bindingProperty];
                const { type, filter, dataPath: path, timezone, pageLinkHrefPrefix, collectionSlugMap, emailLinkSubject } = bindingValue;
                applyBindingsMutation({
                    bindingProperty,
                    type,
                    filter,
                    path,
                    timezone,
                    pageLinkHrefPrefix,
                    collectionSlugMap,
                    data,
                    node,
                    emailLinkSubject
                });
            });
        });
    };
    const applyConditionalVisibility = (// @ts-expect-error - TS7006 - Parameter 'conditionData' implicitly has an 'any' type.
    conditionData, data, node)=>{
        if (!conditionData) {
            return;
        }
        const { dataPath, meta } = conditionData;
        const prefixedDataPath = `data.${dataPath}`;
        // manually construct item when the condition is bound to Product Options
        const item = meta && meta.type === 'CommercePropValues' ? {
            name: getIn(data, `${prefixedDataPath}.name`),
            value: getCommercePropValue(data, prefixedDataPath)
        } : getIn(data, prefixedDataPath);
        (0, _RenderingUtils.applyConditionToNode)(node, item, conditionData, true);
    };
    const applySkuBoundConditionalVisibility = ({ conditionData, newSkuItem, node })=>{
        const { condition } = conditionData;
        const skuConditionData = (0, _transform.default)(condition.fields, (data, val, field)=>{
            const skuField = field.split('default-sku:');
            if (skuField.length > 1) {
                // @ts-expect-error - TS18046 - 'data' is of type 'unknown'.
                data[skuField[1]] = val;
                return data;
            }
        });
        // Need to flatten the inventory quantity to allow cond vis bound to inventory counts
        const inventoryQuantity = newSkuItem.inventory.type === 'infinite' ? null : newSkuItem.inventory.quantity;
        const itemWithFlattenedInventory = {
            ...newSkuItem,
            ecSkuInventoryQuantity: inventoryQuantity
        };
        (0, _RenderingUtils.applyConditionToNode)(node, itemWithFlattenedInventory, {
            ...conditionData,
            condition: {
                fields: skuConditionData
            }
        }, true);
    };
    const createStyleMutator = // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type. | TS7006 - Parameter 'type' implicitly has an 'any' type.
    (property)=>(node, type, value)=>{
            if (!(node instanceof HTMLElement && typeof value === 'string')) {
                return;
            }
            if (type === 'ImageRef') {
                node.style.setProperty(property, `url(${value})`);
            }
            node.style.setProperty(property, value);
        };
    const createAttributeMutator = // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type. | TS7006 - Parameter 'type' implicitly has an 'any' type.
    (attribute)=>(node, type, value)=>{
            const sanitizedString = value != null ? String(value) : '';
            node.setAttribute(attribute, sanitizedString);
            if (attribute === 'src' && sanitizedString) {
                (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
            }
        };
    const valueMutator = (node, type, value)=>{
        if (node.hasRendered) {
            return;
        }
        let sanitizedString;
        // if it's a select element, and we have no value, we default to the last value
        // this was added for the case of the first render of the country select field
        // so that it isn't a blank select box when it's a new order without a country set
        if (node.tagName === 'SELECT') {
            sanitizedString = value != null ? String(value) : node.value || '';
        } else {
            sanitizedString = value != null ? String(value) : '';
        }
        node.setAttribute('value', sanitizedString);
        if (node.tagName === 'INPUT' && String(node.type).toLowerCase() === 'text') {
            node.hasRendered = true;
        }
        node.value = sanitizedString;
    };
    const checkedMutator = (node, type, value)=>{
        node.checked = Boolean(value);
    };
    // @ts-expect-error - TS7031 - Binding element 'height' implicitly has an 'any' type. | TS7031 - Binding element 'width' implicitly has an 'any' type.
    const aspectRatio = ({ height, width })=>{
        return height && width ? height / width : 0;
    };
    const mutators = {
        // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type. | TS7006 - Parameter 'type' implicitly has an 'any' type. | TS7006 - Parameter 'value' implicitly has an 'any' type.
        innerHTML: (node, type, value)=>{
            const originalValue = value;
            if (type === 'Video') {
                /*
          TODO handle also innerHTML Video Links
          For example,
          innerHTML: [
            {
              id: 'video-id',
              slug: 'video',
              type: 'Video',
            },
            {
              id: 'url',
              slug: 'url',
              type: 'Link',
            },
          ],
           */ value = value != null && value.metadata != null && typeof value.metadata.html === 'string' ? value.metadata.html : null;
            }
            const valueString = value != null ? String(value) : '';
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
            if (allowedFieldTypes.innerHTML[type] === 'innerHTML') {
                node.innerHTML = valueString;
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
            } else if (allowedFieldTypes.innerHTML[type] === 'innerText') {
                node.innerHTML = (0, _escape.default)(valueString);
            }
            // Videos have their `padding-top` style set automatically to make them responsive, and are a locked style.
            // This is usually done in `shared/render/plugins/Embed/Video.jsx` on the server render. However, the render-time value
            // when rendering the cart is `0`, as the server does not have the associated data from the binding passed to it at
            // render-time, since we're not getting that data until we do the client-side render, after fetching the cart data.
            // So, along with setting the proper innerHTML binding for the embed itself, we also have to do an exception here
            // and set the `padding-top` to the video's aspect ratio (height over width).
            if (type === 'Video' && originalValue && originalValue.metadata && node instanceof HTMLElement) {
                node.style.setProperty('padding-top', `${aspectRatio(originalValue.metadata) * 100}%`);
            }
            if (node.innerHTML) {
                (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
            }
        },
        'style.color': createStyleMutator('color'),
        'style.background-color': createStyleMutator('background-color'),
        'style.border-color': createStyleMutator('border-color'),
        'style.background-image': createStyleMutator('background-image'),
        src: createAttributeMutator('src'),
        alt: createAttributeMutator('alt'),
        id: createAttributeMutator('id'),
        for: createAttributeMutator('for'),
        value: valueMutator,
        checked: checkedMutator,
        'data-commerce-sku-id': createAttributeMutator('data-commerce-sku-id')
    };
    const hrefMutator = (emailLinkSubject)=>(node, type, value)=>{
            if (value) {
                const href = String(value);
                switch(type){
                    case 'Phone':
                        {
                            node.setAttribute('href', (0, _DynamoFormattingUtils.formatPhone)(href, 'href'));
                            break;
                        }
                    case 'Email':
                        {
                            let subject;
                            try {
                                subject = encodeURIComponent(emailLinkSubject);
                            } catch (e) {
                                subject = '';
                            }
                            const formattedEmail = (0, _DynamoFormattingUtils.formatEmail)(href, subject, 'href');
                            node.setAttribute('href', formattedEmail || '#');
                            break;
                        }
                    default:
                        {
                            node.setAttribute('href', href);
                            break;
                        }
                }
            } else {
                node.setAttribute('href', '#');
            }
        };
    // @ts-expect-error - TS7006 - Parameter 'bindingProperty' implicitly has an 'any' type.
    const getPropertyMutator = (bindingProperty, emailLinkSubject)=>{
        if (bindingProperty === 'href' || bindingProperty === 'dataWHref') {
            return hrefMutator(emailLinkSubject);
        }
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly innerHTML: (node: any, type: any, value: any) => void; readonly 'style.color': (node: any, type: any, value: unknown) => void; readonly 'style.background-color': (node: any, type: any, value: unknown) => void; ... 8 more ...; readonly 'data-commerce-sku-id': (node: any, type: any, value: unknown) => void; }'.
        if (typeof mutators[bindingProperty] === 'function') {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly innerHTML: (node: any, type: any, value: any) => void; readonly 'style.color': (node: any, type: any, value: unknown) => void; readonly 'style.background-color': (node: any, type: any, value: unknown) => void; ... 8 more ...; readonly 'data-commerce-sku-id': (node: any, type: any, value: unknown) => void; }'.
            return mutators[bindingProperty];
        }
        return null;
    };
    const getCommercePropValue = (data, path)=>{
        const option = getIn(data, path);
        if (option) {
            const pathToOptionAsArray = path.split('.');
            const pathToCommercePropValues = pathToOptionAsArray.slice(0, pathToOptionAsArray.indexOf('product')).concat([
                'sku',
                'f_sku_values_3dr'
            ]).join('.');
            const skuValues = getIn(data, pathToCommercePropValues);
            if (Array.isArray(skuValues)) {
                return (0, _site.getProductOptionValueName)(option, (0, _site.simplifySkuValues)(skuValues));
            }
        }
        return '';
    };
    const getTemplateScript = (node)=>{
        const templateId = node.getAttribute(_constants.WF_TEMPLATE_ID_DATA_KEY);
        const templateScript = templateId && node.parentElement && node.parentElement.querySelector(`#${templateId}`);
        return templateScript;
    };
    const createDomFragment = (html)=>{
        const div = document.createElement('div');
        div.innerHTML = html;
        return div.children[0];
    };
    const getTemplateString = (node, index)=>{
        const templateScript = getTemplateScript(node);
        const rawTemplateContent = templateScript && templateScript.textContent;
        const instanceRegEx = /([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}_instance-)\d+/gi;
        const decodedTemplate = rawTemplateContent && decodeURIComponent(rawTemplateContent).replace(instanceRegEx, `$1${index}`);
        if (Boolean(decodedTemplate) && node.hasAttribute(_constants.WF_COLLECTION_DATA_KEY)) {
            const collectionPath = node.getAttribute(_constants.WF_COLLECTION_DATA_KEY);
            if (collectionPath && typeof collectionPath === 'string') {
                const searchTerm = encodeURIComponent(`${(0, _escape.default)(collectionPath)}[]`).replace(/\./g, '\\.');
                const templateSearchTerm = encodeURIComponent(`${(0, _escape.default)(collectionPath)}${encodeURIComponent('[]')}`).replace(/\./g, '\\.');
                const collectionPathRegExp = new RegExp(`${searchTerm}|${templateSearchTerm}`, 'g');
                return decodedTemplate && decodedTemplate.replace(collectionPathRegExp, `${collectionPath}.${index}`);
            }
        }
        return decodedTemplate;
    };
    const getTemplateCollection = (node, data)=>{
        const collectionPath = node.hasAttribute(_constants.WF_COLLECTION_DATA_KEY) && node.getAttribute(_constants.WF_COLLECTION_DATA_KEY);
        return collectionPath ? getIn(data, `data.${collectionPath}`) : [];
    };
    const checkForAndApplyTemplateCollection = (node, data)=>{
        if (node && node.hasAttribute(_constants.WF_TEMPLATE_ID_DATA_KEY)) {
            const collection = getTemplateCollection(node, data);
            node.innerHTML = '';
            if (collection != null && collection.length > 0) {
                for(let index = 0; index < collection.length; index++){
                    const templateString = getTemplateString(node, index);
                    const template = templateString && createDomFragment(templateString);
                    if (template instanceof Element) {
                        if (typeof node.append === 'function') {
                            node.append(renderTree(template, data));
                        } else if (typeof node.appendChild === 'function') {
                            node.appendChild(renderTree(template, data));
                        } else {
                            throw new Error('Could not append child to node');
                        }
                    }
                }
            }
        }
    };
    const checkForAndApplyBindings = (node, data)=>{
        if (node && node.hasAttribute(_constants.WF_BINDING_DATA_KEY)) {
            const bindingData = (0, _commerceUtils.safeParseJson)(node.getAttribute(_constants.WF_BINDING_DATA_KEY));
            applyBindings(bindingData, data, node);
        }
    };
    const checkForAndApplyConditionalVisibility = (node, data)=>{
        if (node && node.hasAttribute(_constants.WF_CONDITION_DATA_KEY)) {
            const conditionData = (0, _commerceUtils.safeParseJson)(node.getAttribute(_constants.WF_CONDITION_DATA_KEY));
            applyConditionalVisibility(conditionData, data, node);
        }
    };
    const renderTree = (tree, data)=>{
        data = flattenOrderData(data);
        return (0, _RenderingUtils.walkDOM)(tree, (node)=>{
            checkForAndApplyTemplateCollection(node, data);
            checkForAndApplyBindings(node, data);
            checkForAndApplyConditionalVisibility(node, data);
        });
    };
    const shippingDataReplacementPaths = {
        cardProvider: [
            'customerInfo',
            'stripePayment',
            'card',
            'provider'
        ],
        cardLastFour: [
            'customerInfo',
            'stripePayment',
            'card',
            'last4'
        ],
        cardExpiresMonth: [
            'customerInfo',
            'stripePayment',
            'card',
            'expires',
            'month'
        ],
        cardExpiresYear: [
            'customerInfo',
            'stripePayment',
            'card',
            'expires',
            'year'
        ],
        customerEmail: [
            'customerInfo',
            'identity',
            'email'
        ],
        shippingAddressAddressee: [
            'customerInfo',
            'shippingAddress',
            'addressee'
        ],
        shippingAddressLine1: [
            'customerInfo',
            'shippingAddress',
            'line1'
        ],
        shippingAddressLine2: [
            'customerInfo',
            'shippingAddress',
            'line2'
        ],
        shippingAddressCity: [
            'customerInfo',
            'shippingAddress',
            'city'
        ],
        shippingAddressState: [
            'customerInfo',
            'shippingAddress',
            'state'
        ],
        shippingAddressCountry: [
            'customerInfo',
            'shippingAddress',
            'country'
        ],
        shippingAddressPostalCode: [
            'customerInfo',
            'shippingAddress',
            'postalCode'
        ],
        billingAddressAddressee: [
            'customerInfo',
            'billingAddress',
            'addressee'
        ],
        billingAddressLine1: [
            'customerInfo',
            'billingAddress',
            'line1'
        ],
        billingAddressLine2: [
            'customerInfo',
            'billingAddress',
            'line2'
        ],
        billingAddressCity: [
            'customerInfo',
            'billingAddress',
            'city'
        ],
        billingAddressPostalCode: [
            'customerInfo',
            'billingAddress',
            'postalCode'
        ],
        billingAddressState: [
            'customerInfo',
            'billingAddress',
            'state'
        ],
        billingAddressCountry: [
            'customerInfo',
            'billingAddress',
            'country'
        ],
        requiresShipping: [
            'statusFlags',
            'requiresShipping'
        ],
        hasDownloads: [
            'statusFlags',
            'hasDownloads'
        ]
    };
    const flattenCustomData = (customData)=>// @ts-expect-error - Flow 0.121.0
        customData.reduce((flattenedData, data)=>{
            if (data.textArea) {
                flattenedData.additionalTextArea = data.textArea;
            } else if (data.textInput) {
                flattenedData.additionalTextInput = data.textInput;
            } else if (data.checkbox !== null) {
                flattenedData.additionalCheckbox = data.checkbox;
            }
            return flattenedData;
        }, {});
    const flattenOrderData = (data)=>{
        const orderExists = data && data.data && data.data.database && data.data.database.commerceOrder !== null;
        if (!orderExists) {
            return data;
        }
        // @ts-expect-error - TS2339 - Property 'commerceOrder' does not exist on type '{ commerceOrder?: { availableShippingMethods?: [] | undefined; } | undefined; } | undefined'. | TS18048 - 'data.data' is possibly 'undefined'.
        const { commerceOrder } = data.data.database;
        const paymentProcessor = commerceOrder.paymentProcessor;
        const availableShippingMethods = commerceOrder.availableShippingMethods || [];
        const selectedShippingMethod = availableShippingMethods.find(// @ts-expect-error - TS7006 - Parameter 'shippingMethod' implicitly has an 'any' type.
        (shippingMethod)=>shippingMethod.selected === true);
        const flattenedCustomData = commerceOrder.customData ? flattenCustomData(commerceOrder.customData) : {};
        const flattenedOrderData = {
            ...commerceOrder,
            shippingMethodName: selectedShippingMethod && selectedShippingMethod.name,
            shippingMethodDescription: selectedShippingMethod && selectedShippingMethod.description,
            ...flattenedCustomData
        };
        // We have to deep clone the data here, as the properties from the data
        // returned by Apollo are read-only.
        const clonedData = (0, _cloneDeep.default)(data);
        // @ts-expect-error - TS18048 - 'clonedData.data' is possibly 'undefined'.
        clonedData.data.database.commerceOrder = Object.keys(shippingDataReplacementPaths).reduce((updatedData, flattenPath)=>{
            // Override cardProvider for PayPal order
            if (flattenPath === 'cardProvider' && paymentProcessor === 'paypal') {
                updatedData = {
                    ...updatedData,
                    cardProvider: 'PayPal'
                };
                return updatedData;
            }
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly cardProvider: readonly ["customerInfo", "stripePayment", "card", "provider"]; readonly cardLastFour: readonly ["customerInfo", "stripePayment", "card", "last4"]; readonly cardExpiresMonth: readonly [...]; ... 17 more ...; readonly hasDownloads: readonly [...]; }'.
            const replacementFrom = shippingDataReplacementPaths[flattenPath];
            const replacementData = replacementFrom.reduce((acc, key)=>acc && acc[key], updatedData);
            updatedData[flattenPath] = replacementData;
            return updatedData;
        }, flattenedOrderData);
        return clonedData;
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    5841: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        StripeStore: function() {
            return StripeStore;
        },
        generateDisplayItemsFromOrder: function() {
            return generateDisplayItemsFromOrder;
        },
        generateShippingOptionsFromMethods: function() {
            return generateShippingOptionsFromMethods;
        }
    });
    const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
    const _constants = __webpack_require__(10873);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    class StripeStore {
        constructor(docElement){
            if (window.Webflow.env('design') || window.Webflow.env('preview')) {
                return;
            }
            const stripeJsElement = docElement.querySelector(`[${_constants.STRIPE_ECOMMERCE_KEY}]`);
            if (!stripeJsElement) {
                this.store = {
                    initialized: false,
                    stripe: {},
                    elements: [],
                    elementInstances: [],
                    cartPaymentRequests: [],
                    styleMapObservers: {}
                };
                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'StripeStore'. | TS2409 - Return type of constructor signature must be assignable to the instance type of the class.
                return _debug.default.error("Stripe has not been set up for this project â€“ Go to the project's Ecommerce Payment settings in the Designer to link Stripe.");
            }
            const ecommKey = stripeJsElement.getAttribute(_constants.STRIPE_ECOMMERCE_KEY);
            const ecommAccountId = stripeJsElement.getAttribute(_constants.STRIPE_ECOMMERCE_ACCOUNT_ID);
            const stripeOpts = ecommAccountId ? {
                stripeAccount: ecommAccountId,
                apiVersion: '2020-03-02'
            } : null;
            // @ts-expect-error - TS2339 - Property 'Stripe' does not exist on type 'Window & typeof globalThis'.
            const stripe = window.Stripe(ecommKey, stripeOpts);
            this.store = {
                initialized: true,
                stripe,
                elements: [],
                elementInstances: [],
                cartPaymentRequests: [],
                styleMapObservers: {}
            };
        }
        isInitialized() {
            return this.store.initialized;
        }
        getStripeInstance() {
            return this.store.stripe;
        }
        getElementsInstance(index) {
            return this.store.elements[index];
        }
        getElement(type, index) {
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            return this.store.elementInstances[index][type];
        }
        createElementsInstance(index) {
            if (this.store.elements[index]) {
                throw new Error(`Storage already exists for checkout form instance ${index}`);
            } else {
                const stripeInstance = this.getStripeInstance();
                this.store.elements[index] = stripeInstance.elements();
                this.store.elementInstances[index] = {};
            }
        }
        createElement(type, index, options) {
            if (!this.isInitialized()) {
                throw new Error("Stripe has not been set up for this project â€“ Go to the project's Ecommerce Payment settings in the Designer to link Stripe.");
            }
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            if (this.store.elementInstances[index][type]) {
                throw new Error(`Stripe Element of type ${type} for instance ${index} already exists on this page`);
            }
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            const el = this.store.elements[index].create(type, options);
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            this.store.elementInstances[index][type] = el;
            return el;
        }
        updateCartPaymentRequest(index, orderData, siteData) {
            const stripeInstance = this.getStripeInstance();
            const requiresShipping = Boolean(orderData.statusFlags.requiresShipping);
            const options = {
                country: siteData.businessAddress.country || siteData.defaultCountry || 'US',
                currency: siteData.defaultCurrency.toLowerCase(),
                total: {
                    amount: orderData.subtotal.value,
                    label: 'Subtotal',
                    pending: true
                },
                displayItems: generateDisplayItemsFromOrder(orderData, false),
                requestPayerName: true,
                requestPayerEmail: true,
                requestPayerPhone: false,
                requestShipping: requiresShipping
            };
            try {
                this.store.cartPaymentRequests[index] = stripeInstance.paymentRequest(options);
            } catch (error) {
                let ignoreError = false;
                // Stripe errors are `IntegrationError`s
                if (error.name === 'IntegrationError') {
                    const unsupportedCountryPattern = /country should be one of the following strings(?:.*)You specified: (.*)./;
                    const matches = error.message.match(unsupportedCountryPattern);
                    ignoreError = Boolean(matches);
                }
                // We want the error to carry on if it's not exactly what we're looking for.
                if (!ignoreError) {
                    throw error;
                } else {
                    console.error(error);
                }
            }
            return this.store.cartPaymentRequests[index];
        }
        getCartPaymentRequest(index) {
            return this.store.cartPaymentRequests[index];
        }
    }
    const generateDisplayItemsFromOrder = (orderData, showExtraItems)=>[
            // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
            ...orderData.userItems.map((item)=>({
                    label: `${item.product.f_name_} ${item.count > 1 ? `(${item.count})` : ''}`,
                    amount: item.rowTotal.value
                })),
            ...showExtraItems ? orderData.extraItems.map((item)=>({
                    label: item.name,
                    amount: item.price.value
                })) : []
        ];
    const generateShippingOptionsFromMethods = (shippingMethods)=>shippingMethods.map((method)=>({
                id: method.id,
                label: method.name,
                detail: method.description || '',
                amount: method.price.value
            }));
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    94492: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals window */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        default: function() {
            return _default;
        },
        register: function() {
            return register;
        },
        updateWebPaymentsButton: function() {
            return updateWebPaymentsButton;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    const _commerceUtils = __webpack_require__(54556);
    const _stripeStore = __webpack_require__(5841);
    const _checkoutUtils = __webpack_require__(17696);
    const _cartUtils = __webpack_require__(69773);
    const _constants = __webpack_require__(10873);
    const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const hasItems = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.userItems && response.data.database.commerceOrder.userItems.length > 0;
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
    const isWebPaymentsButtonEvent = ({ target })=>{
        const cartCheckoutButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON, target);
        const cartApplePayButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON, target);
        if (cartCheckoutButton) {
            return cartCheckoutButton;
        } else if (cartApplePayButton) {
            return cartApplePayButton;
        } else {
            return false;
        }
    };
    const updateWebPaymentsButton = (wrapper, data, stripeStore)=>{
        const webPaymentsActionsElements = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS, wrapper);
        if (!webPaymentsActionsElements || webPaymentsActionsElements.length === 0 || !hasItems(data)) {
            return;
        }
        webPaymentsActionsElements.forEach((webPaymentsActions)=>{
            (0, _commerceUtils.hideElement)(webPaymentsActions);
            if (!stripeStore || !stripeStore.isInitialized() || !data.data.site.commerce.quickCheckoutEnabled) {
                return;
            }
            const stripeInstance = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
            wrapper.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
            const paymentRequest = stripeStore.updateCartPaymentRequest(stripeInstance, data.data.database.commerceOrder, data.data.site.commerce);
            if (!paymentRequest || typeof paymentRequest.canMakePayment !== 'function') {
                return;
            }
            if ((0, _commerceUtils.isFreeOrder)(data)) {
                return;
            }
            paymentRequest.canMakePayment()// @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type.
            .then((result)=>{
                if (!result) {
                    return;
                }
                const { applePay } = result;
                (0, _commerceUtils.showElement)(webPaymentsActions);
                const cartCheckoutButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON, webPaymentsActions);
                const cartApplePayButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON, webPaymentsActions);
                if (!cartCheckoutButton || !cartApplePayButton) {
                    return;
                }
                if (applePay) {
                    (0, _commerceUtils.hideElement)(cartCheckoutButton);
                    (0, _commerceUtils.showElement)(cartApplePayButton);
                } else {
                    (0, _commerceUtils.hideElement)(cartApplePayButton);
                    (0, _commerceUtils.showElement)(cartCheckoutButton);
                }
            }).catch(()=>{
                _debug.default.log('PaymentRequest not available in this browser â€“ silently exiting');
            });
        });
    };
    const getShippingMethodsQuery = (0, _graphqltag.default)`
      query FetchShippingMethods {
        database {
          id
          commerceOrder {
            id
            availableShippingMethods {
              id
              name
              description
              price {
                value
              }
            }
          }
        }
      }
    `;
    const handleWebPaymentsButton = (event, apolloClient, stripeStore)=>{
        event.preventDefault();
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            if (window.Webflow.env('preview')) {
                window.alert('Web Payments is not available in preview mode.');
            }
            return;
        }
        const { currentTarget } = event;
        const stripeElement = (0, _commerceUtils.findClosestElementWithAttribute)(_constants.STRIPE_ELEMENT_INSTANCE, // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget'.
        currentTarget);
        if (!(stripeElement instanceof Element)) {
            return;
        }
        const stripeInstance = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
        stripeElement.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
        const paymentRequest = stripeStore.getCartPaymentRequest(stripeInstance);
        // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
        paymentRequest.show();
        // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
        if (paymentRequest.hasRegisteredListener('paymentmethod')) {
            // we remove any existing event listeners, which can happen if the modal
            // was closed before a successful payment occurred
            // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
            paymentRequest.removeAllListeners();
        }
        // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
        paymentRequest.on('shippingaddresschange', // @ts-expect-error - TS7031 - Binding element 'updateWith' implicitly has an 'any' type. | TS7031 - Binding element 'shippingAddress' implicitly has an 'any' type.
        ({ updateWith, shippingAddress })=>{
            // @ts-expect-error - TS7034 - Variable 'shippingMethods' implicitly has type 'any[]' in some locations where its type cannot be determined.
            let shippingMethods = [];
            const graphQlQuery = stripeElement.getAttribute(_constants.CART_QUERY) || stripeElement.getAttribute(_constants.CHECKOUT_QUERY);
            // In some cases we receive an obfuscated address from quick checkout service (e.g. Apple pay)
            // We're using a different mutation to mark such address as 'obfuscated' in order to skip address validation when calculating taxes
            (0, _checkoutUtils.createUpdateObfuscatedOrderAddressMutation)(apolloClient, {
                type: 'shipping',
                name: shippingAddress.recipient,
                address_line1: shippingAddress.addressLine[0],
                address_line2: shippingAddress.addressLine[1],
                address_city: shippingAddress.city,
                address_state: shippingAddress.region,
                address_country: shippingAddress.country,
                address_zip: shippingAddress.postalCode
            }).then(()=>{
                return apolloClient.query({
                    query: getShippingMethodsQuery,
                    fetchPolicy: 'network-only',
                    errorPolicy: 'all'
                });
            }).then(({ data })=>{
                if (!data.database.commerceOrder.availableShippingMethods || data.database.commerceOrder.availableShippingMethods.length === 0) {
                    updateWith({
                        status: 'invalid_shipping_address'
                    });
                    return Promise.reject('No valid shipping addresses');
                } else {
                    shippingMethods = data.database.commerceOrder.availableShippingMethods;
                    return (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, data.database.commerceOrder.availableShippingMethods[0].id);
                }
            }).then(()=>{
                return (0, _checkoutUtils.createRecalcOrderEstimationsMutation)(apolloClient);
            }).then(()=>{
                return apolloClient.query({
                    query: (0, _graphqltag.default)`
                  ${graphQlQuery}
                `,
                    fetchPolicy: 'network-only',
                    errorPolicy: 'all'
                });
            }).then(({ data })=>{
                updateWith({
                    status: 'success',
                    displayItems: (0, _stripeStore.generateDisplayItemsFromOrder)(data.database.commerceOrder, true),
                    shippingOptions: // @ts-expect-error - TS7005 - Variable 'shippingMethods' implicitly has an 'any[]' type.
                    (0, _stripeStore.generateShippingOptionsFromMethods)(shippingMethods),
                    total: {
                        amount: data.database.commerceOrder.total.value,
                        label: 'Total',
                        pending: false
                    }
                });
            });
        });
        // @ts-expect-error - TS7031 - Binding element 'updateWith' implicitly has an 'any' type. | TS7031 - Binding element 'shippingOption' implicitly has an 'any' type.
        paymentRequest.on('shippingoptionchange', ({ updateWith, shippingOption })=>{
            const graphQlQuery = stripeElement.getAttribute(_constants.CART_QUERY) || stripeElement.getAttribute(_constants.CHECKOUT_QUERY);
            (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, shippingOption.id).then(()=>{
                return (0, _checkoutUtils.createRecalcOrderEstimationsMutation)(apolloClient);
            }).then(()=>{
                return apolloClient.query({
                    query: (0, _graphqltag.default)`
                ${graphQlQuery}
              `,
                    fetchPolicy: 'network-only',
                    errorPolicy: 'all'
                });
            }).then(({ data })=>{
                updateWith({
                    status: 'success',
                    displayItems: (0, _stripeStore.generateDisplayItemsFromOrder)(data.database.commerceOrder, true),
                    total: {
                        amount: data.database.commerceOrder.total.value,
                        label: 'Total',
                        pending: false
                    }
                });
            });
        });
        // @ts-expect-error - TS7006 - Parameter 'ev' implicitly has an 'any' type.
        paymentRequest.on('paymentmethod', (ev)=>{
            (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping })=>{
                return Promise.all([
                    (0, _checkoutUtils.createOrderIdentityMutation)(apolloClient, ev.payerEmail),
                    requiresShipping ? (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, {
                        type: 'shipping',
                        name: ev.shippingAddress.recipient,
                        address_line1: ev.shippingAddress.addressLine[0],
                        address_line2: ev.shippingAddress.addressLine[1],
                        address_city: ev.shippingAddress.city,
                        address_state: ev.shippingAddress.region,
                        address_country: ev.shippingAddress.country,
                        address_zip: ev.shippingAddress.postalCode
                    }) : Promise.resolve(),
                    (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, {
                        type: 'billing',
                        name: ev.paymentMethod.billing_details.name,
                        address_line1: ev.paymentMethod.billing_details.address.line1,
                        address_line2: ev.paymentMethod.billing_details.address.line2,
                        address_city: ev.paymentMethod.billing_details.address.city,
                        address_state: ev.paymentMethod.billing_details.address.state,
                        address_country: ev.paymentMethod.billing_details.address.country,
                        address_zip: ev.paymentMethod.billing_details.address.postal_code
                    }),
                    requiresShipping ? (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, ev.shippingOption.id) : Promise.resolve(),
                    (0, _checkoutUtils.createStripePaymentMethodMutation)(apolloClient, ev.paymentMethod.id)
                ]);
            }).then(()=>{
                return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                    checkoutType: 'quickCheckout'
                });
            }).then((data)=>{
                const order = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(data);
                if ((0, _checkoutUtils.orderRequiresAdditionalAction)(order.status)) {
                    ev.complete('success');
                    const stripe = stripeStore.getStripeInstance();
                    // @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type.
                    return stripe.handleCardAction(order.clientSecret).then((result)=>{
                        if (result.error) {
                            return Promise.reject(new Error('payment_intent_failed'));
                        }
                        return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                            checkoutType: 'quickCheckout',
                            paymentIntentId: result.paymentIntent.id
                        }).then((resp)=>{
                            const finishedOrder = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(resp);
                            if (finishedOrder.ok) {
                                (0, _checkoutUtils.redirectToOrderConfirmation)(finishedOrder);
                            } else {
                                return Promise.reject(new Error('payment_intent_failed'));
                            }
                        });
                    });
                }
                if (order.ok) {
                    ev.complete('success');
                    (0, _checkoutUtils.redirectToOrderConfirmation)(order);
                } else {
                    return Promise.reject(new Error('order_failed'));
                }
            }).catch((err)=>{
                const hasGraphQLErrors = err && err.graphQLErrors && err.graphQLErrors.length > 0;
                if (hasGraphQLErrors) {
                    switch(err.graphQLErrors[0].code){
                        case 'PriceChanged':
                            {
                                ev.complete('success');
                                // We have to wrap this in a small timeout or else the error won't show up and the payment dialog will time out
                                setTimeout(()=>{
                                    window.alert('The prices of one or more items in your cart have changed. Please refresh this page and try again.');
                                }, 100);
                                return;
                            }
                        case 'ItemNotFound':
                            {
                                ev.complete('success');
                                setTimeout(()=>{
                                    window.alert('One or more of the products in your cart have been removed. Please refresh the page and try again.');
                                }, 100);
                                return;
                            }
                        case 'OrderTotalRange':
                            {
                                ev.complete('success');
                                (0, _checkoutUtils.showErrorMessageForError)(err, ev.currentTarget);
                                if ((0, _cartUtils.isCartOpen)()) {
                                    (0, _cartUtils.showErrorMessageForError)(err, ev.currentTarget);
                                }
                                return;
                            }
                        default:
                    }
                }
                if (err && err.message && err.message === 'payment_intent_failed') {
                    // in the case that we failed outside of the browser UI (i.e. when we had to fall back to the page for 3d secure)
                    // we're going to not call the `ev.complete`, since we already had to mark it with `success` to get back to the page
                    // and since we don't have an error element, we're going to pop up an alert informing them of the issue
                    window.alert('There was an error processing your payment. Please try again, or contact us if you continue to have problems.');
                } else {
                    // otherwise, since we're still in the native browser UI, we can rely on the browser to tell them that something went wrong
                    ev.complete('fail');
                }
            });
        });
    };
    const register = (handlerProxy)=>{
        handlerProxy.on('click', isWebPaymentsButtonEvent, handleWebPaymentsButton);
        handlerProxy.on('keydown', isWebPaymentsButtonEvent, (event, ...rest)=>{
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 32) {
                // prevent scrolling on spacebar key press
                event.preventDefault();
            }
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 13) {
                // enter key press
                return handleWebPaymentsButton(event, ...rest);
            }
        });
        handlerProxy.on('keyup', isWebPaymentsButtonEvent, (event, ...rest)=>{
            // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
            if (event.which === 32) {
                // spacebar key press
                return handleWebPaymentsButton(event, ...rest);
            }
        });
    };
    const _default = {
        register
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    64054: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /**
     * Webflow: E-commerce
     */ 
    const Webflow = __webpack_require__(43949);
    // $FlowFixMe[cannot-resolve-module] Added when migrating to TypeScript
    const { design, destroy, init, preview } = __webpack_require__(2330);
    Webflow.define('commerce', module.exports = function() {
        return {
            design,
            destroy,
            init,
            preview
        };
    });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctY29tbWVyY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXZWJmbG93OiBFLWNvbW1lcmNlXG4gKi9cbmNvbnN0IFdlYmZsb3cgPSByZXF1aXJlKCcuLi9CYXNlU2l0ZU1vZHVsZXMvd2ViZmxvdy1saWInKTtcbi8vICRGbG93Rml4TWVbY2Fubm90LXJlc29sdmUtbW9kdWxlXSBBZGRlZCB3aGVuIG1pZ3JhdGluZyB0byBUeXBlU2NyaXB0XG5jb25zdCB7ZGVzaWduLCBkZXN0cm95LCBpbml0LCBwcmV2aWV3fSA9IHJlcXVpcmUoJy4vbW9kdWxlcycpO1xuXG5XZWJmbG93LmRlZmluZShcbiAgJ2NvbW1lcmNlJyxcbiAgKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7ZGVzaWduLCBkZXN0cm95LCBpbml0LCBwcmV2aWV3fTtcbiAgfSlcbik7XG4iXSwibmFtZXMiOlsiV2ViZmxvdyIsInJlcXVpcmUiLCJkZXNpZ24iLCJkZXN0cm95IiwiaW5pdCIsInByZXZpZXciLCJkZWZpbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQztBQUNELE1BQU1BLFVBQVVDLFFBQVE7QUFDeEIsdUVBQXVFO0FBQ3ZFLE1BQU0sRUFBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFDLEdBQUdKLFFBQVE7QUFFakRELFFBQVFNLE1BQU0sQ0FDWixZQUNDQyxPQUFPQyxPQUFPLEdBQUc7SUFDaEIsT0FBTztRQUFDTjtRQUFRQztRQUFTQztRQUFNQztJQUFPO0FBQ3hDIn0=
    
    }),
    48935: (function (__unused_webpack_module, exports) {
    "use strict";
    // Please keep this file small: it gets imported by published site code.
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        CLASS_NAME_DYNAMIC_LIST: function() {
            return CLASS_NAME_DYNAMIC_LIST;
        },
        CLASS_NAME_DYNAMIC_LIST_COLUMN: function() {
            return CLASS_NAME_DYNAMIC_LIST_COLUMN;
        },
        CLASS_NAME_DYNAMIC_LIST_ITEM: function() {
            return CLASS_NAME_DYNAMIC_LIST_ITEM;
        },
        CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM: function() {
            return CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM;
        },
        CLASS_NAME_DYNAMIC_LIST_REPEATER_REF: function() {
            return CLASS_NAME_DYNAMIC_LIST_REPEATER_REF;
        },
        CLASS_NAME_DYNAMIC_LIST_ROW: function() {
            return CLASS_NAME_DYNAMIC_LIST_ROW;
        },
        CLASS_NAME_DYNAMIC_WRAPPER: function() {
            return CLASS_NAME_DYNAMIC_WRAPPER;
        },
        getColumnNumberClassName: function() {
            return getColumnNumberClassName;
        }
    });
    const CLASS_NAME_DYNAMIC_WRAPPER = 'w-dyn-list';
    const CLASS_NAME_DYNAMIC_LIST = 'w-dyn-items';
    const CLASS_NAME_DYNAMIC_LIST_REPEATER_REF = 'w-dyn-items-repeater-ref';
    const CLASS_NAME_DYNAMIC_LIST_ITEM = 'w-dyn-item';
    const CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM = 'w-dyn-repeater-item';
    const CLASS_NAME_DYNAMIC_LIST_ROW = 'w-row';
    const CLASS_NAME_DYNAMIC_LIST_COLUMN = 'w-col';
    const getColumnNumberClassName = (cols)=>`w-col-${cols}`;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQbGVhc2Uga2VlcCB0aGlzIGZpbGUgc21hbGw6IGl0IGdldHMgaW1wb3J0ZWQgYnkgcHVibGlzaGVkIHNpdGUgY29kZS5cblxuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRFlOQU1JQ19XUkFQUEVSID0gJ3ctZHluLWxpc3QnO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRFlOQU1JQ19MSVNUID0gJ3ctZHluLWl0ZW1zJztcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9SRVBFQVRFUl9SRUYgPSAndy1keW4taXRlbXMtcmVwZWF0ZXItcmVmJztcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9JVEVNID0gJ3ctZHluLWl0ZW0nO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRFlOQU1JQ19MSVNUX1JFUEVBVEVSX0lURU0gPSAndy1keW4tcmVwZWF0ZXItaXRlbSc7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9EWU5BTUlDX0xJU1RfUk9XID0gJ3ctcm93JztcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9DT0xVTU4gPSAndy1jb2wnO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29sdW1uTnVtYmVyQ2xhc3NOYW1lID0gKGNvbHM6IHN0cmluZykgPT4gYHctY29sLSR7Y29sc31gO1xuIl0sIm5hbWVzIjpbIkNMQVNTX05BTUVfRFlOQU1JQ19MSVNUIiwiQ0xBU1NfTkFNRV9EWU5BTUlDX0xJU1RfQ09MVU1OIiwiQ0xBU1NfTkFNRV9EWU5BTUlDX0xJU1RfSVRFTSIsIkNMQVNTX05BTUVfRFlOQU1JQ19MSVNUX1JFUEVBVEVSX0lURU0iLCJDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9SRVBFQVRFUl9SRUYiLCJDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9ST1ciLCJDTEFTU19OQU1FX0RZTkFNSUNfV1JBUFBFUiIsImdldENvbHVtbk51bWJlckNsYXNzTmFtZSIsImNvbHMiXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTs7Ozs7Ozs7Ozs7O0lBRzNEQSx1QkFBdUI7ZUFBdkJBOztJQUtBQyw4QkFBOEI7ZUFBOUJBOztJQUhBQyw0QkFBNEI7ZUFBNUJBOztJQUNBQyxxQ0FBcUM7ZUFBckNBOztJQUZBQyxvQ0FBb0M7ZUFBcENBOztJQUdBQywyQkFBMkI7ZUFBM0JBOztJQUxBQywwQkFBMEI7ZUFBMUJBOztJQVFBQyx3QkFBd0I7ZUFBeEJBOzs7QUFSTixNQUFNRCw2QkFBNkI7QUFDbkMsTUFBTU4sMEJBQTBCO0FBQ2hDLE1BQU1JLHVDQUF1QztBQUM3QyxNQUFNRiwrQkFBK0I7QUFDckMsTUFBTUMsd0NBQXdDO0FBQzlDLE1BQU1FLDhCQUE4QjtBQUNwQyxNQUFNSixpQ0FBaUM7QUFFdkMsTUFBTU0sMkJBQTJCLENBQUNDLE9BQWlCLENBQUMsTUFBTSxFQUFFQSxLQUFLLENBQUMifQ==
    
    }),
    36524: (function (__unused_webpack_module, exports) {
    "use strict";
    var __webpack_unused_export__;
    /**
     * Webflow: Forms (Hosted)
     */ 
    __webpack_unused_export__ = ({
        value: true
    });
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return hostedSubmitWebflow;
        }
    }));
    function hostedSubmitWebflow(reset, loc, Webflow, collectEnterpriseTrackingCookies, preventDefault, findFields, alert, findFileUploads, disableBtn, siteId, afterSubmit, $, formUrl) {
        return function(data) {
            reset(data);
            var form = data.form;
            var payload = {
                name: form.attr('data-name') || form.attr('name') || 'Untitled Form',
                pageId: form.attr('data-wf-page-id') || '',
                elementId: form.attr('data-wf-element-id') || '',
                domain: $('html').attr('data-wf-domain') || null,
                source: loc.href,
                test: Webflow.env(),
                fields: {},
                fileUploads: {},
                dolphin: /pass[\s-_]?(word|code)|secret|login|credentials/i.test(form.html()),
                trackingCookies: collectEnterpriseTrackingCookies()
            };
            const wfFlow = form.attr('data-wf-flow');
            if (wfFlow) {
                payload.wfFlow = wfFlow;
            }
            // only send localeId if it's a localized form
            const localeId = form.attr('data-wf-locale-id');
            if (localeId) {
                payload.localeId = localeId;
            }
            preventDefault(data);
            // Find & populate all fields
            var status = findFields(form, payload.fields);
            if (status) {
                return alert(status);
            }
            payload.fileUploads = findFileUploads(form);
            // Disable submit button
            disableBtn(data);
            // Read site ID
            // NOTE: If this site is exported, the HTML tag must retain the data-wf-site attribute for forms to work
            if (!siteId) {
                afterSubmit(data);
                return;
            }
            $.ajax({
                url: formUrl,
                type: 'POST',
                data: payload,
                dataType: 'json',
                crossDomain: true
            }).done(function(response) {
                if (response && response.code === 200) {
                    data.success = true;
                }
                afterSubmit(data);
            }).fail(function() {
                afterSubmit(data);
            });
        };
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctZm9ybXMtaG9zdGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2ViZmxvdzogRm9ybXMgKEhvc3RlZClcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBob3N0ZWRTdWJtaXRXZWJmbG93KFxuICByZXNldCxcbiAgbG9jLFxuICBXZWJmbG93LFxuICBjb2xsZWN0RW50ZXJwcmlzZVRyYWNraW5nQ29va2llcyxcbiAgcHJldmVudERlZmF1bHQsXG4gIGZpbmRGaWVsZHMsXG4gIGFsZXJ0LFxuICBmaW5kRmlsZVVwbG9hZHMsXG4gIGRpc2FibGVCdG4sXG4gIHNpdGVJZCxcbiAgYWZ0ZXJTdWJtaXQsXG4gICQsXG4gIGZvcm1Vcmxcbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXNldChkYXRhKTtcblxuICAgIHZhciBmb3JtID0gZGF0YS5mb3JtO1xuICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgbmFtZTogZm9ybS5hdHRyKCdkYXRhLW5hbWUnKSB8fCBmb3JtLmF0dHIoJ25hbWUnKSB8fCAnVW50aXRsZWQgRm9ybScsXG4gICAgICBwYWdlSWQ6IGZvcm0uYXR0cignZGF0YS13Zi1wYWdlLWlkJykgfHwgJycsXG4gICAgICBlbGVtZW50SWQ6IGZvcm0uYXR0cignZGF0YS13Zi1lbGVtZW50LWlkJykgfHwgJycsXG4gICAgICBkb21haW46ICQoJ2h0bWwnKS5hdHRyKCdkYXRhLXdmLWRvbWFpbicpIHx8IG51bGwsXG4gICAgICBzb3VyY2U6IGxvYy5ocmVmLFxuICAgICAgdGVzdDogV2ViZmxvdy5lbnYoKSxcbiAgICAgIGZpZWxkczoge30sXG4gICAgICBmaWxlVXBsb2Fkczoge30sXG4gICAgICBkb2xwaGluOiAvcGFzc1tcXHMtX10/KHdvcmR8Y29kZSl8c2VjcmV0fGxvZ2lufGNyZWRlbnRpYWxzL2kudGVzdChcbiAgICAgICAgZm9ybS5odG1sKClcbiAgICAgICksXG4gICAgICB0cmFja2luZ0Nvb2tpZXM6IGNvbGxlY3RFbnRlcnByaXNlVHJhY2tpbmdDb29raWVzKCksXG4gICAgfTtcblxuICAgIGNvbnN0IHdmRmxvdyA9IGZvcm0uYXR0cignZGF0YS13Zi1mbG93Jyk7XG4gICAgaWYgKHdmRmxvdykge1xuICAgICAgcGF5bG9hZC53ZkZsb3cgPSB3ZkZsb3c7XG4gICAgfVxuXG4gICAgLy8gb25seSBzZW5kIGxvY2FsZUlkIGlmIGl0J3MgYSBsb2NhbGl6ZWQgZm9ybVxuICAgIGNvbnN0IGxvY2FsZUlkID0gZm9ybS5hdHRyKCdkYXRhLXdmLWxvY2FsZS1pZCcpO1xuICAgIGlmIChsb2NhbGVJZCkge1xuICAgICAgcGF5bG9hZC5sb2NhbGVJZCA9IGxvY2FsZUlkO1xuICAgIH1cblxuICAgIHByZXZlbnREZWZhdWx0KGRhdGEpO1xuXG4gICAgLy8gRmluZCAmIHBvcHVsYXRlIGFsbCBmaWVsZHNcbiAgICB2YXIgc3RhdHVzID0gZmluZEZpZWxkcyhmb3JtLCBwYXlsb2FkLmZpZWxkcyk7XG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgcmV0dXJuIGFsZXJ0KHN0YXR1cyk7XG4gICAgfVxuXG4gICAgcGF5bG9hZC5maWxlVXBsb2FkcyA9IGZpbmRGaWxlVXBsb2Fkcyhmb3JtKTtcblxuICAgIC8vIERpc2FibGUgc3VibWl0IGJ1dHRvblxuICAgIGRpc2FibGVCdG4oZGF0YSk7XG5cbiAgICAvLyBSZWFkIHNpdGUgSURcbiAgICAvLyBOT1RFOiBJZiB0aGlzIHNpdGUgaXMgZXhwb3J0ZWQsIHRoZSBIVE1MIHRhZyBtdXN0IHJldGFpbiB0aGUgZGF0YS13Zi1zaXRlIGF0dHJpYnV0ZSBmb3IgZm9ybXMgdG8gd29ya1xuICAgIGlmICghc2l0ZUlkKSB7XG4gICAgICBhZnRlclN1Ym1pdChkYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiBmb3JtVXJsLFxuICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgZGF0YTogcGF5bG9hZCxcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBjcm9zc0RvbWFpbjogdHJ1ZSxcbiAgICB9KVxuICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICBkYXRhLnN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYWZ0ZXJTdWJtaXQoZGF0YSk7XG4gICAgICB9KVxuICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBhZnRlclN1Ym1pdChkYXRhKTtcbiAgICAgIH0pO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbImhvc3RlZFN1Ym1pdFdlYmZsb3ciLCJyZXNldCIsImxvYyIsIldlYmZsb3ciLCJjb2xsZWN0RW50ZXJwcmlzZVRyYWNraW5nQ29va2llcyIsInByZXZlbnREZWZhdWx0IiwiZmluZEZpZWxkcyIsImFsZXJ0IiwiZmluZEZpbGVVcGxvYWRzIiwiZGlzYWJsZUJ0biIsInNpdGVJZCIsImFmdGVyU3VibWl0IiwiJCIsImZvcm1VcmwiLCJkYXRhIiwiZm9ybSIsInBheWxvYWQiLCJuYW1lIiwiYXR0ciIsInBhZ2VJZCIsImVsZW1lbnRJZCIsImRvbWFpbiIsInNvdXJjZSIsImhyZWYiLCJ0ZXN0IiwiZW52IiwiZmllbGRzIiwiZmlsZVVwbG9hZHMiLCJkb2xwaGluIiwiaHRtbCIsInRyYWNraW5nQ29va2llcyIsIndmRmxvdyIsImxvY2FsZUlkIiwic3RhdHVzIiwiYWpheCIsInVybCIsInR5cGUiLCJkYXRhVHlwZSIsImNyb3NzRG9tYWluIiwiZG9uZSIsInJlc3BvbnNlIiwiY29kZSIsInN1Y2Nlc3MiLCJmYWlsIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQzs7OzsrQkFFRDs7O2VBQXdCQTs7O0FBQVQsU0FBU0Esb0JBQ3RCQyxLQUFLLEVBQ0xDLEdBQUcsRUFDSEMsT0FBTyxFQUNQQyxnQ0FBZ0MsRUFDaENDLGNBQWMsRUFDZEMsVUFBVSxFQUNWQyxLQUFLLEVBQ0xDLGVBQWUsRUFDZkMsVUFBVSxFQUNWQyxNQUFNLEVBQ05DLFdBQVcsRUFDWEMsQ0FBQyxFQUNEQyxPQUFPO0lBRVAsT0FBTyxTQUFVQyxJQUFJO1FBQ25CYixNQUFNYTtRQUVOLElBQUlDLE9BQU9ELEtBQUtDLElBQUk7UUFDcEIsSUFBSUMsVUFBVTtZQUNaQyxNQUFNRixLQUFLRyxJQUFJLENBQUMsZ0JBQWdCSCxLQUFLRyxJQUFJLENBQUMsV0FBVztZQUNyREMsUUFBUUosS0FBS0csSUFBSSxDQUFDLHNCQUFzQjtZQUN4Q0UsV0FBV0wsS0FBS0csSUFBSSxDQUFDLHlCQUF5QjtZQUM5Q0csUUFBUVQsRUFBRSxRQUFRTSxJQUFJLENBQUMscUJBQXFCO1lBQzVDSSxRQUFRcEIsSUFBSXFCLElBQUk7WUFDaEJDLE1BQU1yQixRQUFRc0IsR0FBRztZQUNqQkMsUUFBUSxDQUFDO1lBQ1RDLGFBQWEsQ0FBQztZQUNkQyxTQUFTLG1EQUFtREosSUFBSSxDQUM5RFQsS0FBS2MsSUFBSTtZQUVYQyxpQkFBaUIxQjtRQUNuQjtRQUVBLE1BQU0yQixTQUFTaEIsS0FBS0csSUFBSSxDQUFDO1FBQ3pCLElBQUlhLFFBQVE7WUFDVmYsUUFBUWUsTUFBTSxHQUFHQTtRQUNuQjtRQUVBLDhDQUE4QztRQUM5QyxNQUFNQyxXQUFXakIsS0FBS0csSUFBSSxDQUFDO1FBQzNCLElBQUljLFVBQVU7WUFDWmhCLFFBQVFnQixRQUFRLEdBQUdBO1FBQ3JCO1FBRUEzQixlQUFlUztRQUVmLDZCQUE2QjtRQUM3QixJQUFJbUIsU0FBUzNCLFdBQVdTLE1BQU1DLFFBQVFVLE1BQU07UUFDNUMsSUFBSU8sUUFBUTtZQUNWLE9BQU8xQixNQUFNMEI7UUFDZjtRQUVBakIsUUFBUVcsV0FBVyxHQUFHbkIsZ0JBQWdCTztRQUV0Qyx3QkFBd0I7UUFDeEJOLFdBQVdLO1FBRVgsZUFBZTtRQUNmLHdHQUF3RztRQUN4RyxJQUFJLENBQUNKLFFBQVE7WUFDWEMsWUFBWUc7WUFDWjtRQUNGO1FBRUFGLEVBQUVzQixJQUFJLENBQUM7WUFDTEMsS0FBS3RCO1lBQ0x1QixNQUFNO1lBQ050QixNQUFNRTtZQUNOcUIsVUFBVTtZQUNWQyxhQUFhO1FBQ2YsR0FDR0MsSUFBSSxDQUFDLFNBQVVDLFFBQVE7WUFDdEIsSUFBSUEsWUFBWUEsU0FBU0MsSUFBSSxLQUFLLEtBQUs7Z0JBQ3JDM0IsS0FBSzRCLE9BQU8sR0FBRztZQUNqQjtZQUVBL0IsWUFBWUc7UUFDZCxHQUNDNkIsSUFBSSxDQUFDO1lBQ0poQyxZQUFZRztRQUNkO0lBQ0o7QUFDRiJ9
    
    }),
    27527: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals
      window,
      document,
      WEBFLOW_FORM_API_HOST,
      WEBFLOW_FORM_OLDIE_HOST,
      WEBFLOW_EXPORT_MODE,
      turnstile
    */ /**
     * Webflow: Forms
     */ 
    var Webflow = __webpack_require__(43949);
    const renderTurnstileCaptcha = (siteKey, formElement, cb, errorCallback // () => void | boolean
    )=>{
        const captchaContainer = document.createElement('div');
        formElement.appendChild(captchaContainer);
        // Render the captcha
        turnstile.render(captchaContainer, {
            sitekey: siteKey,
            callback: function(token) {
                cb(token);
            },
            'error-callback': function() {
                errorCallback();
            }
        });
    };
    Webflow.define('forms', module.exports = function($, _) {
        const TURNSTILE_LOADED_EVENT = 'TURNSTILE_LOADED';
        var api = {};
        var $doc = $(document);
        var $forms;
        var loc = window.location;
        var retro = window.XDomainRequest && !window.atob;
        var namespace = '.w-form';
        var siteId;
        var emailField = /e(-)?mail/i;
        var emailValue = /^\S+@\S+$/;
        var alert = window.alert;
        var inApp = Webflow.env();
        var listening;
        var formUrl;
        var signFileUrl;
        const turnstileSiteKey = $doc.find('[data-turnstile-sitekey]').data('turnstile-sitekey');
        let turnstileScript;
        // MailChimp domains: list-manage.com + mirrors
        var chimpRegex = /list-manage[1-9]?.com/i;
        var disconnected = _.debounce(function() {
            alert('Oops! This page has improperly configured forms. Please contact your website administrator to fix this issue.');
        }, 100);
        api.ready = api.design = api.preview = function() {
            // start by loading the turnstile script (if the user has the feature enabled)
            loadTurnstileScript();
            // Init forms
            init();
            // Wire document events on published and in preview workflow only once
            if ((!inApp || Webflow.env('preview')) && !listening) {
                addListeners();
            }
        };
        function init() {
            siteId = $('html').attr('data-wf-site');
            formUrl = "https://webflow.com" + '/api/v1/form/' + siteId;
            // Work around same-protocol IE XDR limitation - without this IE9 and below forms won't submit
            if (retro && formUrl.indexOf("https://webflow.com") >= 0) {
                formUrl = formUrl.replace("https://webflow.com", "https://formdata.webflow.com");
            }
            signFileUrl = `${formUrl}/signFile`;
            $forms = $(namespace + ' form');
            if (!$forms.length) {
                return;
            }
            $forms.each(build);
        }
        function loadTurnstileScript() {
            if (turnstileSiteKey) {
                // Create script tag for turnstile
                turnstileScript = document.createElement('script');
                turnstileScript.src = 'https://challenges.cloudflare.com/turnstile/v0/api.js';
                document.head.appendChild(turnstileScript);
                turnstileScript.onload = ()=>{
                    // after the script loads, emit an event that we listen to below.
                    // this enables us to listen for the event on each form on the page and render the turnstile token for each of them.
                    $doc.trigger(TURNSTILE_LOADED_EVENT);
                };
            }
        }
        function build(i, el) {
            // Store form state using namespace
            var $el = $(el);
            var data = $.data(el, namespace);
            if (!data) {
                data = $.data(el, namespace, {
                    form: $el
                });
            } // data.form
            reset(data);
            var wrap = $el.closest('div.w-form');
            data.done = wrap.find('> .w-form-done');
            data.fail = wrap.find('> .w-form-fail');
            data.fileUploads = wrap.find('.w-file-upload');
            data.fileUploads.each(function(j) {
                initFileUpload(j, data);
            });
            if (turnstileSiteKey) {
                // Once all custom fonts are loaded, set the button state to indicate Turnstile is loading
                setButtonToTurnstileLoading(data);
                // Add loading state to the form wrapper
                setFormLoadingState($el, true);
                // this is probably overkill, but if the turnstile script has already loaded and we reached this point then
                // we'll fire the callback below immediately. Otherwise we'll wait for the TURNSTILE_LOADED_EVENT to fire.
                $doc.on(typeof turnstile !== 'undefined' ? 'ready' : TURNSTILE_LOADED_EVENT, function() {
                    // render the hidden input with the turnstile token for each form on the page
                    renderTurnstileCaptcha(turnstileSiteKey, el, (token)=>{
                        // The turnstile token gets automatically attached to the form as a hidden input field & sent on submission to the server.
                        // Here we are using this `data.turnstileToken` value to decide whether or not the submit button should be enabled.
                        data.turnstileToken = token;
                        // enable the submit button and restore text once turnstile is done rendering
                        reset(data);
                        setFormLoadingState($el, false);
                    }, ()=>{
                        // If Turnstile fails, keep the button disabled but restore original state (tooltip, etc.)
                        reset(data);
                        // Ensure button is definitely disabled if reset didn't handle it (e.g., if turnstileSiteKey logic changes)
                        if (data.btn) {
                            data.btn.prop('disabled', true);
                        }
                        setFormLoadingState($el, false);
                    });
                });
            }
            // Accessibility fixes
            var formName = data.form.attr('aria-label') || data.form.attr('data-name') || 'Form';
            if (!data.done.attr('aria-label')) {
                data.form.attr('aria-label', formName);
            }
            data.done.attr('tabindex', '-1');
            data.done.attr('role', 'region');
            if (!data.done.attr('aria-label')) {
                data.done.attr('aria-label', formName + ' success');
            }
            data.fail.attr('tabindex', '-1');
            data.fail.attr('role', 'region');
            if (!data.fail.attr('aria-label')) {
                data.fail.attr('aria-label', formName + ' failure');
            }
            var action = data.action = $el.attr('action');
            data.handler = null;
            data.redirect = $el.attr('data-redirect');
            // MailChimp form
            if (chimpRegex.test(action)) {
                data.handler = submitMailChimp;
                return;
            }
            // Custom form action
            if (action) {
                return;
            }
            // Webflow forms for hosting accounts
            if (siteId) {
                data.handler =  false ? 0 : (()=>{
                    const hostedSubmitHandler = (__webpack_require__(36524)/* ["default"] */["default"]);
                    return hostedSubmitHandler(reset, loc, Webflow, collectEnterpriseTrackingCookies, preventDefault, findFields, alert, findFileUploads, disableBtn, siteId, afterSubmit, $, formUrl);
                })();
                return;
            }
            // Alert for disconnected Webflow forms
            disconnected();
        }
        function addListeners() {
            listening = true;
            $doc.on('submit', namespace + ' form', function(evt) {
                var data = $.data(this, namespace);
                if (data.handler) {
                    data.evt = evt;
                    data.handler(data);
                }
            });
            // handle checked ui for custom checkbox and radio button
            const CHECKBOX_CLASS_NAME = '.w-checkbox-input';
            const RADIO_INPUT_CLASS_NAME = '.w-radio-input';
            const CHECKED_CLASS = 'w--redirected-checked';
            const FOCUSED_CLASS = 'w--redirected-focus';
            const FOCUSED_VISIBLE_CLASS = 'w--redirected-focus-visible';
            const focusVisibleSelectors = ':focus-visible, [data-wf-focus-visible]';
            const CUSTOM_CONTROLS = [
                [
                    'checkbox',
                    CHECKBOX_CLASS_NAME
                ],
                [
                    'radio',
                    RADIO_INPUT_CLASS_NAME
                ]
            ];
            $doc.on('change', namespace + ` form input[type="checkbox"]:not(` + CHECKBOX_CLASS_NAME + ')', (evt)=>{
                $(evt.target).siblings(CHECKBOX_CLASS_NAME).toggleClass(CHECKED_CLASS);
            });
            $doc.on('change', namespace + ` form input[type="radio"]`, (evt)=>{
                $(`input[name="${evt.target.name}"]:not(${CHECKBOX_CLASS_NAME})`).map((i, el)=>$(el).siblings(RADIO_INPUT_CLASS_NAME).removeClass(CHECKED_CLASS));
                const $target = $(evt.target);
                if (!$target.hasClass('w-radio-input')) {
                    $target.siblings(RADIO_INPUT_CLASS_NAME).addClass(CHECKED_CLASS);
                }
            });
            CUSTOM_CONTROLS.forEach(([controlType, customControlClassName])=>{
                $doc.on('focus', namespace + ` form input[type="${controlType}"]:not(` + customControlClassName + ')', (evt)=>{
                    $(evt.target).siblings(customControlClassName).addClass(FOCUSED_CLASS);
                    $(evt.target).filter(focusVisibleSelectors).siblings(customControlClassName).addClass(FOCUSED_VISIBLE_CLASS);
                });
                $doc.on('blur', namespace + ` form input[type="${controlType}"]:not(` + customControlClassName + ')', (evt)=>{
                    $(evt.target).siblings(customControlClassName).removeClass(`${FOCUSED_CLASS} ${FOCUSED_VISIBLE_CLASS}`);
                });
            });
        }
        // Reset data common to all submit handlers
        function reset(data) {
            var btn = data.btn = data.form.find(':input[type="submit"]');
            data.wait = data.btn.attr('data-wait') || null;
            data.success = false;
            // Determine if the button should be disabled
            const isDisabled = Boolean(turnstileSiteKey && !data.turnstileToken);
            btn.prop('disabled', isDisabled);
            btn.removeClass('w-form-loading');
            data.label && btn.val(data.label);
        }
        // Disable submit button during actual submission
        function disableBtn(data) {
            var btn = data.btn;
            var wait = data.wait; // Use the value from data-wait attribute
            btn.prop('disabled', true);
            // Show wait text and store previous label
            if (wait) {
                data.label = btn.val(); // Store the current label before overwriting
                btn.val(wait);
            }
        }
        // Set button state while Turnstile script is loading
        function setButtonToTurnstileLoading(data) {
            const btn = data.btn || data.form.find(':input[type="submit"]');
            if (!data.btn) data.btn = btn;
            btn.prop('disabled', true);
            btn.addClass('w-form-loading');
        }
        // Add/remove loading class from the form wrapper
        function setFormLoadingState($formEl, isLoading) {
            const $wrapper = $formEl.closest('.w-form');
            if (isLoading) {
                $wrapper.addClass('w-form-loading');
            } else {
                $wrapper.removeClass('w-form-loading');
            }
        }
        // Find form fields, validate, and set value pairs
        function findFields(form, result) {
            var status = null;
            result = result || {};
            // The ":input" selector is a jQuery shortcut to select all inputs, selects, textareas
            form.find(':input:not([type="submit"]):not([type="file"]):not([type="button"])').each(function(i, el) {
                var field = $(el);
                var type = field.attr('type');
                var name = field.attr('data-name') || field.attr('name') || 'Field ' + (i + 1);
                // Encoding the field name will prevent fields that have brackets
                // in their name from being parsed by `bodyParser.urlencoded` as
                // objects which would have unintended consequences like not saving
                // the content of the field.
                // https://webflow.atlassian.net/browse/CMSAUTH-2495
                name = encodeURIComponent(name);
                var value = field.val();
                if (type === 'checkbox') {
                    value = field.is(':checked');
                } else if (type === 'radio') {
                    // Radio group value already processed
                    if (result[name] === null || typeof result[name] === 'string') {
                        return;
                    }
                    value = form.find('input[name="' + field.attr('name') + '"]:checked').val() || null;
                }
                if (typeof value === 'string') {
                    value = $.trim(value);
                }
                result[name] = value;
                status = status || getStatus(field, type, name, value);
            });
            return status;
        }
        function findFileUploads(form) {
            var result = {};
            form.find(':input[type="file"]').each(function(i, el) {
                var field = $(el);
                var name = field.attr('data-name') || field.attr('name') || 'File ' + (i + 1);
                var value = field.attr('data-value');
                if (typeof value === 'string') {
                    value = $.trim(value);
                }
                result[name] = value;
            });
            return result;
        }
        const trackingCookieNameMap = {
            _mkto_trk: 'marketo'
        };
        function collectEnterpriseTrackingCookies() {
            const cookies = document.cookie.split('; ').reduce(function(acc, cookie) {
                const splitCookie = cookie.split('=');
                const name = splitCookie[0];
                if (name in trackingCookieNameMap) {
                    const mappedName = trackingCookieNameMap[name];
                    const value = splitCookie.slice(1).join('=');
                    acc[mappedName] = value;
                }
                return acc;
            }, {});
            return cookies;
        }
        function getStatus(field, type, name, value) {
            var status = null;
            if (type === 'password') {
                status = 'Passwords cannot be submitted.';
            } else if (field.attr('required')) {
                if (!value) {
                    status = 'Please fill out the required field: ' + name;
                } else if (emailField.test(field.attr('type'))) {
                    if (!emailValue.test(value)) {
                        status = 'Please enter a valid email address for: ' + name;
                    }
                }
            } else if (name === 'g-recaptcha-response' && !value) {
                status = "Please confirm you're not a robot.";
            }
            return status;
        }
        function exportedSubmitWebflow(data) {
            preventDefault(data);
            afterSubmit(data);
        }
        // Submit form to MailChimp
        function submitMailChimp(data) {
            reset(data);
            var form = data.form;
            var payload = {};
            // Skip Ajax submission if http/s mismatch, fallback to POST instead
            if (/^https/.test(loc.href) && !/^https/.test(data.action)) {
                form.attr('method', 'post');
                return;
            }
            preventDefault(data);
            // Find & populate all fields
            var status = findFields(form, payload);
            if (status) {
                return alert(status);
            }
            // Disable submit button
            disableBtn(data);
            // Use special format for MailChimp params
            var fullName;
            _.each(payload, function(value, key) {
                if (emailField.test(key)) {
                    payload.EMAIL = value;
                }
                if (/^((full[ _-]?)?name)$/i.test(key)) {
                    fullName = value;
                }
                if (/^(first[ _-]?name)$/i.test(key)) {
                    payload.FNAME = value;
                }
                if (/^(last[ _-]?name)$/i.test(key)) {
                    payload.LNAME = value;
                }
            });
            if (fullName && !payload.FNAME) {
                fullName = fullName.split(' ');
                payload.FNAME = fullName[0];
                payload.LNAME = payload.LNAME || fullName[1];
            }
            // Use the (undocumented) MailChimp jsonp api
            var url = data.action.replace('/post?', '/post-json?') + '&c=?';
            // Add special param to prevent bot signups
            var userId = url.indexOf('u=') + 2;
            userId = url.substring(userId, url.indexOf('&', userId));
            var listId = url.indexOf('id=') + 3;
            listId = url.substring(listId, url.indexOf('&', listId));
            payload['b_' + userId + '_' + listId] = '';
            $.ajax({
                url,
                data: payload,
                dataType: 'jsonp'
            }).done(function(resp) {
                data.success = resp.result === 'success' || /already/.test(resp.msg);
                if (!data.success) {
                    console.info('MailChimp error: ' + resp.msg);
                }
                afterSubmit(data);
            }).fail(function() {
                afterSubmit(data);
            });
        }
        // Common callback which runs after all Ajax submissions
        function afterSubmit(data) {
            var form = data.form;
            var redirect = data.redirect;
            var success = data.success;
            // Redirect to a success url if defined
            if (success && redirect) {
                Webflow.location(redirect);
                return;
            }
            // Show or hide status divs
            data.done.toggle(success);
            data.fail.toggle(!success);
            if (success) {
                data.done.focus();
            } else {
                data.fail.focus();
            }
            // Hide form on success
            form.toggle(!success);
            // Reset data and enable submit button
            reset(data);
        }
        function preventDefault(data) {
            data.evt && data.evt.preventDefault();
            data.evt = null;
        }
        function initFileUpload(i, form) {
            if (!form.fileUploads || !form.fileUploads[i]) {
                return;
            }
            var file;
            var $el = $(form.fileUploads[i]);
            var $defaultWrap = $el.find('> .w-file-upload-default');
            var $uploadingWrap = $el.find('> .w-file-upload-uploading');
            var $successWrap = $el.find('> .w-file-upload-success');
            var $errorWrap = $el.find('> .w-file-upload-error');
            var $input = $defaultWrap.find('.w-file-upload-input');
            var $label = $defaultWrap.find('.w-file-upload-label');
            var $labelChildren = $label.children();
            var $errorMsgEl = $errorWrap.find('.w-file-upload-error-msg');
            var $fileEl = $successWrap.find('.w-file-upload-file');
            var $removeEl = $successWrap.find('.w-file-remove-link');
            var $fileNameEl = $fileEl.find('.w-file-upload-file-name');
            var sizeErrMsg = $errorMsgEl.attr('data-w-size-error');
            var typeErrMsg = $errorMsgEl.attr('data-w-type-error');
            var genericErrMsg = $errorMsgEl.attr('data-w-generic-error');
            // Accessibility fixes
            // The file upload Input is not stylable by the designer, so we are
            // going to pretend the Label is the input. Â¯\_(ãƒ„)_/Â¯
            if (!inApp) {
                $label.on('click keydown', function(e) {
                    if (e.type === 'keydown' && e.which !== 13 && e.which !== 32) {
                        return;
                    }
                    e.preventDefault();
                    $input.click();
                });
            }
            // Both of these are added through CSS
            $label.find('.w-icon-file-upload-icon').attr('aria-hidden', 'true');
            $removeEl.find('.w-icon-file-upload-remove').attr('aria-hidden', 'true');
            if (!inApp) {
                $removeEl.on('click keydown', function(e) {
                    if (e.type === 'keydown') {
                        if (e.which !== 13 && e.which !== 32) {
                            return;
                        }
                        e.preventDefault();
                    }
                    $input.removeAttr('data-value');
                    $input.val('');
                    $fileNameEl.html('');
                    $defaultWrap.toggle(true);
                    $successWrap.toggle(false);
                    $label.focus();
                });
                $input.on('change', function(e) {
                    file = e.target && e.target.files && e.target.files[0];
                    if (!file) {
                        return;
                    }
                    // Show uploading
                    $defaultWrap.toggle(false);
                    $errorWrap.toggle(false);
                    $uploadingWrap.toggle(true);
                    $uploadingWrap.focus();
                    // Set filename
                    $fileNameEl.text(file.name);
                    // Disable submit button
                    if (!isUploading()) {
                        disableBtn(form);
                    }
                    form.fileUploads[i].uploading = true;
                    signFile(file, afterSign);
                });
                // Setting input width 1px and height equal label
                // This is so the browser required error will show up
                var height = $label.outerHeight();
                $input.height(height);
                $input.width(1);
            } else {
                $input.on('click', function(e) {
                    e.preventDefault();
                });
                $label.on('click', function(e) {
                    e.preventDefault();
                });
                $labelChildren.on('click', function(e) {
                    e.preventDefault();
                });
            }
            function parseError(err) {
                var errorMsg = err.responseJSON && err.responseJSON.msg;
                var userError = genericErrMsg;
                if (typeof errorMsg === 'string' && errorMsg.indexOf('InvalidFileTypeError') === 0) {
                    userError = typeErrMsg;
                } else if (typeof errorMsg === 'string' && errorMsg.indexOf('MaxFileSizeError') === 0) {
                    userError = sizeErrMsg;
                }
                $errorMsgEl.text(userError);
                $input.removeAttr('data-value');
                $input.val('');
                $uploadingWrap.toggle(false);
                $defaultWrap.toggle(true);
                $errorWrap.toggle(true);
                $errorWrap.focus();
                form.fileUploads[i].uploading = false;
                if (!isUploading()) {
                    reset(form);
                }
            }
            function afterSign(err, data) {
                if (err) {
                    return parseError(err);
                }
                var fileName = data.fileName;
                var postData = data.postData;
                var fileId = data.fileId;
                var s3Url = data.s3Url;
                $input.attr('data-value', fileId);
                uploadS3(s3Url, postData, file, fileName, afterUpload);
            }
            function afterUpload(err) {
                if (err) {
                    return parseError(err);
                }
                // Show success
                $uploadingWrap.toggle(false);
                $successWrap.css('display', 'inline-block');
                $successWrap.focus();
                form.fileUploads[i].uploading = false;
                if (!isUploading()) {
                    reset(form);
                }
            }
            function isUploading() {
                var uploads = form.fileUploads && form.fileUploads.toArray() || [];
                return uploads.some(function(value) {
                    return value.uploading;
                });
            }
        }
        function signFile(file, cb) {
            var payload = new URLSearchParams({
                name: file.name,
                size: file.size
            });
            $.ajax({
                type: 'GET',
                url: `${signFileUrl}?${payload}`,
                crossDomain: true
            }).done(function(data) {
                cb(null, data);
            }).fail(function(err) {
                cb(err);
            });
        }
        function uploadS3(url, data, file, fileName, cb) {
            var formData = new FormData();
            for(var k in data){
                formData.append(k, data[k]);
            }
            formData.append('file', file, fileName);
            $.ajax({
                type: 'POST',
                url,
                data: formData,
                processData: false,
                contentType: false
            }).done(function() {
                cb(null);
            }).fail(function(err) {
                cb(err);
            });
        }
        // Export module
        return api;
    });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctZm9ybXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsc1xuICB3aW5kb3csXG4gIGRvY3VtZW50LFxuICBXRUJGTE9XX0ZPUk1fQVBJX0hPU1QsXG4gIFdFQkZMT1dfRk9STV9PTERJRV9IT1NULFxuICBXRUJGTE9XX0VYUE9SVF9NT0RFLFxuICB0dXJuc3RpbGVcbiovXG5cbi8qKlxuICogV2ViZmxvdzogRm9ybXNcbiAqL1xuXG52YXIgV2ViZmxvdyA9IHJlcXVpcmUoJy4uL0Jhc2VTaXRlTW9kdWxlcy93ZWJmbG93LWxpYicpO1xuXG5jb25zdCByZW5kZXJUdXJuc3RpbGVDYXB0Y2hhID0gKFxuICBzaXRlS2V5LCAvLyBzdHJpbmdcbiAgZm9ybUVsZW1lbnQsIC8vIEhUTUxGb3JtRWxlbWVudFxuICBjYiwgLy8gKHRva2VuOiBzdHJpbmcpID0+IHZvaWRcbiAgZXJyb3JDYWxsYmFjayAvLyAoKSA9PiB2b2lkIHwgYm9vbGVhblxuKSA9PiB7XG4gIGNvbnN0IGNhcHRjaGFDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZm9ybUVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FwdGNoYUNvbnRhaW5lcik7XG5cbiAgLy8gUmVuZGVyIHRoZSBjYXB0Y2hhXG4gIHR1cm5zdGlsZS5yZW5kZXIoY2FwdGNoYUNvbnRhaW5lciwge1xuICAgIHNpdGVrZXk6IHNpdGVLZXksXG4gICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgY2IodG9rZW4pO1xuICAgIH0sXG4gICAgJ2Vycm9yLWNhbGxiYWNrJzogZnVuY3Rpb24gKCkge1xuICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgIH0sXG4gIH0pO1xufTtcblxuV2ViZmxvdy5kZWZpbmUoXG4gICdmb3JtcycsXG4gIChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkLCBfKSB7XG4gICAgY29uc3QgVFVSTlNUSUxFX0xPQURFRF9FVkVOVCA9ICdUVVJOU1RJTEVfTE9BREVEJztcbiAgICB2YXIgYXBpID0ge307XG5cbiAgICB2YXIgJGRvYyA9ICQoZG9jdW1lbnQpO1xuICAgIHZhciAkZm9ybXM7XG4gICAgdmFyIGxvYyA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB2YXIgcmV0cm8gPSB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgIXdpbmRvdy5hdG9iO1xuICAgIHZhciBuYW1lc3BhY2UgPSAnLnctZm9ybSc7XG4gICAgdmFyIHNpdGVJZDtcbiAgICB2YXIgZW1haWxGaWVsZCA9IC9lKC0pP21haWwvaTtcbiAgICB2YXIgZW1haWxWYWx1ZSA9IC9eXFxTK0BcXFMrJC87XG4gICAgdmFyIGFsZXJ0ID0gd2luZG93LmFsZXJ0O1xuICAgIHZhciBpbkFwcCA9IFdlYmZsb3cuZW52KCk7XG4gICAgdmFyIGxpc3RlbmluZztcblxuICAgIHZhciBmb3JtVXJsO1xuICAgIHZhciBzaWduRmlsZVVybDtcblxuICAgIGNvbnN0IHR1cm5zdGlsZVNpdGVLZXkgPSAkZG9jXG4gICAgICAuZmluZCgnW2RhdGEtdHVybnN0aWxlLXNpdGVrZXldJylcbiAgICAgIC5kYXRhKCd0dXJuc3RpbGUtc2l0ZWtleScpO1xuICAgIGxldCB0dXJuc3RpbGVTY3JpcHQ7XG5cbiAgICAvLyBNYWlsQ2hpbXAgZG9tYWluczogbGlzdC1tYW5hZ2UuY29tICsgbWlycm9yc1xuICAgIHZhciBjaGltcFJlZ2V4ID0gL2xpc3QtbWFuYWdlWzEtOV0/LmNvbS9pO1xuXG4gICAgdmFyIGRpc2Nvbm5lY3RlZCA9IF8uZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgYWxlcnQoXG4gICAgICAgICdPb3BzISBUaGlzIHBhZ2UgaGFzIGltcHJvcGVybHkgY29uZmlndXJlZCBmb3Jtcy4gUGxlYXNlIGNvbnRhY3QgeW91ciB3ZWJzaXRlIGFkbWluaXN0cmF0b3IgdG8gZml4IHRoaXMgaXNzdWUuJ1xuICAgICAgKTtcbiAgICB9LCAxMDApO1xuXG4gICAgYXBpLnJlYWR5ID1cbiAgICAgIGFwaS5kZXNpZ24gPVxuICAgICAgYXBpLnByZXZpZXcgPVxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gc3RhcnQgYnkgbG9hZGluZyB0aGUgdHVybnN0aWxlIHNjcmlwdCAoaWYgdGhlIHVzZXIgaGFzIHRoZSBmZWF0dXJlIGVuYWJsZWQpXG4gICAgICAgICAgbG9hZFR1cm5zdGlsZVNjcmlwdCgpO1xuXG4gICAgICAgICAgLy8gSW5pdCBmb3Jtc1xuICAgICAgICAgIGluaXQoKTtcblxuICAgICAgICAgIC8vIFdpcmUgZG9jdW1lbnQgZXZlbnRzIG9uIHB1Ymxpc2hlZCBhbmQgaW4gcHJldmlldyB3b3JrZmxvdyBvbmx5IG9uY2VcbiAgICAgICAgICBpZiAoKCFpbkFwcCB8fCBXZWJmbG93LmVudigncHJldmlldycpKSAmJiAhbGlzdGVuaW5nKSB7XG4gICAgICAgICAgICBhZGRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgc2l0ZUlkID0gJCgnaHRtbCcpLmF0dHIoJ2RhdGEtd2Ytc2l0ZScpO1xuXG4gICAgICBmb3JtVXJsID0gV0VCRkxPV19GT1JNX0FQSV9IT1NUICsgJy9hcGkvdjEvZm9ybS8nICsgc2l0ZUlkO1xuXG4gICAgICAvLyBXb3JrIGFyb3VuZCBzYW1lLXByb3RvY29sIElFIFhEUiBsaW1pdGF0aW9uIC0gd2l0aG91dCB0aGlzIElFOSBhbmQgYmVsb3cgZm9ybXMgd29uJ3Qgc3VibWl0XG4gICAgICBpZiAocmV0cm8gJiYgZm9ybVVybC5pbmRleE9mKFdFQkZMT1dfRk9STV9BUElfSE9TVCkgPj0gMCkge1xuICAgICAgICBmb3JtVXJsID0gZm9ybVVybC5yZXBsYWNlKFxuICAgICAgICAgIFdFQkZMT1dfRk9STV9BUElfSE9TVCxcbiAgICAgICAgICBXRUJGTE9XX0ZPUk1fT0xESUVfSE9TVFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBzaWduRmlsZVVybCA9IGAke2Zvcm1Vcmx9L3NpZ25GaWxlYDtcblxuICAgICAgJGZvcm1zID0gJChuYW1lc3BhY2UgKyAnIGZvcm0nKTtcbiAgICAgIGlmICghJGZvcm1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkZm9ybXMuZWFjaChidWlsZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZFR1cm5zdGlsZVNjcmlwdCgpIHtcbiAgICAgIGlmICh0dXJuc3RpbGVTaXRlS2V5KSB7XG4gICAgICAgIC8vIENyZWF0ZSBzY3JpcHQgdGFnIGZvciB0dXJuc3RpbGVcbiAgICAgICAgdHVybnN0aWxlU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHR1cm5zdGlsZVNjcmlwdC5zcmMgPVxuICAgICAgICAgICdodHRwczovL2NoYWxsZW5nZXMuY2xvdWRmbGFyZS5jb20vdHVybnN0aWxlL3YwL2FwaS5qcyc7XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodHVybnN0aWxlU2NyaXB0KTtcbiAgICAgICAgdHVybnN0aWxlU2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAvLyBhZnRlciB0aGUgc2NyaXB0IGxvYWRzLCBlbWl0IGFuIGV2ZW50IHRoYXQgd2UgbGlzdGVuIHRvIGJlbG93LlxuICAgICAgICAgIC8vIHRoaXMgZW5hYmxlcyB1cyB0byBsaXN0ZW4gZm9yIHRoZSBldmVudCBvbiBlYWNoIGZvcm0gb24gdGhlIHBhZ2UgYW5kIHJlbmRlciB0aGUgdHVybnN0aWxlIHRva2VuIGZvciBlYWNoIG9mIHRoZW0uXG4gICAgICAgICAgJGRvYy50cmlnZ2VyKFRVUk5TVElMRV9MT0FERURfRVZFTlQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkKGksIGVsKSB7XG4gICAgICAvLyBTdG9yZSBmb3JtIHN0YXRlIHVzaW5nIG5hbWVzcGFjZVxuICAgICAgdmFyICRlbCA9ICQoZWwpO1xuICAgICAgdmFyIGRhdGEgPSAkLmRhdGEoZWwsIG5hbWVzcGFjZSk7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9ICQuZGF0YShlbCwgbmFtZXNwYWNlLCB7Zm9ybTogJGVsfSk7XG4gICAgICB9IC8vIGRhdGEuZm9ybVxuXG4gICAgICByZXNldChkYXRhKTtcbiAgICAgIHZhciB3cmFwID0gJGVsLmNsb3Nlc3QoJ2Rpdi53LWZvcm0nKTtcbiAgICAgIGRhdGEuZG9uZSA9IHdyYXAuZmluZCgnPiAudy1mb3JtLWRvbmUnKTtcbiAgICAgIGRhdGEuZmFpbCA9IHdyYXAuZmluZCgnPiAudy1mb3JtLWZhaWwnKTtcbiAgICAgIGRhdGEuZmlsZVVwbG9hZHMgPSB3cmFwLmZpbmQoJy53LWZpbGUtdXBsb2FkJyk7XG5cbiAgICAgIGRhdGEuZmlsZVVwbG9hZHMuZWFjaChmdW5jdGlvbiAoaikge1xuICAgICAgICBpbml0RmlsZVVwbG9hZChqLCBkYXRhKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHVybnN0aWxlU2l0ZUtleSkge1xuICAgICAgICAvLyBPbmNlIGFsbCBjdXN0b20gZm9udHMgYXJlIGxvYWRlZCwgc2V0IHRoZSBidXR0b24gc3RhdGUgdG8gaW5kaWNhdGUgVHVybnN0aWxlIGlzIGxvYWRpbmdcbiAgICAgICAgc2V0QnV0dG9uVG9UdXJuc3RpbGVMb2FkaW5nKGRhdGEpO1xuXG4gICAgICAgIC8vIEFkZCBsb2FkaW5nIHN0YXRlIHRvIHRoZSBmb3JtIHdyYXBwZXJcbiAgICAgICAgc2V0Rm9ybUxvYWRpbmdTdGF0ZSgkZWwsIHRydWUpO1xuXG4gICAgICAgIC8vIHRoaXMgaXMgcHJvYmFibHkgb3ZlcmtpbGwsIGJ1dCBpZiB0aGUgdHVybnN0aWxlIHNjcmlwdCBoYXMgYWxyZWFkeSBsb2FkZWQgYW5kIHdlIHJlYWNoZWQgdGhpcyBwb2ludCB0aGVuXG4gICAgICAgIC8vIHdlJ2xsIGZpcmUgdGhlIGNhbGxiYWNrIGJlbG93IGltbWVkaWF0ZWx5LiBPdGhlcndpc2Ugd2UnbGwgd2FpdCBmb3IgdGhlIFRVUk5TVElMRV9MT0FERURfRVZFTlQgdG8gZmlyZS5cbiAgICAgICAgJGRvYy5vbihcbiAgICAgICAgICB0eXBlb2YgdHVybnN0aWxlICE9PSAndW5kZWZpbmVkJyA/ICdyZWFkeScgOiBUVVJOU1RJTEVfTE9BREVEX0VWRU5ULFxuICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHJlbmRlciB0aGUgaGlkZGVuIGlucHV0IHdpdGggdGhlIHR1cm5zdGlsZSB0b2tlbiBmb3IgZWFjaCBmb3JtIG9uIHRoZSBwYWdlXG4gICAgICAgICAgICByZW5kZXJUdXJuc3RpbGVDYXB0Y2hhKFxuICAgICAgICAgICAgICB0dXJuc3RpbGVTaXRlS2V5LFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgKHRva2VuKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHR1cm5zdGlsZSB0b2tlbiBnZXRzIGF1dG9tYXRpY2FsbHkgYXR0YWNoZWQgdG8gdGhlIGZvcm0gYXMgYSBoaWRkZW4gaW5wdXQgZmllbGQgJiBzZW50IG9uIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlci5cbiAgICAgICAgICAgICAgICAvLyBIZXJlIHdlIGFyZSB1c2luZyB0aGlzIGBkYXRhLnR1cm5zdGlsZVRva2VuYCB2YWx1ZSB0byBkZWNpZGUgd2hldGhlciBvciBub3QgdGhlIHN1Ym1pdCBidXR0b24gc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAgICAgICAgICAgICAgZGF0YS50dXJuc3RpbGVUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIC8vIGVuYWJsZSB0aGUgc3VibWl0IGJ1dHRvbiBhbmQgcmVzdG9yZSB0ZXh0IG9uY2UgdHVybnN0aWxlIGlzIGRvbmUgcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgcmVzZXQoZGF0YSk7XG4gICAgICAgICAgICAgICAgc2V0Rm9ybUxvYWRpbmdTdGF0ZSgkZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIElmIFR1cm5zdGlsZSBmYWlscywga2VlcCB0aGUgYnV0dG9uIGRpc2FibGVkIGJ1dCByZXN0b3JlIG9yaWdpbmFsIHN0YXRlICh0b29sdGlwLCBldGMuKVxuICAgICAgICAgICAgICAgIHJlc2V0KGRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBidXR0b24gaXMgZGVmaW5pdGVseSBkaXNhYmxlZCBpZiByZXNldCBkaWRuJ3QgaGFuZGxlIGl0IChlLmcuLCBpZiB0dXJuc3RpbGVTaXRlS2V5IGxvZ2ljIGNoYW5nZXMpXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuYnRuKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhLmJ0bi5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRGb3JtTG9hZGluZ1N0YXRlKCRlbCwgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWNjZXNzaWJpbGl0eSBmaXhlc1xuICAgICAgdmFyIGZvcm1OYW1lID1cbiAgICAgICAgZGF0YS5mb3JtLmF0dHIoJ2FyaWEtbGFiZWwnKSB8fCBkYXRhLmZvcm0uYXR0cignZGF0YS1uYW1lJykgfHwgJ0Zvcm0nO1xuICAgICAgaWYgKCFkYXRhLmRvbmUuYXR0cignYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgIGRhdGEuZm9ybS5hdHRyKCdhcmlhLWxhYmVsJywgZm9ybU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBkYXRhLmRvbmUuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgIGRhdGEuZG9uZS5hdHRyKCdyb2xlJywgJ3JlZ2lvbicpO1xuICAgICAgaWYgKCFkYXRhLmRvbmUuYXR0cignYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgIGRhdGEuZG9uZS5hdHRyKCdhcmlhLWxhYmVsJywgZm9ybU5hbWUgKyAnIHN1Y2Nlc3MnKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuZmFpbC5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgZGF0YS5mYWlsLmF0dHIoJ3JvbGUnLCAncmVnaW9uJyk7XG4gICAgICBpZiAoIWRhdGEuZmFpbC5hdHRyKCdhcmlhLWxhYmVsJykpIHtcbiAgICAgICAgZGF0YS5mYWlsLmF0dHIoJ2FyaWEtbGFiZWwnLCBmb3JtTmFtZSArICcgZmFpbHVyZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aW9uID0gKGRhdGEuYWN0aW9uID0gJGVsLmF0dHIoJ2FjdGlvbicpKTtcbiAgICAgIGRhdGEuaGFuZGxlciA9IG51bGw7XG4gICAgICBkYXRhLnJlZGlyZWN0ID0gJGVsLmF0dHIoJ2RhdGEtcmVkaXJlY3QnKTtcblxuICAgICAgLy8gTWFpbENoaW1wIGZvcm1cbiAgICAgIGlmIChjaGltcFJlZ2V4LnRlc3QoYWN0aW9uKSkge1xuICAgICAgICBkYXRhLmhhbmRsZXIgPSBzdWJtaXRNYWlsQ2hpbXA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQ3VzdG9tIGZvcm0gYWN0aW9uXG4gICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gV2ViZmxvdyBmb3JtcyBmb3IgaG9zdGluZyBhY2NvdW50c1xuICAgICAgaWYgKHNpdGVJZCkge1xuICAgICAgICBkYXRhLmhhbmRsZXIgPSBXRUJGTE9XX0VYUE9SVF9NT0RFXG4gICAgICAgICAgPyBleHBvcnRlZFN1Ym1pdFdlYmZsb3dcbiAgICAgICAgICA6ICgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGhvc3RlZFN1Ym1pdEhhbmRsZXIgPVxuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vd2ViZmxvdy1mb3Jtcy1ob3N0ZWQnKS5kZWZhdWx0O1xuICAgICAgICAgICAgICByZXR1cm4gaG9zdGVkU3VibWl0SGFuZGxlcihcbiAgICAgICAgICAgICAgICByZXNldCxcbiAgICAgICAgICAgICAgICBsb2MsXG4gICAgICAgICAgICAgICAgV2ViZmxvdyxcbiAgICAgICAgICAgICAgICBjb2xsZWN0RW50ZXJwcmlzZVRyYWNraW5nQ29va2llcyxcbiAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdCxcbiAgICAgICAgICAgICAgICBmaW5kRmllbGRzLFxuICAgICAgICAgICAgICAgIGFsZXJ0LFxuICAgICAgICAgICAgICAgIGZpbmRGaWxlVXBsb2FkcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlQnRuLFxuICAgICAgICAgICAgICAgIHNpdGVJZCxcbiAgICAgICAgICAgICAgICBhZnRlclN1Ym1pdCxcbiAgICAgICAgICAgICAgICAkLFxuICAgICAgICAgICAgICAgIGZvcm1VcmxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQWxlcnQgZm9yIGRpc2Nvbm5lY3RlZCBXZWJmbG93IGZvcm1zXG4gICAgICBkaXNjb25uZWN0ZWQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgICBsaXN0ZW5pbmcgPSB0cnVlO1xuXG4gICAgICAkZG9jLm9uKCdzdWJtaXQnLCBuYW1lc3BhY2UgKyAnIGZvcm0nLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBkYXRhID0gJC5kYXRhKHRoaXMsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmIChkYXRhLmhhbmRsZXIpIHtcbiAgICAgICAgICBkYXRhLmV2dCA9IGV2dDtcbiAgICAgICAgICBkYXRhLmhhbmRsZXIoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBoYW5kbGUgY2hlY2tlZCB1aSBmb3IgY3VzdG9tIGNoZWNrYm94IGFuZCByYWRpbyBidXR0b25cbiAgICAgIGNvbnN0IENIRUNLQk9YX0NMQVNTX05BTUUgPSAnLnctY2hlY2tib3gtaW5wdXQnO1xuICAgICAgY29uc3QgUkFESU9fSU5QVVRfQ0xBU1NfTkFNRSA9ICcudy1yYWRpby1pbnB1dCc7XG4gICAgICBjb25zdCBDSEVDS0VEX0NMQVNTID0gJ3ctLXJlZGlyZWN0ZWQtY2hlY2tlZCc7XG4gICAgICBjb25zdCBGT0NVU0VEX0NMQVNTID0gJ3ctLXJlZGlyZWN0ZWQtZm9jdXMnO1xuICAgICAgY29uc3QgRk9DVVNFRF9WSVNJQkxFX0NMQVNTID0gJ3ctLXJlZGlyZWN0ZWQtZm9jdXMtdmlzaWJsZSc7XG4gICAgICBjb25zdCBmb2N1c1Zpc2libGVTZWxlY3RvcnMgPSAnOmZvY3VzLXZpc2libGUsIFtkYXRhLXdmLWZvY3VzLXZpc2libGVdJztcblxuICAgICAgY29uc3QgQ1VTVE9NX0NPTlRST0xTID0gW1xuICAgICAgICBbJ2NoZWNrYm94JywgQ0hFQ0tCT1hfQ0xBU1NfTkFNRV0sXG4gICAgICAgIFsncmFkaW8nLCBSQURJT19JTlBVVF9DTEFTU19OQU1FXSxcbiAgICAgIF07XG5cbiAgICAgICRkb2Mub24oXG4gICAgICAgICdjaGFuZ2UnLFxuICAgICAgICBuYW1lc3BhY2UgK1xuICAgICAgICAgIGAgZm9ybSBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl06bm90KGAgK1xuICAgICAgICAgIENIRUNLQk9YX0NMQVNTX05BTUUgK1xuICAgICAgICAgICcpJyxcbiAgICAgICAgKGV2dCkgPT4ge1xuICAgICAgICAgICQoZXZ0LnRhcmdldClcbiAgICAgICAgICAgIC5zaWJsaW5ncyhDSEVDS0JPWF9DTEFTU19OQU1FKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKENIRUNLRURfQ0xBU1MpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICAkZG9jLm9uKCdjaGFuZ2UnLCBuYW1lc3BhY2UgKyBgIGZvcm0gaW5wdXRbdHlwZT1cInJhZGlvXCJdYCwgKGV2dCkgPT4ge1xuICAgICAgICAkKGBpbnB1dFtuYW1lPVwiJHtldnQudGFyZ2V0Lm5hbWV9XCJdOm5vdCgke0NIRUNLQk9YX0NMQVNTX05BTUV9KWApLm1hcChcbiAgICAgICAgICAoaSwgZWwpID0+XG4gICAgICAgICAgICAkKGVsKS5zaWJsaW5ncyhSQURJT19JTlBVVF9DTEFTU19OQU1FKS5yZW1vdmVDbGFzcyhDSEVDS0VEX0NMQVNTKVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGV2dC50YXJnZXQpO1xuXG4gICAgICAgIGlmICghJHRhcmdldC5oYXNDbGFzcygndy1yYWRpby1pbnB1dCcpKSB7XG4gICAgICAgICAgJHRhcmdldC5zaWJsaW5ncyhSQURJT19JTlBVVF9DTEFTU19OQU1FKS5hZGRDbGFzcyhDSEVDS0VEX0NMQVNTKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIENVU1RPTV9DT05UUk9MUy5mb3JFYWNoKChbY29udHJvbFR5cGUsIGN1c3RvbUNvbnRyb2xDbGFzc05hbWVdKSA9PiB7XG4gICAgICAgICRkb2Mub24oXG4gICAgICAgICAgJ2ZvY3VzJyxcbiAgICAgICAgICBuYW1lc3BhY2UgK1xuICAgICAgICAgICAgYCBmb3JtIGlucHV0W3R5cGU9XCIke2NvbnRyb2xUeXBlfVwiXTpub3QoYCArXG4gICAgICAgICAgICBjdXN0b21Db250cm9sQ2xhc3NOYW1lICtcbiAgICAgICAgICAgICcpJyxcbiAgICAgICAgICAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAkKGV2dC50YXJnZXQpXG4gICAgICAgICAgICAgIC5zaWJsaW5ncyhjdXN0b21Db250cm9sQ2xhc3NOYW1lKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoRk9DVVNFRF9DTEFTUyk7XG4gICAgICAgICAgICAkKGV2dC50YXJnZXQpXG4gICAgICAgICAgICAgIC5maWx0ZXIoZm9jdXNWaXNpYmxlU2VsZWN0b3JzKVxuICAgICAgICAgICAgICAuc2libGluZ3MoY3VzdG9tQ29udHJvbENsYXNzTmFtZSlcbiAgICAgICAgICAgICAgLmFkZENsYXNzKEZPQ1VTRURfVklTSUJMRV9DTEFTUyk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICAkZG9jLm9uKFxuICAgICAgICAgICdibHVyJyxcbiAgICAgICAgICBuYW1lc3BhY2UgK1xuICAgICAgICAgICAgYCBmb3JtIGlucHV0W3R5cGU9XCIke2NvbnRyb2xUeXBlfVwiXTpub3QoYCArXG4gICAgICAgICAgICBjdXN0b21Db250cm9sQ2xhc3NOYW1lICtcbiAgICAgICAgICAgICcpJyxcbiAgICAgICAgICAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAkKGV2dC50YXJnZXQpXG4gICAgICAgICAgICAgIC5zaWJsaW5ncyhjdXN0b21Db250cm9sQ2xhc3NOYW1lKVxuICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYCR7Rk9DVVNFRF9DTEFTU30gJHtGT0NVU0VEX1ZJU0lCTEVfQ0xBU1N9YCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgZGF0YSBjb21tb24gdG8gYWxsIHN1Ym1pdCBoYW5kbGVyc1xuICAgIGZ1bmN0aW9uIHJlc2V0KGRhdGEpIHtcbiAgICAgIHZhciBidG4gPSAoZGF0YS5idG4gPSBkYXRhLmZvcm0uZmluZCgnOmlucHV0W3R5cGU9XCJzdWJtaXRcIl0nKSk7XG4gICAgICBkYXRhLndhaXQgPSBkYXRhLmJ0bi5hdHRyKCdkYXRhLXdhaXQnKSB8fCBudWxsO1xuICAgICAgZGF0YS5zdWNjZXNzID0gZmFsc2U7XG5cbiAgICAgIC8vIERldGVybWluZSBpZiB0aGUgYnV0dG9uIHNob3VsZCBiZSBkaXNhYmxlZFxuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IEJvb2xlYW4odHVybnN0aWxlU2l0ZUtleSAmJiAhZGF0YS50dXJuc3RpbGVUb2tlbik7XG4gICAgICBidG4ucHJvcCgnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcbiAgICAgIGJ0bi5yZW1vdmVDbGFzcygndy1mb3JtLWxvYWRpbmcnKTtcbiAgICAgIGRhdGEubGFiZWwgJiYgYnRuLnZhbChkYXRhLmxhYmVsKTtcbiAgICB9XG5cbiAgICAvLyBEaXNhYmxlIHN1Ym1pdCBidXR0b24gZHVyaW5nIGFjdHVhbCBzdWJtaXNzaW9uXG4gICAgZnVuY3Rpb24gZGlzYWJsZUJ0bihkYXRhKSB7XG4gICAgICB2YXIgYnRuID0gZGF0YS5idG47XG4gICAgICB2YXIgd2FpdCA9IGRhdGEud2FpdDsgLy8gVXNlIHRoZSB2YWx1ZSBmcm9tIGRhdGEtd2FpdCBhdHRyaWJ1dGVcblxuICAgICAgYnRuLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICAgIC8vIFNob3cgd2FpdCB0ZXh0IGFuZCBzdG9yZSBwcmV2aW91cyBsYWJlbFxuICAgICAgaWYgKHdhaXQpIHtcbiAgICAgICAgZGF0YS5sYWJlbCA9IGJ0bi52YWwoKTsgLy8gU3RvcmUgdGhlIGN1cnJlbnQgbGFiZWwgYmVmb3JlIG92ZXJ3cml0aW5nXG4gICAgICAgIGJ0bi52YWwod2FpdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGJ1dHRvbiBzdGF0ZSB3aGlsZSBUdXJuc3RpbGUgc2NyaXB0IGlzIGxvYWRpbmdcbiAgICBmdW5jdGlvbiBzZXRCdXR0b25Ub1R1cm5zdGlsZUxvYWRpbmcoZGF0YSkge1xuICAgICAgY29uc3QgYnRuID0gZGF0YS5idG4gfHwgZGF0YS5mb3JtLmZpbmQoJzppbnB1dFt0eXBlPVwic3VibWl0XCJdJyk7XG4gICAgICBpZiAoIWRhdGEuYnRuKSBkYXRhLmJ0biA9IGJ0bjtcblxuICAgICAgYnRuLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICBidG4uYWRkQ2xhc3MoJ3ctZm9ybS1sb2FkaW5nJyk7XG4gICAgfVxuXG4gICAgLy8gQWRkL3JlbW92ZSBsb2FkaW5nIGNsYXNzIGZyb20gdGhlIGZvcm0gd3JhcHBlclxuICAgIGZ1bmN0aW9uIHNldEZvcm1Mb2FkaW5nU3RhdGUoJGZvcm1FbCwgaXNMb2FkaW5nKSB7XG4gICAgICBjb25zdCAkd3JhcHBlciA9ICRmb3JtRWwuY2xvc2VzdCgnLnctZm9ybScpO1xuICAgICAgaWYgKGlzTG9hZGluZykge1xuICAgICAgICAkd3JhcHBlci5hZGRDbGFzcygndy1mb3JtLWxvYWRpbmcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3cmFwcGVyLnJlbW92ZUNsYXNzKCd3LWZvcm0tbG9hZGluZycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgZm9ybSBmaWVsZHMsIHZhbGlkYXRlLCBhbmQgc2V0IHZhbHVlIHBhaXJzXG4gICAgZnVuY3Rpb24gZmluZEZpZWxkcyhmb3JtLCByZXN1bHQpIHtcbiAgICAgIHZhciBzdGF0dXMgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHt9O1xuXG4gICAgICAvLyBUaGUgXCI6aW5wdXRcIiBzZWxlY3RvciBpcyBhIGpRdWVyeSBzaG9ydGN1dCB0byBzZWxlY3QgYWxsIGlucHV0cywgc2VsZWN0cywgdGV4dGFyZWFzXG4gICAgICBmb3JtXG4gICAgICAgIC5maW5kKFxuICAgICAgICAgICc6aW5wdXQ6bm90KFt0eXBlPVwic3VibWl0XCJdKTpub3QoW3R5cGU9XCJmaWxlXCJdKTpub3QoW3R5cGU9XCJidXR0b25cIl0pJ1xuICAgICAgICApXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICAgIHZhciBmaWVsZCA9ICQoZWwpO1xuICAgICAgICAgIHZhciB0eXBlID0gZmllbGQuYXR0cigndHlwZScpO1xuICAgICAgICAgIHZhciBuYW1lID1cbiAgICAgICAgICAgIGZpZWxkLmF0dHIoJ2RhdGEtbmFtZScpIHx8IGZpZWxkLmF0dHIoJ25hbWUnKSB8fCAnRmllbGQgJyArIChpICsgMSk7XG4gICAgICAgICAgLy8gRW5jb2RpbmcgdGhlIGZpZWxkIG5hbWUgd2lsbCBwcmV2ZW50IGZpZWxkcyB0aGF0IGhhdmUgYnJhY2tldHNcbiAgICAgICAgICAvLyBpbiB0aGVpciBuYW1lIGZyb20gYmVpbmcgcGFyc2VkIGJ5IGBib2R5UGFyc2VyLnVybGVuY29kZWRgIGFzXG4gICAgICAgICAgLy8gb2JqZWN0cyB3aGljaCB3b3VsZCBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGxpa2Ugbm90IHNhdmluZ1xuICAgICAgICAgIC8vIHRoZSBjb250ZW50IG9mIHRoZSBmaWVsZC5cbiAgICAgICAgICAvLyBodHRwczovL3dlYmZsb3cuYXRsYXNzaWFuLm5ldC9icm93c2UvQ01TQVVUSC0yNDk1XG4gICAgICAgICAgbmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmaWVsZC52YWwoKTtcblxuICAgICAgICAgIGlmICh0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLmlzKCc6Y2hlY2tlZCcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgLy8gUmFkaW8gZ3JvdXAgdmFsdWUgYWxyZWFkeSBwcm9jZXNzZWRcbiAgICAgICAgICAgIGlmIChyZXN1bHRbbmFtZV0gPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdFtuYW1lXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9XG4gICAgICAgICAgICAgIGZvcm1cbiAgICAgICAgICAgICAgICAuZmluZCgnaW5wdXRbbmFtZT1cIicgKyBmaWVsZC5hdHRyKCduYW1lJykgKyAnXCJdOmNoZWNrZWQnKVxuICAgICAgICAgICAgICAgIC52YWwoKSB8fCBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICQudHJpbSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIHN0YXR1cyA9IHN0YXR1cyB8fCBnZXRTdGF0dXMoZmllbGQsIHR5cGUsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEZpbGVVcGxvYWRzKGZvcm0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgICAgZm9ybS5maW5kKCc6aW5wdXRbdHlwZT1cImZpbGVcIl0nKS5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICB2YXIgZmllbGQgPSAkKGVsKTtcbiAgICAgICAgdmFyIG5hbWUgPVxuICAgICAgICAgIGZpZWxkLmF0dHIoJ2RhdGEtbmFtZScpIHx8IGZpZWxkLmF0dHIoJ25hbWUnKSB8fCAnRmlsZSAnICsgKGkgKyAxKTtcbiAgICAgICAgdmFyIHZhbHVlID0gZmllbGQuYXR0cignZGF0YS12YWx1ZScpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhbHVlID0gJC50cmltKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IHRyYWNraW5nQ29va2llTmFtZU1hcCA9IHtcbiAgICAgIF9ta3RvX3RyazogJ21hcmtldG8nLFxuICAgICAgLy8gX19oc3RjOiAnaHVic3BvdCcsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNvbGxlY3RFbnRlcnByaXNlVHJhY2tpbmdDb29raWVzKCkge1xuICAgICAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKS5yZWR1Y2UoZnVuY3Rpb24gKFxuICAgICAgICBhY2MsXG4gICAgICAgIGNvb2tpZVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHNwbGl0Q29va2llID0gY29va2llLnNwbGl0KCc9Jyk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBzcGxpdENvb2tpZVswXTtcbiAgICAgICAgaWYgKG5hbWUgaW4gdHJhY2tpbmdDb29raWVOYW1lTWFwKSB7XG4gICAgICAgICAgY29uc3QgbWFwcGVkTmFtZSA9IHRyYWNraW5nQ29va2llTmFtZU1hcFtuYW1lXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNwbGl0Q29va2llLnNsaWNlKDEpLmpvaW4oJz0nKTtcbiAgICAgICAgICBhY2NbbWFwcGVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgICByZXR1cm4gY29va2llcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0dXMoZmllbGQsIHR5cGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdHVzID0gbnVsbDtcblxuICAgICAgaWYgKHR5cGUgPT09ICdwYXNzd29yZCcpIHtcbiAgICAgICAgc3RhdHVzID0gJ1Bhc3N3b3JkcyBjYW5ub3QgYmUgc3VibWl0dGVkLic7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkLmF0dHIoJ3JlcXVpcmVkJykpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHN0YXR1cyA9ICdQbGVhc2UgZmlsbCBvdXQgdGhlIHJlcXVpcmVkIGZpZWxkOiAnICsgbmFtZTtcbiAgICAgICAgfSBlbHNlIGlmIChlbWFpbEZpZWxkLnRlc3QoZmllbGQuYXR0cigndHlwZScpKSkge1xuICAgICAgICAgIGlmICghZW1haWxWYWx1ZS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgc3RhdHVzID0gJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MgZm9yOiAnICsgbmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2ctcmVjYXB0Y2hhLXJlc3BvbnNlJyAmJiAhdmFsdWUpIHtcbiAgICAgICAgc3RhdHVzID0gXCJQbGVhc2UgY29uZmlybSB5b3UncmUgbm90IGEgcm9ib3QuXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwb3J0ZWRTdWJtaXRXZWJmbG93KGRhdGEpIHtcbiAgICAgIHByZXZlbnREZWZhdWx0KGRhdGEpO1xuICAgICAgYWZ0ZXJTdWJtaXQoZGF0YSk7XG4gICAgfVxuXG4gICAgLy8gU3VibWl0IGZvcm0gdG8gTWFpbENoaW1wXG4gICAgZnVuY3Rpb24gc3VibWl0TWFpbENoaW1wKGRhdGEpIHtcbiAgICAgIHJlc2V0KGRhdGEpO1xuXG4gICAgICB2YXIgZm9ybSA9IGRhdGEuZm9ybTtcbiAgICAgIHZhciBwYXlsb2FkID0ge307XG5cbiAgICAgIC8vIFNraXAgQWpheCBzdWJtaXNzaW9uIGlmIGh0dHAvcyBtaXNtYXRjaCwgZmFsbGJhY2sgdG8gUE9TVCBpbnN0ZWFkXG4gICAgICBpZiAoL15odHRwcy8udGVzdChsb2MuaHJlZikgJiYgIS9eaHR0cHMvLnRlc3QoZGF0YS5hY3Rpb24pKSB7XG4gICAgICAgIGZvcm0uYXR0cignbWV0aG9kJywgJ3Bvc3QnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwcmV2ZW50RGVmYXVsdChkYXRhKTtcblxuICAgICAgLy8gRmluZCAmIHBvcHVsYXRlIGFsbCBmaWVsZHNcbiAgICAgIHZhciBzdGF0dXMgPSBmaW5kRmllbGRzKGZvcm0sIHBheWxvYWQpO1xuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICByZXR1cm4gYWxlcnQoc3RhdHVzKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzYWJsZSBzdWJtaXQgYnV0dG9uXG4gICAgICBkaXNhYmxlQnRuKGRhdGEpO1xuXG4gICAgICAvLyBVc2Ugc3BlY2lhbCBmb3JtYXQgZm9yIE1haWxDaGltcCBwYXJhbXNcbiAgICAgIHZhciBmdWxsTmFtZTtcbiAgICAgIF8uZWFjaChwYXlsb2FkLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoZW1haWxGaWVsZC50ZXN0KGtleSkpIHtcbiAgICAgICAgICBwYXlsb2FkLkVNQUlMID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eKChmdWxsWyBfLV0/KT9uYW1lKSQvaS50ZXN0KGtleSkpIHtcbiAgICAgICAgICBmdWxsTmFtZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXihmaXJzdFsgXy1dP25hbWUpJC9pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgIHBheWxvYWQuRk5BTUUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoL14obGFzdFsgXy1dP25hbWUpJC9pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgIHBheWxvYWQuTE5BTUUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmdWxsTmFtZSAmJiAhcGF5bG9hZC5GTkFNRSkge1xuICAgICAgICBmdWxsTmFtZSA9IGZ1bGxOYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgIHBheWxvYWQuRk5BTUUgPSBmdWxsTmFtZVswXTtcbiAgICAgICAgcGF5bG9hZC5MTkFNRSA9IHBheWxvYWQuTE5BTUUgfHwgZnVsbE5hbWVbMV07XG4gICAgICB9XG5cbiAgICAgIC8vIFVzZSB0aGUgKHVuZG9jdW1lbnRlZCkgTWFpbENoaW1wIGpzb25wIGFwaVxuICAgICAgdmFyIHVybCA9IGRhdGEuYWN0aW9uLnJlcGxhY2UoJy9wb3N0PycsICcvcG9zdC1qc29uPycpICsgJyZjPT8nO1xuICAgICAgLy8gQWRkIHNwZWNpYWwgcGFyYW0gdG8gcHJldmVudCBib3Qgc2lnbnVwc1xuICAgICAgdmFyIHVzZXJJZCA9IHVybC5pbmRleE9mKCd1PScpICsgMjtcbiAgICAgIHVzZXJJZCA9IHVybC5zdWJzdHJpbmcodXNlcklkLCB1cmwuaW5kZXhPZignJicsIHVzZXJJZCkpO1xuICAgICAgdmFyIGxpc3RJZCA9IHVybC5pbmRleE9mKCdpZD0nKSArIDM7XG4gICAgICBsaXN0SWQgPSB1cmwuc3Vic3RyaW5nKGxpc3RJZCwgdXJsLmluZGV4T2YoJyYnLCBsaXN0SWQpKTtcbiAgICAgIHBheWxvYWRbJ2JfJyArIHVzZXJJZCArICdfJyArIGxpc3RJZF0gPSAnJztcblxuICAgICAgJC5hamF4KHtcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhOiBwYXlsb2FkLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcbiAgICAgIH0pXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgZGF0YS5zdWNjZXNzID0gcmVzcC5yZXN1bHQgPT09ICdzdWNjZXNzJyB8fCAvYWxyZWFkeS8udGVzdChyZXNwLm1zZyk7XG4gICAgICAgICAgaWYgKCFkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnTWFpbENoaW1wIGVycm9yOiAnICsgcmVzcC5tc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclN1Ym1pdChkYXRhKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFmdGVyU3VibWl0KGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBDb21tb24gY2FsbGJhY2sgd2hpY2ggcnVucyBhZnRlciBhbGwgQWpheCBzdWJtaXNzaW9uc1xuICAgIGZ1bmN0aW9uIGFmdGVyU3VibWl0KGRhdGEpIHtcbiAgICAgIHZhciBmb3JtID0gZGF0YS5mb3JtO1xuICAgICAgdmFyIHJlZGlyZWN0ID0gZGF0YS5yZWRpcmVjdDtcbiAgICAgIHZhciBzdWNjZXNzID0gZGF0YS5zdWNjZXNzO1xuXG4gICAgICAvLyBSZWRpcmVjdCB0byBhIHN1Y2Nlc3MgdXJsIGlmIGRlZmluZWRcbiAgICAgIGlmIChzdWNjZXNzICYmIHJlZGlyZWN0KSB7XG4gICAgICAgIFdlYmZsb3cubG9jYXRpb24ocmVkaXJlY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNob3cgb3IgaGlkZSBzdGF0dXMgZGl2c1xuICAgICAgZGF0YS5kb25lLnRvZ2dsZShzdWNjZXNzKTtcbiAgICAgIGRhdGEuZmFpbC50b2dnbGUoIXN1Y2Nlc3MpO1xuXG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBkYXRhLmRvbmUuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuZmFpbC5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICAvLyBIaWRlIGZvcm0gb24gc3VjY2Vzc1xuICAgICAgZm9ybS50b2dnbGUoIXN1Y2Nlc3MpO1xuXG4gICAgICAvLyBSZXNldCBkYXRhIGFuZCBlbmFibGUgc3VibWl0IGJ1dHRvblxuICAgICAgcmVzZXQoZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZGF0YSkge1xuICAgICAgZGF0YS5ldnQgJiYgZGF0YS5ldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGRhdGEuZXZ0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0RmlsZVVwbG9hZChpLCBmb3JtKSB7XG4gICAgICBpZiAoIWZvcm0uZmlsZVVwbG9hZHMgfHwgIWZvcm0uZmlsZVVwbG9hZHNbaV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlsZTtcbiAgICAgIHZhciAkZWwgPSAkKGZvcm0uZmlsZVVwbG9hZHNbaV0pO1xuICAgICAgdmFyICRkZWZhdWx0V3JhcCA9ICRlbC5maW5kKCc+IC53LWZpbGUtdXBsb2FkLWRlZmF1bHQnKTtcbiAgICAgIHZhciAkdXBsb2FkaW5nV3JhcCA9ICRlbC5maW5kKCc+IC53LWZpbGUtdXBsb2FkLXVwbG9hZGluZycpO1xuICAgICAgdmFyICRzdWNjZXNzV3JhcCA9ICRlbC5maW5kKCc+IC53LWZpbGUtdXBsb2FkLXN1Y2Nlc3MnKTtcbiAgICAgIHZhciAkZXJyb3JXcmFwID0gJGVsLmZpbmQoJz4gLnctZmlsZS11cGxvYWQtZXJyb3InKTtcbiAgICAgIHZhciAkaW5wdXQgPSAkZGVmYXVsdFdyYXAuZmluZCgnLnctZmlsZS11cGxvYWQtaW5wdXQnKTtcbiAgICAgIHZhciAkbGFiZWwgPSAkZGVmYXVsdFdyYXAuZmluZCgnLnctZmlsZS11cGxvYWQtbGFiZWwnKTtcbiAgICAgIHZhciAkbGFiZWxDaGlsZHJlbiA9ICRsYWJlbC5jaGlsZHJlbigpO1xuICAgICAgdmFyICRlcnJvck1zZ0VsID0gJGVycm9yV3JhcC5maW5kKCcudy1maWxlLXVwbG9hZC1lcnJvci1tc2cnKTtcbiAgICAgIHZhciAkZmlsZUVsID0gJHN1Y2Nlc3NXcmFwLmZpbmQoJy53LWZpbGUtdXBsb2FkLWZpbGUnKTtcbiAgICAgIHZhciAkcmVtb3ZlRWwgPSAkc3VjY2Vzc1dyYXAuZmluZCgnLnctZmlsZS1yZW1vdmUtbGluaycpO1xuICAgICAgdmFyICRmaWxlTmFtZUVsID0gJGZpbGVFbC5maW5kKCcudy1maWxlLXVwbG9hZC1maWxlLW5hbWUnKTtcblxuICAgICAgdmFyIHNpemVFcnJNc2cgPSAkZXJyb3JNc2dFbC5hdHRyKCdkYXRhLXctc2l6ZS1lcnJvcicpO1xuICAgICAgdmFyIHR5cGVFcnJNc2cgPSAkZXJyb3JNc2dFbC5hdHRyKCdkYXRhLXctdHlwZS1lcnJvcicpO1xuICAgICAgdmFyIGdlbmVyaWNFcnJNc2cgPSAkZXJyb3JNc2dFbC5hdHRyKCdkYXRhLXctZ2VuZXJpYy1lcnJvcicpO1xuXG4gICAgICAvLyBBY2Nlc3NpYmlsaXR5IGZpeGVzXG4gICAgICAvLyBUaGUgZmlsZSB1cGxvYWQgSW5wdXQgaXMgbm90IHN0eWxhYmxlIGJ5IHRoZSBkZXNpZ25lciwgc28gd2UgYXJlXG4gICAgICAvLyBnb2luZyB0byBwcmV0ZW5kIHRoZSBMYWJlbCBpcyB0aGUgaW5wdXQuIMKvXFxfKOODhClfL8KvXG4gICAgICBpZiAoIWluQXBwKSB7XG4gICAgICAgICRsYWJlbC5vbignY2xpY2sga2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUud2hpY2ggIT09IDEzICYmIGUud2hpY2ggIT09IDMyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRpbnB1dC5jbGljaygpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQm90aCBvZiB0aGVzZSBhcmUgYWRkZWQgdGhyb3VnaCBDU1NcbiAgICAgICRsYWJlbC5maW5kKCcudy1pY29uLWZpbGUtdXBsb2FkLWljb24nKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAkcmVtb3ZlRWwuZmluZCgnLnctaWNvbi1maWxlLXVwbG9hZC1yZW1vdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgIGlmICghaW5BcHApIHtcbiAgICAgICAgJHJlbW92ZUVsLm9uKCdjbGljayBrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoZS50eXBlID09PSAna2V5ZG93bicpIHtcbiAgICAgICAgICAgIGlmIChlLndoaWNoICE9PSAxMyAmJiBlLndoaWNoICE9PSAzMikge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkaW5wdXQucmVtb3ZlQXR0cignZGF0YS12YWx1ZScpO1xuICAgICAgICAgICRpbnB1dC52YWwoJycpO1xuICAgICAgICAgICRmaWxlTmFtZUVsLmh0bWwoJycpO1xuICAgICAgICAgICRkZWZhdWx0V3JhcC50b2dnbGUodHJ1ZSk7XG4gICAgICAgICAgJHN1Y2Nlc3NXcmFwLnRvZ2dsZShmYWxzZSk7XG4gICAgICAgICAgJGxhYmVsLmZvY3VzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRpbnB1dC5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBmaWxlID0gZS50YXJnZXQgJiYgZS50YXJnZXQuZmlsZXMgJiYgZS50YXJnZXQuZmlsZXNbMF07XG4gICAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2hvdyB1cGxvYWRpbmdcbiAgICAgICAgICAkZGVmYXVsdFdyYXAudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgICAkZXJyb3JXcmFwLnRvZ2dsZShmYWxzZSk7XG4gICAgICAgICAgJHVwbG9hZGluZ1dyYXAudG9nZ2xlKHRydWUpO1xuICAgICAgICAgICR1cGxvYWRpbmdXcmFwLmZvY3VzKCk7XG5cbiAgICAgICAgICAvLyBTZXQgZmlsZW5hbWVcbiAgICAgICAgICAkZmlsZU5hbWVFbC50ZXh0KGZpbGUubmFtZSk7XG5cbiAgICAgICAgICAvLyBEaXNhYmxlIHN1Ym1pdCBidXR0b25cbiAgICAgICAgICBpZiAoIWlzVXBsb2FkaW5nKCkpIHtcbiAgICAgICAgICAgIGRpc2FibGVCdG4oZm9ybSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvcm0uZmlsZVVwbG9hZHNbaV0udXBsb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgIHNpZ25GaWxlKGZpbGUsIGFmdGVyU2lnbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNldHRpbmcgaW5wdXQgd2lkdGggMXB4IGFuZCBoZWlnaHQgZXF1YWwgbGFiZWxcbiAgICAgICAgLy8gVGhpcyBpcyBzbyB0aGUgYnJvd3NlciByZXF1aXJlZCBlcnJvciB3aWxsIHNob3cgdXBcbiAgICAgICAgdmFyIGhlaWdodCA9ICRsYWJlbC5vdXRlckhlaWdodCgpO1xuICAgICAgICAkaW5wdXQuaGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICRpbnB1dC53aWR0aCgxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRpbnB1dC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRsYWJlbC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRsYWJlbENoaWxkcmVuLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VFcnJvcihlcnIpIHtcbiAgICAgICAgdmFyIGVycm9yTXNnID0gZXJyLnJlc3BvbnNlSlNPTiAmJiBlcnIucmVzcG9uc2VKU09OLm1zZztcbiAgICAgICAgdmFyIHVzZXJFcnJvciA9IGdlbmVyaWNFcnJNc2c7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZXJyb3JNc2cgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgZXJyb3JNc2cuaW5kZXhPZignSW52YWxpZEZpbGVUeXBlRXJyb3InKSA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICB1c2VyRXJyb3IgPSB0eXBlRXJyTXNnO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiBlcnJvck1zZyA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICBlcnJvck1zZy5pbmRleE9mKCdNYXhGaWxlU2l6ZUVycm9yJykgPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXNlckVycm9yID0gc2l6ZUVyck1zZztcbiAgICAgICAgfVxuXG4gICAgICAgICRlcnJvck1zZ0VsLnRleHQodXNlckVycm9yKTtcblxuICAgICAgICAkaW5wdXQucmVtb3ZlQXR0cignZGF0YS12YWx1ZScpO1xuICAgICAgICAkaW5wdXQudmFsKCcnKTtcbiAgICAgICAgJHVwbG9hZGluZ1dyYXAudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgJGRlZmF1bHRXcmFwLnRvZ2dsZSh0cnVlKTtcbiAgICAgICAgJGVycm9yV3JhcC50b2dnbGUodHJ1ZSk7XG4gICAgICAgICRlcnJvcldyYXAuZm9jdXMoKTtcblxuICAgICAgICBmb3JtLmZpbGVVcGxvYWRzW2ldLnVwbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoIWlzVXBsb2FkaW5nKCkpIHtcbiAgICAgICAgICByZXNldChmb3JtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZnRlclNpZ24oZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VFcnJvcihlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpbGVOYW1lID0gZGF0YS5maWxlTmFtZTtcbiAgICAgICAgdmFyIHBvc3REYXRhID0gZGF0YS5wb3N0RGF0YTtcbiAgICAgICAgdmFyIGZpbGVJZCA9IGRhdGEuZmlsZUlkO1xuICAgICAgICB2YXIgczNVcmwgPSBkYXRhLnMzVXJsO1xuICAgICAgICAkaW5wdXQuYXR0cignZGF0YS12YWx1ZScsIGZpbGVJZCk7XG5cbiAgICAgICAgdXBsb2FkUzMoczNVcmwsIHBvc3REYXRhLCBmaWxlLCBmaWxlTmFtZSwgYWZ0ZXJVcGxvYWQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZnRlclVwbG9hZChlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBwYXJzZUVycm9yKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHN1Y2Nlc3NcbiAgICAgICAgJHVwbG9hZGluZ1dyYXAudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgJHN1Y2Nlc3NXcmFwLmNzcygnZGlzcGxheScsICdpbmxpbmUtYmxvY2snKTtcbiAgICAgICAgJHN1Y2Nlc3NXcmFwLmZvY3VzKCk7XG5cbiAgICAgICAgZm9ybS5maWxlVXBsb2Fkc1tpXS51cGxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFpc1VwbG9hZGluZygpKSB7XG4gICAgICAgICAgcmVzZXQoZm9ybSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaXNVcGxvYWRpbmcoKSB7XG4gICAgICAgIHZhciB1cGxvYWRzID0gKGZvcm0uZmlsZVVwbG9hZHMgJiYgZm9ybS5maWxlVXBsb2Fkcy50b0FycmF5KCkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gdXBsb2Fkcy5zb21lKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS51cGxvYWRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNpZ25GaWxlKGZpbGUsIGNiKSB7XG4gICAgICB2YXIgcGF5bG9hZCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgIHNpemU6IGZpbGUuc2l6ZSxcbiAgICAgIH0pO1xuXG4gICAgICAkLmFqYXgoe3R5cGU6ICdHRVQnLCB1cmw6IGAke3NpZ25GaWxlVXJsfT8ke3BheWxvYWR9YCwgY3Jvc3NEb21haW46IHRydWV9KVxuICAgICAgICAuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGNiKG51bGwsIGRhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBsb2FkUzModXJsLCBkYXRhLCBmaWxlLCBmaWxlTmFtZSwgY2IpIHtcbiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9yICh2YXIgayBpbiBkYXRhKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChrLCBkYXRhW2tdKTtcbiAgICAgIH1cbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUsIGZpbGVOYW1lKTtcblxuICAgICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYihudWxsKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEV4cG9ydCBtb2R1bGVcbiAgICByZXR1cm4gYXBpO1xuICB9KVxuKTtcbiJdLCJuYW1lcyI6WyJXZWJmbG93IiwicmVxdWlyZSIsInJlbmRlclR1cm5zdGlsZUNhcHRjaGEiLCJzaXRlS2V5IiwiZm9ybUVsZW1lbnQiLCJjYiIsImVycm9yQ2FsbGJhY2siLCJjYXB0Y2hhQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJ0dXJuc3RpbGUiLCJyZW5kZXIiLCJzaXRla2V5IiwiY2FsbGJhY2siLCJ0b2tlbiIsImRlZmluZSIsIm1vZHVsZSIsImV4cG9ydHMiLCIkIiwiXyIsIlRVUk5TVElMRV9MT0FERURfRVZFTlQiLCJhcGkiLCIkZG9jIiwiJGZvcm1zIiwibG9jIiwid2luZG93IiwibG9jYXRpb24iLCJyZXRybyIsIlhEb21haW5SZXF1ZXN0IiwiYXRvYiIsIm5hbWVzcGFjZSIsInNpdGVJZCIsImVtYWlsRmllbGQiLCJlbWFpbFZhbHVlIiwiYWxlcnQiLCJpbkFwcCIsImVudiIsImxpc3RlbmluZyIsImZvcm1VcmwiLCJzaWduRmlsZVVybCIsInR1cm5zdGlsZVNpdGVLZXkiLCJmaW5kIiwiZGF0YSIsInR1cm5zdGlsZVNjcmlwdCIsImNoaW1wUmVnZXgiLCJkaXNjb25uZWN0ZWQiLCJkZWJvdW5jZSIsInJlYWR5IiwiZGVzaWduIiwicHJldmlldyIsImxvYWRUdXJuc3RpbGVTY3JpcHQiLCJpbml0IiwiYWRkTGlzdGVuZXJzIiwiYXR0ciIsIldFQkZMT1dfRk9STV9BUElfSE9TVCIsImluZGV4T2YiLCJyZXBsYWNlIiwiV0VCRkxPV19GT1JNX09MRElFX0hPU1QiLCJsZW5ndGgiLCJlYWNoIiwiYnVpbGQiLCJzcmMiLCJoZWFkIiwib25sb2FkIiwidHJpZ2dlciIsImkiLCJlbCIsIiRlbCIsImZvcm0iLCJyZXNldCIsIndyYXAiLCJjbG9zZXN0IiwiZG9uZSIsImZhaWwiLCJmaWxlVXBsb2FkcyIsImoiLCJpbml0RmlsZVVwbG9hZCIsInNldEJ1dHRvblRvVHVybnN0aWxlTG9hZGluZyIsInNldEZvcm1Mb2FkaW5nU3RhdGUiLCJvbiIsInR1cm5zdGlsZVRva2VuIiwiYnRuIiwicHJvcCIsImZvcm1OYW1lIiwiYWN0aW9uIiwiaGFuZGxlciIsInJlZGlyZWN0IiwidGVzdCIsInN1Ym1pdE1haWxDaGltcCIsIldFQkZMT1dfRVhQT1JUX01PREUiLCJleHBvcnRlZFN1Ym1pdFdlYmZsb3ciLCJob3N0ZWRTdWJtaXRIYW5kbGVyIiwiZGVmYXVsdCIsImNvbGxlY3RFbnRlcnByaXNlVHJhY2tpbmdDb29raWVzIiwicHJldmVudERlZmF1bHQiLCJmaW5kRmllbGRzIiwiZmluZEZpbGVVcGxvYWRzIiwiZGlzYWJsZUJ0biIsImFmdGVyU3VibWl0IiwiZXZ0IiwiQ0hFQ0tCT1hfQ0xBU1NfTkFNRSIsIlJBRElPX0lOUFVUX0NMQVNTX05BTUUiLCJDSEVDS0VEX0NMQVNTIiwiRk9DVVNFRF9DTEFTUyIsIkZPQ1VTRURfVklTSUJMRV9DTEFTUyIsImZvY3VzVmlzaWJsZVNlbGVjdG9ycyIsIkNVU1RPTV9DT05UUk9MUyIsInRhcmdldCIsInNpYmxpbmdzIiwidG9nZ2xlQ2xhc3MiLCJuYW1lIiwibWFwIiwicmVtb3ZlQ2xhc3MiLCIkdGFyZ2V0IiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsImZvckVhY2giLCJjb250cm9sVHlwZSIsImN1c3RvbUNvbnRyb2xDbGFzc05hbWUiLCJmaWx0ZXIiLCJ3YWl0Iiwic3VjY2VzcyIsImlzRGlzYWJsZWQiLCJCb29sZWFuIiwibGFiZWwiLCJ2YWwiLCIkZm9ybUVsIiwiaXNMb2FkaW5nIiwiJHdyYXBwZXIiLCJyZXN1bHQiLCJzdGF0dXMiLCJmaWVsZCIsInR5cGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ2YWx1ZSIsImlzIiwidHJpbSIsImdldFN0YXR1cyIsInRyYWNraW5nQ29va2llTmFtZU1hcCIsIl9ta3RvX3RyayIsImNvb2tpZXMiLCJjb29raWUiLCJzcGxpdCIsInJlZHVjZSIsImFjYyIsInNwbGl0Q29va2llIiwibWFwcGVkTmFtZSIsInNsaWNlIiwiam9pbiIsInBheWxvYWQiLCJocmVmIiwiZnVsbE5hbWUiLCJrZXkiLCJFTUFJTCIsIkZOQU1FIiwiTE5BTUUiLCJ1cmwiLCJ1c2VySWQiLCJzdWJzdHJpbmciLCJsaXN0SWQiLCJhamF4IiwiZGF0YVR5cGUiLCJyZXNwIiwibXNnIiwiY29uc29sZSIsImluZm8iLCJ0b2dnbGUiLCJmb2N1cyIsImZpbGUiLCIkZGVmYXVsdFdyYXAiLCIkdXBsb2FkaW5nV3JhcCIsIiRzdWNjZXNzV3JhcCIsIiRlcnJvcldyYXAiLCIkaW5wdXQiLCIkbGFiZWwiLCIkbGFiZWxDaGlsZHJlbiIsImNoaWxkcmVuIiwiJGVycm9yTXNnRWwiLCIkZmlsZUVsIiwiJHJlbW92ZUVsIiwiJGZpbGVOYW1lRWwiLCJzaXplRXJyTXNnIiwidHlwZUVyck1zZyIsImdlbmVyaWNFcnJNc2ciLCJlIiwid2hpY2giLCJjbGljayIsInJlbW92ZUF0dHIiLCJodG1sIiwiZmlsZXMiLCJ0ZXh0IiwiaXNVcGxvYWRpbmciLCJ1cGxvYWRpbmciLCJzaWduRmlsZSIsImFmdGVyU2lnbiIsImhlaWdodCIsIm91dGVySGVpZ2h0Iiwid2lkdGgiLCJwYXJzZUVycm9yIiwiZXJyIiwiZXJyb3JNc2ciLCJyZXNwb25zZUpTT04iLCJ1c2VyRXJyb3IiLCJmaWxlTmFtZSIsInBvc3REYXRhIiwiZmlsZUlkIiwiczNVcmwiLCJ1cGxvYWRTMyIsImFmdGVyVXBsb2FkIiwiY3NzIiwidXBsb2FkcyIsInRvQXJyYXkiLCJzb21lIiwiVVJMU2VhcmNoUGFyYW1zIiwic2l6ZSIsImNyb3NzRG9tYWluIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImsiLCJhcHBlbmQiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BLEdBRUE7O0NBRUM7QUFFRCxJQUFJQSxVQUFVQyxRQUFRO0FBRXRCLE1BQU1DLHlCQUF5QixDQUM3QkMsU0FDQUMsYUFDQUMsSUFDQUMsY0FBYyx1QkFBdUI7O0lBRXJDLE1BQU1DLG1CQUFtQkMsU0FBU0MsYUFBYSxDQUFDO0lBQ2hETCxZQUFZTSxXQUFXLENBQUNIO0lBRXhCLHFCQUFxQjtJQUNyQkksVUFBVUMsTUFBTSxDQUFDTCxrQkFBa0I7UUFDakNNLFNBQVNWO1FBQ1RXLFVBQVUsU0FBVUMsS0FBSztZQUN2QlYsR0FBR1U7UUFDTDtRQUNBLGtCQUFrQjtZQUNoQlQ7UUFDRjtJQUNGO0FBQ0Y7QUFFQU4sUUFBUWdCLE1BQU0sQ0FDWixTQUNDQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO0lBQzlCLE1BQU1DLHlCQUF5QjtJQUMvQixJQUFJQyxNQUFNLENBQUM7SUFFWCxJQUFJQyxPQUFPSixFQUFFWDtJQUNiLElBQUlnQjtJQUNKLElBQUlDLE1BQU1DLE9BQU9DLFFBQVE7SUFDekIsSUFBSUMsUUFBUUYsT0FBT0csY0FBYyxJQUFJLENBQUNILE9BQU9JLElBQUk7SUFDakQsSUFBSUMsWUFBWTtJQUNoQixJQUFJQztJQUNKLElBQUlDLGFBQWE7SUFDakIsSUFBSUMsYUFBYTtJQUNqQixJQUFJQyxRQUFRVCxPQUFPUyxLQUFLO0lBQ3hCLElBQUlDLFFBQVFwQyxRQUFRcUMsR0FBRztJQUN2QixJQUFJQztJQUVKLElBQUlDO0lBQ0osSUFBSUM7SUFFSixNQUFNQyxtQkFBbUJsQixLQUN0Qm1CLElBQUksQ0FBQyw0QkFDTEMsSUFBSSxDQUFDO0lBQ1IsSUFBSUM7SUFFSiwrQ0FBK0M7SUFDL0MsSUFBSUMsYUFBYTtJQUVqQixJQUFJQyxlQUFlMUIsRUFBRTJCLFFBQVEsQ0FBQztRQUM1QlosTUFDRTtJQUVKLEdBQUc7SUFFSGIsSUFBSTBCLEtBQUssR0FDUDFCLElBQUkyQixNQUFNLEdBQ1YzQixJQUFJNEIsT0FBTyxHQUNUO1FBQ0UsOEVBQThFO1FBQzlFQztRQUVBLGFBQWE7UUFDYkM7UUFFQSxzRUFBc0U7UUFDdEUsSUFBSSxBQUFDLENBQUEsQ0FBQ2hCLFNBQVNwQyxRQUFRcUMsR0FBRyxDQUFDLFVBQVMsS0FBTSxDQUFDQyxXQUFXO1lBQ3BEZTtRQUNGO0lBQ0Y7SUFFSixTQUFTRDtRQUNQcEIsU0FBU2IsRUFBRSxRQUFRbUMsSUFBSSxDQUFDO1FBRXhCZixVQUFVZ0Isd0JBQXdCLGtCQUFrQnZCO1FBRXBELDhGQUE4RjtRQUM5RixJQUFJSixTQUFTVyxRQUFRaUIsT0FBTyxDQUFDRCwwQkFBMEIsR0FBRztZQUN4RGhCLFVBQVVBLFFBQVFrQixPQUFPLENBQ3ZCRix1QkFDQUc7UUFFSjtRQUVBbEIsY0FBYyxDQUFDLEVBQUVELFFBQVEsU0FBUyxDQUFDO1FBRW5DZixTQUFTTCxFQUFFWSxZQUFZO1FBQ3ZCLElBQUksQ0FBQ1AsT0FBT21DLE1BQU0sRUFBRTtZQUNsQjtRQUNGO1FBQ0FuQyxPQUFPb0MsSUFBSSxDQUFDQztJQUNkO0lBRUEsU0FBU1Y7UUFDUCxJQUFJVixrQkFBa0I7WUFDcEIsa0NBQWtDO1lBQ2xDRyxrQkFBa0JwQyxTQUFTQyxhQUFhLENBQUM7WUFDekNtQyxnQkFBZ0JrQixHQUFHLEdBQ2pCO1lBQ0Z0RCxTQUFTdUQsSUFBSSxDQUFDckQsV0FBVyxDQUFDa0M7WUFDMUJBLGdCQUFnQm9CLE1BQU0sR0FBRztnQkFDdkIsaUVBQWlFO2dCQUNqRSxvSEFBb0g7Z0JBQ3BIekMsS0FBSzBDLE9BQU8sQ0FBQzVDO1lBQ2Y7UUFDRjtJQUNGO0lBRUEsU0FBU3dDLE1BQU1LLENBQUMsRUFBRUMsRUFBRTtRQUNsQixtQ0FBbUM7UUFDbkMsSUFBSUMsTUFBTWpELEVBQUVnRDtRQUNaLElBQUl4QixPQUFPeEIsRUFBRXdCLElBQUksQ0FBQ3dCLElBQUlwQztRQUN0QixJQUFJLENBQUNZLE1BQU07WUFDVEEsT0FBT3hCLEVBQUV3QixJQUFJLENBQUN3QixJQUFJcEMsV0FBVztnQkFBQ3NDLE1BQU1EO1lBQUc7UUFDekMsRUFBRSxZQUFZO1FBRWRFLE1BQU0zQjtRQUNOLElBQUk0QixPQUFPSCxJQUFJSSxPQUFPLENBQUM7UUFDdkI3QixLQUFLOEIsSUFBSSxHQUFHRixLQUFLN0IsSUFBSSxDQUFDO1FBQ3RCQyxLQUFLK0IsSUFBSSxHQUFHSCxLQUFLN0IsSUFBSSxDQUFDO1FBQ3RCQyxLQUFLZ0MsV0FBVyxHQUFHSixLQUFLN0IsSUFBSSxDQUFDO1FBRTdCQyxLQUFLZ0MsV0FBVyxDQUFDZixJQUFJLENBQUMsU0FBVWdCLENBQUM7WUFDL0JDLGVBQWVELEdBQUdqQztRQUNwQjtRQUVBLElBQUlGLGtCQUFrQjtZQUNwQiwwRkFBMEY7WUFDMUZxQyw0QkFBNEJuQztZQUU1Qix3Q0FBd0M7WUFDeENvQyxvQkFBb0JYLEtBQUs7WUFFekIsMkdBQTJHO1lBQzNHLDBHQUEwRztZQUMxRzdDLEtBQUt5RCxFQUFFLENBQ0wsT0FBT3JFLGNBQWMsY0FBYyxVQUFVVSx3QkFDN0M7Z0JBQ0UsNkVBQTZFO2dCQUM3RW5CLHVCQUNFdUMsa0JBQ0EwQixJQUNBLENBQUNwRDtvQkFDQywwSEFBMEg7b0JBQzFILG1IQUFtSDtvQkFDbkg0QixLQUFLc0MsY0FBYyxHQUFHbEU7b0JBQ3RCLDZFQUE2RTtvQkFDN0V1RCxNQUFNM0I7b0JBQ05vQyxvQkFBb0JYLEtBQUs7Z0JBQzNCLEdBQ0E7b0JBQ0UsMEZBQTBGO29CQUMxRkUsTUFBTTNCO29CQUNOLDJHQUEyRztvQkFDM0csSUFBSUEsS0FBS3VDLEdBQUcsRUFBRTt3QkFDWnZDLEtBQUt1QyxHQUFHLENBQUNDLElBQUksQ0FBQyxZQUFZO29CQUM1QjtvQkFDQUosb0JBQW9CWCxLQUFLO2dCQUMzQjtZQUVKO1FBRUo7UUFFQSxzQkFBc0I7UUFDdEIsSUFBSWdCLFdBQ0Z6QyxLQUFLMEIsSUFBSSxDQUFDZixJQUFJLENBQUMsaUJBQWlCWCxLQUFLMEIsSUFBSSxDQUFDZixJQUFJLENBQUMsZ0JBQWdCO1FBQ2pFLElBQUksQ0FBQ1gsS0FBSzhCLElBQUksQ0FBQ25CLElBQUksQ0FBQyxlQUFlO1lBQ2pDWCxLQUFLMEIsSUFBSSxDQUFDZixJQUFJLENBQUMsY0FBYzhCO1FBQy9CO1FBRUF6QyxLQUFLOEIsSUFBSSxDQUFDbkIsSUFBSSxDQUFDLFlBQVk7UUFDM0JYLEtBQUs4QixJQUFJLENBQUNuQixJQUFJLENBQUMsUUFBUTtRQUN2QixJQUFJLENBQUNYLEtBQUs4QixJQUFJLENBQUNuQixJQUFJLENBQUMsZUFBZTtZQUNqQ1gsS0FBSzhCLElBQUksQ0FBQ25CLElBQUksQ0FBQyxjQUFjOEIsV0FBVztRQUMxQztRQUNBekMsS0FBSytCLElBQUksQ0FBQ3BCLElBQUksQ0FBQyxZQUFZO1FBQzNCWCxLQUFLK0IsSUFBSSxDQUFDcEIsSUFBSSxDQUFDLFFBQVE7UUFDdkIsSUFBSSxDQUFDWCxLQUFLK0IsSUFBSSxDQUFDcEIsSUFBSSxDQUFDLGVBQWU7WUFDakNYLEtBQUsrQixJQUFJLENBQUNwQixJQUFJLENBQUMsY0FBYzhCLFdBQVc7UUFDMUM7UUFFQSxJQUFJQyxTQUFVMUMsS0FBSzBDLE1BQU0sR0FBR2pCLElBQUlkLElBQUksQ0FBQztRQUNyQ1gsS0FBSzJDLE9BQU8sR0FBRztRQUNmM0MsS0FBSzRDLFFBQVEsR0FBR25CLElBQUlkLElBQUksQ0FBQztRQUV6QixpQkFBaUI7UUFDakIsSUFBSVQsV0FBVzJDLElBQUksQ0FBQ0gsU0FBUztZQUMzQjFDLEtBQUsyQyxPQUFPLEdBQUdHO1lBQ2Y7UUFDRjtRQUVBLHFCQUFxQjtRQUNyQixJQUFJSixRQUFRO1lBQ1Y7UUFDRjtRQUVBLHFDQUFxQztRQUNyQyxJQUFJckQsUUFBUTtZQUNWVyxLQUFLMkMsT0FBTyxHQUFHSSxzQkFDWEMsd0JBQ0EsQUFBQyxDQUFBO2dCQUNDLE1BQU1DLHNCQUNKM0YsUUFBUSwwQkFBMEI0RixPQUFPO2dCQUMzQyxPQUFPRCxvQkFDTHRCLE9BQ0E3QyxLQUNBekIsU0FDQThGLGtDQUNBQyxnQkFDQUMsWUFDQTdELE9BQ0E4RCxpQkFDQUMsWUFDQWxFLFFBQ0FtRSxhQUNBaEYsR0FDQW9CO1lBRUosQ0FBQTtZQUNKO1FBQ0Y7UUFFQSx1Q0FBdUM7UUFDdkNPO0lBQ0Y7SUFFQSxTQUFTTztRQUNQZixZQUFZO1FBRVpmLEtBQUt5RCxFQUFFLENBQUMsVUFBVWpELFlBQVksU0FBUyxTQUFVcUUsR0FBRztZQUNsRCxJQUFJekQsT0FBT3hCLEVBQUV3QixJQUFJLENBQUMsSUFBSSxFQUFFWjtZQUN4QixJQUFJWSxLQUFLMkMsT0FBTyxFQUFFO2dCQUNoQjNDLEtBQUt5RCxHQUFHLEdBQUdBO2dCQUNYekQsS0FBSzJDLE9BQU8sQ0FBQzNDO1lBQ2Y7UUFDRjtRQUVBLHlEQUF5RDtRQUN6RCxNQUFNMEQsc0JBQXNCO1FBQzVCLE1BQU1DLHlCQUF5QjtRQUMvQixNQUFNQyxnQkFBZ0I7UUFDdEIsTUFBTUMsZ0JBQWdCO1FBQ3RCLE1BQU1DLHdCQUF3QjtRQUM5QixNQUFNQyx3QkFBd0I7UUFFOUIsTUFBTUMsa0JBQWtCO1lBQ3RCO2dCQUFDO2dCQUFZTjthQUFvQjtZQUNqQztnQkFBQztnQkFBU0M7YUFBdUI7U0FDbEM7UUFFRC9FLEtBQUt5RCxFQUFFLENBQ0wsVUFDQWpELFlBQ0UsQ0FBQyxpQ0FBaUMsQ0FBQyxHQUNuQ3NFLHNCQUNBLEtBQ0YsQ0FBQ0Q7WUFDQ2pGLEVBQUVpRixJQUFJUSxNQUFNLEVBQ1RDLFFBQVEsQ0FBQ1IscUJBQ1RTLFdBQVcsQ0FBQ1A7UUFDakI7UUFHRmhGLEtBQUt5RCxFQUFFLENBQUMsVUFBVWpELFlBQVksQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUNxRTtZQUMxRGpGLEVBQUUsQ0FBQyxZQUFZLEVBQUVpRixJQUFJUSxNQUFNLENBQUNHLElBQUksQ0FBQyxPQUFPLEVBQUVWLG9CQUFvQixDQUFDLENBQUMsRUFBRVcsR0FBRyxDQUNuRSxDQUFDOUMsR0FBR0MsS0FDRmhELEVBQUVnRCxJQUFJMEMsUUFBUSxDQUFDUCx3QkFBd0JXLFdBQVcsQ0FBQ1Y7WUFHdkQsTUFBTVcsVUFBVS9GLEVBQUVpRixJQUFJUSxNQUFNO1lBRTVCLElBQUksQ0FBQ00sUUFBUUMsUUFBUSxDQUFDLGtCQUFrQjtnQkFDdENELFFBQVFMLFFBQVEsQ0FBQ1Asd0JBQXdCYyxRQUFRLENBQUNiO1lBQ3BEO1FBQ0Y7UUFFQUksZ0JBQWdCVSxPQUFPLENBQUMsQ0FBQyxDQUFDQyxhQUFhQyx1QkFBdUI7WUFDNURoRyxLQUFLeUQsRUFBRSxDQUNMLFNBQ0FqRCxZQUNFLENBQUMsa0JBQWtCLEVBQUV1RixZQUFZLE9BQU8sQ0FBQyxHQUN6Q0MseUJBQ0EsS0FDRixDQUFDbkI7Z0JBQ0NqRixFQUFFaUYsSUFBSVEsTUFBTSxFQUNUQyxRQUFRLENBQUNVLHdCQUNUSCxRQUFRLENBQUNaO2dCQUNackYsRUFBRWlGLElBQUlRLE1BQU0sRUFDVFksTUFBTSxDQUFDZCx1QkFDUEcsUUFBUSxDQUFDVSx3QkFDVEgsUUFBUSxDQUFDWDtZQUNkO1lBRUZsRixLQUFLeUQsRUFBRSxDQUNMLFFBQ0FqRCxZQUNFLENBQUMsa0JBQWtCLEVBQUV1RixZQUFZLE9BQU8sQ0FBQyxHQUN6Q0MseUJBQ0EsS0FDRixDQUFDbkI7Z0JBQ0NqRixFQUFFaUYsSUFBSVEsTUFBTSxFQUNUQyxRQUFRLENBQUNVLHdCQUNUTixXQUFXLENBQUMsQ0FBQyxFQUFFVCxjQUFjLENBQUMsRUFBRUMsc0JBQXNCLENBQUM7WUFDNUQ7UUFFSjtJQUNGO0lBRUEsMkNBQTJDO0lBQzNDLFNBQVNuQyxNQUFNM0IsSUFBSTtRQUNqQixJQUFJdUMsTUFBT3ZDLEtBQUt1QyxHQUFHLEdBQUd2QyxLQUFLMEIsSUFBSSxDQUFDM0IsSUFBSSxDQUFDO1FBQ3JDQyxLQUFLOEUsSUFBSSxHQUFHOUUsS0FBS3VDLEdBQUcsQ0FBQzVCLElBQUksQ0FBQyxnQkFBZ0I7UUFDMUNYLEtBQUsrRSxPQUFPLEdBQUc7UUFFZiw2Q0FBNkM7UUFDN0MsTUFBTUMsYUFBYUMsUUFBUW5GLG9CQUFvQixDQUFDRSxLQUFLc0MsY0FBYztRQUNuRUMsSUFBSUMsSUFBSSxDQUFDLFlBQVl3QztRQUNyQnpDLElBQUkrQixXQUFXLENBQUM7UUFDaEJ0RSxLQUFLa0YsS0FBSyxJQUFJM0MsSUFBSTRDLEdBQUcsQ0FBQ25GLEtBQUtrRixLQUFLO0lBQ2xDO0lBRUEsaURBQWlEO0lBQ2pELFNBQVMzQixXQUFXdkQsSUFBSTtRQUN0QixJQUFJdUMsTUFBTXZDLEtBQUt1QyxHQUFHO1FBQ2xCLElBQUl1QyxPQUFPOUUsS0FBSzhFLElBQUksRUFBRSx5Q0FBeUM7UUFFL0R2QyxJQUFJQyxJQUFJLENBQUMsWUFBWTtRQUVyQiwwQ0FBMEM7UUFDMUMsSUFBSXNDLE1BQU07WUFDUjlFLEtBQUtrRixLQUFLLEdBQUczQyxJQUFJNEMsR0FBRyxJQUFJLDZDQUE2QztZQUNyRTVDLElBQUk0QyxHQUFHLENBQUNMO1FBQ1Y7SUFDRjtJQUVBLHFEQUFxRDtJQUNyRCxTQUFTM0MsNEJBQTRCbkMsSUFBSTtRQUN2QyxNQUFNdUMsTUFBTXZDLEtBQUt1QyxHQUFHLElBQUl2QyxLQUFLMEIsSUFBSSxDQUFDM0IsSUFBSSxDQUFDO1FBQ3ZDLElBQUksQ0FBQ0MsS0FBS3VDLEdBQUcsRUFBRXZDLEtBQUt1QyxHQUFHLEdBQUdBO1FBRTFCQSxJQUFJQyxJQUFJLENBQUMsWUFBWTtRQUNyQkQsSUFBSWtDLFFBQVEsQ0FBQztJQUNmO0lBRUEsaURBQWlEO0lBQ2pELFNBQVNyQyxvQkFBb0JnRCxPQUFPLEVBQUVDLFNBQVM7UUFDN0MsTUFBTUMsV0FBV0YsUUFBUXZELE9BQU8sQ0FBQztRQUNqQyxJQUFJd0QsV0FBVztZQUNiQyxTQUFTYixRQUFRLENBQUM7UUFDcEIsT0FBTztZQUNMYSxTQUFTaEIsV0FBVyxDQUFDO1FBQ3ZCO0lBQ0Y7SUFFQSxrREFBa0Q7SUFDbEQsU0FBU2pCLFdBQVczQixJQUFJLEVBQUU2RCxNQUFNO1FBQzlCLElBQUlDLFNBQVM7UUFDYkQsU0FBU0EsVUFBVSxDQUFDO1FBRXBCLHNGQUFzRjtRQUN0RjdELEtBQ0czQixJQUFJLENBQ0gsdUVBRURrQixJQUFJLENBQUMsU0FBVU0sQ0FBQyxFQUFFQyxFQUFFO1lBQ25CLElBQUlpRSxRQUFRakgsRUFBRWdEO1lBQ2QsSUFBSWtFLE9BQU9ELE1BQU05RSxJQUFJLENBQUM7WUFDdEIsSUFBSXlELE9BQ0ZxQixNQUFNOUUsSUFBSSxDQUFDLGdCQUFnQjhFLE1BQU05RSxJQUFJLENBQUMsV0FBVyxXQUFZWSxDQUFBQSxJQUFJLENBQUE7WUFDbkUsaUVBQWlFO1lBQ2pFLGdFQUFnRTtZQUNoRSxtRUFBbUU7WUFDbkUsNEJBQTRCO1lBQzVCLG9EQUFvRDtZQUNwRDZDLE9BQU91QixtQkFBbUJ2QjtZQUMxQixJQUFJd0IsUUFBUUgsTUFBTU4sR0FBRztZQUVyQixJQUFJTyxTQUFTLFlBQVk7Z0JBQ3ZCRSxRQUFRSCxNQUFNSSxFQUFFLENBQUM7WUFDbkIsT0FBTyxJQUFJSCxTQUFTLFNBQVM7Z0JBQzNCLHNDQUFzQztnQkFDdEMsSUFBSUgsTUFBTSxDQUFDbkIsS0FBSyxLQUFLLFFBQVEsT0FBT21CLE1BQU0sQ0FBQ25CLEtBQUssS0FBSyxVQUFVO29CQUM3RDtnQkFDRjtnQkFFQXdCLFFBQ0VsRSxLQUNHM0IsSUFBSSxDQUFDLGlCQUFpQjBGLE1BQU05RSxJQUFJLENBQUMsVUFBVSxjQUMzQ3dFLEdBQUcsTUFBTTtZQUNoQjtZQUVBLElBQUksT0FBT1MsVUFBVSxVQUFVO2dCQUM3QkEsUUFBUXBILEVBQUVzSCxJQUFJLENBQUNGO1lBQ2pCO1lBQ0FMLE1BQU0sQ0FBQ25CLEtBQUssR0FBR3dCO1lBQ2ZKLFNBQVNBLFVBQVVPLFVBQVVOLE9BQU9DLE1BQU10QixNQUFNd0I7UUFDbEQ7UUFFRixPQUFPSjtJQUNUO0lBRUEsU0FBU2xDLGdCQUFnQjVCLElBQUk7UUFDM0IsSUFBSTZELFNBQVMsQ0FBQztRQUVkN0QsS0FBSzNCLElBQUksQ0FBQyx1QkFBdUJrQixJQUFJLENBQUMsU0FBVU0sQ0FBQyxFQUFFQyxFQUFFO1lBQ25ELElBQUlpRSxRQUFRakgsRUFBRWdEO1lBQ2QsSUFBSTRDLE9BQ0ZxQixNQUFNOUUsSUFBSSxDQUFDLGdCQUFnQjhFLE1BQU05RSxJQUFJLENBQUMsV0FBVyxVQUFXWSxDQUFBQSxJQUFJLENBQUE7WUFDbEUsSUFBSXFFLFFBQVFILE1BQU05RSxJQUFJLENBQUM7WUFDdkIsSUFBSSxPQUFPaUYsVUFBVSxVQUFVO2dCQUM3QkEsUUFBUXBILEVBQUVzSCxJQUFJLENBQUNGO1lBQ2pCO1lBQ0FMLE1BQU0sQ0FBQ25CLEtBQUssR0FBR3dCO1FBQ2pCO1FBRUEsT0FBT0w7SUFDVDtJQUVBLE1BQU1TLHdCQUF3QjtRQUM1QkMsV0FBVztJQUViO0lBRUEsU0FBUzlDO1FBQ1AsTUFBTStDLFVBQVVySSxTQUFTc0ksTUFBTSxDQUFDQyxLQUFLLENBQUMsTUFBTUMsTUFBTSxDQUFDLFNBQ2pEQyxHQUFHLEVBQ0hILE1BQU07WUFFTixNQUFNSSxjQUFjSixPQUFPQyxLQUFLLENBQUM7WUFDakMsTUFBTWhDLE9BQU9tQyxXQUFXLENBQUMsRUFBRTtZQUMzQixJQUFJbkMsUUFBUTRCLHVCQUF1QjtnQkFDakMsTUFBTVEsYUFBYVIscUJBQXFCLENBQUM1QixLQUFLO2dCQUM5QyxNQUFNd0IsUUFBUVcsWUFBWUUsS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQztnQkFDeENKLEdBQUcsQ0FBQ0UsV0FBVyxHQUFHWjtZQUNwQjtZQUNBLE9BQU9VO1FBQ1QsR0FBRyxDQUFDO1FBRUosT0FBT0o7SUFDVDtJQUVBLFNBQVNILFVBQVVOLEtBQUssRUFBRUMsSUFBSSxFQUFFdEIsSUFBSSxFQUFFd0IsS0FBSztRQUN6QyxJQUFJSixTQUFTO1FBRWIsSUFBSUUsU0FBUyxZQUFZO1lBQ3ZCRixTQUFTO1FBQ1gsT0FBTyxJQUFJQyxNQUFNOUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsSUFBSSxDQUFDaUYsT0FBTztnQkFDVkosU0FBUyx5Q0FBeUNwQjtZQUNwRCxPQUFPLElBQUk5RSxXQUFXdUQsSUFBSSxDQUFDNEMsTUFBTTlFLElBQUksQ0FBQyxVQUFVO2dCQUM5QyxJQUFJLENBQUNwQixXQUFXc0QsSUFBSSxDQUFDK0MsUUFBUTtvQkFDM0JKLFNBQVMsNkNBQTZDcEI7Z0JBQ3hEO1lBQ0Y7UUFDRixPQUFPLElBQUlBLFNBQVMsMEJBQTBCLENBQUN3QixPQUFPO1lBQ3BESixTQUFTO1FBQ1g7UUFFQSxPQUFPQTtJQUNUO0lBRUEsU0FBU3hDLHNCQUFzQmhELElBQUk7UUFDakNvRCxlQUFlcEQ7UUFDZndELFlBQVl4RDtJQUNkO0lBRUEsMkJBQTJCO0lBQzNCLFNBQVM4QyxnQkFBZ0I5QyxJQUFJO1FBQzNCMkIsTUFBTTNCO1FBRU4sSUFBSTBCLE9BQU8xQixLQUFLMEIsSUFBSTtRQUNwQixJQUFJaUYsVUFBVSxDQUFDO1FBRWYsb0VBQW9FO1FBQ3BFLElBQUksU0FBUzlELElBQUksQ0FBQy9ELElBQUk4SCxJQUFJLEtBQUssQ0FBQyxTQUFTL0QsSUFBSSxDQUFDN0MsS0FBSzBDLE1BQU0sR0FBRztZQUMxRGhCLEtBQUtmLElBQUksQ0FBQyxVQUFVO1lBQ3BCO1FBQ0Y7UUFFQXlDLGVBQWVwRDtRQUVmLDZCQUE2QjtRQUM3QixJQUFJd0YsU0FBU25DLFdBQVczQixNQUFNaUY7UUFDOUIsSUFBSW5CLFFBQVE7WUFDVixPQUFPaEcsTUFBTWdHO1FBQ2Y7UUFFQSx3QkFBd0I7UUFDeEJqQyxXQUFXdkQ7UUFFWCwwQ0FBMEM7UUFDMUMsSUFBSTZHO1FBQ0pwSSxFQUFFd0MsSUFBSSxDQUFDMEYsU0FBUyxTQUFVZixLQUFLLEVBQUVrQixHQUFHO1lBQ2xDLElBQUl4SCxXQUFXdUQsSUFBSSxDQUFDaUUsTUFBTTtnQkFDeEJILFFBQVFJLEtBQUssR0FBR25CO1lBQ2xCO1lBQ0EsSUFBSSx5QkFBeUIvQyxJQUFJLENBQUNpRSxNQUFNO2dCQUN0Q0QsV0FBV2pCO1lBQ2I7WUFDQSxJQUFJLHVCQUF1Qi9DLElBQUksQ0FBQ2lFLE1BQU07Z0JBQ3BDSCxRQUFRSyxLQUFLLEdBQUdwQjtZQUNsQjtZQUNBLElBQUksc0JBQXNCL0MsSUFBSSxDQUFDaUUsTUFBTTtnQkFDbkNILFFBQVFNLEtBQUssR0FBR3JCO1lBQ2xCO1FBQ0Y7UUFFQSxJQUFJaUIsWUFBWSxDQUFDRixRQUFRSyxLQUFLLEVBQUU7WUFDOUJILFdBQVdBLFNBQVNULEtBQUssQ0FBQztZQUMxQk8sUUFBUUssS0FBSyxHQUFHSCxRQUFRLENBQUMsRUFBRTtZQUMzQkYsUUFBUU0sS0FBSyxHQUFHTixRQUFRTSxLQUFLLElBQUlKLFFBQVEsQ0FBQyxFQUFFO1FBQzlDO1FBRUEsNkNBQTZDO1FBQzdDLElBQUlLLE1BQU1sSCxLQUFLMEMsTUFBTSxDQUFDNUIsT0FBTyxDQUFDLFVBQVUsaUJBQWlCO1FBQ3pELDJDQUEyQztRQUMzQyxJQUFJcUcsU0FBU0QsSUFBSXJHLE9BQU8sQ0FBQyxRQUFRO1FBQ2pDc0csU0FBU0QsSUFBSUUsU0FBUyxDQUFDRCxRQUFRRCxJQUFJckcsT0FBTyxDQUFDLEtBQUtzRztRQUNoRCxJQUFJRSxTQUFTSCxJQUFJckcsT0FBTyxDQUFDLFNBQVM7UUFDbEN3RyxTQUFTSCxJQUFJRSxTQUFTLENBQUNDLFFBQVFILElBQUlyRyxPQUFPLENBQUMsS0FBS3dHO1FBQ2hEVixPQUFPLENBQUMsT0FBT1EsU0FBUyxNQUFNRSxPQUFPLEdBQUc7UUFFeEM3SSxFQUFFOEksSUFBSSxDQUFDO1lBQ0xKO1lBQ0FsSCxNQUFNMkc7WUFDTlksVUFBVTtRQUNaLEdBQ0d6RixJQUFJLENBQUMsU0FBVTBGLElBQUk7WUFDbEJ4SCxLQUFLK0UsT0FBTyxHQUFHeUMsS0FBS2pDLE1BQU0sS0FBSyxhQUFhLFVBQVUxQyxJQUFJLENBQUMyRSxLQUFLQyxHQUFHO1lBQ25FLElBQUksQ0FBQ3pILEtBQUsrRSxPQUFPLEVBQUU7Z0JBQ2pCMkMsUUFBUUMsSUFBSSxDQUFDLHNCQUFzQkgsS0FBS0MsR0FBRztZQUM3QztZQUNBakUsWUFBWXhEO1FBQ2QsR0FDQytCLElBQUksQ0FBQztZQUNKeUIsWUFBWXhEO1FBQ2Q7SUFDSjtJQUVBLHdEQUF3RDtJQUN4RCxTQUFTd0QsWUFBWXhELElBQUk7UUFDdkIsSUFBSTBCLE9BQU8xQixLQUFLMEIsSUFBSTtRQUNwQixJQUFJa0IsV0FBVzVDLEtBQUs0QyxRQUFRO1FBQzVCLElBQUltQyxVQUFVL0UsS0FBSytFLE9BQU87UUFFMUIsdUNBQXVDO1FBQ3ZDLElBQUlBLFdBQVduQyxVQUFVO1lBQ3ZCdkYsUUFBUTJCLFFBQVEsQ0FBQzREO1lBQ2pCO1FBQ0Y7UUFFQSwyQkFBMkI7UUFDM0I1QyxLQUFLOEIsSUFBSSxDQUFDOEYsTUFBTSxDQUFDN0M7UUFDakIvRSxLQUFLK0IsSUFBSSxDQUFDNkYsTUFBTSxDQUFDLENBQUM3QztRQUVsQixJQUFJQSxTQUFTO1lBQ1gvRSxLQUFLOEIsSUFBSSxDQUFDK0YsS0FBSztRQUNqQixPQUFPO1lBQ0w3SCxLQUFLK0IsSUFBSSxDQUFDOEYsS0FBSztRQUNqQjtRQUVBLHVCQUF1QjtRQUN2Qm5HLEtBQUtrRyxNQUFNLENBQUMsQ0FBQzdDO1FBRWIsc0NBQXNDO1FBQ3RDcEQsTUFBTTNCO0lBQ1I7SUFFQSxTQUFTb0QsZUFBZXBELElBQUk7UUFDMUJBLEtBQUt5RCxHQUFHLElBQUl6RCxLQUFLeUQsR0FBRyxDQUFDTCxjQUFjO1FBQ25DcEQsS0FBS3lELEdBQUcsR0FBRztJQUNiO0lBRUEsU0FBU3ZCLGVBQWVYLENBQUMsRUFBRUcsSUFBSTtRQUM3QixJQUFJLENBQUNBLEtBQUtNLFdBQVcsSUFBSSxDQUFDTixLQUFLTSxXQUFXLENBQUNULEVBQUUsRUFBRTtZQUM3QztRQUNGO1FBRUEsSUFBSXVHO1FBQ0osSUFBSXJHLE1BQU1qRCxFQUFFa0QsS0FBS00sV0FBVyxDQUFDVCxFQUFFO1FBQy9CLElBQUl3RyxlQUFldEcsSUFBSTFCLElBQUksQ0FBQztRQUM1QixJQUFJaUksaUJBQWlCdkcsSUFBSTFCLElBQUksQ0FBQztRQUM5QixJQUFJa0ksZUFBZXhHLElBQUkxQixJQUFJLENBQUM7UUFDNUIsSUFBSW1JLGFBQWF6RyxJQUFJMUIsSUFBSSxDQUFDO1FBQzFCLElBQUlvSSxTQUFTSixhQUFhaEksSUFBSSxDQUFDO1FBQy9CLElBQUlxSSxTQUFTTCxhQUFhaEksSUFBSSxDQUFDO1FBQy9CLElBQUlzSSxpQkFBaUJELE9BQU9FLFFBQVE7UUFDcEMsSUFBSUMsY0FBY0wsV0FBV25JLElBQUksQ0FBQztRQUNsQyxJQUFJeUksVUFBVVAsYUFBYWxJLElBQUksQ0FBQztRQUNoQyxJQUFJMEksWUFBWVIsYUFBYWxJLElBQUksQ0FBQztRQUNsQyxJQUFJMkksY0FBY0YsUUFBUXpJLElBQUksQ0FBQztRQUUvQixJQUFJNEksYUFBYUosWUFBWTVILElBQUksQ0FBQztRQUNsQyxJQUFJaUksYUFBYUwsWUFBWTVILElBQUksQ0FBQztRQUNsQyxJQUFJa0ksZ0JBQWdCTixZQUFZNUgsSUFBSSxDQUFDO1FBRXJDLHNCQUFzQjtRQUN0QixtRUFBbUU7UUFDbkUscURBQXFEO1FBQ3JELElBQUksQ0FBQ2xCLE9BQU87WUFDVjJJLE9BQU8vRixFQUFFLENBQUMsaUJBQWlCLFNBQVV5RyxDQUFDO2dCQUNwQyxJQUFJQSxFQUFFcEQsSUFBSSxLQUFLLGFBQWFvRCxFQUFFQyxLQUFLLEtBQUssTUFBTUQsRUFBRUMsS0FBSyxLQUFLLElBQUk7b0JBQzVEO2dCQUNGO2dCQUVBRCxFQUFFMUYsY0FBYztnQkFDaEIrRSxPQUFPYSxLQUFLO1lBQ2Q7UUFDRjtRQUVBLHNDQUFzQztRQUN0Q1osT0FBT3JJLElBQUksQ0FBQyw0QkFBNEJZLElBQUksQ0FBQyxlQUFlO1FBQzVEOEgsVUFBVTFJLElBQUksQ0FBQyw4QkFBOEJZLElBQUksQ0FBQyxlQUFlO1FBRWpFLElBQUksQ0FBQ2xCLE9BQU87WUFDVmdKLFVBQVVwRyxFQUFFLENBQUMsaUJBQWlCLFNBQVV5RyxDQUFDO2dCQUN2QyxJQUFJQSxFQUFFcEQsSUFBSSxLQUFLLFdBQVc7b0JBQ3hCLElBQUlvRCxFQUFFQyxLQUFLLEtBQUssTUFBTUQsRUFBRUMsS0FBSyxLQUFLLElBQUk7d0JBQ3BDO29CQUNGO29CQUVBRCxFQUFFMUYsY0FBYztnQkFDbEI7Z0JBRUErRSxPQUFPYyxVQUFVLENBQUM7Z0JBQ2xCZCxPQUFPaEQsR0FBRyxDQUFDO2dCQUNYdUQsWUFBWVEsSUFBSSxDQUFDO2dCQUNqQm5CLGFBQWFILE1BQU0sQ0FBQztnQkFDcEJLLGFBQWFMLE1BQU0sQ0FBQztnQkFDcEJRLE9BQU9QLEtBQUs7WUFDZDtZQUVBTSxPQUFPOUYsRUFBRSxDQUFDLFVBQVUsU0FBVXlHLENBQUM7Z0JBQzdCaEIsT0FBT2dCLEVBQUU3RSxNQUFNLElBQUk2RSxFQUFFN0UsTUFBTSxDQUFDa0YsS0FBSyxJQUFJTCxFQUFFN0UsTUFBTSxDQUFDa0YsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RELElBQUksQ0FBQ3JCLE1BQU07b0JBQ1Q7Z0JBQ0Y7Z0JBRUEsaUJBQWlCO2dCQUNqQkMsYUFBYUgsTUFBTSxDQUFDO2dCQUNwQk0sV0FBV04sTUFBTSxDQUFDO2dCQUNsQkksZUFBZUosTUFBTSxDQUFDO2dCQUN0QkksZUFBZUgsS0FBSztnQkFFcEIsZUFBZTtnQkFDZmEsWUFBWVUsSUFBSSxDQUFDdEIsS0FBSzFELElBQUk7Z0JBRTFCLHdCQUF3QjtnQkFDeEIsSUFBSSxDQUFDaUYsZUFBZTtvQkFDbEI5RixXQUFXN0I7Z0JBQ2I7Z0JBQ0FBLEtBQUtNLFdBQVcsQ0FBQ1QsRUFBRSxDQUFDK0gsU0FBUyxHQUFHO2dCQUVoQ0MsU0FBU3pCLE1BQU0wQjtZQUNqQjtZQUVBLGlEQUFpRDtZQUNqRCxxREFBcUQ7WUFDckQsSUFBSUMsU0FBU3JCLE9BQU9zQixXQUFXO1lBQy9CdkIsT0FBT3NCLE1BQU0sQ0FBQ0E7WUFDZHRCLE9BQU93QixLQUFLLENBQUM7UUFDZixPQUFPO1lBQ0x4QixPQUFPOUYsRUFBRSxDQUFDLFNBQVMsU0FBVXlHLENBQUM7Z0JBQzVCQSxFQUFFMUYsY0FBYztZQUNsQjtZQUNBZ0YsT0FBTy9GLEVBQUUsQ0FBQyxTQUFTLFNBQVV5RyxDQUFDO2dCQUM1QkEsRUFBRTFGLGNBQWM7WUFDbEI7WUFDQWlGLGVBQWVoRyxFQUFFLENBQUMsU0FBUyxTQUFVeUcsQ0FBQztnQkFDcENBLEVBQUUxRixjQUFjO1lBQ2xCO1FBQ0Y7UUFFQSxTQUFTd0csV0FBV0MsR0FBRztZQUNyQixJQUFJQyxXQUFXRCxJQUFJRSxZQUFZLElBQUlGLElBQUlFLFlBQVksQ0FBQ3RDLEdBQUc7WUFDdkQsSUFBSXVDLFlBQVluQjtZQUNoQixJQUNFLE9BQU9pQixhQUFhLFlBQ3BCQSxTQUFTakosT0FBTyxDQUFDLDRCQUE0QixHQUM3QztnQkFDQW1KLFlBQVlwQjtZQUNkLE9BQU8sSUFDTCxPQUFPa0IsYUFBYSxZQUNwQkEsU0FBU2pKLE9BQU8sQ0FBQyx3QkFBd0IsR0FDekM7Z0JBQ0FtSixZQUFZckI7WUFDZDtZQUVBSixZQUFZYSxJQUFJLENBQUNZO1lBRWpCN0IsT0FBT2MsVUFBVSxDQUFDO1lBQ2xCZCxPQUFPaEQsR0FBRyxDQUFDO1lBQ1g2QyxlQUFlSixNQUFNLENBQUM7WUFDdEJHLGFBQWFILE1BQU0sQ0FBQztZQUNwQk0sV0FBV04sTUFBTSxDQUFDO1lBQ2xCTSxXQUFXTCxLQUFLO1lBRWhCbkcsS0FBS00sV0FBVyxDQUFDVCxFQUFFLENBQUMrSCxTQUFTLEdBQUc7WUFDaEMsSUFBSSxDQUFDRCxlQUFlO2dCQUNsQjFILE1BQU1EO1lBQ1I7UUFDRjtRQUVBLFNBQVM4SCxVQUFVSyxHQUFHLEVBQUU3SixJQUFJO1lBQzFCLElBQUk2SixLQUFLO2dCQUNQLE9BQU9ELFdBQVdDO1lBQ3BCO1lBRUEsSUFBSUksV0FBV2pLLEtBQUtpSyxRQUFRO1lBQzVCLElBQUlDLFdBQVdsSyxLQUFLa0ssUUFBUTtZQUM1QixJQUFJQyxTQUFTbkssS0FBS21LLE1BQU07WUFDeEIsSUFBSUMsUUFBUXBLLEtBQUtvSyxLQUFLO1lBQ3RCakMsT0FBT3hILElBQUksQ0FBQyxjQUFjd0o7WUFFMUJFLFNBQVNELE9BQU9GLFVBQVVwQyxNQUFNbUMsVUFBVUs7UUFDNUM7UUFFQSxTQUFTQSxZQUFZVCxHQUFHO1lBQ3RCLElBQUlBLEtBQUs7Z0JBQ1AsT0FBT0QsV0FBV0M7WUFDcEI7WUFFQSxlQUFlO1lBQ2Y3QixlQUFlSixNQUFNLENBQUM7WUFDdEJLLGFBQWFzQyxHQUFHLENBQUMsV0FBVztZQUM1QnRDLGFBQWFKLEtBQUs7WUFFbEJuRyxLQUFLTSxXQUFXLENBQUNULEVBQUUsQ0FBQytILFNBQVMsR0FBRztZQUNoQyxJQUFJLENBQUNELGVBQWU7Z0JBQ2xCMUgsTUFBTUQ7WUFDUjtRQUNGO1FBRUEsU0FBUzJIO1lBQ1AsSUFBSW1CLFVBQVUsQUFBQzlJLEtBQUtNLFdBQVcsSUFBSU4sS0FBS00sV0FBVyxDQUFDeUksT0FBTyxNQUFPLEVBQUU7WUFDcEUsT0FBT0QsUUFBUUUsSUFBSSxDQUFDLFNBQVU5RSxLQUFLO2dCQUNqQyxPQUFPQSxNQUFNMEQsU0FBUztZQUN4QjtRQUNGO0lBQ0Y7SUFFQSxTQUFTQyxTQUFTekIsSUFBSSxFQUFFcEssRUFBRTtRQUN4QixJQUFJaUosVUFBVSxJQUFJZ0UsZ0JBQWdCO1lBQ2hDdkcsTUFBTTBELEtBQUsxRCxJQUFJO1lBQ2Z3RyxNQUFNOUMsS0FBSzhDLElBQUk7UUFDakI7UUFFQXBNLEVBQUU4SSxJQUFJLENBQUM7WUFBQzVCLE1BQU07WUFBT3dCLEtBQUssQ0FBQyxFQUFFckgsWUFBWSxDQUFDLEVBQUU4RyxRQUFRLENBQUM7WUFBRWtFLGFBQWE7UUFBSSxHQUNyRS9JLElBQUksQ0FBQyxTQUFVOUIsSUFBSTtZQUNsQnRDLEdBQUcsTUFBTXNDO1FBQ1gsR0FDQytCLElBQUksQ0FBQyxTQUFVOEgsR0FBRztZQUNqQm5NLEdBQUdtTTtRQUNMO0lBQ0o7SUFFQSxTQUFTUSxTQUFTbkQsR0FBRyxFQUFFbEgsSUFBSSxFQUFFOEgsSUFBSSxFQUFFbUMsUUFBUSxFQUFFdk0sRUFBRTtRQUM3QyxJQUFJb04sV0FBVyxJQUFJQztRQUNuQixJQUFLLElBQUlDLEtBQUtoTCxLQUFNO1lBQ2xCOEssU0FBU0csTUFBTSxDQUFDRCxHQUFHaEwsSUFBSSxDQUFDZ0wsRUFBRTtRQUM1QjtRQUNBRixTQUFTRyxNQUFNLENBQUMsUUFBUW5ELE1BQU1tQztRQUU5QnpMLEVBQUU4SSxJQUFJLENBQUM7WUFDTDVCLE1BQU07WUFDTndCO1lBQ0FsSCxNQUFNOEs7WUFDTkksYUFBYTtZQUNiQyxhQUFhO1FBQ2YsR0FDR3JKLElBQUksQ0FBQztZQUNKcEUsR0FBRztRQUNMLEdBQ0NxRSxJQUFJLENBQUMsU0FBVThILEdBQUc7WUFDakJuTSxHQUFHbU07UUFDTDtJQUNKO0lBRUEsZ0JBQWdCO0lBQ2hCLE9BQU9sTDtBQUNUIn0=
    
    }),
    73392: (function (__unused_webpack_module, exports) {
    "use strict";
    /*
     * WARNING
     *
     * This file is included in the `webflow.js` bundle, so
     * please refrain from adding dependencies that might
     * have an outsized impact on bundle size.
     *
     * Thank you!
     */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "createJsonFromBoundMedia", ({
        enumerable: true,
        get: function() {
            return createJsonFromBoundMedia;
        }
    }));
    const createJsonItemFromBoundMedia = (binding)=>{
        if (binding) {
            if (binding.metadata) {
                const { html, height, width, thumbnail_url: thumbnailUrl } = binding.metadata;
                return {
                    url: binding.url,
                    html,
                    height,
                    width,
                    thumbnailUrl,
                    type: 'video'
                };
            } else {
                return {
                    url: binding.url,
                    type: 'image'
                };
            }
        }
        return null;
    };
    const createJsonFromBoundMedia = (binding, nodeJsonData)=>{
        const group = nodeJsonData ? nodeJsonData.group : undefined;
        if (Array.isArray(binding)) {
            const items = binding.reduce((memo, subBinding)=>{
                const jsonItem = createJsonItemFromBoundMedia(subBinding);
                if (jsonItem) {
                    memo.push(jsonItem);
                }
                return memo;
            }, []);
            return items.length > 0 ? {
                items,
                group
            } : null;
        }
        const jsonItem = createJsonItemFromBoundMedia(binding);
        return jsonItem !== null ? {
            items: [
                jsonItem
            ],
            group
        } : null;
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBXQVJOSU5HXG4gKlxuICogVGhpcyBmaWxlIGlzIGluY2x1ZGVkIGluIHRoZSBgd2ViZmxvdy5qc2AgYnVuZGxlLCBzb1xuICogcGxlYXNlIHJlZnJhaW4gZnJvbSBhZGRpbmcgZGVwZW5kZW5jaWVzIHRoYXQgbWlnaHRcbiAqIGhhdmUgYW4gb3V0c2l6ZWQgaW1wYWN0IG9uIGJ1bmRsZSBzaXplLlxuICpcbiAqIFRoYW5rIHlvdSFcbiAqL1xuXG50eXBlIExpZ2h0Ym94SnNvbiA9IHtcbiAgaXRlbXM6IEFycmF5PExpZ2h0Ym94SnNvbkl0ZW0+O1xuICBncm91cDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcbn07XG5cbnR5cGUgTGlnaHRib3hKc29uSXRlbSA9IHtcbiAgdXJsOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgaHRtbD86IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgdGh1bWJuYWlsVXJsPzogc3RyaW5nO1xufTtcblxuY29uc3QgY3JlYXRlSnNvbkl0ZW1Gcm9tQm91bmRNZWRpYSA9IChcbiAgYmluZGluZzogYW55XG4pOiBMaWdodGJveEpzb25JdGVtIHwgbnVsbCA9PiB7XG4gIGlmIChiaW5kaW5nKSB7XG4gICAgaWYgKGJpbmRpbmcubWV0YWRhdGEpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaHRtbCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgdGh1bWJuYWlsX3VybDogdGh1bWJuYWlsVXJsLFxuICAgICAgfSA9IGJpbmRpbmcubWV0YWRhdGE7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IGJpbmRpbmcudXJsLFxuICAgICAgICBodG1sLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICB0aHVtYm5haWxVcmwsXG4gICAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge3VybDogYmluZGluZy51cmwsIHR5cGU6ICdpbWFnZSd9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVKc29uRnJvbUJvdW5kTWVkaWEgPSAoXG4gIGJpbmRpbmc6IGFueSxcbiAgbm9kZUpzb25EYXRhPzogTGlnaHRib3hKc29uIHwgbnVsbFxuKTogTGlnaHRib3hKc29uIHwgbnVsbCA9PiB7XG4gIGNvbnN0IGdyb3VwID0gbm9kZUpzb25EYXRhID8gbm9kZUpzb25EYXRhLmdyb3VwIDogdW5kZWZpbmVkO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmcpKSB7XG4gICAgY29uc3QgaXRlbXMgPSBiaW5kaW5nLnJlZHVjZSgobWVtbywgc3ViQmluZGluZykgPT4ge1xuICAgICAgY29uc3QganNvbkl0ZW0gPSBjcmVhdGVKc29uSXRlbUZyb21Cb3VuZE1lZGlhKHN1YkJpbmRpbmcpO1xuICAgICAgaWYgKGpzb25JdGVtKSB7XG4gICAgICAgIG1lbW8ucHVzaChqc29uSXRlbSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IHtpdGVtcywgZ3JvdXB9IDogbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGpzb25JdGVtID0gY3JlYXRlSnNvbkl0ZW1Gcm9tQm91bmRNZWRpYShiaW5kaW5nKTtcbiAgcmV0dXJuIGpzb25JdGVtICE9PSBudWxsXG4gICAgPyB7XG4gICAgICAgIGl0ZW1zOiBbanNvbkl0ZW1dLFxuICAgICAgICBncm91cCxcbiAgICAgIH1cbiAgICA6IG51bGw7XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUpzb25Gcm9tQm91bmRNZWRpYSIsImNyZWF0ZUpzb25JdGVtRnJvbUJvdW5kTWVkaWEiLCJiaW5kaW5nIiwibWV0YWRhdGEiLCJodG1sIiwiaGVpZ2h0Iiwid2lkdGgiLCJ0aHVtYm5haWxfdXJsIiwidGh1bWJuYWlsVXJsIiwidXJsIiwidHlwZSIsIm5vZGVKc29uRGF0YSIsImdyb3VwIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbXMiLCJyZWR1Y2UiLCJtZW1vIiwic3ViQmluZGluZyIsImpzb25JdGVtIiwicHVzaCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0NBUUM7Ozs7K0JBMENZQTs7O2VBQUFBOzs7QUExQmIsTUFBTUMsK0JBQStCLENBQ25DQztJQUVBLElBQUlBLFNBQVM7UUFDWCxJQUFJQSxRQUFRQyxRQUFRLEVBQUU7WUFDcEIsTUFBTSxFQUNKQyxJQUFJLEVBQ0pDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxlQUFlQyxZQUFZLEVBQzVCLEdBQUdOLFFBQVFDLFFBQVE7WUFDcEIsT0FBTztnQkFDTE0sS0FBS1AsUUFBUU8sR0FBRztnQkFDaEJMO2dCQUNBQztnQkFDQUM7Z0JBQ0FFO2dCQUNBRSxNQUFNO1lBQ1I7UUFDRixPQUFPO1lBQ0wsT0FBTztnQkFBQ0QsS0FBS1AsUUFBUU8sR0FBRztnQkFBRUMsTUFBTTtZQUFPO1FBQ3pDO0lBQ0Y7SUFDQSxPQUFPO0FBQ1Q7QUFFTyxNQUFNViwyQkFBMkIsQ0FDdENFLFNBQ0FTO0lBRUEsTUFBTUMsUUFBUUQsZUFBZUEsYUFBYUMsS0FBSyxHQUFHQztJQUVsRCxJQUFJQyxNQUFNQyxPQUFPLENBQUNiLFVBQVU7UUFDMUIsTUFBTWMsUUFBUWQsUUFBUWUsTUFBTSxDQUFDLENBQUNDLE1BQU1DO1lBQ2xDLE1BQU1DLFdBQVduQiw2QkFBNkJrQjtZQUM5QyxJQUFJQyxVQUFVO2dCQUNaRixLQUFLRyxJQUFJLENBQUNEO1lBQ1o7WUFDQSxPQUFPRjtRQUNULEdBQUcsRUFBRTtRQUVMLE9BQU9GLE1BQU1NLE1BQU0sR0FBRyxJQUFJO1lBQUNOO1lBQU9KO1FBQUssSUFBSTtJQUM3QztJQUVBLE1BQU1RLFdBQVduQiw2QkFBNkJDO0lBQzlDLE9BQU9rQixhQUFhLE9BQ2hCO1FBQ0VKLE9BQU87WUFBQ0k7U0FBUztRQUNqQlI7SUFDRixJQUNBO0FBQ04ifQ==
    
    }),
    41655: (function (module, __unused_webpack_exports, __webpack_require__) {
    "use strict";
    /* globals window, document */ /**
     * Webflow: Navbar component
     */ 
    var Webflow = __webpack_require__(43949);
    var IXEvents = __webpack_require__(65134);
    const KEY_CODES = {
        ARROW_LEFT: 37,
        ARROW_UP: 38,
        ARROW_RIGHT: 39,
        ARROW_DOWN: 40,
        ESCAPE: 27,
        SPACE: 32,
        ENTER: 13,
        HOME: 36,
        END: 35
    };
    Webflow.define('navbar', module.exports = function($, _) {
        var api = {};
        var tram = $.tram;
        var $win = $(window);
        var $doc = $(document);
        var debounce = _.debounce;
        var $body;
        var $navbars;
        var designer;
        var inEditor;
        var inApp = Webflow.env();
        var overlay = '<div class="w-nav-overlay" data-wf-ignore />';
        var namespace = '.w-nav';
        var navbarOpenedButton = 'w--open';
        var navbarOpenedDropdown = 'w--nav-dropdown-open';
        var navbarOpenedDropdownToggle = 'w--nav-dropdown-toggle-open';
        var navbarOpenedDropdownList = 'w--nav-dropdown-list-open';
        var navbarOpenedLink = 'w--nav-link-open';
        var ix = IXEvents.triggers;
        var menuSibling = $();
        // -----------------------------------
        // Module methods
        api.ready = api.design = api.preview = init;
        api.destroy = function() {
            menuSibling = $();
            removeListeners();
            if ($navbars && $navbars.length) {
                $navbars.each(teardown);
            }
        };
        // -----------------------------------
        // Private methods
        function init() {
            designer = inApp && Webflow.env('design');
            inEditor = Webflow.env('editor');
            $body = $(document.body);
            // Find all instances on the page
            $navbars = $doc.find(namespace);
            if (!$navbars.length) {
                return;
            }
            $navbars.each(build);
            // Wire events
            removeListeners();
            addListeners();
        }
        function removeListeners() {
            Webflow.resize.off(resizeAll);
        }
        function addListeners() {
            Webflow.resize.on(resizeAll);
        }
        function resizeAll() {
            $navbars.each(resize);
        }
        function build(i, el) {
            var $el = $(el);
            // Store state in data
            var data = $.data(el, namespace);
            if (!data) {
                data = $.data(el, namespace, {
                    open: false,
                    el: $el,
                    config: {},
                    selectedIdx: -1
                });
            }
            data.menu = $el.find('.w-nav-menu');
            data.links = data.menu.find('.w-nav-link');
            data.dropdowns = data.menu.find('.w-dropdown');
            data.dropdownToggle = data.menu.find('.w-dropdown-toggle');
            data.dropdownList = data.menu.find('.w-dropdown-list');
            data.button = $el.find('.w-nav-button');
            data.container = $el.find('.w-container');
            data.overlayContainerId = 'w-nav-overlay-' + i;
            data.outside = outside(data);
            //   If the brand links exists and is set to link to the homepage, the
            // default setting, then add an aria-label
            var navBrandLink = $el.find('.w-nav-brand');
            if (navBrandLink && navBrandLink.attr('href') === '/' && navBrandLink.attr('aria-label') == null) {
                navBrandLink.attr('aria-label', 'home');
            }
            //   VoiceOver bug, when items that disallow user selection are focused
            // VoiceOver gets confused and scrolls to the end of the page. Â¯\_(ãƒ„)_/Â¯
            data.button.attr('style', '-webkit-user-select: text;');
            // Add attributes to toggle element
            if (data.button.attr('aria-label') == null) {
                data.button.attr('aria-label', 'menu');
            }
            data.button.attr('role', 'button');
            data.button.attr('tabindex', '0');
            data.button.attr('aria-controls', data.overlayContainerId);
            data.button.attr('aria-haspopup', 'menu');
            data.button.attr('aria-expanded', 'false');
            // Remove old events
            data.el.off(namespace);
            data.button.off(namespace);
            data.menu.off(namespace);
            // Set config from data attributes
            configure(data);
            // Add events based on mode
            if (designer) {
                removeOverlay(data);
                data.el.on('setting' + namespace, handler(data));
            } else {
                addOverlay(data);
                data.button.on('click' + namespace, toggle(data));
                data.menu.on('click' + namespace, 'a', navigate(data));
                data.button.on('keydown' + namespace, makeToggleButtonKeyboardHandler(data));
                data.el.on('keydown' + namespace, makeLinksKeyboardHandler(data));
            }
            // Trigger initial resize
            resize(i, el);
        }
        function teardown(i, el) {
            var data = $.data(el, namespace);
            if (data) {
                removeOverlay(data);
                $.removeData(el, namespace);
            }
        }
        function removeOverlay(data) {
            if (!data.overlay) {
                return;
            }
            close(data, true);
            data.overlay.remove();
            data.overlay = null;
        }
        function addOverlay(data) {
            if (data.overlay) {
                return;
            }
            data.overlay = $(overlay).appendTo(data.el);
            data.overlay.attr('id', data.overlayContainerId);
            data.parent = data.menu.parent();
            close(data, true);
        }
        function configure(data) {
            var config = {};
            var old = data.config || {};
            // Set config options from data attributes
            var animation = config.animation = data.el.attr('data-animation') || 'default';
            config.animOver = /^over/.test(animation);
            config.animDirect = /left$/.test(animation) ? -1 : 1;
            // Re-open menu if the animation type changed
            if (old.animation !== animation) {
                data.open && _.defer(reopen, data);
            }
            config.easing = data.el.attr('data-easing') || 'ease';
            config.easing2 = data.el.attr('data-easing2') || 'ease';
            var duration = data.el.attr('data-duration');
            config.duration = duration != null ? Number(duration) : 400;
            config.docHeight = data.el.attr('data-doc-height');
            // Store config in data
            data.config = config;
        }
        function handler(data) {
            return function(evt, options) {
                options = options || {};
                var winWidth = $win.width();
                configure(data);
                options.open === true && open(data, true);
                options.open === false && close(data, true);
                // Reopen if media query changed after setting
                data.open && _.defer(function() {
                    if (winWidth !== $win.width()) {
                        reopen(data);
                    }
                });
            };
        }
        function makeToggleButtonKeyboardHandler(data) {
            return function(evt) {
                switch(evt.keyCode){
                    case KEY_CODES.SPACE:
                    case KEY_CODES.ENTER:
                        {
                            // Toggle returns a function
                            toggle(data)();
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                    case KEY_CODES.ESCAPE:
                        {
                            close(data);
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                    case KEY_CODES.ARROW_RIGHT:
                    case KEY_CODES.ARROW_DOWN:
                    case KEY_CODES.HOME:
                    case KEY_CODES.END:
                        {
                            if (!data.open) {
                                evt.preventDefault();
                                return evt.stopPropagation();
                            }
                            if (evt.keyCode === KEY_CODES.END) {
                                data.selectedIdx = data.links.length - 1;
                            } else {
                                data.selectedIdx = 0;
                            }
                            focusSelectedLink(data);
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                }
            };
        }
        function makeLinksKeyboardHandler(data) {
            return function(evt) {
                if (!data.open) {
                    return;
                }
                // Realign selectedIdx with the menu item that is currently in focus.
                // We need this because we do not track the `Tab` key activity!
                data.selectedIdx = data.links.index(document.activeElement);
                switch(evt.keyCode){
                    case KEY_CODES.HOME:
                    case KEY_CODES.END:
                        {
                            if (evt.keyCode === KEY_CODES.END) {
                                data.selectedIdx = data.links.length - 1;
                            } else {
                                data.selectedIdx = 0;
                            }
                            focusSelectedLink(data);
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                    case KEY_CODES.ESCAPE:
                        {
                            close(data);
                            // Focus toggle button
                            data.button.focus();
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                    case KEY_CODES.ARROW_LEFT:
                    case KEY_CODES.ARROW_UP:
                        {
                            data.selectedIdx = Math.max(-1, data.selectedIdx - 1);
                            focusSelectedLink(data);
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                    case KEY_CODES.ARROW_RIGHT:
                    case KEY_CODES.ARROW_DOWN:
                        {
                            data.selectedIdx = Math.min(data.links.length - 1, data.selectedIdx + 1);
                            focusSelectedLink(data);
                            evt.preventDefault();
                            return evt.stopPropagation();
                        }
                }
            };
        }
        function focusSelectedLink(data) {
            if (data.links[data.selectedIdx]) {
                var selectedElement = data.links[data.selectedIdx];
                selectedElement.focus();
                navigate(selectedElement);
            }
        }
        function reopen(data) {
            if (!data.open) {
                return;
            }
            close(data, true);
            open(data, true);
        }
        function toggle(data) {
            // Debounce toggle to wait for accurate open state
            return debounce(function() {
                data.open ? close(data) : open(data);
            });
        }
        function navigate(data) {
            return function(evt) {
                var link = $(this);
                var href = link.attr('href');
                // Avoid late clicks on touch devices
                if (!Webflow.validClick(evt.currentTarget)) {
                    evt.preventDefault();
                    return;
                }
                // Close when navigating to an in-page anchor
                if (href && href.indexOf('#') === 0 && data.open) {
                    close(data);
                }
            };
        }
        function outside(data) {
            // Unbind previous click handler if it exists
            if (data.outside) {
                $doc.off('click' + namespace, data.outside);
            }
            return function(evt) {
                var $target = $(evt.target);
                // Ignore clicks on Editor overlay UI
                if (inEditor && $target.closest('.w-editor-bem-EditorOverlay').length) {
                    return;
                }
                // Close menu when clicked outside, debounced to wait for state
                outsideDebounced(data, $target);
            };
        }
        var outsideDebounced = debounce(function(data, $target) {
            if (!data.open) {
                return;
            }
            var menu = $target.closest('.w-nav-menu');
            if (!data.menu.is(menu)) {
                close(data);
            }
        });
        function resize(i, el) {
            var data = $.data(el, namespace);
            // Check for collapsed state based on button display
            var collapsed = data.collapsed = data.button.css('display') !== 'none';
            // Close menu if button is no longer visible (and not in designer)
            if (data.open && !collapsed && !designer) {
                close(data, true);
            }
            // Set max-width of links + dropdowns to match container
            if (data.container.length) {
                var updateEachMax = updateMax(data);
                data.links.each(updateEachMax);
                data.dropdowns.each(updateEachMax);
            }
            // If currently open, update height to match body
            if (data.open) {
                setOverlayHeight(data);
            }
        }
        var maxWidth = 'max-width';
        function updateMax(data) {
            // Set max-width of each element to match container
            var containMax = data.container.css(maxWidth);
            if (containMax === 'none') {
                containMax = '';
            }
            return function(i, link) {
                link = $(link);
                link.css(maxWidth, '');
                // Don't set the max-width if an upstream value exists
                if (link.css(maxWidth) === 'none') {
                    link.css(maxWidth, containMax);
                }
            };
        }
        function addMenuOpen(i, el) {
            el.setAttribute('data-nav-menu-open', '');
        }
        function removeMenuOpen(i, el) {
            el.removeAttribute('data-nav-menu-open');
        }
        function open(data, immediate) {
            if (data.open) {
                return;
            }
            data.open = true;
            data.menu.each(addMenuOpen);
            data.links.addClass(navbarOpenedLink);
            data.dropdowns.addClass(navbarOpenedDropdown);
            data.dropdownToggle.addClass(navbarOpenedDropdownToggle);
            data.dropdownList.addClass(navbarOpenedDropdownList);
            data.button.addClass(navbarOpenedButton);
            var config = data.config;
            var animation = config.animation;
            if (animation === 'none' || !tram.support.transform || config.duration <= 0) {
                immediate = true;
            }
            var bodyHeight = setOverlayHeight(data);
            var menuHeight = data.menu.outerHeight(true);
            var menuWidth = data.menu.outerWidth(true);
            var navHeight = data.el.height();
            var navbarEl = data.el[0];
            resize(0, navbarEl);
            ix.intro(0, navbarEl);
            Webflow.redraw.up();
            // Listen for click outside events
            if (!designer) {
                $doc.on('click' + namespace, data.outside);
            }
            // No transition for immediate
            if (immediate) {
                complete();
                return;
            }
            var transConfig = 'transform ' + config.duration + 'ms ' + config.easing;
            // Add menu to overlay
            if (data.overlay) {
                menuSibling = data.menu.prev();
                data.overlay.show().append(data.menu);
            }
            // Over left/right
            if (config.animOver) {
                tram(data.menu).add(transConfig).set({
                    x: config.animDirect * menuWidth,
                    height: bodyHeight
                }).start({
                    x: 0
                }).then(complete);
                data.overlay && data.overlay.width(menuWidth);
                return;
            }
            // Drop Down
            var offsetY = navHeight + menuHeight;
            tram(data.menu).add(transConfig).set({
                y: -offsetY
            }).start({
                y: 0
            }).then(complete);
            function complete() {
                data.button.attr('aria-expanded', 'true');
            }
        }
        function setOverlayHeight(data) {
            var config = data.config;
            var bodyHeight = config.docHeight ? $doc.height() : $body.height();
            if (config.animOver) {
                data.menu.height(bodyHeight);
            } else if (data.el.css('position') !== 'fixed') {
                bodyHeight -= data.el.outerHeight(true);
            }
            data.overlay && data.overlay.height(bodyHeight);
            return bodyHeight;
        }
        function close(data, immediate) {
            if (!data.open) {
                return;
            }
            data.open = false;
            data.button.removeClass(navbarOpenedButton);
            var config = data.config;
            if (config.animation === 'none' || !tram.support.transform || config.duration <= 0) {
                immediate = true;
            }
            ix.outro(0, data.el[0]);
            // Stop listening for click outside events
            $doc.off('click' + namespace, data.outside);
            if (immediate) {
                tram(data.menu).stop();
                complete();
                return;
            }
            var transConfig = 'transform ' + config.duration + 'ms ' + config.easing2;
            var menuHeight = data.menu.outerHeight(true);
            var menuWidth = data.menu.outerWidth(true);
            var navHeight = data.el.height();
            // Over left/right
            if (config.animOver) {
                tram(data.menu).add(transConfig).start({
                    x: menuWidth * config.animDirect
                }).then(complete);
                return;
            }
            // Drop Down
            var offsetY = navHeight + menuHeight;
            tram(data.menu).add(transConfig).start({
                y: -offsetY
            }).then(complete);
            function complete() {
                data.menu.height('');
                tram(data.menu).set({
                    x: 0,
                    y: 0
                });
                data.menu.each(removeMenuOpen);
                data.links.removeClass(navbarOpenedLink);
                data.dropdowns.removeClass(navbarOpenedDropdown);
                data.dropdownToggle.removeClass(navbarOpenedDropdownToggle);
                data.dropdownList.removeClass(navbarOpenedDropdownList);
                if (data.overlay && data.overlay.children().length) {
                    // Move menu back to parent at the original location
                    menuSibling.length ? data.menu.insertAfter(menuSibling) : data.menu.prependTo(data.parent);
                    data.overlay.attr('style', '').hide();
                }
                // Trigger event so other components can hook in (dropdown)
                data.el.triggerHandler('w-close');
                data.button.attr('aria-expanded', 'false');
            }
        }
        // Export module
        return api;
    });
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    32949: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(31350), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdXRpbHMvQ29tbWVyY2UnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==
    
    }),
    31350: (function (__unused_webpack_module, exports) {
    "use strict";
    // keep this file as simple as possible and avoid any additional imports, as this can increase published site bundle size a location
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        getProductOptionValueName: function() {
            return getProductOptionValueName;
        },
        simplifySkuValues: function() {
            return simplifySkuValues;
        }
    });
    const simplifySkuValues = (skuValues)=>skuValues.reduce((acc, pair)=>{
            acc[pair.property.id] = pair.value.id;
            return acc;
        }, {});
    const getProductOptionValueName = (property, simplifiedSkuValues)=>{
        if (property.id && property.enum) {
            const propValueId = simplifiedSkuValues[property.id];
            const propValue = property.enum.find((value)=>value.id === propValueId);
            if (propValue && typeof propValue.name === 'string') {
                return propValue.name;
            }
        }
        return '';
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbW1lcmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGtlZXAgdGhpcyBmaWxlIGFzIHNpbXBsZSBhcyBwb3NzaWJsZSBhbmQgYXZvaWQgYW55IGFkZGl0aW9uYWwgaW1wb3J0cywgYXMgdGhpcyBjYW4gaW5jcmVhc2UgcHVibGlzaGVkIHNpdGUgYnVuZGxlIHNpemUgYSBsb2NhdGlvblxuXG5pbXBvcnQgdHlwZSB7UHJvcGVydHl9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2NvbW1lcmNlL2NvcmUnO1xuXG50eXBlIFNpbXBsaWZpZWRTa3VWYWx1ZXMgPSB7XG4gIFtwcm9wZXJ0eUlkOiBzdHJpbmddOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3Qgc2ltcGxpZnlTa3VWYWx1ZXMgPSAoXG4gIHNrdVZhbHVlczogQXJyYXk8e1xuICAgIHByb3BlcnR5OiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgIH07XG4gICAgdmFsdWU6IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgfTtcbiAgfT5cbik6IFNpbXBsaWZpZWRTa3VWYWx1ZXMgPT5cbiAgc2t1VmFsdWVzLnJlZHVjZTxSZWNvcmQ8c3RyaW5nLCBhbnk+PigoYWNjLCBwYWlyKSA9PiB7XG4gICAgYWNjW3BhaXIucHJvcGVydHkuaWRdID0gcGFpci52YWx1ZS5pZDtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9kdWN0T3B0aW9uVmFsdWVOYW1lID0gKFxuICBwcm9wZXJ0eTogUHJvcGVydHksXG4gIHNpbXBsaWZpZWRTa3VWYWx1ZXM6IFNpbXBsaWZpZWRTa3VWYWx1ZXNcbik6IHN0cmluZyA9PiB7XG4gIGlmIChwcm9wZXJ0eS5pZCAmJiBwcm9wZXJ0eS5lbnVtKSB7XG4gICAgY29uc3QgcHJvcFZhbHVlSWQgPSBzaW1wbGlmaWVkU2t1VmFsdWVzW3Byb3BlcnR5LmlkXTtcbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wZXJ0eS5lbnVtLmZpbmQoKHZhbHVlKSA9PiB2YWx1ZS5pZCA9PT0gcHJvcFZhbHVlSWQpO1xuICAgIGlmIChwcm9wVmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHByb3BWYWx1ZS5uYW1lO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59O1xuIl0sIm5hbWVzIjpbImdldFByb2R1Y3RPcHRpb25WYWx1ZU5hbWUiLCJzaW1wbGlmeVNrdVZhbHVlcyIsInNrdVZhbHVlcyIsInJlZHVjZSIsImFjYyIsInBhaXIiLCJwcm9wZXJ0eSIsImlkIiwidmFsdWUiLCJzaW1wbGlmaWVkU2t1VmFsdWVzIiwiZW51bSIsInByb3BWYWx1ZUlkIiwicHJvcFZhbHVlIiwiZmluZCIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLG9JQUFvSTs7Ozs7Ozs7Ozs7O0lBdUJ2SEEseUJBQXlCO2VBQXpCQTs7SUFmQUMsaUJBQWlCO2VBQWpCQTs7O0FBQU4sTUFBTUEsb0JBQW9CLENBQy9CQyxZQVNBQSxVQUFVQyxNQUFNLENBQXNCLENBQUNDLEtBQUtDO1FBQzFDRCxHQUFHLENBQUNDLEtBQUtDLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDLEdBQUdGLEtBQUtHLEtBQUssQ0FBQ0QsRUFBRTtRQUNyQyxPQUFPSDtJQUNULEdBQUcsQ0FBQztBQUVDLE1BQU1KLDRCQUE0QixDQUN2Q00sVUFDQUc7SUFFQSxJQUFJSCxTQUFTQyxFQUFFLElBQUlELFNBQVNJLElBQUksRUFBRTtRQUNoQyxNQUFNQyxjQUFjRixtQkFBbUIsQ0FBQ0gsU0FBU0MsRUFBRSxDQUFDO1FBQ3BELE1BQU1LLFlBQVlOLFNBQVNJLElBQUksQ0FBQ0csSUFBSSxDQUFDLENBQUNMLFFBQVVBLE1BQU1ELEVBQUUsS0FBS0k7UUFDN0QsSUFBSUMsYUFBYSxPQUFPQSxVQUFVRSxJQUFJLEtBQUssVUFBVTtZQUNuRCxPQUFPRixVQUFVRSxJQUFJO1FBQ3ZCO0lBQ0Y7SUFDQSxPQUFPO0FBQ1QifQ==
    
    }),
    34206: (function (__unused_webpack_module, exports) {
    "use strict";
    // Ecommerce data source definition uses this as the externalKey of the Products
    // binding context type, while CommerceAddToCartWrapper uses this in its
    // BindingContext Atom constraint.
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
            return ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY;
        },
        PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
            return PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY;
        }
    });
    const PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY = 'commerce-products-type';
    const ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY = 'commerce-order-items-type';
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmRpbmdDb250ZXh0Q29uc3RhbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVjb21tZXJjZSBkYXRhIHNvdXJjZSBkZWZpbml0aW9uIHVzZXMgdGhpcyBhcyB0aGUgZXh0ZXJuYWxLZXkgb2YgdGhlIFByb2R1Y3RzXG4vLyBiaW5kaW5nIGNvbnRleHQgdHlwZSwgd2hpbGUgQ29tbWVyY2VBZGRUb0NhcnRXcmFwcGVyIHVzZXMgdGhpcyBpbiBpdHNcbi8vIEJpbmRpbmdDb250ZXh0IEF0b20gY29uc3RyYWludC5cbmV4cG9ydCBjb25zdCBQUk9EVUNUU19CSU5ESU5HX0NPTlRFWFRfRVhURVJOQUxfS0VZID0gJ2NvbW1lcmNlLXByb2R1Y3RzLXR5cGUnO1xuXG4vLyBFY29tbWVyY2UgZGF0YSBzb3VyY2UgZGVmaW5pdGlvbiB1c2VzIHRoaXMgYXMgdGhlIGV4dGVybmFsS2V5IG9mIHRoZSBPcmRlciBJdGVtc1xuLy8gYmluZGluZyBjb250ZXh0IHR5cGUuXG5leHBvcnQgY29uc3QgT1JERVJfSVRFTVNfQklORElOR19DT05URVhUX0VYVEVSTkFMX0tFWSA9XG4gICdjb21tZXJjZS1vcmRlci1pdGVtcy10eXBlJztcbiJdLCJuYW1lcyI6WyJPUkRFUl9JVEVNU19CSU5ESU5HX0NPTlRFWFRfRVhURVJOQUxfS0VZIiwiUFJPRFVDVFNfQklORElOR19DT05URVhUX0VYVEVSTkFMX0tFWSJdLCJtYXBwaW5ncyI6IkFBQUEsZ0ZBQWdGO0FBQ2hGLHdFQUF3RTtBQUN4RSxrQ0FBa0M7Ozs7Ozs7Ozs7OztJQUtyQkEsd0NBQXdDO2VBQXhDQTs7SUFKQUMscUNBQXFDO2VBQXJDQTs7O0FBQU4sTUFBTUEsd0NBQXdDO0FBSTlDLE1BQU1ELDJDQUNYIn0=
    
    }),
    10873: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ACTIVE_STRIPE_SUBSCRIPTION_STATUSES: function() {
            return ACTIVE_STRIPE_SUBSCRIPTION_STATUSES;
        },
        ADVANCED_PRODUCT_TYPE: function() {
            return ADVANCED_PRODUCT_TYPE;
        },
        BILLING_METHOD_TYPES: function() {
            return BILLING_METHOD_TYPES;
        },
        CSV_CURRENCY_TEMPLATE: function() {
            return CSV_CURRENCY_TEMPLATE;
        },
        CSV_INTEGRATION_CURRENCY_TEMPLATE: function() {
            return CSV_INTEGRATION_CURRENCY_TEMPLATE;
        },
        DEFAULT_PRICE_TEMPLATE_VALUE: function() {
            return DEFAULT_PRICE_TEMPLATE_VALUE;
        },
        DEFAULT_PRODUCT_TYPE_ID: function() {
            return DEFAULT_PRODUCT_TYPE_ID;
        },
        DEFAULT_TAX_CATEGORY: function() {
            return DEFAULT_TAX_CATEGORY;
        },
        DIGITAL_PRODUCT_TYPE: function() {
            return DIGITAL_PRODUCT_TYPE;
        },
        DISCOUNTS_CSV_IMPORT_EXPORT_COLUMNS: function() {
            return DISCOUNTS_CSV_IMPORT_EXPORT_COLUMNS;
        },
        DISCOUNT_CODE_MAX_LENGTH: function() {
            return DISCOUNT_CODE_MAX_LENGTH;
        },
        DOWNLOAD_FILES_EDITABLE_FIELDS: function() {
            return DOWNLOAD_FILES_EDITABLE_FIELDS;
        },
        DOWNLOAD_FILES_FAKE_DATA: function() {
            return DOWNLOAD_FILES_FAKE_DATA;
        },
        DOWNLOAD_FILES_KEY_PATH: function() {
            return DOWNLOAD_FILES_KEY_PATH;
        },
        ECOMMERCE_PROVIDER_NAME_ENUM: function() {
            return ECOMMERCE_PROVIDER_NAME_ENUM;
        },
        INFINITE_INVENTORY: function() {
            return INFINITE_INVENTORY;
        },
        INVENTORY_TYPE_FINITE: function() {
            return INVENTORY_TYPE_FINITE;
        },
        INVENTORY_TYPE_INFINITE: function() {
            return INVENTORY_TYPE_INFINITE;
        },
        MAX_MEMBERSHIP_PRODUCTS: function() {
            return MAX_MEMBERSHIP_PRODUCTS;
        },
        MAX_PRODUCT_DIMENSION: function() {
            return MAX_PRODUCT_DIMENSION;
        },
        MAX_SEARCH_LIMIT: function() {
            return MAX_SEARCH_LIMIT;
        },
        MAX_TOTAL_ORDER_PRICE: function() {
            return MAX_TOTAL_ORDER_PRICE;
        },
        MEMBERSHIP_PRODUCT_TYPE: function() {
            return MEMBERSHIP_PRODUCT_TYPE;
        },
        ORDER_ID_RE: function() {
            return ORDER_ID_RE;
        },
        ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
            return _bindingContextConstants.ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY;
        },
        ORDER_SORT_MODES: function() {
            return ORDER_SORT_MODES;
        },
        PHYSICAL_PRODUCT_TYPE: function() {
            return PHYSICAL_PRODUCT_TYPE;
        },
        PRICE_TEMPLATE_AMOUNT: function() {
            return PRICE_TEMPLATE_AMOUNT;
        },
        PRICE_TEMPLATE_CURRENCY_CODE: function() {
            return PRICE_TEMPLATE_CURRENCY_CODE;
        },
        PRICE_TEMPLATE_CURRENCY_SYMBOL: function() {
            return PRICE_TEMPLATE_CURRENCY_SYMBOL;
        },
        PRICE_TEMPLATE_OPTIONS: function() {
            return PRICE_TEMPLATE_OPTIONS;
        },
        PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
            return _bindingContextConstants.PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY;
        },
        PRODUCT_TYPE_HELP_TEXT: function() {
            return PRODUCT_TYPE_HELP_TEXT;
        },
        REQUIRED_DISCOUNT_IMPORT_FIELDS: function() {
            return REQUIRED_DISCOUNT_IMPORT_FIELDS;
        },
        SERVICE_PRODUCT_TYPE: function() {
            return SERVICE_PRODUCT_TYPE;
        },
        SHIPPING_METHODS: function() {
            return SHIPPING_METHODS;
        },
        STRIPE_DISCONNECT_SUBSCRIPTIONS_ERROR_MESSAGE: function() {
            return STRIPE_DISCONNECT_SUBSCRIPTIONS_ERROR_MESSAGE;
        },
        STRIPE_SUBSCRIPTION_STATUS_ENUM: function() {
            return STRIPE_SUBSCRIPTION_STATUS_ENUM;
        },
        SUBSCRIPTION_INTERVAL_ENUM: function() {
            return SUBSCRIPTION_INTERVAL_ENUM;
        },
        SUBSCRIPTION_SORT_MODES: function() {
            return SUBSCRIPTION_SORT_MODES;
        },
        SUBSCRIPTION_STATUS_ENUM: function() {
            return SUBSCRIPTION_STATUS_ENUM;
        },
        SUBSCRIPTION_STATUS_PRETTY_ENUM: function() {
            return SUBSCRIPTION_STATUS_PRETTY_ENUM;
        },
        TEMPLATE_PRODUCT_TYPES: function() {
            return TEMPLATE_PRODUCT_TYPES;
        },
        paypalCurrencyList: function() {
            return _paypalCurrencyList.paypalCurrencyList;
        },
        stripeCurrencyList: function() {
            return _stripeCurrencyList.stripeCurrencyList;
        }
    });
    const _camelCase = /*#__PURE__*/ _interop_require_default(__webpack_require__(56034));
    _export_star(__webpack_require__(41158), exports);
    const _bindingContextConstants = __webpack_require__(34206);
    const _paypalCurrencyList = __webpack_require__(25766);
    const _stripeCurrencyList = __webpack_require__(37693);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const ORDER_ID_RE = /^[0-9a-f]{5,}$/;
    const SHIPPING_METHOD_FLAT = 'flat-rate';
    const SHIPPING_METHOD_PERCENTAGE = 'percentage';
    const SHIPPING_METHOD_PRICE = 'price';
    const SHIPPING_METHOD_QUANTITY = 'quantity';
    const SHIPPING_METHOD_WEIGHT = 'weight';
    const SHIPPING_METHODS = Object.freeze({
        FLAT: SHIPPING_METHOD_FLAT,
        PERCENTAGE: SHIPPING_METHOD_PERCENTAGE,
        PRICE: SHIPPING_METHOD_PRICE,
        QUANTITY: SHIPPING_METHOD_QUANTITY,
        WEIGHT: SHIPPING_METHOD_WEIGHT
    });
    const DEFAULT_TAX_CATEGORY = 'standard-taxable';
    const INVENTORY_TYPE_FINITE = 'finite';
    const INVENTORY_TYPE_INFINITE = 'infinite';
    const INFINITE_INVENTORY = {
        inventoryType: INVENTORY_TYPE_INFINITE,
        quantity: 0
    };
    const MAX_TOTAL_ORDER_PRICE = 99999999;
    const MAX_PRODUCT_DIMENSION = 9000000000000000;
    const MAX_MEMBERSHIP_PRODUCTS = 20;
    const MAX_SEARCH_LIMIT = 100;
    function _withDerivedValue({ label, type = 'PlainText', path = (0, _camelCase.default)(label), options = {
        readOnly: false,
        isNotAddable: false
    } }) {
        return {
            label,
            type,
            ...options,
            value: JSON.stringify({
                path,
                type
            })
        };
    }
    const PRICE_TEMPLATE_CURRENCY_SYMBOL = _withDerivedValue({
        label: 'Currency symbol',
        path: 'symbol'
    });
    const PRICE_TEMPLATE_AMOUNT = _withDerivedValue({
        label: 'Amount',
        type: 'CommercePrice',
        options: {
            readOnly: true,
            isNotAddable: true
        }
    });
    const PRICE_TEMPLATE_CURRENCY_CODE = _withDerivedValue({
        label: 'Currency code'
    });
    const PRICE_TEMPLATE_OPTIONS = [
        PRICE_TEMPLATE_CURRENCY_SYMBOL,
        PRICE_TEMPLATE_AMOUNT,
        PRICE_TEMPLATE_CURRENCY_CODE
    ];
    const _intoToken = (option)=>`{{wf ${option.value} }}`;
    const DEFAULT_PRICE_TEMPLATE_VALUE = [
        _intoToken(PRICE_TEMPLATE_CURRENCY_SYMBOL),
        ' ',
        _intoToken(PRICE_TEMPLATE_AMOUNT),
        ' ',
        _intoToken(PRICE_TEMPLATE_CURRENCY_CODE)
    ].join('');
    const CSV_CURRENCY_TEMPLATE = [
        _intoToken(PRICE_TEMPLATE_CURRENCY_SYMBOL),
        _intoToken(PRICE_TEMPLATE_AMOUNT)
    ].join('');
    const CSV_INTEGRATION_CURRENCY_TEMPLATE = [
        _intoToken(PRICE_TEMPLATE_AMOUNT),
        ' ',
        _intoToken(PRICE_TEMPLATE_CURRENCY_CODE)
    ].join('');
    const DOWNLOAD_FILES_FAKE_DATA = [
        {
            id: '5d8fcb6d94dd1853060fb3b3',
            name: 'The modern web design process - Webflow Ebook.pdf',
            url: 'https://assets-global.website-files.com/5cf6b7202bf8199f50d43e6c/5e9dd8a680b972888929747b_The%20modern%20web%20design%20process%20-%20Webflow%20Ebook.pdf'
        },
        {
            id: '5d8fcb6d94dd1853060fb3b4',
            name: 'The freelance web designers guide - Webflow Ebook.pdf',
            url: 'https://assets-global.website-files.com/5cf6b7202bf8199f50d43e6c/5e9dd8e6abe52b33243a22cf_The%20freelance%20web%20designer%E2%80%99s%20guide%20-%20Webflow%20Ebook.pdf'
        }
    ];
    const DOWNLOAD_FILES_KEY_PATH = 'download-files';
    const DOWNLOAD_FILES_EDITABLE_FIELDS = {
        name: true,
        url: true
    };
    const SUBSCRIPTION_INTERVAL_ENUM = [
        'day',
        'week',
        'month',
        'year'
    ];
    const SUBSCRIPTION_STATUS_ENUM = {
        active: 'active',
        pastdue: 'pastdue',
        unpaid: 'unpaid',
        canceled: 'canceled',
        cancelPending: 'cancelPending',
        incomplete: 'incomplete',
        incompleteExpired: 'incompleteExpired',
        trialing: 'trialing',
        unknown: `unknown`
    };
    const SUBSCRIPTION_STATUS_PRETTY_ENUM = {
        active: 'active',
        pastdue: 'pastdue',
        unpaid: 'unpaid',
        canceled: 'canceled',
        cancelPending: 'cancelPending',
        incomplete: 'incomplete',
        incompleteExpired: 'incompleteExpired',
        trialing: 'in trial',
        unknown: `unknown`
    };
    const STRIPE_SUBSCRIPTION_STATUS_ENUM = {
        active: 'active',
        past_due: 'past_due',
        unpaid: 'unpaid',
        canceled: 'canceled',
        incomplete: 'incomplete',
        incomplete_expired: 'incomplete_expired',
        trialing: 'trialing'
    };
    const ACTIVE_STRIPE_SUBSCRIPTION_STATUSES = [
        STRIPE_SUBSCRIPTION_STATUS_ENUM.active,
        STRIPE_SUBSCRIPTION_STATUS_ENUM.past_due,
        STRIPE_SUBSCRIPTION_STATUS_ENUM.trialing
    ];
    const ECOMMERCE_PROVIDER_NAME_ENUM = {
        stripe: 'stripe'
    };
    const BILLING_METHOD_TYPES = {
        subscription: 'subscription',
        oneTime: 'one-time'
    };
    const DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS = [
        {
            fieldSlug: 'name',
            required: true
        },
        {
            fieldSlug: 'slug',
            required: true
        },
        {
            fieldSlug: 'sku-properties',
            required: false
        },
        {
            fieldSlug: 'category',
            required: false
        },
        {
            fieldSlug: 'description',
            required: false
        },
        {
            fieldSlug: 'tax-category',
            required: false
        },
        {
            fieldSlug: 'default-sku',
            required: false
        },
        {
            fieldSlug: 'ec-product-type',
            required: false
        },
        {
            fieldSlug: 'options',
            required: false
        }
    ];
    const DEFAULT_PRODUCT_TYPE_SKU_FIELDS = [
        {
            fieldSlug: 'sku-values',
            required: false
        },
        {
            fieldSlug: 'product',
            required: false
        },
        {
            fieldSlug: 'main-image',
            required: false
        },
        {
            fieldSlug: 'more-images',
            required: false
        },
        {
            fieldSlug: 'price',
            required: true
        },
        {
            fieldSlug: 'compare-at-price',
            required: false
        },
        {
            fieldSlug: 'ec-sku-subscription-plan',
            required: false
        },
        {
            fieldSlug: 'sku',
            required: false
        },
        {
            fieldSlug: 'ec-sku-billing-method',
            required: false
        },
        {
            fieldSlug: 'track-inventory',
            required: false
        },
        {
            fieldSlug: 'quantity',
            required: false
        }
    ];
    const PHYSICAL_PRODUCT_TYPE = {
        name: 'Physical',
        id: 'ff42fee0113744f693a764e3431a9cc2',
        fields: {
            product: [
                ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS,
                {
                    fieldSlug: 'shippable',
                    required: false
                }
            ],
            sku: [
                ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS,
                {
                    fieldSlug: 'weight',
                    required: false
                },
                {
                    fieldSlug: 'width',
                    required: false
                },
                {
                    fieldSlug: 'height',
                    required: false
                },
                {
                    fieldSlug: 'length',
                    required: false
                }
            ]
        }
    };
    const DIGITAL_PRODUCT_TYPE = {
        name: 'Digital',
        id: 'f22027db68002190aef89a4a2b7ac8a1',
        fields: {
            product: [
                ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS
            ],
            sku: [
                ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS,
                {
                    fieldSlug: 'download-files',
                    required: true
                }
            ]
        }
    };
    const SERVICE_PRODUCT_TYPE = {
        name: 'Service',
        id: 'c599e43b1a1c34d5a323aedf75d3adf6',
        fields: {
            product: [
                ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS
            ],
            sku: [
                ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS
            ]
        }
    };
    const MEMBERSHIP_PRODUCT_TYPE = {
        name: 'Membership',
        id: 'e348fd487d0102946c9179d2a94bb613',
        fields: {
            product: [
                ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS,
                {
                    fieldSlug: 'shippable',
                    required: false
                }
            ],
            sku: [
                ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS,
                {
                    fieldSlug: 'weight',
                    required: false
                },
                {
                    fieldSlug: 'width',
                    required: false
                },
                {
                    fieldSlug: 'height',
                    required: false
                },
                {
                    fieldSlug: 'length',
                    required: false
                },
                {
                    fieldSlug: 'download-files',
                    required: false
                },
                {
                    fieldSlug: 'include-downloads',
                    required: false
                }
            ]
        }
    };
    const ADVANCED_PRODUCT_TYPE = {
        name: 'Advanced',
        id: 'b6ccc1830db4b1babeb06a9ac5f6dd76'
    };
    const TEMPLATE_PRODUCT_TYPES = [
        PHYSICAL_PRODUCT_TYPE,
        DIGITAL_PRODUCT_TYPE,
        SERVICE_PRODUCT_TYPE,
        MEMBERSHIP_PRODUCT_TYPE,
        ADVANCED_PRODUCT_TYPE
    ];
    // only used to get type ProductTypeId
    const templateProductTypeIds = TEMPLATE_PRODUCT_TYPES.reduce((ids, t)=>{
        ids[t.id] = '';
        return ids;
    }, {});
    const PRODUCT_TYPE_HELP_TEXT = {
        [PHYSICAL_PRODUCT_TYPE.id]: 'Physical products are shipped to the customer (e.g., merchandise, apparel).',
        [DIGITAL_PRODUCT_TYPE.id]: 'Digital products are immediately downloadable by the customer after checkout (e.g., audio files, ebooks).',
        [SERVICE_PRODUCT_TYPE.id]: 'Service products do not require a shipping address during checkout (e.g., classes, consultations).',
        [MEMBERSHIP_PRODUCT_TYPE.id]: 'Membership products give users access to gated content through recurring or one-time payment (e.g., subscriptions, one-time membership fee). Membership products require a user login and can only be purchased once.',
        [ADVANCED_PRODUCT_TYPE.id]: 'Advanced products provide all available customizable options.'
    };
    const DEFAULT_PRODUCT_TYPE_ID = PHYSICAL_PRODUCT_TYPE.id;
    const DISCOUNT_CODE_MAX_LENGTH = 255;
    const DISCOUNTS_CSV_IMPORT_EXPORT_COLUMNS = [
        'name',
        'code',
        'notes',
        'type',
        'percentOff',
        'amountOff',
        'validOn',
        'expiresOn',
        'enabled',
        'orderMinimum',
        // archived is disabled until we have UI for it
        // 'archived',
        'totalUsage',
        'maxAmountOff',
        // NOTE: for dot-notation fields to be properly expanded
        // during import, you need to add the camel-case flattened property to
        // the 'KEYS_TO_EXPAND' variable in `entrypoints/server/lib/ecommerce/csvImport/discountCsvImport.js`
        // Example: 'usage.limit.total' -> 'usageLimitTotal'
        'usage.limit.total',
        'usage.limit.customer',
        'appliesTo.scope',
        'appliesTo.filter',
        'appliesTo.applyOnce'
    ];
    const REQUIRED_DISCOUNT_IMPORT_FIELDS = [
        'name',
        'code',
        'type',
        [
            'percentOff',
            'amountOff'
        ]
    ];
    const STRIPE_DISCONNECT_SUBSCRIPTIONS_ERROR_MESSAGE = 'Stripe disconnect attempted with non-canceled subscriptions';
    const ORDER_SORT_MODES = Object.freeze({
        '-count': '-purchasedItemsCount -_id',
        count: 'purchasedItemsCount _id',
        '-name': '-customerInfo.fullName -_id',
        name: 'customerInfo.fullName _id',
        '-orderid': '-orderId',
        orderid: 'orderId',
        '-paid': '-customerPaid.unit -customerPaid.value -_id',
        paid: 'customerPaid.unit customerPaid.value _id',
        '-status': '-statusCode -_id',
        status: 'statusCode _id',
        '-time': '-acceptedOn -_id',
        time: 'acceptedOn _id'
    });
    const SUBSCRIPTION_SORT_MODES = Object.freeze({
        '-lastBilled': '-lastInvoiced -_id',
        lastBilled: 'lastInvoiced _id',
        '-nextBilling': '-paidUntil -_id',
        nextBilling: 'paidUntil _id',
        '-orderid': '-orderId',
        orderid: 'orderId',
        '-purchased': '-subCreatedOn -_id',
        purchased: 'subCreatedOn _id',
        '-status': '-status -_id',
        status: 'status _id',
        '-trialing': '-trialing -_id',
        trialing: 'trialing _id'
    });
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    25766: (function (__unused_webpack_module, exports) {
    "use strict";
    // Note: These currencies are extracted by getting PayPal compatible currencies from:
    //
    // curl https://developer.paypal.com/docs/api/reference/currency-codes
    //
    // And then populating in the names from ISO 4217:
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "paypalCurrencyList", ({
        enumerable: true,
        get: function() {
            return paypalCurrencyList;
        }
    }));
    const paypalCurrencyList = [
        /*
       * ----------------------------------------------------------------------------
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       *
       * This const is duplicated to @packages/systems/core/constants/SharedConfig.js
       * to avoid bundling this entire SharedConfig file in the webflow.js published
       * site bundle. Once we have support for bundling for the Dashboard (this
       * config is injected in to window.SharedConfig for angular), we should
       * be able to delete the const in SharedConfig and use the commerce/consts
       * package whenever `paypalCurrencyList` const is needed.
       *
       * In the meantime, if you make changes to this const, please make sure to
       * update in the other location as well.
       *
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * ----------------------------------------------------------------------------
       */ {
            code: 'AUD',
            digits: 2,
            minCharge: 1,
            name: 'Australian Dollar'
        },
        {
            code: 'BRL',
            digits: 2,
            minCharge: 1,
            name: 'Brazilian Real'
        },
        {
            code: 'CAD',
            digits: 2,
            minCharge: 1,
            name: 'Canadian Dollar'
        },
        {
            code: 'CNY',
            digits: 2,
            minCharge: 1,
            name: 'Chinese Renmenbi'
        },
        {
            code: 'CZK',
            digits: 2,
            minCharge: 1,
            name: 'Czech Koruna'
        },
        {
            code: 'DKK',
            digits: 2,
            minCharge: 1,
            name: 'Danish Krone'
        },
        {
            code: 'EUR',
            digits: 2,
            minCharge: 1,
            name: 'Euro'
        },
        {
            code: 'HKD',
            digits: 2,
            minCharge: 1,
            name: 'Hong Kong Dollar'
        },
        // HUF is currently disabled, due to issues with PayPal's 0-decimal implementation
        // See: https://github.com/webflow/webflow/issues/32865
        // {code: 'HUF', digits: 0, minCharge: 1, name: 'Hungarian Forint'},
        {
            code: 'INR',
            digits: 2,
            minCharge: 1,
            name: 'Indian Rupee'
        },
        {
            code: 'ILS',
            digits: 2,
            minCharge: 1,
            name: 'Israeli New Sheqel'
        },
        {
            code: 'JPY',
            digits: 0,
            minCharge: 1,
            name: 'Japanese Yen'
        },
        {
            code: 'MYR',
            digits: 2,
            minCharge: 1,
            name: 'Malaysian Ringgit'
        },
        {
            code: 'MXN',
            digits: 2,
            minCharge: 1,
            name: 'Mexican Peso'
        },
        {
            code: 'TWD',
            digits: 0,
            minCharge: 1,
            name: 'New Taiwan Dollar'
        },
        {
            code: 'NZD',
            digits: 2,
            minCharge: 1,
            name: 'New Zealand Dollar'
        },
        {
            code: 'NOK',
            digits: 2,
            minCharge: 1,
            name: 'Norwegian Krone'
        },
        {
            code: 'PHP',
            digits: 2,
            minCharge: 1,
            name: 'Philippine Peso'
        },
        {
            code: 'PLN',
            digits: 2,
            minCharge: 1,
            name: 'Polish ZÅ‚oty'
        },
        {
            code: 'GBP',
            digits: 2,
            minCharge: 1,
            name: 'British Pound'
        },
        {
            code: 'RUB',
            digits: 2,
            minCharge: 1,
            name: 'Russian Ruble'
        },
        {
            code: 'SGD',
            digits: 2,
            minCharge: 1,
            name: 'Singapore Dollar'
        },
        {
            code: 'SEK',
            digits: 2,
            minCharge: 1,
            name: 'Swedish Krona'
        },
        {
            code: 'CHF',
            digits: 2,
            minCharge: 1,
            name: 'Swiss Franc'
        },
        {
            code: 'THB',
            digits: 2,
            minCharge: 1,
            name: 'Thai Baht'
        },
        {
            code: 'USD',
            digits: 2,
            minCharge: 1,
            name: 'United States Dollar'
        }
    ];
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBheXBhbEN1cnJlbmN5TGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3RlOiBUaGVzZSBjdXJyZW5jaWVzIGFyZSBleHRyYWN0ZWQgYnkgZ2V0dGluZyBQYXlQYWwgY29tcGF0aWJsZSBjdXJyZW5jaWVzIGZyb206XG4vL1xuLy8gY3VybCBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2RvY3MvYXBpL3JlZmVyZW5jZS9jdXJyZW5jeS1jb2Rlc1xuLy9cbi8vIEFuZCB0aGVuIHBvcHVsYXRpbmcgaW4gdGhlIG5hbWVzIGZyb20gSVNPIDQyMTc6XG5cbmV4cG9ydCBjb25zdCBwYXlwYWxDdXJyZW5jeUxpc3QgPSBbXG4gIC8qXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICpcbiAgICogVGhpcyBjb25zdCBpcyBkdXBsaWNhdGVkIHRvIEBwYWNrYWdlcy9zeXN0ZW1zL2NvcmUvY29uc3RhbnRzL1NoYXJlZENvbmZpZy5qc1xuICAgKiB0byBhdm9pZCBidW5kbGluZyB0aGlzIGVudGlyZSBTaGFyZWRDb25maWcgZmlsZSBpbiB0aGUgd2ViZmxvdy5qcyBwdWJsaXNoZWRcbiAgICogc2l0ZSBidW5kbGUuIE9uY2Ugd2UgaGF2ZSBzdXBwb3J0IGZvciBidW5kbGluZyBmb3IgdGhlIERhc2hib2FyZCAodGhpc1xuICAgKiBjb25maWcgaXMgaW5qZWN0ZWQgaW4gdG8gd2luZG93LlNoYXJlZENvbmZpZyBmb3IgYW5ndWxhciksIHdlIHNob3VsZFxuICAgKiBiZSBhYmxlIHRvIGRlbGV0ZSB0aGUgY29uc3QgaW4gU2hhcmVkQ29uZmlnIGFuZCB1c2UgdGhlIGNvbW1lcmNlL2NvbnN0c1xuICAgKiBwYWNrYWdlIHdoZW5ldmVyIGBwYXlwYWxDdXJyZW5jeUxpc3RgIGNvbnN0IGlzIG5lZWRlZC5cbiAgICpcbiAgICogSW4gdGhlIG1lYW50aW1lLCBpZiB5b3UgbWFrZSBjaGFuZ2VzIHRvIHRoaXMgY29uc3QsIHBsZWFzZSBtYWtlIHN1cmUgdG9cbiAgICogdXBkYXRlIGluIHRoZSBvdGhlciBsb2NhdGlvbiBhcyB3ZWxsLlxuICAgKlxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB7Y29kZTogJ0FVRCcsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnQXVzdHJhbGlhbiBEb2xsYXInfSxcbiAge2NvZGU6ICdCUkwnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0JyYXppbGlhbiBSZWFsJ30sXG4gIHtjb2RlOiAnQ0FEJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdDYW5hZGlhbiBEb2xsYXInfSxcbiAge2NvZGU6ICdDTlknLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0NoaW5lc2UgUmVubWVuYmknfSxcbiAge2NvZGU6ICdDWksnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0N6ZWNoIEtvcnVuYSd9LFxuICB7Y29kZTogJ0RLSycsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnRGFuaXNoIEtyb25lJ30sXG4gIHtjb2RlOiAnRVVSJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdFdXJvJ30sXG4gIHtjb2RlOiAnSEtEJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdIb25nIEtvbmcgRG9sbGFyJ30sXG4gIC8vIEhVRiBpcyBjdXJyZW50bHkgZGlzYWJsZWQsIGR1ZSB0byBpc3N1ZXMgd2l0aCBQYXlQYWwncyAwLWRlY2ltYWwgaW1wbGVtZW50YXRpb25cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2ViZmxvdy93ZWJmbG93L2lzc3Vlcy8zMjg2NVxuICAvLyB7Y29kZTogJ0hVRicsIGRpZ2l0czogMCwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnSHVuZ2FyaWFuIEZvcmludCd9LFxuICB7Y29kZTogJ0lOUicsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnSW5kaWFuIFJ1cGVlJ30sXG4gIHtjb2RlOiAnSUxTJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdJc3JhZWxpIE5ldyBTaGVxZWwnfSxcbiAge2NvZGU6ICdKUFknLCBkaWdpdHM6IDAsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0phcGFuZXNlIFllbid9LFxuICB7Y29kZTogJ01ZUicsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnTWFsYXlzaWFuIFJpbmdnaXQnfSxcbiAge2NvZGU6ICdNWE4nLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ01leGljYW4gUGVzbyd9LFxuICB7Y29kZTogJ1RXRCcsIGRpZ2l0czogMCwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnTmV3IFRhaXdhbiBEb2xsYXInfSxcbiAge2NvZGU6ICdOWkQnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ05ldyBaZWFsYW5kIERvbGxhcid9LFxuICB7Y29kZTogJ05PSycsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnTm9yd2VnaWFuIEtyb25lJ30sXG4gIHtjb2RlOiAnUEhQJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdQaGlsaXBwaW5lIFBlc28nfSxcbiAge2NvZGU6ICdQTE4nLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1BvbGlzaCBaxYJvdHknfSxcbiAge2NvZGU6ICdHQlAnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0JyaXRpc2ggUG91bmQnfSxcbiAge2NvZGU6ICdSVUInLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1J1c3NpYW4gUnVibGUnfSxcbiAge2NvZGU6ICdTR0QnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1NpbmdhcG9yZSBEb2xsYXInfSxcbiAge2NvZGU6ICdTRUsnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1N3ZWRpc2ggS3JvbmEnfSxcbiAge2NvZGU6ICdDSEYnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1N3aXNzIEZyYW5jJ30sXG4gIHtjb2RlOiAnVEhCJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdUaGFpIEJhaHQnfSxcbiAge2NvZGU6ICdVU0QnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1VuaXRlZCBTdGF0ZXMgRG9sbGFyJ30sXG5dIGFzIGNvbnN0O1xuIl0sIm5hbWVzIjpbInBheXBhbEN1cnJlbmN5TGlzdCIsImNvZGUiLCJkaWdpdHMiLCJtaW5DaGFyZ2UiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxxRkFBcUY7QUFDckYsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxFQUFFO0FBQ0Ysa0RBQWtEOzs7OzsrQkFFckNBOzs7ZUFBQUE7OztBQUFOLE1BQU1BLHFCQUFxQjtJQUNoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCQyxHQUNEO1FBQUNDLE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBbUI7SUFDaEU7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFnQjtJQUM3RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWlCO0lBQzlEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBa0I7SUFDL0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFjO0lBQzNEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBYztJQUMzRDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQU07SUFDbkQ7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFrQjtJQUMvRCxrRkFBa0Y7SUFDbEYsdURBQXVEO0lBQ3ZELG9FQUFvRTtJQUNwRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFvQjtJQUNqRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFtQjtJQUNoRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFtQjtJQUNoRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQW9CO0lBQ2pFO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBaUI7SUFDOUQ7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFpQjtJQUM5RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFlO0lBQzVEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBZTtJQUM1RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWtCO0lBQy9EO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBZTtJQUM1RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWE7SUFDMUQ7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFXO0lBQ3hEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBc0I7Q0FDcEUifQ==
    
    }),
    41158: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ADD_TO_CART_ERRORS: function() {
            return ADD_TO_CART_ERRORS;
        },
        ADD_TO_CART_ERROR_MESSAGE: function() {
            return ADD_TO_CART_ERROR_MESSAGE;
        },
        ADD_TO_CART_LOADING: function() {
            return ADD_TO_CART_LOADING;
        },
        ADD_TO_CART_STATES: function() {
            return ADD_TO_CART_STATES;
        },
        ALIGN_DEFAULT: function() {
            return ALIGN_DEFAULT;
        },
        ALIGN_KEY: function() {
            return ALIGN_KEY;
        },
        ANIMATION_DURATION_DEFAULT: function() {
            return ANIMATION_DURATION_DEFAULT;
        },
        ANIMATION_DURATION_KEY: function() {
            return ANIMATION_DURATION_KEY;
        },
        ANIMATION_DURATION_KEYPATH: function() {
            return ANIMATION_DURATION_KEYPATH;
        },
        ANIMATION_EASING_DEFAULT: function() {
            return ANIMATION_EASING_DEFAULT;
        },
        ANIMATION_EASING_KEY: function() {
            return ANIMATION_EASING_KEY;
        },
        ANIMATION_EASING_KEYPATH: function() {
            return ANIMATION_EASING_KEYPATH;
        },
        BILLING_ADDRESS_TOGGLE_DEFAULT: function() {
            return BILLING_ADDRESS_TOGGLE_DEFAULT;
        },
        BILLING_ADDRESS_TOGGLE_KEY: function() {
            return BILLING_ADDRESS_TOGGLE_KEY;
        },
        BILLING_ADDRESS_TOGGLE_KEYPATH: function() {
            return BILLING_ADDRESS_TOGGLE_KEYPATH;
        },
        CART_CHECKOUT_BUTTON_TEXT_DEFAULT: function() {
            return CART_CHECKOUT_BUTTON_TEXT_DEFAULT;
        },
        CART_CHECKOUT_ERROR_MESSAGE: function() {
            return CART_CHECKOUT_ERROR_MESSAGE;
        },
        CART_CHECKOUT_ERROR_MESSAGE_SELECTOR: function() {
            return CART_CHECKOUT_ERROR_MESSAGE_SELECTOR;
        },
        CART_CHECKOUT_LOADING_TEXT_DEFAULT: function() {
            return CART_CHECKOUT_LOADING_TEXT_DEFAULT;
        },
        CART_COUNT_HIDE_RULES: function() {
            return CART_COUNT_HIDE_RULES;
        },
        CART_ERRORS: function() {
            return CART_ERRORS;
        },
        CART_ERROR_MESSAGE: function() {
            return CART_ERROR_MESSAGE;
        },
        CART_ERROR_MESSAGE_SELECTOR: function() {
            return CART_ERROR_MESSAGE_SELECTOR;
        },
        CART_GENERAL_ERROR_MESSAGE: function() {
            return CART_GENERAL_ERROR_MESSAGE;
        },
        CART_OPEN: function() {
            return CART_OPEN;
        },
        CART_PRODUCT_ADDED_DEFAULT: function() {
            return CART_PRODUCT_ADDED_DEFAULT;
        },
        CART_PRODUCT_ADDED_KEY: function() {
            return CART_PRODUCT_ADDED_KEY;
        },
        CART_PRODUCT_ADDED_KEYPATH: function() {
            return CART_PRODUCT_ADDED_KEYPATH;
        },
        CART_QUERY: function() {
            return CART_QUERY;
        },
        CART_STATE: function() {
            return CART_STATE;
        },
        CART_STATES: function() {
            return CART_STATES;
        },
        CART_STATES_AUTOMATION: function() {
            return CART_STATES_AUTOMATION;
        },
        CART_TYPE: function() {
            return CART_TYPE;
        },
        CART_TYPES: function() {
            return CART_TYPES;
        },
        CART_TYPE_DROPDOWN_ON_OPEN: function() {
            return CART_TYPE_DROPDOWN_ON_OPEN;
        },
        CART_TYPE_DROPDOWN_ON_OPEN_KEY: function() {
            return CART_TYPE_DROPDOWN_ON_OPEN_KEY;
        },
        CART_TYPE_KEY: function() {
            return CART_TYPE_KEY;
        },
        CHANGE_CART_EVENT: function() {
            return CHANGE_CART_EVENT;
        },
        CHECKOUT_BINDING_ROOT_QUERY_PATH: function() {
            return CHECKOUT_BINDING_ROOT_QUERY_PATH;
        },
        CHECKOUT_DISABLED_ERROR_MESSAGE: function() {
            return CHECKOUT_DISABLED_ERROR_MESSAGE;
        },
        CHECKOUT_ERRORS: function() {
            return CHECKOUT_ERRORS;
        },
        CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT: function() {
            return CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT;
        },
        CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT: function() {
            return CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT;
        },
        CHECKOUT_QUERY: function() {
            return CHECKOUT_QUERY;
        },
        CHECKOUT_STATE: function() {
            return CHECKOUT_STATE;
        },
        CHECKOUT_STATES: function() {
            return CHECKOUT_STATES;
        },
        COMMERCE_CART_ITEM_ID_ATTR: function() {
            return COMMERCE_CART_ITEM_ID_ATTR;
        },
        COMMERCE_CART_PUBLISHED_SITE_ACTIONS: function() {
            return COMMERCE_CART_PUBLISHED_SITE_ACTIONS;
        },
        COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR: function() {
            return COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR;
        },
        COMMERCE_CATEGORY_COLLECTION_SLUG: function() {
            return COMMERCE_CATEGORY_COLLECTION_SLUG;
        },
        COMMERCE_DEFAULT_COPY: function() {
            return COMMERCE_DEFAULT_COPY;
        },
        COMMERCE_ERROR_CATEGORY: function() {
            return COMMERCE_ERROR_CATEGORY;
        },
        COMMERCE_PLUGIN_KEY: function() {
            return COMMERCE_PLUGIN_KEY;
        },
        COMMERCE_PRODUCT_COLLECTION_SLUG: function() {
            return COMMERCE_PRODUCT_COLLECTION_SLUG;
        },
        COMMERCE_PRODUCT_FIELD_SLUG: function() {
            return COMMERCE_PRODUCT_FIELD_SLUG;
        },
        COMMERCE_SKU_COLLECTION_SLUG: function() {
            return COMMERCE_SKU_COLLECTION_SLUG;
        },
        COMMERCE_SKU_FIELD_SLUG: function() {
            return COMMERCE_SKU_FIELD_SLUG;
        },
        DATA_ATTR_ANIMATION_DURATION: function() {
            return DATA_ATTR_ANIMATION_DURATION;
        },
        DATA_ATTR_ANIMATION_EASING: function() {
            return DATA_ATTR_ANIMATION_EASING;
        },
        DATA_ATTR_COMMERCE_OPTION_SET_ID: function() {
            return DATA_ATTR_COMMERCE_OPTION_SET_ID;
        },
        DATA_ATTR_COMMERCE_PRODUCT_CURRENT_SKU_VALUES: function() {
            return DATA_ATTR_COMMERCE_PRODUCT_CURRENT_SKU_VALUES;
        },
        DATA_ATTR_COMMERCE_PRODUCT_ID: function() {
            return DATA_ATTR_COMMERCE_PRODUCT_ID;
        },
        DATA_ATTR_COMMERCE_SKU_ID: function() {
            return DATA_ATTR_COMMERCE_SKU_ID;
        },
        DATA_ATTR_COUNT_HIDE_RULE: function() {
            return DATA_ATTR_COUNT_HIDE_RULE;
        },
        DATA_ATTR_DEFAULT_TEXT: function() {
            return DATA_ATTR_DEFAULT_TEXT;
        },
        DATA_ATTR_LOADING_TEXT: function() {
            return DATA_ATTR_LOADING_TEXT;
        },
        DATA_ATTR_NODE_TYPE: function() {
            return DATA_ATTR_NODE_TYPE;
        },
        DATA_ATTR_OPEN_ON_HOVER: function() {
            return DATA_ATTR_OPEN_ON_HOVER;
        },
        DATA_ATTR_OPEN_PRODUCT: function() {
            return DATA_ATTR_OPEN_PRODUCT;
        },
        DATA_ATTR_PRESELECT_DEFAULT_VARIANT: function() {
            return DATA_ATTR_PRESELECT_DEFAULT_VARIANT;
        },
        DATA_ATTR_PUBLISHABLE_KEY: function() {
            return DATA_ATTR_PUBLISHABLE_KEY;
        },
        DATA_ATTR_SUBSCRIPTION_TEXT: function() {
            return DATA_ATTR_SUBSCRIPTION_TEXT;
        },
        DEFAULT_SKU_SLUG: function() {
            return DEFAULT_SKU_SLUG;
        },
        EASE_DEFAULT: function() {
            return EASE_DEFAULT;
        },
        EASINGS: function() {
            return EASINGS;
        },
        EDITABLE_STYLE_NAMES: function() {
            return EDITABLE_STYLE_NAMES;
        },
        HIDE_CART_COUNT_DEFAULT: function() {
            return HIDE_CART_COUNT_DEFAULT;
        },
        HIDE_CART_COUNT_KEY: function() {
            return HIDE_CART_COUNT_KEY;
        },
        HIDE_CART_WHEN_EMPTY_DEFAULT: function() {
            return HIDE_CART_WHEN_EMPTY_DEFAULT;
        },
        HIDE_CART_WHEN_EMPTY_KEY: function() {
            return HIDE_CART_WHEN_EMPTY_KEY;
        },
        HIDE_CART_WHEN_EMPTY_KEYPATH: function() {
            return HIDE_CART_WHEN_EMPTY_KEYPATH;
        },
        LOADING_TEXT: function() {
            return LOADING_TEXT;
        },
        LOADING_TEXT_DEFAULT: function() {
            return LOADING_TEXT_DEFAULT;
        },
        NEEDS_REFRESH: function() {
            return NEEDS_REFRESH;
        },
        NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT: function() {
            return NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT;
        },
        NODE_TYPE_ADD_TO_CART_ERROR: function() {
            return NODE_TYPE_ADD_TO_CART_ERROR;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_FORM: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_FORM;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_PILL: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_PILL;
        },
        NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP: function() {
            return NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP;
        },
        NODE_TYPE_COMMERCE_BUY_NOW_BUTTON: function() {
            return NODE_TYPE_COMMERCE_BUY_NOW_BUTTON;
        },
        NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON: function() {
            return NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON;
        },
        NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON: function() {
            return NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON;
        },
        NODE_TYPE_COMMERCE_CART_CLOSE_LINK: function() {
            return NODE_TYPE_COMMERCE_CART_CLOSE_LINK;
        },
        NODE_TYPE_COMMERCE_CART_CONTAINER: function() {
            return NODE_TYPE_COMMERCE_CART_CONTAINER;
        },
        NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER;
        },
        NODE_TYPE_COMMERCE_CART_ERROR: function() {
            return NODE_TYPE_COMMERCE_CART_ERROR;
        },
        NODE_TYPE_COMMERCE_CART_FORM: function() {
            return NODE_TYPE_COMMERCE_CART_FORM;
        },
        NODE_TYPE_COMMERCE_CART_OPEN_LINK: function() {
            return NODE_TYPE_COMMERCE_CART_OPEN_LINK;
        },
        NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS: function() {
            return NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS;
        },
        NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON: function() {
            return NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON;
        },
        NODE_TYPE_COMMERCE_CART_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_CART_WRAPPER;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST;
        },
        NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER;
        },
        NODE_TYPE_COMMERCE_DOWNLOADS_BUTTON: function() {
            return NODE_TYPE_COMMERCE_DOWNLOADS_BUTTON;
        },
        NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER: function() {
            return NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER;
        },
        NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE: function() {
            return NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE;
        },
        NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER: function() {
            return NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER;
        },
        OPEN_STATE_DEFAULT: function() {
            return OPEN_STATE_DEFAULT;
        },
        OPEN_STATE_KEY: function() {
            return OPEN_STATE_KEY;
        },
        OPEN_STATE_KEYPATH: function() {
            return OPEN_STATE_KEYPATH;
        },
        ORDER_QUERY: function() {
            return ORDER_QUERY;
        },
        ORDER_TYPE: function() {
            return ORDER_TYPE;
        },
        PAYPAL_BUTTON_ELEMENT_INSTANCE: function() {
            return PAYPAL_BUTTON_ELEMENT_INSTANCE;
        },
        PAYPAL_ELEMENT_INSTANCE: function() {
            return PAYPAL_ELEMENT_INSTANCE;
        },
        PREVIEW_ITEMS_DEFAULT: function() {
            return PREVIEW_ITEMS_DEFAULT;
        },
        PREVIEW_ITEMS_KEY: function() {
            return PREVIEW_ITEMS_KEY;
        },
        PREVIEW_ITEMS_KEYPATH: function() {
            return PREVIEW_ITEMS_KEYPATH;
        },
        QUANTITY_ENABLED: function() {
            return QUANTITY_ENABLED;
        },
        QUICK_CHECKOUT_AUTOMATION: function() {
            return QUICK_CHECKOUT_AUTOMATION;
        },
        QUICK_CHECKOUT_STATE: function() {
            return QUICK_CHECKOUT_STATE;
        },
        QUICK_CHECKOUT_STATES: function() {
            return QUICK_CHECKOUT_STATES;
        },
        QUICK_CHECKOUT_STATE_KEYPATH: function() {
            return QUICK_CHECKOUT_STATE_KEYPATH;
        },
        RENDER_TREE_EVENT: function() {
            return RENDER_TREE_EVENT;
        },
        REQUIRES_ACTION: function() {
            return REQUIRES_ACTION;
        },
        REQUIRES_SHIPPING: function() {
            return REQUIRES_SHIPPING;
        },
        SECTION_NAMES: function() {
            return SECTION_NAMES;
        },
        SHIPPING_METHODS_STATE: function() {
            return SHIPPING_METHODS_STATE;
        },
        SHIPPING_METHODS_STATES: function() {
            return SHIPPING_METHODS_STATES;
        },
        STATE: function() {
            return STATE;
        },
        STRIPE_ECOMMERCE_ACCOUNT_ID: function() {
            return STRIPE_ECOMMERCE_ACCOUNT_ID;
        },
        STRIPE_ECOMMERCE_KEY: function() {
            return STRIPE_ECOMMERCE_KEY;
        },
        STRIPE_ELEMENT_INSTANCE: function() {
            return STRIPE_ELEMENT_INSTANCE;
        },
        STRIPE_ELEMENT_STYLE: function() {
            return STRIPE_ELEMENT_STYLE;
        },
        STRIPE_ELEMENT_TYPE: function() {
            return STRIPE_ELEMENT_TYPE;
        },
        WF_BINDING_DATA_KEY: function() {
            return WF_BINDING_DATA_KEY;
        },
        WF_COLLECTION_DATA_KEY: function() {
            return WF_COLLECTION_DATA_KEY;
        },
        WF_CONDITION_DATA_KEY: function() {
            return WF_CONDITION_DATA_KEY;
        },
        WF_SKU_BINDING_DATA_KEY: function() {
            return WF_SKU_BINDING_DATA_KEY;
        },
        WF_SKU_CONDITION_DATA_KEY: function() {
            return WF_SKU_CONDITION_DATA_KEY;
        },
        WF_TEMPLATE_ID_DATA_KEY: function() {
            return WF_TEMPLATE_ID_DATA_KEY;
        },
        WF_TEMPLATE_TYPE: function() {
            return WF_TEMPLATE_TYPE;
        },
        getATCErrorMessageForType: function() {
            return getATCErrorMessageForType;
        },
        getCartErrorMessageForType: function() {
            return getCartErrorMessageForType;
        },
        getCheckoutErrorMessageForType: function() {
            return getCheckoutErrorMessageForType;
        },
        symbolMap: function() {
            return symbolMap;
        }
    });
    const DATA_ATTR_COMMERCE_SKU_ID = 'data-commerce-sku-id';
    const DATA_ATTR_COMMERCE_PRODUCT_CURRENT_SKU_VALUES = 'data-commerce-product-sku-values';
    const DATA_ATTR_COMMERCE_OPTION_SET_ID = 'data-commerce-option-set-id';
    const DATA_ATTR_COMMERCE_PRODUCT_ID = 'data-commerce-product-id';
    const DATA_ATTR_NODE_TYPE = 'data-node-type';
    const DATA_ATTR_LOADING_TEXT = 'data-loading-text';
    const DATA_ATTR_OPEN_PRODUCT = 'data-open-product';
    const DATA_ATTR_OPEN_ON_HOVER = 'data-open-on-hover';
    const DATA_ATTR_COUNT_HIDE_RULE = 'data-count-hide-rule';
    const DATA_ATTR_PRESELECT_DEFAULT_VARIANT = 'data-preselect-default-variant';
    const DATA_ATTR_DEFAULT_TEXT = 'data-default-text';
    const DATA_ATTR_SUBSCRIPTION_TEXT = 'data-subscription-text';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_FORM = 'commerce-add-to-cart-form';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR = 'commerce-add-to-cart-error';
    const NODE_TYPE_COMMERCE_CART_ERROR = 'commerce-cart-error';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT = 'commerce-add-to-cart-option-select';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST = 'commerce-add-to-cart-option-list';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP = 'commerce-add-to-cart-pill-group';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_PILL = 'commerce-add-to-cart-pill';
    const NODE_TYPE_COMMERCE_CART_WRAPPER = 'commerce-cart-wrapper';
    const NODE_TYPE_COMMERCE_CART_OPEN_LINK = 'commerce-cart-open-link';
    const NODE_TYPE_COMMERCE_CART_CLOSE_LINK = 'commerce-cart-close-link';
    const NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER = 'commerce-cart-container-wrapper';
    const NODE_TYPE_COMMERCE_CART_CONTAINER = 'commerce-cart-container';
    const NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON = 'cart-checkout-button';
    const NODE_TYPE_COMMERCE_CART_FORM = 'commerce-cart-form';
    const NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT = 'commerce-add-to-cart-quantity-input';
    const NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER = 'commerce-checkout-form-container';
    const NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER = 'commerce-checkout-customer-info-wrapper';
    const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER = 'commerce-checkout-shipping-address-wrapper';
    const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD = 'commerce-checkout-shipping-zip-field';
    const NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD = 'commerce-checkout-billing-zip-field';
    const NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER = 'commerce-checkout-billing-address-wrapper';
    const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER = 'commerce-checkout-shipping-methods-wrapper';
    const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST = 'commerce-checkout-shipping-methods-list';
    const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE = 'commerce-checkout-shipping-methods-empty-state';
    const NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX = 'commerce-checkout-billing-address-toggle-checkbox';
    const NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON = 'commerce-checkout-place-order-button';
    const NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE = 'commerce-checkout-error-state';
    const NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER = 'commerce-order-confirmation-wrapper';
    const NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS = 'commerce-cart-quick-checkout-actions';
    const NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON = 'commerce-cart-quick-checkout-button';
    const NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON = 'commerce-cart-apple-pay-button';
    const NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO = 'commerce-checkout-additional-info';
    const NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER = 'commerce-paypal-checkout-form-container';
    const NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE = 'commerce-checkout-error-state';
    const NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM = 'commerce-checkout-discount-form';
    const NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT = 'commerce-checkout-discount-input';
    const NODE_TYPE_COMMERCE_BUY_NOW_BUTTON = 'commerce-buy-now-button';
    const NODE_TYPE_COMMERCE_DOWNLOADS_BUTTON = 'commerce-downloads-button';
    const NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON = 'commerce-add-to-cart-button';
    const NODE_TYPE_ADD_TO_CART_ERROR = 'commerce-add-to-cart-error';
    const ADD_TO_CART_STATES = {
        DEFAULT: 'DEFAULT',
        OUT_OF_STOCK: 'OUT_OF_STOCK',
        ERROR: 'ERROR'
    };
    const CART_STATES = {
        DEFAULT: 'DEFAULT',
        EMPTY: 'EMPTY',
        ERROR: 'ERROR'
    };
    const CART_STATES_AUTOMATION = {
        DEFAULT: 'cart-default-button',
        EMPTY: 'cart-empty-button',
        ERROR: 'cart-error-button'
    };
    const CHECKOUT_STATES = {
        DEFAULT: 'DEFAULT',
        ERROR: 'ERROR'
    };
    const SHIPPING_METHODS_STATES = {
        DEFAULT: 'DEFAULT',
        EMPTY: 'EMPTY'
    };
    const CART_TYPE_DROPDOWN_ON_OPEN = {
        CLICK: 'CLICK',
        HOVER: 'HOVER'
    };
    const CART_TYPES = {
        MODAL: 'modal',
        LEFT_SIDEBAR: 'leftSidebar',
        RIGHT_SIDEBAR: 'rightSidebar',
        LEFT_DROPDOWN: 'leftDropdown',
        RIGHT_DROPDOWN: 'rightDropdown',
        DROPDOWN: 'dropdown'
    };
    const CART_COUNT_HIDE_RULES = {
        ALWAYS: 'always',
        EMPTY: 'empty'
    };
    const QUICK_CHECKOUT_STATES = {
        NONE: 'NONE',
        PAY_NOW: 'PAY_NOW',
        APPLE_PAY: 'APPLE_PAY'
    };
    const QUICK_CHECKOUT_AUTOMATION = {
        PAY_NOW: 'quick-checkout-default-button',
        APPLE_PAY: 'quick-checkout-apple-pay-button'
    };
    const PREVIEW_ITEMS_DEFAULT = 3;
    const PREVIEW_ITEMS_KEY = 'previewItems';
    const PREVIEW_ITEMS_KEYPATH = [
        'data',
        'temp',
        PREVIEW_ITEMS_KEY
    ];
    const QUANTITY_ENABLED = 'quantityEnabled';
    const STATE = 'state';
    const CART_STATE = 'state';
    const QUICK_CHECKOUT_STATE = 'state';
    const QUICK_CHECKOUT_STATE_KEYPATH = [
        'data',
        'temp',
        QUICK_CHECKOUT_STATE
    ];
    const CHECKOUT_STATE = 'state';
    const SHIPPING_METHODS_STATE = 'shippingMethodsState';
    const OPEN_STATE_KEY = 'isOpen';
    const OPEN_STATE_KEYPATH = [
        'data',
        'temp',
        OPEN_STATE_KEY
    ];
    const OPEN_STATE_DEFAULT = false;
    const BILLING_ADDRESS_TOGGLE_KEY = 'isBillingAddressOpen';
    const BILLING_ADDRESS_TOGGLE_KEYPATH = [
        'data',
        'temp',
        BILLING_ADDRESS_TOGGLE_KEY
    ];
    const BILLING_ADDRESS_TOGGLE_DEFAULT = true;
    const HIDE_CART_WHEN_EMPTY_KEY = 'hideCartWhenEmpty';
    const HIDE_CART_WHEN_EMPTY_KEYPATH = [
        'data',
        'commerce',
        HIDE_CART_WHEN_EMPTY_KEY
    ];
    const HIDE_CART_WHEN_EMPTY_DEFAULT = false;
    const HIDE_CART_COUNT_KEY = 'hideCartCount';
    const HIDE_CART_COUNT_DEFAULT = false;
    const LOADING_TEXT = 'loadingText';
    const LOADING_TEXT_DEFAULT = 'Adding to cart...';
    const CART_CHECKOUT_BUTTON_TEXT_DEFAULT = 'Continue to Checkout';
    const CART_CHECKOUT_LOADING_TEXT_DEFAULT = 'Hang Tight...';
    const CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT = 'Place Order';
    const CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT = 'Placing Order...';
    const CART_TYPE_KEY = 'cartType';
    const ALIGN_KEY = 'align';
    const ALIGN_DEFAULT = 'rightDropdown';
    const CART_TYPE_DROPDOWN_ON_OPEN_KEY = 'openOn';
    const CART_PRODUCT_ADDED_KEY = 'openWhenProductAdded';
    const CART_PRODUCT_ADDED_KEYPATH = [
        'data',
        'commerce',
        CART_PRODUCT_ADDED_KEY
    ];
    const CART_PRODUCT_ADDED_DEFAULT = true;
    const COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR = 'data-wf-cart-action';
    const COMMERCE_CART_PUBLISHED_SITE_ACTIONS = {
        UPDATE_ITEM_QUANTITY: 'update-item-quantity',
        REMOVE_ITEM: 'remove-item'
    };
    const COMMERCE_CART_ITEM_ID_ATTR = 'data-wf-item-id';
    const COMMERCE_SKU_COLLECTION_SLUG = 'sku';
    const COMMERCE_SKU_FIELD_SLUG = 'sku';
    const COMMERCE_PRODUCT_COLLECTION_SLUG = 'product';
    const COMMERCE_PRODUCT_FIELD_SLUG = 'product';
    const COMMERCE_CATEGORY_COLLECTION_SLUG = 'category';
    const COMMERCE_PLUGIN_KEY = 'ecommerce';
    const DEFAULT_SKU_SLUG = 'default-sku';
    const WF_BINDING_DATA_KEY = 'data-wf-bindings';
    const WF_CONDITION_DATA_KEY = 'data-wf-conditions';
    const WF_COLLECTION_DATA_KEY = 'data-wf-collection';
    const WF_TEMPLATE_ID_DATA_KEY = 'data-wf-template-id';
    const WF_SKU_BINDING_DATA_KEY = 'data-wf-sku-bindings';
    const WF_SKU_CONDITION_DATA_KEY = 'data-wf-sku-conditions';
    const WF_TEMPLATE_TYPE = 'text/x-wf-template';
    const INFO_ERR = 'INFO_ERROR';
    const SHIPPING_ERR = 'SHIPPING_ERROR';
    const BILLING_ERR = 'BILLING_ERROR';
    const PAYMENT_ERR = 'PAYMENT_ERROR';
    const PRICING_ERR = 'PRICING_ERROR';
    const ORDER_MIN_ERR = 'ORDER_MINIMUM_ERROR';
    const ORDER_EXTRAS_ERR = 'ORDER_EXTRAS_ERROR';
    const PRODUCT_ERR = 'PRODUCT_ERROR';
    const INVALID_DISCOUNT_ERR = 'INVALID_DISCOUNT_ERROR';
    const EXPIRED_DISCOUNT_ERR = 'EXPIRED_DISCOUNT_ERROR';
    const USAGE_REACHED_DISCOUNT_ERR = 'USAGE_REACHED_DISCOUNT_ERROR';
    const REQUIREMENTS_NOT_MET_DISCOUNT_ERR = 'REQUIREMENTS_NOT_MET_DISCOUNT_ERROR';
    const COMMERCE_ERROR_CATEGORY = {
        GENERAL: {
            id: 'GENERAL',
            label: 'General Errors'
        },
        PRODUCT: {
            id: 'PRODUCT',
            label: 'Product Errors'
        },
        BILLING: {
            id: 'BILLING',
            label: 'Billing Errors'
        },
        DISCOUNT: {
            id: 'DISCOUNT',
            label: 'Discount Errors'
        },
        SUBSCRIPTION: {
            id: 'SUBSCRIPTION',
            label: 'Subscription Errors'
        }
    };
    const CHECKOUT_ERRORS = {
        INFO: {
            id: INFO_ERR,
            name: 'General customer info error',
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            copy: 'There was an error processing your customer info. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'commerce',
                INFO_ERR
            ]
        },
        SHIPPING: {
            id: SHIPPING_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Shipping not available',
            copy: 'Sorry. We canâ€™t ship your order to the address provided.',
            path: [
                'data',
                'commerce',
                SHIPPING_ERR
            ]
        },
        EXTRAS: {
            id: ORDER_EXTRAS_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Merchant setting changed',
            copy: 'A merchant setting has changed that impacts your cart. Please refresh and try again.',
            path: [
                'data',
                'commerce',
                ORDER_EXTRAS_ERR
            ],
            requiresRefresh: true
        },
        PRICING: {
            id: PRICING_ERR,
            category: COMMERCE_ERROR_CATEGORY.PRODUCT,
            name: 'Product price changed',
            copy: 'The prices of one or more items in your cart have changed. Please refresh this page and try again.',
            path: [
                'data',
                'commerce',
                PRICING_ERR
            ],
            requiresRefresh: true
        },
        PRODUCT: {
            id: PRODUCT_ERR,
            category: COMMERCE_ERROR_CATEGORY.PRODUCT,
            name: 'Product removed',
            copy: 'One or more of the products in your cart have been removed. Please refresh the page and try again.',
            path: [
                'data',
                'commerce',
                PRODUCT_ERR
            ],
            requiresRefresh: true
        },
        PAYMENT: {
            id: PAYMENT_ERR,
            category: COMMERCE_ERROR_CATEGORY.BILLING,
            name: 'General payment error',
            copy: 'There was an error processing your payment. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'commerce',
                PAYMENT_ERR
            ]
        },
        BILLING: {
            id: BILLING_ERR,
            category: COMMERCE_ERROR_CATEGORY.BILLING,
            name: 'Card declined',
            copy: 'Your payment could not be completed with the payment information provided. Please make sure that your card and billing address information is correct, or try a different payment card, to complete this order. Contact us if you continue to have problems.',
            path: [
                'data',
                'commerce',
                BILLING_ERR
            ]
        },
        MINIMUM: {
            id: ORDER_MIN_ERR,
            category: COMMERCE_ERROR_CATEGORY.BILLING,
            name: 'Order minimum not met',
            copy: 'The order minimum was not met. Add more items to your cart to continue.',
            path: [
                'data',
                'commerce',
                ORDER_MIN_ERR
            ],
            note: {
                copy: "You can customize this message with the exact minimum based on your Stripe account's settlement currency.",
                cta: {
                    copy: 'Go to Stripe docs',
                    link: 'https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts'
                }
            }
        },
        INVALID_DISCOUNT: {
            id: INVALID_DISCOUNT_ERR,
            category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
            name: 'Invalid discount error',
            copy: 'This discount is invalid.',
            path: [
                'data',
                'commerce',
                INVALID_DISCOUNT_ERR
            ]
        },
        EXPIRED_DISCOUNT: {
            id: EXPIRED_DISCOUNT_ERR,
            category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
            name: 'Discount expired',
            copy: 'This discount is no longer available.',
            path: [
                'data',
                'commerce',
                EXPIRED_DISCOUNT_ERR
            ]
        },
        USAGE_REACHED_DISCOUNT: {
            id: USAGE_REACHED_DISCOUNT_ERR,
            category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
            name: 'Discount usage limit reached',
            copy: 'This discount is no longer available.',
            path: [
                'data',
                'commerce',
                USAGE_REACHED_DISCOUNT_ERR
            ]
        },
        REQUIREMENTS_NOT_MET_DISCOUNT: {
            id: REQUIREMENTS_NOT_MET_DISCOUNT_ERR,
            category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
            name: 'Discount requirements not met',
            copy: 'Your order does not meet the requirements for this discount.',
            path: [
                'data',
                'commerce',
                REQUIREMENTS_NOT_MET_DISCOUNT_ERR
            ]
        }
    };
    const QUANTITY_ERR = 'QUANTITY_ERROR';
    const CHECKOUT_ERR = 'CHECKOUT_ERROR';
    const GENERAL_ERR = 'GENERAL_ERROR';
    const CART_ORDER_MIN_ERR = 'CART_ORDER_MIN_ERROR';
    const SUBSCRIPTION_ERR = 'SUBSCRIPTION_ERR';
    const CART_ERRORS = {
        QUANTITY: {
            id: QUANTITY_ERR,
            name: 'Quantity not available',
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            copy: 'Product is not available in this quantity.',
            path: [
                'data',
                'commerce',
                QUANTITY_ERR
            ]
        },
        GENERAL: {
            id: GENERAL_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'General error',
            copy: 'Something went wrong when adding this item to the cart.',
            path: [
                'data',
                'commerce',
                GENERAL_ERR
            ]
        },
        CHECKOUT: {
            id: CHECKOUT_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Checkout disabled',
            copy: 'Checkout is disabled on this site.',
            path: [
                'data',
                'commerce',
                CHECKOUT_ERR
            ]
        },
        CART_ORDER_MIN: {
            id: CART_ORDER_MIN_ERR,
            category: COMMERCE_ERROR_CATEGORY.BILLING,
            name: 'Order minimum not met',
            copy: 'The order minimum was not met. Add more items to your cart to continue.',
            path: [
                'data',
                'commerce',
                CART_ORDER_MIN_ERR
            ]
        },
        SUBSCRIPTION_ERROR: {
            id: SUBSCRIPTION_ERR,
            category: COMMERCE_ERROR_CATEGORY.SUBSCRIPTION,
            name: 'Subscription not verified',
            copy: 'Before you purchase, please use your email invite to verify your address so we can send order updates.',
            path: [
                'data',
                'commerce',
                SUBSCRIPTION_ERR
            ]
        }
    };
    const ADD_TO_CART_QUANTITY_ERR = 'ADD_TO_CART_QUANTITY_ERROR';
    const ADD_TO_CART_GENERAL_ERR = 'ADD_TO_CART_GENERAL_ERROR';
    const ADD_TO_CART_MIXED_ERR = 'ADD_TO_CART_MIXED_ERROR';
    const ADD_TO_CART_ERRORS = {
        QUANTITY: {
            id: ADD_TO_CART_QUANTITY_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Quantity not available',
            copy: 'Product is not available in this quantity.',
            path: [
                'data',
                'commerce',
                ADD_TO_CART_QUANTITY_ERR
            ]
        },
        GENERAL: {
            id: ADD_TO_CART_GENERAL_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Add to Cart error',
            copy: 'Something went wrong when adding this item to the cart.',
            path: [
                'data',
                'commerce',
                ADD_TO_CART_GENERAL_ERR
            ]
        },
        MIXED_CART: {
            id: ADD_TO_CART_MIXED_ERR,
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Add to mixed Cart error',
            copy: 'You canâ€™t purchase another product with a subscription.'
        },
        BUY_NOW: {
            id: 'BUY_NOW_ERROR',
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Buy now error',
            copy: 'Something went wrong when trying to purchase this item.'
        },
        CHECKOUT_DISABLED: {
            id: 'CHECKOUT_DISABLED_ERROR',
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Checkout disabled',
            copy: 'Checkout is disabled on this site.'
        },
        SELECT_ALL_OPTIONS: {
            id: 'SELECT_ALL_OPTIONS',
            category: COMMERCE_ERROR_CATEGORY.GENERAL,
            name: 'Option selection required',
            copy: 'Please select an option in each set.',
            path: [
                'data',
                'commerce',
                'SELECT_ALL_OPTIONS'
            ]
        }
    };
    const DATA_ATTR_ANIMATION_EASING = 'data-wf-cart-easing';
    const ANIMATION_EASING_DEFAULT = 'ease-out-quad';
    const ANIMATION_EASING_KEY = 'easingType';
    const ANIMATION_EASING_KEYPATH = [
        'data',
        'commerce',
        ANIMATION_EASING_KEY
    ];
    const DATA_ATTR_ANIMATION_DURATION = 'data-wf-cart-duration';
    const ANIMATION_DURATION_DEFAULT = 300;
    const ANIMATION_DURATION_KEY = 'duration';
    const ANIMATION_DURATION_KEYPATH = [
        'data',
        'commerce',
        ANIMATION_DURATION_KEY
    ];
    const DATA_ATTR_PUBLISHABLE_KEY = 'data-publishable-key';
    const EDITABLE_STYLE_NAMES = [
        'backgroundColor',
        'backgroundSize',
        'backgroundPosition',
        'backgroundImage',
        'backgroundRepeat',
        'border',
        'borderRadius',
        'boxShadow',
        'clear',
        'color',
        'cursor',
        'direction',
        'display',
        'filter',
        'float',
        'fontFamily',
        'fontSize',
        'fontStyle',
        'fontWeight',
        'height',
        'lineHeight',
        'letterSpacing',
        'listStyleType',
        'marginBottom',
        'marginLeft',
        'marginRight',
        'marginTop',
        'maxHeight',
        'minHeight',
        'maxWidth',
        'minWidth',
        'mixBlendMode',
        'opacity',
        'overflow',
        'outlineColor',
        'outlineOffset',
        'outlineStyle',
        'outlineWidth',
        'paddingBottom',
        'paddingLeft',
        'paddingRight',
        'paddingTop',
        'position',
        'textAlign',
        'textColumns',
        'textDecoration',
        'textIndent',
        'textTransform',
        'textShadow',
        'transform',
        'transition',
        'whiteSpace',
        'width'
    ];
    const symbolMap = {
        aed: 'Ø¯.Ø¥',
        afn: 'Ø‹',
        all: 'L',
        amd: 'Ö',
        ang: 'Æ’',
        aoa: 'Kz',
        ars: '$',
        aud: '$',
        awg: 'Æ’',
        azn: 'â‚¼',
        bam: 'KM',
        bbd: '$',
        bdt: 'à§³',
        bgn: 'Ð»Ð²',
        bhd: '.Ø¯.Ø¨',
        bif: 'FBu',
        bmd: '$',
        bnd: '$',
        bob: '$b',
        brl: 'R$',
        bsd: '$',
        btc: 'à¸¿',
        btn: 'Nu.',
        bwp: 'P',
        byr: 'Br',
        byn: 'Br',
        bzd: 'BZ$',
        cad: '$',
        cdf: 'FC',
        chf: 'CHF',
        clp: '$',
        cny: 'Â¥',
        cop: '$',
        crc: 'â‚¡',
        cuc: '$',
        cup: 'â‚±',
        cve: '$',
        czk: 'KÄ',
        djf: 'Fdj',
        dkk: 'kr',
        dop: 'RD$',
        dzd: 'Ø¯Ø¬',
        eek: 'kr',
        egp: 'Â£',
        ern: 'Nfk',
        etb: 'Br',
        eth: 'Îž',
        eur: 'â‚¬',
        fjd: '$',
        fkp: 'Â£',
        gbp: 'Â£',
        gel: 'â‚¾',
        ggp: 'Â£',
        ghc: 'â‚µ',
        ghs: 'GHâ‚µ',
        gip: 'Â£',
        gmd: 'D',
        gnf: 'FG',
        gtq: 'Q',
        gyd: '$',
        hkd: '$',
        hnl: 'L',
        hrk: 'kn',
        htg: 'G',
        huf: 'Ft',
        idr: 'Rp',
        ils: 'â‚ª',
        imp: 'Â£',
        inr: 'â‚¹',
        iqd: 'Ø¹.Ø¯',
        irr: 'ï·¼',
        isk: 'kr',
        jep: 'Â£',
        jmd: 'J$',
        jod: 'JD',
        jpy: 'Â¥',
        kes: 'KSh',
        kgs: 'Ð»Ð²',
        khr: 'áŸ›',
        kmf: 'CF',
        kpw: 'â‚©',
        krw: 'â‚©',
        kwd: 'KD',
        kyd: '$',
        kzt: 'Ð»Ð²',
        lak: 'â‚­',
        lbp: 'Â£',
        lkr: 'â‚¨',
        lrd: '$',
        lsl: 'M',
        ltc: 'Å',
        ltl: 'Lt',
        lvl: 'Ls',
        lyd: 'LD',
        mad: 'MAD',
        mdl: 'lei',
        mga: 'Ar',
        mkd: 'Ð´ÐµÐ½',
        mmk: 'K',
        mnt: 'â‚®',
        mop: 'MOP$',
        mro: 'UM',
        mru: 'UM',
        mur: 'â‚¨',
        mvr: 'Rf',
        mwk: 'MK',
        mxn: '$',
        myr: 'RM',
        mzn: 'MT',
        nad: '$',
        ngn: 'â‚¦',
        nio: 'C$',
        nok: 'kr',
        npr: 'â‚¨',
        nzd: '$',
        omr: 'ï·¼',
        pab: 'B/.',
        pen: 'S/.',
        pgk: 'K',
        php: 'â‚±',
        pkr: 'â‚¨',
        pln: 'zÅ‚',
        pyg: 'Gs',
        qar: 'ï·¼',
        rmb: 'ï¿¥',
        ron: 'lei',
        rsd: 'Ð”Ð¸Ð½.',
        rub: 'â‚½',
        rwf: 'Râ‚£',
        sar: 'ï·¼',
        sbd: '$',
        scr: 'â‚¨',
        sdg: 'Ø¬.Ø³.',
        sek: 'kr',
        sgd: '$',
        shp: 'Â£',
        sll: 'Le',
        sos: 'S',
        srd: '$',
        ssp: 'Â£',
        std: 'Db',
        stn: 'Db',
        svc: '$',
        syp: 'Â£',
        szl: 'E',
        thb: 'à¸¿',
        tjs: 'SM',
        tmt: 'T',
        tnd: 'Ø¯.Øª',
        top: 'T$',
        trl: 'â‚¤',
        try: 'â‚º',
        ttd: 'TT$',
        tvd: '$',
        twd: 'NT$',
        tzs: 'TSh',
        uah: 'â‚´',
        ugx: 'USh',
        usd: '$',
        uyu: '$U',
        uzs: 'Ð»Ð²',
        vef: 'Bs',
        vnd: 'â‚«',
        vuv: 'VT',
        wst: 'WS$',
        xaf: 'FCFA',
        xbt: 'Éƒ',
        xcd: '$',
        xof: 'CFA',
        xpf: 'â‚£',
        yer: 'ï·¼',
        zar: 'R',
        zwd: 'Z$'
    };
    const CHECKOUT_BINDING_ROOT_QUERY_PATH = [
        'database',
        'commerceOrder'
    ];
    const ORDER_TYPE = {
        REQUIRE_SHIPPING: 'shipping',
        NO_SHIPPING: 'noShipping'
    };
    const RENDER_TREE_EVENT = 'wf-render-tree';
    const NEEDS_REFRESH = 'data-wf-needs-refresh';
    const REQUIRES_SHIPPING = 'data-wf-order-requires-shipping';
    const STRIPE_ELEMENT_INSTANCE = 'data-wf-stripe-element-instance';
    const STRIPE_ELEMENT_TYPE = 'data-wf-stripe-element-type';
    const STRIPE_ELEMENT_STYLE = 'data-wf-stripe-style';
    const ADD_TO_CART_LOADING = 'data-wf-atc-loading';
    const CHANGE_CART_EVENT = 'wf-change-cart-state';
    const ADD_TO_CART_ERROR_MESSAGE = '.w-add-to-cart-error-msg';
    const getATCErrorMessageForType = (errorType)=>`data-w-add-to-cart-${errorType}-error`;
    const CHECKOUT_DISABLED_ERROR_MESSAGE = 'data-w-add-to-cart-checkout-disabled-error';
    const CHECKOUT_QUERY = 'data-wf-checkout-query';
    const getCheckoutErrorMessageForType = (errorType)=>`data-w-${errorType}-error`;
    const REQUIRES_ACTION = 'requires_action';
    const CART_GENERAL_ERROR_MESSAGE = 'data-w-cart-general-error';
    const CART_CHECKOUT_ERROR_MESSAGE = 'data-w-cart-checkout-error';
    const CART_CHECKOUT_ERROR_MESSAGE_SELECTOR = '.w-checkout-error-msg';
    const CART_ERROR_MESSAGE = 'cart-error-msg';
    const CART_ERROR_MESSAGE_SELECTOR = `.w-${CART_ERROR_MESSAGE}`;
    const CART_OPEN = 'data-cart-open';
    const CART_TYPE = 'data-wf-cart-type';
    const CART_QUERY = 'data-wf-cart-query';
    const PAYPAL_ELEMENT_INSTANCE = 'data-wf-paypal-element';
    const PAYPAL_BUTTON_ELEMENT_INSTANCE = 'data-wf-paypal-button';
    const getCartErrorMessageForType = (errorType)=>`data-w-cart-${errorType}-error`;
    const ORDER_QUERY = 'data-wf-order-query';
    const STRIPE_ECOMMERCE_KEY = 'data-wf-ecomm-key';
    const STRIPE_ECOMMERCE_ACCOUNT_ID = 'data-wf-ecomm-acct-id';
    const EASINGS = {
        ease: 'Ease',
        'ease-in': 'Ease In',
        'ease-out': 'Ease Out',
        'ease-in-out': 'Ease In Out',
        linear: 'Linear',
        'ease-in-quad': 'Ease In Quad',
        'ease-in-cubic': 'Ease In Cubic',
        'ease-in-quart': 'Ease In Quart',
        'ease-in-quint': 'Ease In Quint',
        'ease-in-sine': 'Ease In Sine',
        'ease-in-expo': 'Ease In Expo',
        'ease-in-circ': 'Ease In Circ',
        'ease-in-back': 'Ease In Back',
        'ease-out-quad': 'Ease Out Quad',
        'ease-out-cubic': 'Ease Out Cubic',
        'ease-out-quart': 'Ease Out Quart',
        'ease-out-quint': 'Ease Out Quint',
        'ease-out-sine': 'Ease Out Sine',
        'ease-out-expo': 'Ease Out Expo',
        'ease-out-circ': 'Ease Out Circ',
        'ease-out-back': 'Ease Out Back',
        'ease-in-out-quad': 'Ease In Out Quad',
        'ease-in-out-cubic': 'Ease In Out Cubic',
        'ease-in-out-quart': 'Ease In Out Quart',
        'ease-in-out-quint': 'Ease In Out Quint',
        'ease-in-out-sine': 'Ease In Out Sine',
        'ease-in-out-expo': 'Ease In Out Expo',
        'ease-in-out-circ': 'Ease In Out Circ',
        'ease-in-out-back': 'Ease In Out Back'
    };
    const EASE_DEFAULT = 'ease-out-quad';
    const SECTION_NAMES = {
        ECOMMERCE: 'Ecommerce',
        CHECKOUT_PAGE: 'Checkout Page',
        ORDER_CONFIRMATION_PAGE: 'Order Confirmation Page',
        PAYPAL_CHECKOUT_PAGE: 'Checkout (PayPal) Page'
    };
    const COMMERCE_DEFAULT_COPY = {
        INFO_ERROR: CHECKOUT_ERRORS.INFO.copy,
        SHIPPING_ERROR: CHECKOUT_ERRORS.SHIPPING.copy,
        ORDER_EXTRAS_ERROR: CHECKOUT_ERRORS.EXTRAS.copy,
        PRICING_ERROR: CHECKOUT_ERRORS.PRICING.copy,
        PRODUCT_ERROR: CHECKOUT_ERRORS.PRODUCT.copy,
        PAYMENT_ERROR: CHECKOUT_ERRORS.PAYMENT.copy,
        BILLING_ERROR: CHECKOUT_ERRORS.BILLING.copy,
        ORDER_MINIMUM_ERROR: CHECKOUT_ERRORS.MINIMUM.copy,
        INVALID_DISCOUNT_ERROR: CHECKOUT_ERRORS.INVALID_DISCOUNT.copy,
        EXPIRED_DISCOUNT_ERROR: CHECKOUT_ERRORS.EXPIRED_DISCOUNT.copy,
        USAGE_REACHED_DISCOUNT_ERROR: CHECKOUT_ERRORS.USAGE_REACHED_DISCOUNT.copy,
        REQUIREMENTS_NOT_MET_DISCOUNT_ERROR: CHECKOUT_ERRORS.REQUIREMENTS_NOT_MET_DISCOUNT.copy,
        COMMERCE_ADD_TO_CART_BUTTON_DEFAULT: 'Add to Cart',
        COMMERCE_ADD_TO_CART_BUTTON_WAITING: 'Adding to cart...',
        COMMERCE_BUY_NOW_BUTTON_DEFAULT: 'Buy now',
        SUBSCRIPTION_BUTTON_DEFAULT: 'Subscribe now',
        QUANTITY_ERROR: 'Product is not available in this quantity.',
        GENERAL_ERROR: 'Something went wrong when adding this item to the cart.',
        CHECKOUT_ERROR: 'Checkout is disabled on this site.',
        CART_ORDER_MIN_ERROR: 'The order minimum was not met. Add more items to your cart to continue.',
        SUBSCRIPTION_ERR: 'Before you purchase, please use your email invite to verify your address so we can send order updates.',
        ADD_TO_CART_QUANTITY_ERROR: 'Product is not available in this quantity.',
        ADD_TO_CART_GENERAL_ERROR: 'Something went wrong when adding this item to the cart.',
        ADD_TO_CART_MIXED_ERROR: 'You canâ€™t purchase another product with a subscription.',
        BUY_NOW_ERROR: 'Something went wrong when trying to purchase this item.',
        CHECKOUT_DISABLED_ERROR: 'Checkout is disabled on this site.',
        SELECT_ALL_OPTIONS: 'Please select an option in each set.'
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    37693: (function (__unused_webpack_module, exports) {
    "use strict";
    // Note: These currencies are extracted by getting Stripe compatible currencies with:
    //
    // curl https://api.stripe.com/v1/country_specs\?limit\=100 -u $STRIPE_TEST_KEY: -G \
    //   | jq '.data|.[]|.supported_payment_currencies|.[]' \
    //   | sort \
    //   | uniq
    //
    // And then populating in the names from ISO 4217:
    //
    // Digit counts are also added. Stripe is treated as the source-of-truth for that number, even though their
    // numbers are often at odds with ISO 4217. Notes:
    //
    //  - CVE had a subunit (centavo), that has been discontinued. The ISO reflects this, but stripe sticks
    //    with 2 digits, since the currency is still commonly formatted as "1$00". Â¯\_(ãƒ„)_/Â¯
    //  - ISK had a subunit (eyrir) that was obsoleted in 2003, but Stripe sticks with 2 digits instead of
    //    the ISO's 0.
    //  - MGA is strange, since its smallest denomination is a 1/5th piece (the Iraimbilanja), but is
    //    represented as a decimal, so the currency goes "1.3, 1.4, 2.0, ...". Stripe dodges this strangeness
    //    by ignoring that minimum unit, and so do we, since it has so little value.
    //  - UGX had a subunit (cent) that was discontinued in 2013. Stripe still counts it, tho, even though
    //    that cent is work 1/350000th of a penny.
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "stripeCurrencyList", ({
        enumerable: true,
        get: function() {
            return stripeCurrencyList;
        }
    }));
    const stripeCurrencyList = [
        /*
       * ----------------------------------------------------------------------------
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       *
       * This const is duplicated to @packages/systems/core/constants/SharedConfig.js
       * to avoid bundling this entire SharedConfig file in the webflow.js published
       * site bundle. Once we have support for bundling for the Dashboard (this
       * config is injected in to window.SharedConfig for angular), we should
       * be able to delete the const in SharedConfig and use the commerce/consts
       * package whenever `stripeCurrencyList` const is needed.
       *
       * In the meantime, if you make changes to this const, please make sure to
       * update in the other location as well.
       *
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
       * ----------------------------------------------------------------------------
       */ {
            code: 'AED',
            digits: 2,
            minCharge: 0,
            name: 'United Arab Emirates Dirham'
        },
        {
            code: 'AFN',
            digits: 2,
            minCharge: 0,
            name: 'Afghanistan Afghani'
        },
        {
            code: 'ALL',
            digits: 2,
            minCharge: 0,
            name: 'Albanian Lek'
        },
        {
            code: 'AMD',
            digits: 2,
            minCharge: 0,
            name: 'Armenia Dram'
        },
        {
            code: 'ANG',
            digits: 2,
            minCharge: 0,
            name: 'Netherlands Antillean Gulden'
        },
        {
            code: 'AOA',
            digits: 2,
            minCharge: 0,
            name: 'Angola Kwanza'
        },
        {
            code: 'ARS',
            digits: 2,
            minCharge: 0,
            name: 'Argentine Peso'
        },
        {
            code: 'AUD',
            digits: 2,
            minCharge: 50,
            name: 'Australian Dollar'
        },
        {
            code: 'AWG',
            digits: 2,
            minCharge: 0,
            name: 'Aruban Florin'
        },
        {
            code: 'AZN',
            digits: 2,
            minCharge: 0,
            name: 'Azerbaijan Manat'
        },
        {
            code: 'BAM',
            digits: 2,
            minCharge: 0,
            name: 'Bosnia and Herzegovina Convertible Marka'
        },
        {
            code: 'BBD',
            digits: 2,
            minCharge: 0,
            name: 'Barbadian Dollar'
        },
        {
            code: 'BDT',
            digits: 2,
            minCharge: 0,
            name: 'Bangladeshi Taka'
        },
        {
            code: 'BGN',
            digits: 2,
            minCharge: 0,
            name: 'Bulgaria Lev'
        },
        {
            code: 'BIF',
            digits: 0,
            minCharge: 0,
            name: 'Burundian Franc'
        },
        {
            code: 'BMD',
            digits: 2,
            minCharge: 0,
            name: 'Bermudian Dollar'
        },
        {
            code: 'BND',
            digits: 2,
            minCharge: 0,
            name: 'Brunei Dollar'
        },
        {
            code: 'BOB',
            digits: 2,
            minCharge: 0,
            name: 'Bolivian Boliviano'
        },
        {
            code: 'BRL',
            digits: 2,
            minCharge: 50,
            name: 'Brazilian Real'
        },
        {
            code: 'BSD',
            digits: 2,
            minCharge: 0,
            name: 'Bahamian Dollar'
        },
        {
            code: 'BWP',
            digits: 2,
            minCharge: 0,
            name: 'Botswana Pula'
        },
        {
            code: 'BZD',
            digits: 2,
            minCharge: 0,
            name: 'Belize Dollar'
        },
        {
            code: 'CAD',
            digits: 2,
            minCharge: 50,
            name: 'Canadian Dollar'
        },
        {
            code: 'CDF',
            digits: 2,
            minCharge: 0,
            name: 'Congo/Kinshasa Franc'
        },
        {
            code: 'CHF',
            digits: 2,
            minCharge: 50,
            name: 'Swiss Franc'
        },
        {
            code: 'CLP',
            digits: 0,
            minCharge: 0,
            name: 'Chilean Peso'
        },
        {
            code: 'CNY',
            digits: 2,
            minCharge: 0,
            name: 'Chinese Renminbi Yuan'
        },
        {
            code: 'COP',
            digits: 2,
            minCharge: 0,
            name: 'Colombian Peso'
        },
        {
            code: 'CRC',
            digits: 2,
            minCharge: 0,
            name: 'Costa Rican ColÃ³n'
        },
        {
            code: 'CVE',
            digits: 2,
            minCharge: 0,
            name: 'Cape Verdean Escudo'
        },
        {
            code: 'CZK',
            digits: 2,
            minCharge: 0,
            name: 'Czech Koruna'
        },
        {
            code: 'DJF',
            digits: 0,
            minCharge: 0,
            name: 'Djiboutian Franc'
        },
        {
            code: 'DKK',
            digits: 2,
            minCharge: 250,
            name: 'Danish Krone'
        },
        {
            code: 'DOP',
            digits: 2,
            minCharge: 0,
            name: 'Dominican Peso'
        },
        {
            code: 'DZD',
            digits: 2,
            minCharge: 0,
            name: 'Algerian Dinar'
        },
        {
            code: 'EGP',
            digits: 2,
            minCharge: 0,
            name: 'Egyptian Pound'
        },
        {
            code: 'ETB',
            digits: 2,
            minCharge: 0,
            name: 'Ethiopian Birr'
        },
        {
            code: 'EUR',
            digits: 2,
            minCharge: 50,
            name: 'Euro'
        },
        {
            code: 'FJD',
            digits: 2,
            minCharge: 0,
            name: 'Fijian Dollar'
        },
        {
            code: 'FKP',
            digits: 2,
            minCharge: 0,
            name: 'Falkland Islands Pound'
        },
        {
            code: 'GBP',
            digits: 2,
            minCharge: 30,
            name: 'British Pound'
        },
        {
            code: 'GEL',
            digits: 2,
            minCharge: 0,
            name: 'Georgia Lari'
        },
        {
            code: 'GIP',
            digits: 2,
            minCharge: 0,
            name: 'Gibraltar Pound'
        },
        {
            code: 'GMD',
            digits: 2,
            minCharge: 0,
            name: 'Gambian Dalasi'
        },
        {
            code: 'GNF',
            digits: 0,
            minCharge: 0,
            name: 'Guinean Franc'
        },
        {
            code: 'GTQ',
            digits: 2,
            minCharge: 0,
            name: 'Guatemalan Quetzal'
        },
        {
            code: 'GYD',
            digits: 2,
            minCharge: 0,
            name: 'Guyanese Dollar'
        },
        {
            code: 'HKD',
            digits: 2,
            minCharge: 400,
            name: 'Hong Kong Dollar'
        },
        {
            code: 'HNL',
            digits: 2,
            minCharge: 0,
            name: 'Honduran Lempira'
        },
        {
            code: 'HRK',
            digits: 2,
            minCharge: 0,
            name: 'Croatian Kuna'
        },
        {
            code: 'HTG',
            digits: 2,
            minCharge: 0,
            name: 'Haitian Gourde'
        },
        {
            code: 'HUF',
            digits: 2,
            minCharge: 0,
            name: 'Hungarian Forint'
        },
        {
            code: 'IDR',
            digits: 2,
            minCharge: 0,
            name: 'Indonesian Rupiah'
        },
        {
            code: 'ILS',
            digits: 2,
            minCharge: 0,
            name: 'Israeli New Sheqel'
        },
        {
            code: 'INR',
            digits: 2,
            minCharge: 50,
            name: 'Indian Rupee'
        },
        {
            code: 'ISK',
            digits: 2,
            minCharge: 0,
            name: 'Icelandic KrÃ³na'
        },
        {
            code: 'JMD',
            digits: 2,
            minCharge: 0,
            name: 'Jamaican Dollar'
        },
        {
            code: 'JPY',
            digits: 0,
            minCharge: 50,
            name: 'Japanese Yen'
        },
        {
            code: 'KES',
            digits: 2,
            minCharge: 0,
            name: 'Kenyan Shilling'
        },
        {
            code: 'KGS',
            digits: 2,
            minCharge: 0,
            name: 'Kyrgyzstan Som'
        },
        {
            code: 'KHR',
            digits: 2,
            minCharge: 0,
            name: 'Cambodian Riel'
        },
        {
            code: 'KMF',
            digits: 0,
            minCharge: 0,
            name: 'Comorian Franc'
        },
        {
            code: 'KRW',
            digits: 0,
            minCharge: 0,
            name: 'South Korean Won'
        },
        {
            code: 'KYD',
            digits: 2,
            minCharge: 0,
            name: 'Cayman Islands Dollar'
        },
        {
            code: 'KZT',
            digits: 2,
            minCharge: 0,
            name: 'Kazakhstani Tenge'
        },
        {
            code: 'LAK',
            digits: 2,
            minCharge: 0,
            name: 'Lao Kip'
        },
        {
            code: 'LBP',
            digits: 2,
            minCharge: 0,
            name: 'Lebanese Pound'
        },
        {
            code: 'LKR',
            digits: 2,
            minCharge: 0,
            name: 'Sri Lankan Rupee'
        },
        {
            code: 'LRD',
            digits: 2,
            minCharge: 0,
            name: 'Liberian Dollar'
        },
        {
            code: 'LSL',
            digits: 2,
            minCharge: 0,
            name: 'Lesotho Loti'
        },
        {
            code: 'MAD',
            digits: 2,
            minCharge: 0,
            name: 'Moroccan Dirham'
        },
        {
            code: 'MDL',
            digits: 2,
            minCharge: 0,
            name: 'Moldovan Leu'
        },
        {
            code: 'MGA',
            digits: 0,
            minCharge: 0,
            name: 'Madagascar Ariary'
        },
        {
            code: 'MKD',
            digits: 2,
            minCharge: 0,
            name: 'Macedonia Denar'
        },
        {
            code: 'MMK',
            digits: 2,
            minCharge: 0,
            name: 'Myanmar (Burma) Kyat'
        },
        {
            code: 'MNT',
            digits: 2,
            minCharge: 0,
            name: 'Mongolian TÃ¶grÃ¶g'
        },
        {
            code: 'MOP',
            digits: 2,
            minCharge: 0,
            name: 'Macanese Pataca'
        },
        {
            code: 'MRO',
            digits: 2,
            minCharge: 0,
            name: 'Mauritanian Ouguiya'
        },
        {
            code: 'MUR',
            digits: 2,
            minCharge: 0,
            name: 'Mauritian Rupee'
        },
        {
            code: 'MVR',
            digits: 2,
            minCharge: 0,
            name: 'Maldivian Rufiyaa'
        },
        {
            code: 'MWK',
            digits: 2,
            minCharge: 0,
            name: 'Malawian Kwacha'
        },
        {
            code: 'MXN',
            digits: 2,
            minCharge: 1000,
            name: 'Mexican Peso'
        },
        {
            code: 'MYR',
            digits: 2,
            minCharge: 200,
            name: 'Malaysian Ringgit'
        },
        {
            code: 'MZN',
            digits: 2,
            minCharge: 0,
            name: 'Mozambique Metical'
        },
        {
            code: 'NAD',
            digits: 2,
            minCharge: 0,
            name: 'Namibian Dollar'
        },
        {
            code: 'NGN',
            digits: 2,
            minCharge: 0,
            name: 'Nigerian Naira'
        },
        {
            code: 'NIO',
            digits: 2,
            minCharge: 0,
            name: 'Nicaraguan CÃ³rdoba'
        },
        {
            code: 'NOK',
            digits: 2,
            minCharge: 300,
            name: 'Norwegian Krone'
        },
        {
            code: 'NPR',
            digits: 2,
            minCharge: 0,
            name: 'Nepalese Rupee'
        },
        {
            code: 'NZD',
            digits: 2,
            minCharge: 50,
            name: 'New Zealand Dollar'
        },
        {
            code: 'PAB',
            digits: 2,
            minCharge: 0,
            name: 'Panamanian Balboa'
        },
        {
            code: 'PEN',
            digits: 2,
            minCharge: 0,
            name: 'Peruvian Nuevo Sol'
        },
        {
            code: 'PGK',
            digits: 2,
            minCharge: 0,
            name: 'Papua New Guinean Kina'
        },
        {
            code: 'PHP',
            digits: 2,
            minCharge: 0,
            name: 'Philippine Peso'
        },
        {
            code: 'PKR',
            digits: 2,
            minCharge: 0,
            name: 'Pakistani Rupee'
        },
        {
            code: 'PLN',
            digits: 2,
            minCharge: 200,
            name: 'Polish ZÅ‚oty'
        },
        {
            code: 'PYG',
            digits: 0,
            minCharge: 0,
            name: 'Paraguayan GuaranÃ­'
        },
        {
            code: 'QAR',
            digits: 2,
            minCharge: 0,
            name: 'Qatari Riyal'
        },
        {
            code: 'RON',
            digits: 2,
            minCharge: 0,
            name: 'Romania Leu'
        },
        {
            code: 'RSD',
            digits: 2,
            minCharge: 0,
            name: 'Serbia Dinar'
        },
        {
            code: 'RUB',
            digits: 2,
            minCharge: 0,
            name: 'Russian Ruble'
        },
        {
            code: 'RWF',
            digits: 0,
            minCharge: 0,
            name: 'Rwanda Franc'
        },
        {
            code: 'SAR',
            digits: 2,
            minCharge: 0,
            name: 'Saudi Riyal'
        },
        {
            code: 'SBD',
            digits: 2,
            minCharge: 0,
            name: 'Solomon Islands Dollar'
        },
        {
            code: 'SCR',
            digits: 2,
            minCharge: 0,
            name: 'Seychellois Rupee'
        },
        {
            code: 'SEK',
            digits: 2,
            minCharge: 300,
            name: 'Swedish Krona'
        },
        {
            code: 'SGD',
            digits: 2,
            minCharge: 50,
            name: 'Singapore Dollar'
        },
        {
            code: 'SHP',
            digits: 2,
            minCharge: 0,
            name: 'Saint Helenian Pound'
        },
        {
            code: 'SLL',
            digits: 2,
            minCharge: 0,
            name: 'Sierra Leonean Leone'
        },
        {
            code: 'SOS',
            digits: 2,
            minCharge: 0,
            name: 'Somali Shilling'
        },
        {
            code: 'SRD',
            digits: 2,
            minCharge: 0,
            name: 'Suriname Dollar'
        },
        {
            code: 'STD',
            digits: 2,
            minCharge: 0,
            name: 'SÃ£o TomÃ© and PrÃ­ncipe Dobra'
        },
        {
            code: 'SZL',
            digits: 2,
            minCharge: 0,
            name: 'Swazi Lilangeni'
        },
        {
            code: 'THB',
            digits: 2,
            minCharge: 0,
            name: 'Thai Baht'
        },
        {
            code: 'TJS',
            digits: 2,
            minCharge: 0,
            name: 'Tajikistan Somoni'
        },
        {
            code: 'TOP',
            digits: 2,
            minCharge: 0,
            name: 'Tongan PaÊ»anga'
        },
        {
            code: 'TRY',
            digits: 2,
            minCharge: 0,
            name: 'Turkey Lira'
        },
        {
            code: 'TTD',
            digits: 2,
            minCharge: 0,
            name: 'Trinidad and Tobago Dollar'
        },
        {
            code: 'TWD',
            digits: 2,
            minCharge: 0,
            name: 'New Taiwan Dollar'
        },
        {
            code: 'TZS',
            digits: 2,
            minCharge: 0,
            name: 'Tanzanian Shilling'
        },
        {
            code: 'UAH',
            digits: 2,
            minCharge: 0,
            name: 'Ukrainian Hryvnia'
        },
        {
            code: 'UGX',
            digits: 0,
            minCharge: 0,
            name: 'Ugandan Shilling'
        },
        {
            code: 'USD',
            digits: 2,
            minCharge: 50,
            name: 'United States Dollar'
        },
        {
            code: 'UYU',
            digits: 2,
            minCharge: 0,
            name: 'Uruguayan Peso'
        },
        {
            code: 'UZS',
            digits: 2,
            minCharge: 0,
            name: 'Uzbekistani Som'
        },
        {
            code: 'VND',
            digits: 0,
            minCharge: 0,
            name: 'Vietnamese Äá»“ng'
        },
        {
            code: 'VUV',
            digits: 0,
            minCharge: 0,
            name: 'Vanuatu Vatu'
        },
        {
            code: 'WST',
            digits: 2,
            minCharge: 0,
            name: 'Samoan Tala'
        },
        {
            code: 'XAF',
            digits: 0,
            minCharge: 0,
            name: 'Central African Cfa Franc'
        },
        {
            code: 'XCD',
            digits: 2,
            minCharge: 0,
            name: 'East Caribbean Dollar'
        },
        {
            code: 'XOF',
            digits: 0,
            minCharge: 0,
            name: 'West African Cfa Franc'
        },
        {
            code: 'XPF',
            digits: 0,
            minCharge: 0,
            name: 'Cfp Franc'
        },
        {
            code: 'YER',
            digits: 2,
            minCharge: 0,
            name: 'Yemeni Rial'
        },
        {
            code: 'ZAR',
            digits: 2,
            minCharge: 0,
            name: 'South African Rand'
        },
        {
            code: 'ZMW',
            digits: 2,
            minCharge: 0,
            name: 'Zambia Kwacha'
        }
    ];
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    82988: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        _invalid: function() {
            return _invalid;
        },
        convertPaypalAmountToWFPrice: function() {
            return convertPaypalAmountToWFPrice;
        },
        convertWFPriceToPaypalAmount: function() {
            return convertWFPriceToPaypalAmount;
        },
        convertWFPriceToPaypalAmountWithBreakdown: function() {
            return convertWFPriceToPaypalAmountWithBreakdown;
        },
        currencyInfoByCode: function() {
            return currencyInfoByCode;
        },
        currencyInfoByCodePaypal: function() {
            return currencyInfoByCodePaypal;
        },
        equalPrice: function() {
            return equalPrice;
        },
        formatPrice: function() {
            return formatPrice;
        },
        getCurrencyInfo: function() {
            return getCurrencyInfo;
        },
        getCurrencyInfoPaypal: function() {
            return getCurrencyInfoPaypal;
        },
        getCurrencySymbol: function() {
            return getCurrencySymbol;
        },
        intToUnsafeFloat: function() {
            return intToUnsafeFloat;
        },
        parsePrice: function() {
            return parsePrice;
        },
        renderPrice: function() {
            return renderPrice;
        },
        scalePrice: function() {
            return scalePrice;
        },
        subtractPrice: function() {
            return subtractPrice;
        },
        sumPrice: function() {
            return sumPrice;
        },
        unsafeFloatToInt: function() {
            return unsafeFloatToInt;
        },
        validatePrice: function() {
            return validatePrice;
        },
        zeroUnitPaypal: function() {
            return zeroUnitPaypal;
        },
        zeroUnitWF: function() {
            return zeroUnitWF;
        }
    });
    const _keyBy = /*#__PURE__*/ _interop_require_default(__webpack_require__(3350));
    const _memoize = /*#__PURE__*/ _interop_require_default(__webpack_require__(84984));
    const _isString = /*#__PURE__*/ _interop_require_default(__webpack_require__(81098));
    const _isNumber = /*#__PURE__*/ _interop_require_default(__webpack_require__(91464));
    const _constants = __webpack_require__(10873);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const currencyInfoByCode = (0, _keyBy.default)(_constants.stripeCurrencyList, 'code');
    const currencyInfoByCodePaypal = (0, _keyBy.default)(_constants.paypalCurrencyList, 'code');
    function getCurrencyInfo(code, platform = 'stripe') {
        if (isValidCurrency(code)) {
            return platform === 'stripe' ? // @ts-expect-error
            currencyInfoByCode[code.toUpperCase()] : // @ts-expect-error
            currencyInfoByCodePaypal[code.toUpperCase()];
        }
        return {
            code: '???',
            digits: 2,
            minCharge: 0,
            name: `Unknown currency`
        };
    }
    function getCurrencyInfoPaypal(code) {
        return getCurrencyInfo(code, 'paypal');
    }
    const isValidCurrency = (currencyCode)=>typeof currencyCode === 'string' && currencyInfoByCode.hasOwnProperty(currencyCode.toUpperCase());
    class NullNumberFormat {
        format(_value) {
            return 'NaN';
        }
    }
    // @ts-expect-error - TS2322 - Type '((unit?: string | null | undefined, currencyDisplay?: CurrencyDisplayType) => NullNumberFormat) & MemoizedFunction' is not assignable to type '(unit?: string | null | undefined, arg2?: CurrencyDisplayType | null | undefined) => NullNumberFormat | NumberFormat'.
    const getNumberFormat = (0, _memoize.default)((unit, currencyDisplay = 'symbol')=>// HACK: for some reason, GraphQL is returning a currency of '???' for null
        // prices; we're temporarily glossing over this fact, and will address the
        // backend at a later time..
        unit != null && isValidCurrency(unit) ? new Intl.NumberFormat('en-US', {
            currency: unit,
            style: 'currency',
            currencyDisplay
        }) : new NullNumberFormat(), /* cache key function **/ (unit, currencyDisplay = 'symbol')=>{
        return [
            String(unit),
            currencyDisplay
        ].join('::');
    });
    const getCurrencySymbol = (unit)=>{
        // As Intl.Numberformat.prototype.formatToParts is still experimental
        const symbol = String(getNumberFormat(unit).format(0)).match(/^([^0-9\s]*)/);
        return symbol ? symbol[0] : unit;
    };
    const unsafeFloatToInt = (floatValue, currency, round = Math.round)=>{
        const currencyInfo = typeof currency === 'object' ? currency : getCurrencyInfo(currency);
        return round(floatValue * Math.pow(10, currencyInfo.digits));
    };
    const intToUnsafeFloat = (intValue, currency)=>{
        const currencyInfo = typeof currency === 'object' ? currency : getCurrencyInfo(currency);
        return intValue / Math.pow(10, currencyInfo.digits);
    };
    function renderPrice(price, opts = {}) {
        const { isoFormat = false, noCurrency = false } = opts;
        price = validatePrice(price) ? price : _invalid();
        const normal_value = Number(price.value);
        const currencyInfo = getCurrencyInfo(price.unit);
        const float_value = intToUnsafeFloat(normal_value, currencyInfo);
        if (Number.isNaN(float_value)) {
            return 'NaN';
        }
        if (noCurrency) {
            return String(float_value);
        }
        const fmt = getNumberFormat(price.unit, isoFormat ? 'code' : 'symbol');
        return fmt.format(float_value);
    }
    function formatPrice(price) {
        price = validatePrice(price) ? price : _invalid();
        const string = renderPrice(price);
        return {
            unit: price.unit,
            value: price.value,
            string
        };
    }
    function validatePrice(a) {
        if (!a || typeof a !== 'object') {
            return false;
        }
        // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'object'.
        if (!(0, _isNumber.default)(a.value)) {
            return false;
        }
        // @ts-expect-error - TS2339 - Property 'unit' does not exist on type 'object'.
        if (!(0, _isString.default)(a.unit)) {
            return false;
        }
        // @ts-expect-error - TS2339 - Property 'unit' does not exist on type 'object'.
        if (!isValidCurrency(a.unit)) {
            return false;
        }
        return true;
    }
    function sumPrice(a, b) {
        if (!validatePrice(a) || !validatePrice(b)) {
            return _invalid();
        }
        // No defined behavior, if the Prices don't have a common currency...
        if (a.unit !== b.unit) {
            return _invalid();
        }
        return {
            value: a.value + b.value,
            unit: a.unit
        };
    }
    function subtractPrice(a, b) {
        if (!validatePrice(a) || !validatePrice(b)) {
            return _invalid();
        }
        // No defined behavior, if the Prices don't have a common currency...
        if (a.unit !== b.unit) {
            return _invalid();
        }
        return {
            value: a.value - b.value,
            unit: a.unit
        };
    }
    function scalePrice(a, scalar) {
        if (!validatePrice(a) || !(0, _isNumber.default)(scalar)) {
            return _invalid();
        }
        const value = Math.round(a.value * scalar);
        const unit = a.unit;
        return {
            value,
            unit
        };
    }
    function equalPrice(a, b) {
        return Boolean(a && b && a.value === b.value && a.unit === b.unit);
    }
    function parsePrice(priceString, unit, fallback) {
        if (typeof priceString !== 'string') {
            throw new Error('parsePrice must be called with a string');
        }
        if (!isValidCurrency(unit)) {
            throw new Error(`parsePrice called with invalid currency ${unit}`);
        }
        if (!priceString) {
            return fallback;
        }
        // TODO: Fails on
        // 1,000.00 -> NaN
        // 0,99 -> NaN
        // Also it passes numbers we shouldn't allow:
        // 0x11 -> 17
        // 0b11 -> 3
        const rawNumber = Number(priceString);
        if (Number.isNaN(rawNumber)) {
            return fallback;
        }
        return {
            value: unsafeFloatToInt(rawNumber, unit),
            unit
        };
    }
    function _invalid() {
        return {
            value: NaN,
            unit: '???'
        };
    }
    function zeroUnitWF(unit) {
        return {
            unit,
            value: 0
        };
    }
    function zeroUnitPaypal(unit) {
        return convertWFPriceToPaypalAmount(zeroUnitWF(unit));
    }
    function convertWFPriceToPaypalAmountWithBreakdown(orderPrices) {
        const { total, subtotal, shipping, tax, discount, discountShipping } = orderPrices;
        const convertOrZero = (price, scalar)=>price ? convertWFPriceToPaypalAmount(price, scalar) : zeroUnitPaypal(total.unit);
        return {
            ...convertWFPriceToPaypalAmount(total),
            breakdown: {
                item_total: convertOrZero(subtotal),
                shipping: convertOrZero(shipping),
                tax_total: convertOrZero(tax),
                discount: convertOrZero(discount, -1),
                shipping_discount: convertOrZero(discountShipping, -1)
            }
        };
    }
    function convertWFPriceToPaypalAmount(a, scalar) {
        // TODO:
        // - May have to account for in-country PayPal accounts only support for some currencies
        const unitInfo = getCurrencyInfoPaypal(a.unit);
        const wfValue = scalar ? scalePrice(a, scalar).value : a.value;
        const value = intToUnsafeFloat(wfValue, unitInfo).toFixed(unitInfo.digits);
        return {
            currency_code: a.unit,
            value
        };
    }
    function convertPaypalAmountToWFPrice(a) {
        // TODO:
        // - May have to account for in-country PayPal accounts only support for some currencies
        const unitInfo = getCurrencyInfoPaypal(a.currency_code);
        const value = unsafeFloatToInt(parseFloat(a.value), unitInfo);
        return {
            unit: a.currency_code,
            value
        };
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    60937: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(82988), exports);
    _export_star(__webpack_require__(9807), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQ3VycmVuY3lVdGlscyc7XG5leHBvcnQgKiBmcm9tICcuL3JlbmRlclByaWNlJztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFjO3FCQUNBIn0=
    
    }),
    9807: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        formatPriceFromSettings: function() {
            return formatPriceFromSettings;
        },
        getCurrencySettingsFromCommerceSettings: function() {
            return getCurrencySettingsFromCommerceSettings;
        },
        renderAmountFromSettings: function() {
            return renderAmountFromSettings;
        },
        renderPriceFromSettings: function() {
            return renderPriceFromSettings;
        }
    });
    const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
    const _isInteger = /*#__PURE__*/ _interop_require_default(__webpack_require__(80023));
    const _accounting = __webpack_require__(41471);
    const _simpleReplaceTokens = __webpack_require__(30805);
    const _CurrencyUtils = __webpack_require__(82988);
    const _memo = __webpack_require__(23056);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function formatPriceFromSettings(price, currencySettings) {
        price = (0, _CurrencyUtils.validatePrice)(price) ? price : (0, _CurrencyUtils._invalid)();
        const string = renderPriceFromSettings(price, currencySettings);
        return {
            unit: price.unit,
            value: price.value,
            string
        };
    }
    const getCurrencySettingsFromCommerceSettings = (0, _memo.weakMemo)((commerceSettings)=>{
        const getTheStuff = typeof commerceSettings.getIn === 'function' ? (keyPath, defaultValue)=>// @ts-expect-error - TS2722 - Cannot invoke an object which is possibly 'undefined'.
            commerceSettings.getIn(keyPath, defaultValue) : (keyPath, defaultValue)=>(0, _get.default)(commerceSettings, keyPath, defaultValue);
        return {
            hideDecimalForWholeNumbers: getTheStuff([
                'defaultCurrencyFormat',
                'hideDecimalForWholeNumbers'
            ], false),
            fractionDigits: getTheStuff([
                'defaultCurrencyFormat',
                'fractionDigits'
            ], 2),
            template: getTheStuff([
                'defaultCurrencyFormat',
                'template'
            ], ''),
            decimal: getTheStuff([
                'defaultCurrencyFormat',
                'decimal'
            ], '.'),
            group: getTheStuff([
                'defaultCurrencyFormat',
                'group'
            ], ','),
            symbol: getTheStuff([
                'defaultCurrencyFormat',
                'symbol'
            ], '$'),
            currencyCode: getTheStuff([
                'defaultCurrency'
            ], 'USD')
        };
    });
    const _nonBreakingSpace = String.fromCharCode(160);
    const _replaceAllSpaceWithNBSP = (str)=>str.replace(/\s/g, _nonBreakingSpace);
    function renderAmountFromSettings(amount, // @ts-expect-error - TS2739 - Type '{}' is missing the following properties from type '{ fractionDigits: number; hideDecimalForWholeNumbers: boolean; decimal: string; group: string; }': fractionDigits, hideDecimalForWholeNumbers, decimal, group
    amountSettings = {}) {
        if (typeof amount === 'undefined') {
            return '';
        }
        if (typeof amount === 'string') {
            if (amount === 'âˆž') {
                return amount;
            }
            // This should most likely never happen, but it's a flow guard for the rest of the function
            throw new Error(`amount has type string: got ${amount}, expected âˆž`);
        }
        // Price.value is always whole number. For example, USD is represented in cents
        // this is because fractionDigits = 2. To convert to a jsNumber we need to move
        // the decimal to the left fractionDigits number of times. (we can do this
        // with division)
        const jsValue = amount / parseFloat(`1${'0'.repeat(amountSettings.fractionDigits || 0)}`);
        const precision = (0, _isInteger.default)(jsValue) && amountSettings.hideDecimalForWholeNumbers ? 0 : amountSettings.fractionDigits;
        return (0, _accounting.formatMoney)(jsValue, {
            symbol: '',
            decimal: amountSettings.decimal,
            precision,
            thousand: amountSettings.group
        });
    }
    function renderPriceFromSettings(price, // @ts-expect-error - TS2740 - Type '{}' is missing the following properties from type 'CurrencySettings': hideDecimalForWholeNumbers, fractionDigits, template, decimal, and 3 more.
    currencySettings = {}, renderOpts = {}) {
        const { template, currencyCode } = currencySettings;
        // fall back to old renderPrice if some currency settings don't exist
        // snapshots > ecommerce > ecommerceIsOn for Cypress tests currently doesn't have currency settings
        // we also want to fallback to the old renderPrice in the event that a price's unit
        // does not match the currencyCode for the currency settings
        if (!template || price.unit !== currencyCode) {
            return (0, _CurrencyUtils.renderPrice)(price);
        }
        return (price.value < 0 ? 'âˆ’' : '') + // negative sign to appear before currency symbol e.g., -$ 5.00 USD
        (0, _simpleReplaceTokens.simpleReplaceTokens)((renderOpts.breakingWhitespace ? currencySettings.template : _replaceAllSpaceWithNBSP(currencySettings.template)) || '', {
            amount: renderAmountFromSettings(Math.abs(price.value), currencySettings),
            symbol: currencySettings.symbol,
            currencyCode: currencySettings.currencyCode
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    71847: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        extractToken: function() {
            return extractToken;
        },
        getAmountTokenPattern: function() {
            return getAmountTokenPattern;
        },
        getCatchAllTokenPattern: function() {
            return getCatchAllTokenPattern;
        },
        getExternalTokenPattern: function() {
            return getExternalTokenPattern;
        },
        getWfTokenPattern: function() {
            return getWfTokenPattern;
        },
        parseTokenJson: function() {
            return parseTokenJson;
        },
        parseTokenJsonFromMatch: function() {
            return parseTokenJsonFromMatch;
        },
        stripLegacyShorthandSuffix: function() {
            return stripLegacyShorthandSuffix;
        }
    });
    const _unescape = /*#__PURE__*/ _interop_require_default(__webpack_require__(94891));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const getWfTokenPattern = function() {
        return /{{\s*wf\s*({.*?})\s*}}/g;
    };
    const getCatchAllTokenPattern = function() {
        return /{{\s*(.*?)\s*}}/g;
    };
    const getExternalTokenPattern = function() {
        return /{\\{(\s*.*?\s*)}}/g;
    };
    const getAmountTokenPattern = ()=>{
        return /{{\s*wf\s*({&quot;path&quot;:&quot;amount&quot;,&quot;type&quot;:&quot;CommercePrice&quot;\\})\s*}}/;
    };
    function parseTokenJsonFromMatch(match) {
        let token;
        let isEscaped = false;
        try {
            const replacedTrailing = match.replace(/\\}/g, '}');
            const unescaped = (0, _unescape.default)(replacedTrailing);
            // If the trailing backslash is not present in the original match, or if unescaping the match causes it to be
            // different, then the original match is not escaped
            if (match !== replacedTrailing && unescaped !== replacedTrailing) {
                isEscaped = true;
            }
            token = JSON.parse(unescaped);
        } catch (err) {
            return;
        }
        if (!token?.path || !token.type) {
            return; // If path doesn't exist, this JSON string is not a token
        }
        token.isEscaped = isEscaped;
        return token;
    }
    function parseTokenJson(string) {
        if (string.match(getWfTokenPattern())) {
            let token;
            try {
                token = JSON.parse((0, _unescape.default)(extractToken(string).replace(/\\}/g, '}')));
            } catch (err) {
                return null;
            }
            if (!token || !token.path || !token.type) {
                // If path doesn't exist, this JSON string is not a token
                return null;
            } else {
                return token;
            }
        } else {
            return null;
        }
    }
    function extractToken(string, { shortHand } = {}) {
        return shortHand ? string.replace(getCatchAllTokenPattern(), (match, subMatch)=>{
            return stripLegacyShorthandSuffix(subMatch);
        }) : string.replace(getWfTokenPattern(), '$1');
    }
    function stripLegacyShorthandSuffix(tokenPath) {
        return tokenPath.split(':').map((part)=>part.split('.')[0]).join(':');
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1bmVzY2FwZSBmcm9tICdsb2Rhc2gvdW5lc2NhcGUnO1xuXG5leHBvcnQgdHlwZSBUb2tlblRyYW5zZm9ybWVycyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBhcmd1bWVudHM/OiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCB0eXBlIFRva2VuID0ge1xuICBwYXRoOiBzdHJpbmc7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIHRyYW5zZm9ybWVycz86IFRva2VuVHJhbnNmb3JtZXJzW107XG4gIGlzRXNjYXBlZD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0V2ZUb2tlblBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAve3tcXHMqd2ZcXHMqKHsuKj99KVxccyp9fS9nO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhdGNoQWxsVG9rZW5QYXR0ZXJuID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gL3t7XFxzKiguKj8pXFxzKn19L2c7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RXh0ZXJuYWxUb2tlblBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAve1xcXFx7KFxccyouKj9cXHMqKX19L2c7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0QW1vdW50VG9rZW5QYXR0ZXJuID0gKCkgPT4ge1xuICByZXR1cm4gL3t7XFxzKndmXFxzKih7JnF1b3Q7cGF0aCZxdW90OzomcXVvdDthbW91bnQmcXVvdDssJnF1b3Q7dHlwZSZxdW90OzomcXVvdDtDb21tZXJjZVByaWNlJnF1b3Q7XFxcXH0pXFxzKn19Lztcbn07XG5cbi8qKlxuICogU2ltaWxhciB0byBgcGFyc2VUb2tlbkpzb25gLCBidXQgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoZSBpbnB1dCBpcyB0aGUgaW5uZXIgbWF0Y2ggZnJvbSBgZ2V0V2ZUb2tlblBhdHRlcm5gLlxuICogRS5nLiBgey4uLn1gIGluIGB7eyB3ZiB7Li4ufSB9fWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9rZW5Kc29uRnJvbU1hdGNoKG1hdGNoOiBzdHJpbmcpOiBUb2tlbiB8IHVuZGVmaW5lZCB7XG4gIGxldCB0b2tlbjogVG9rZW47XG4gIGxldCBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXBsYWNlZFRyYWlsaW5nID0gbWF0Y2gucmVwbGFjZSgvXFxcXH0vZywgJ30nKTtcbiAgICBjb25zdCB1bmVzY2FwZWQgPSB1bmVzY2FwZShyZXBsYWNlZFRyYWlsaW5nKTtcblxuICAgIC8vIElmIHRoZSB0cmFpbGluZyBiYWNrc2xhc2ggaXMgbm90IHByZXNlbnQgaW4gdGhlIG9yaWdpbmFsIG1hdGNoLCBvciBpZiB1bmVzY2FwaW5nIHRoZSBtYXRjaCBjYXVzZXMgaXQgdG8gYmVcbiAgICAvLyBkaWZmZXJlbnQsIHRoZW4gdGhlIG9yaWdpbmFsIG1hdGNoIGlzIG5vdCBlc2NhcGVkXG4gICAgaWYgKG1hdGNoICE9PSByZXBsYWNlZFRyYWlsaW5nICYmIHVuZXNjYXBlZCAhPT0gcmVwbGFjZWRUcmFpbGluZykge1xuICAgICAgaXNFc2NhcGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdG9rZW4gPSBKU09OLnBhcnNlKHVuZXNjYXBlZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXRva2VuPy5wYXRoIHx8ICF0b2tlbi50eXBlKSB7XG4gICAgcmV0dXJuOyAvLyBJZiBwYXRoIGRvZXNuJ3QgZXhpc3QsIHRoaXMgSlNPTiBzdHJpbmcgaXMgbm90IGEgdG9rZW5cbiAgfVxuICB0b2tlbi5pc0VzY2FwZWQgPSBpc0VzY2FwZWQ7XG4gIHJldHVybiB0b2tlbjtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHRva2VuIHN0cmluZyBhbmQgcGFyc2VzIGl0IHRvIGEgdG9rZW4gb2JqZWN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0cmluZyBBIHRva2VuIHN0cmluZywgZS5nLiAne3sgd2YgeyZxdW90O3BhdGgmcXVvdDs6JnF1b3Q7bmFtZSZxdW90O1xcfSB9fSdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIEEgcGFyc2VkIHRva2VuIG9iamVjdCBvciBudWxsIGlmIHN0cmluZyBpcyBub3QgYSB2YWxpZCB0b2tlbiBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9rZW5Kc29uKHN0cmluZzogc3RyaW5nKTogVG9rZW4gfCBudWxsIHtcbiAgaWYgKHN0cmluZy5tYXRjaChnZXRXZlRva2VuUGF0dGVybigpKSkge1xuICAgIGxldCB0b2tlbjtcbiAgICB0cnkge1xuICAgICAgdG9rZW4gPSBKU09OLnBhcnNlKHVuZXNjYXBlKGV4dHJhY3RUb2tlbihzdHJpbmcpLnJlcGxhY2UoL1xcXFx9L2csICd9JykpKTtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlbiB8fCAhdG9rZW4ucGF0aCB8fCAhdG9rZW4udHlwZSkge1xuICAgICAgLy8gSWYgcGF0aCBkb2Vzbid0IGV4aXN0LCB0aGlzIEpTT04gc3RyaW5nIGlzIG5vdCBhIHRva2VuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFRva2VuKFxuICBzdHJpbmc6IHN0cmluZyxcbiAge1xuICAgIHNob3J0SGFuZCxcbiAgfToge1xuICAgIHNob3J0SGFuZD86IGJvb2xlYW47XG4gIH0gPSB7fVxuKSB7XG4gIHJldHVybiBzaG9ydEhhbmRcbiAgICA/IHN0cmluZy5yZXBsYWNlKGdldENhdGNoQWxsVG9rZW5QYXR0ZXJuKCksIChtYXRjaCwgc3ViTWF0Y2gpID0+IHtcbiAgICAgICAgcmV0dXJuIHN0cmlwTGVnYWN5U2hvcnRoYW5kU3VmZml4KHN1Yk1hdGNoKTtcbiAgICAgIH0pXG4gICAgOiBzdHJpbmcucmVwbGFjZShnZXRXZlRva2VuUGF0dGVybigpLCAnJDEnKTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIGxlZ2FjeSBzaG9ydGhhbmQgdG9rZW4gcGF0aCBhbmQgc3RyaXBzXG4gKiBzdWZmaWNlcyB0aGF0IHdlIHVzZWQgdG8gaGF2ZSBpbiBJbWFnZVJlZiBhbmQgT3B0aW9uIHRva2Vuc1xuICpcbiAqIFRoaXMgaXMgbmVlZGVkIGZvciB0aGUgbGVnYWN5IGJpbmRpbmdzOlxuICogT3B0aW9uOiB7eyBvcHRpb246bmFtZSB9fSBhbmQge3sgYXV0aG9yOm9wdGlvbi5uYW1lIH19XG4gKiBJbWFnZVJlZjoge3sgaW1hZ2UudXJsIH19IGFuZCB7eyBhdXRob3I6aW1hZ2UudXJsIH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcExlZ2FjeVNob3J0aGFuZFN1ZmZpeCh0b2tlblBhdGg6IHN0cmluZykge1xuICByZXR1cm4gdG9rZW5QYXRoXG4gICAgLnNwbGl0KCc6JylcbiAgICAubWFwKChwYXJ0KSA9PiBwYXJ0LnNwbGl0KCcuJylbMF0pXG4gICAgLmpvaW4oJzonKTtcbn1cbiJdLCJuYW1lcyI6WyJleHRyYWN0VG9rZW4iLCJnZXRBbW91bnRUb2tlblBhdHRlcm4iLCJnZXRDYXRjaEFsbFRva2VuUGF0dGVybiIsImdldEV4dGVybmFsVG9rZW5QYXR0ZXJuIiwiZ2V0V2ZUb2tlblBhdHRlcm4iLCJwYXJzZVRva2VuSnNvbiIsInBhcnNlVG9rZW5Kc29uRnJvbU1hdGNoIiwic3RyaXBMZWdhY3lTaG9ydGhhbmRTdWZmaXgiLCJtYXRjaCIsInRva2VuIiwiaXNFc2NhcGVkIiwicmVwbGFjZWRUcmFpbGluZyIsInJlcGxhY2UiLCJ1bmVzY2FwZWQiLCJ1bmVzY2FwZSIsIkpTT04iLCJwYXJzZSIsImVyciIsInBhdGgiLCJ0eXBlIiwic3RyaW5nIiwic2hvcnRIYW5kIiwic3ViTWF0Y2giLCJ0b2tlblBhdGgiLCJzcGxpdCIsIm1hcCIsInBhcnQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWtGZ0JBLFlBQVk7ZUFBWkE7O0lBeERIQyxxQkFBcUI7ZUFBckJBOztJQVJBQyx1QkFBdUI7ZUFBdkJBOztJQUlBQyx1QkFBdUI7ZUFBdkJBOztJQVJBQyxpQkFBaUI7ZUFBakJBOztJQWdER0MsY0FBYztlQUFkQTs7SUE1QkFDLHVCQUF1QjtlQUF2QkE7O0lBdUVBQywwQkFBMEI7ZUFBMUJBOzs7aUVBekdLOzs7Ozs7QUFjZCxNQUFNSCxvQkFBb0I7SUFDL0IsT0FBTztBQUNUO0FBRU8sTUFBTUYsMEJBQTBCO0lBQ3JDLE9BQU87QUFDVDtBQUVPLE1BQU1DLDBCQUEwQjtJQUNyQyxPQUFPO0FBQ1Q7QUFFTyxNQUFNRix3QkFBd0I7SUFDbkMsT0FBTztBQUNUO0FBTU8sU0FBU0ssd0JBQXdCRSxLQUFhO0lBQ25ELElBQUlDO0lBQ0osSUFBSUMsWUFBWTtJQUNoQixJQUFJO1FBQ0YsTUFBTUMsbUJBQW1CSCxNQUFNSSxPQUFPLENBQUMsUUFBUTtRQUMvQyxNQUFNQyxZQUFZQyxJQUFBQSxpQkFBUSxFQUFDSDtRQUUzQiw2R0FBNkc7UUFDN0csb0RBQW9EO1FBQ3BELElBQUlILFVBQVVHLG9CQUFvQkUsY0FBY0Ysa0JBQWtCO1lBQ2hFRCxZQUFZO1FBQ2Q7UUFDQUQsUUFBUU0sS0FBS0MsS0FBSyxDQUFDSDtJQUNyQixFQUFFLE9BQU9JLEtBQUs7UUFDWjtJQUNGO0lBQ0EsSUFBSSxDQUFDUixPQUFPUyxRQUFRLENBQUNULE1BQU1VLElBQUksRUFBRTtRQUMvQixRQUFRLHlEQUF5RDtJQUNuRTtJQUNBVixNQUFNQyxTQUFTLEdBQUdBO0lBQ2xCLE9BQU9EO0FBQ1Q7QUFPTyxTQUFTSixlQUFlZSxNQUFjO0lBQzNDLElBQUlBLE9BQU9aLEtBQUssQ0FBQ0osc0JBQXNCO1FBQ3JDLElBQUlLO1FBQ0osSUFBSTtZQUNGQSxRQUFRTSxLQUFLQyxLQUFLLENBQUNGLElBQUFBLGlCQUFRLEVBQUNkLGFBQWFvQixRQUFRUixPQUFPLENBQUMsUUFBUTtRQUNuRSxFQUFFLE9BQU9LLEtBQVU7WUFDakIsT0FBTztRQUNUO1FBRUEsSUFBSSxDQUFDUixTQUFTLENBQUNBLE1BQU1TLElBQUksSUFBSSxDQUFDVCxNQUFNVSxJQUFJLEVBQUU7WUFDeEMseURBQXlEO1lBQ3pELE9BQU87UUFDVCxPQUFPO1lBQ0wsT0FBT1Y7UUFDVDtJQUNGLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUVPLFNBQVNULGFBQ2RvQixNQUFjLEVBQ2QsRUFDRUMsU0FBUyxFQUdWLEdBQUcsQ0FBQyxDQUFDO0lBRU4sT0FBT0EsWUFDSEQsT0FBT1IsT0FBTyxDQUFDViwyQkFBMkIsQ0FBQ00sT0FBT2M7UUFDaEQsT0FBT2YsMkJBQTJCZTtJQUNwQyxLQUNBRixPQUFPUixPQUFPLENBQUNSLHFCQUFxQjtBQUMxQztBQVVPLFNBQVNHLDJCQUEyQmdCLFNBQWlCO0lBQzFELE9BQU9BLFVBQ0pDLEtBQUssQ0FBQyxLQUNOQyxHQUFHLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS0YsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQ2hDRyxJQUFJLENBQUM7QUFDViJ9
    
    }),
    30805: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "simpleReplaceTokens", ({
        enumerable: true,
        get: function() {
            return simpleReplaceTokens;
        }
    }));
    const _isFunction = /*#__PURE__*/ _interop_require_default(__webpack_require__(56644));
    const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
    const _shared = __webpack_require__(71847);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function simpleReplaceTokens(replaceable, item) {
        return replaceable.replace((0, _shared.getWfTokenPattern)(), function(match) {
            const token = (0, _shared.parseTokenJson)(match) || {};
            // @ts-expect-error - TS2339 - Property 'path' does not exist on type '{}'.
            const path = token.path.split('.');
            return (0, _isFunction.default)(item.getIn) ? item.getIn(path, '') : (0, _get.default)(item, path, '');
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJ2xvZGFzaC9pc0Z1bmN0aW9uJztcbmltcG9ydCBnZXQgZnJvbSAnbG9kYXNoL2dldCc7XG5pbXBvcnQge1xuICBnZXRXZlRva2VuUGF0dGVybixcbiAgcGFyc2VUb2tlbkpzb24sXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2NvcmUvdXRpbHMvRW1iZWRVdGlscy9zaGFyZWQnO1xuXG4vLyBzaW1wbGVSZXBsYWNlVG9rZW5zIGlzIGluIGl0J3Mgb3duIGZpbGUgdG8gZml4IGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuXG4vKipcbiAqIFJlcGxhY2VzIHRva2VucyBpbiB0ZXh0IHdpdGggcmVsYXRpbmcgZmllbGQgdmFsdWVzLiBUaGlzIGlzIGEgc2ltcGxlIHZlcnNpb25cbiAqIG9mIHJlcGxhY2VUb2tlbnMuIEl0IGlzIGEgY2xlYW4gZmluZC9yZXBsYWNlIGFuZCBkb2Vzbid0IGluY2x1ZGUgYW55IG90aGVyXG4gKiBsb2dpYy5cbiAqIEBwYXJhbSAge1N0cmluZ30gcmVwbGFjZWFibGUgICBUaGUgc3RyaW5nIHdpdGggV0YgdG9rZW5zXG4gKiBAcGFyYW0gIHtPYmplY3R9IGl0ZW0gICAgICAgICAgVGhlIGl0ZW0gdG8gYmUgdXNlZCB0byByZXBsYWNlIHRoZSB0b2tlbnMgd2l0aFxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICAgIFRoZSBzdHJpbmcgd2l0aCB0aGUgV0YgdG9rZW5zIHJlcGxhY2VkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVSZXBsYWNlVG9rZW5zKFxuICByZXBsYWNlYWJsZTogc3RyaW5nLFxuICBpdGVtOiBSZWNvcmQ8YW55LCBhbnk+XG4pOiBzdHJpbmcge1xuICByZXR1cm4gcmVwbGFjZWFibGUucmVwbGFjZShnZXRXZlRva2VuUGF0dGVybigpLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICBjb25zdCB0b2tlbiA9IHBhcnNlVG9rZW5Kc29uKG1hdGNoKSB8fCB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ3BhdGgnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ3t9Jy5cbiAgICBjb25zdCBwYXRoID0gdG9rZW4ucGF0aC5zcGxpdCgnLicpO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGl0ZW0uZ2V0SW4pID8gaXRlbS5nZXRJbihwYXRoLCAnJykgOiBnZXQoaXRlbSwgcGF0aCwgJycpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJzaW1wbGVSZXBsYWNlVG9rZW5zIiwicmVwbGFjZWFibGUiLCJpdGVtIiwicmVwbGFjZSIsImdldFdmVG9rZW5QYXR0ZXJuIiwibWF0Y2giLCJ0b2tlbiIsInBhcnNlVG9rZW5Kc29uIiwicGF0aCIsInNwbGl0IiwiaXNGdW5jdGlvbiIsImdldEluIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7OytCQWlCZ0JBOzs7ZUFBQUE7OzttRUFqQk87NERBQ1A7d0JBSVQ7Ozs7OztBQVlBLFNBQVNBLG9CQUNkQyxXQUFtQixFQUNuQkMsSUFBc0I7SUFFdEIsT0FBT0QsWUFBWUUsT0FBTyxDQUFDQyxJQUFBQSx5QkFBaUIsS0FBSSxTQUFVQyxLQUFLO1FBQzdELE1BQU1DLFFBQVFDLElBQUFBLHNCQUFjLEVBQUNGLFVBQVUsQ0FBQztRQUN4QywyRUFBMkU7UUFDM0UsTUFBTUcsT0FBT0YsTUFBTUUsSUFBSSxDQUFDQyxLQUFLLENBQUM7UUFDOUIsT0FBT0MsSUFBQUEsbUJBQVUsRUFBQ1IsS0FBS1MsS0FBSyxJQUFJVCxLQUFLUyxLQUFLLENBQUNILE1BQU0sTUFBTUksSUFBQUEsWUFBRyxFQUFDVixNQUFNTSxNQUFNO0lBQ3pFO0FBQ0YifQ==
    
    }),
    29197: (function (__unused_webpack_module, exports) {
    "use strict";
    // Internal useful constants.
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        CLASS_NAME_W_DYN_BIND_EMPTY: function() {
            return CLASS_NAME_W_DYN_BIND_EMPTY;
        },
        COLLECTION_LIST_QUERY_MODES: function() {
            return COLLECTION_LIST_QUERY_MODES;
        },
        COLLECTION_TYPES: function() {
            return COLLECTION_TYPES;
        },
        CONDITION_INVISIBLE_CLASS: function() {
            return CONDITION_INVISIBLE_CLASS;
        },
        DATETIME_FORMAT_OPTIONS: function() {
            return DATETIME_FORMAT_OPTIONS;
        },
        DATE_FORMAT_OPTIONS: function() {
            return DATE_FORMAT_OPTIONS;
        },
        DEFAULT_NESTED_COLLECTION_LIST_LIMIT: function() {
            return DEFAULT_NESTED_COLLECTION_LIST_LIMIT;
        },
        FUTURE: function() {
            return FUTURE;
        },
        MIN_COLLECTION_LIST_OFFSET: function() {
            return MIN_COLLECTION_LIST_OFFSET;
        },
        NON_EXISTING_ITEM_ID: function() {
            return NON_EXISTING_ITEM_ID;
        },
        PAST: function() {
            return PAST;
        },
        QUERY_FILTER_FOR_STATES: function() {
            return QUERY_FILTER_FOR_STATES;
        },
        SCHEDULED_PUBLISH_GRACE_PERIOD_IN_MS: function() {
            return SCHEDULED_PUBLISH_GRACE_PERIOD_IN_MS;
        },
        SCHEDULED_PUBLISH_GRANULARITY_IN_MIN: function() {
            return SCHEDULED_PUBLISH_GRANULARITY_IN_MIN;
        },
        SCHEDULED_PUBLISH_LIMIT_IN_MS: function() {
            return SCHEDULED_PUBLISH_LIMIT_IN_MS;
        },
        SET_FIELD_MAX_ITEMS: function() {
            return SET_FIELD_MAX_ITEMS;
        },
        SHARED_ALLOWED_FIELD_TYPES: function() {
            return SHARED_ALLOWED_FIELD_TYPES;
        },
        TENSES_ENUM: function() {
            return TENSES_ENUM;
        },
        TENSES_TO_HUMAN_PHRASES_MAP: function() {
            return TENSES_TO_HUMAN_PHRASES_MAP;
        },
        TIME_INTERVALS_ENUM: function() {
            return TIME_INTERVALS_ENUM;
        }
    });
    const SECOND = 1000;
    const MINUTE = 60 * SECOND;
    const HOUR = 60 * MINUTE;
    const DAY = 24 * HOUR;
    const YEAR = 365 * DAY;
    const TIME_INTERVALS_ENUM = {
        days: 'days',
        weeks: 'weeks',
        months: 'months',
        years: 'years'
    };
    const FUTURE = 'FUTURE';
    const PAST = 'PAST';
    const TENSES_ENUM = {
        FUTURE,
        PAST
    };
    const TENSES_TO_HUMAN_PHRASES_MAP = {
        FUTURE: 'in the future',
        PAST: 'in the past'
    };
    const CLASS_NAME_W_DYN_BIND_EMPTY = 'w-dyn-bind-empty';
    const CONDITION_INVISIBLE_CLASS = 'w-condition-invisible';
    const NON_EXISTING_ITEM_ID = '000000000000000000000000';
    const QUERY_FILTER_FOR_STATES = {
        ALL: 'ALL',
        ANY: 'ANY'
    };
    const SET_FIELD_MAX_ITEMS = 25;
    const DEFAULT_NESTED_COLLECTION_LIST_LIMIT = 5;
    const COLLECTION_LIST_QUERY_MODES = {
        CURATED: 'curated',
        DYNAMIC: 'dynamic'
    };
    const SCHEDULED_PUBLISH_GRANULARITY_IN_MIN = 5;
    const SCHEDULED_PUBLISH_LIMIT_IN_MS = 5 * YEAR;
    const SCHEDULED_PUBLISH_GRACE_PERIOD_IN_MS = 30 * MINUTE;
    const COLLECTION_TYPES = {
        CATEGORIES: 'CATEGORIES',
        CMS_COLLECTIONS: 'CMS_COLLECTIONS',
        PRODUCTS: 'PRODUCTS',
        SKUS: 'SKUS'
    };
    const MIN_COLLECTION_LIST_OFFSET = 0;
    const SHARED_ALLOWED_FIELD_TYPES = {
        innerHTML: {
            PlainText: 'innerText',
            HighlightedText: 'innerText',
            RichText: 'innerHTML',
            Number: 'innerText',
            Video: 'innerHTML',
            Option: 'innerText',
            Date: 'innerText',
            Phone: 'innerText',
            Email: 'innerText',
            CommercePrice: 'innerHTML',
            Link: 'innerText',
            ImageRef: false,
            FileRef: false,
            ItemRef: false,
            CommercePropValues: 'innerText'
        },
        'style.color': {
            Color: true
        },
        'style.background-color': {
            Color: true
        },
        'style.border-color': {
            Color: true
        },
        'style.background-image': {
            ImageRef: true
        },
        src: [
            'ImageRef'
        ],
        alt: [
            'PlainText',
            'Option',
            'Number',
            'Date',
            'Phone',
            'Email',
            'Video',
            'Link'
        ],
        href: [
            'Phone',
            'Email',
            'Video',
            'Link',
            'FileRef'
        ],
        id: [
            'PlainText'
        ],
        for: [
            'PlainText'
        ],
        value: [
            'Number',
            'PlainText'
        ],
        checked: [
            'Bool'
        ],
        dataWHref: [
            'PlainText',
            'FullSlug'
        ]
    };
    const DATETIME_FORMAT_OPTIONS = [
        'MMMM D, YYYY',
        'MMMM D, YYYY h:mm A',
        'MMMM D, YYYY H:mm',
        'MMM D, YYYY',
        'MMM D, YYYY h:mm A',
        'MMM D, YYYY H:mm',
        'dddd, MMMM D, YYYY',
        'DD MMMM YYYY',
        'DD MMM YYYY',
        'DD MMM YY',
        'D MMMM YYYY',
        'MMM Do, YYYY',
        'MMMM Do, YYYY',
        'DD.MM.YYYY',
        'M/D/YYYY',
        'M.D.YYYY',
        'D/M/YYYY',
        'D.M.YYYY',
        'M/D/YYYY h:mm A',
        'M/D/YYYY H:mm',
        'M.D.YYYY h:mm A',
        'M.D.YYYY H:mm',
        'D/M/YYYY h:mm A',
        'D/M/YYYY H:mm',
        'D.M.YYYY h:mm A',
        'D.M.YYYY H:mm',
        'M/D/YY',
        'M.D.YY',
        'D/M/YY',
        'D.M.YY',
        'M/D/YY h:mm a',
        'M/D/YY H:mm',
        'M.D.YY h:mm a',
        'M.D.YY H:mm',
        'D/M/YY h:mm a',
        'D/M/YY H:mm',
        'D.M.YY h:mm a',
        'D.M.YY H:mm',
        'YYYY-MM-DD',
        'YYYY-MM-DD h:mm a',
        'YYYY-MM-DD H:mm',
        'MMM D',
        'D MMM',
        'MMMM YYYY',
        'MMM YYYY',
        'MM/YYYY',
        'h:mm a',
        'H:mm',
        'D',
        'DD',
        'ddd',
        'dddd',
        'M',
        'MM',
        'MMM',
        'MMMM',
        'YY',
        'YYYY'
    ];
    const DATE_FORMAT_OPTIONS = DATETIME_FORMAT_OPTIONS.filter((format)=>!/[hHmaA]/.test(format));
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    99369: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    // Avoid adding unnecessary code or imports to this file,
    // because it will directly affect the webflow.js bundle size.
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "testCondition", ({
        enumerable: true,
        get: function() {
            return testCondition;
        }
    }));
    const _DynamoConditionUtils = __webpack_require__(95253);
    const _momenttimezone = /*#__PURE__*/ _interop_require_default(__webpack_require__(47636));
    const _SlugUtils = __webpack_require__(82985);
    const _memo = __webpack_require__(23056);
    const _ParamFieldPathUtils = __webpack_require__(68490);
    const _constants = __webpack_require__(29197);
    const _FilterUtils = __webpack_require__(20574);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // inlined from `@packages/systems/core/utils/RecordUtils` to keep bundle size minimal
    const getId = (record)=>{
        return record._id || record.id || (record.get ? record.get('_id', record.get('id')) : null);
    };
    const isDateStringWithoutTime = (dateString)=>/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(dateString);
    const toGraphQLSlug = (originalSlug)=>{
        const slug = handleId(originalSlug);
        return slug === 'id' || (0, _SlugUtils.isDynamoGraphQLFieldSlug)(slug) || // Don't want to namespace field slug when retrieving product inventory data
        slug === 'ecSkuInventoryQuantity' ? slug : (0, _SlugUtils.fieldSlug)(slug);
    };
    const handleId = (slug)=>slug === '_id' ? 'id' : slug;
    const isObj = (x)=>x !== null && typeof x === 'object' && !Array.isArray(x);
    // A simple, non-comprehensive way of detecting Maps and Lists
    const isMap = (x)=>x && Boolean(x['@@__IMMUTABLE_MAP__@@']);
    const isList = (x)=>x && Boolean(x['@@__IMMUTABLE_LIST__@@']);
    const isRecord = (x)=>x && Boolean(x['@@__IMMUTABLE_RECORD__@@']);
    const memoizedToJS = (0, _memo.weakMemo)((imm)=>imm.toJS());
    // This is purposefully an `any`. It avoids about 9 Flow errors below
    // that derive from 1) the impossibility of inferring that many different
    // data types and 2) the challenge of enumerating all the possible ones.
    // `mixed` is not very well suited for this, because it still requires enumeration
    // for types before operating on those values.
    const convertImmutableDataStructure = (value)=>{
        if (isMap(value) || isList(value) || isRecord(value)) {
            return memoizedToJS(value);
        }
        return value;
    };
    const getFieldsFromConditions = (conditions)=>isMap(conditions) ? conditions.get('fields') : conditions.fields;
    const testCondition = ({ item, contextItem, timezone, condition, graphQLSlugs })=>{
        const cleanSlug = graphQLSlugs ? toGraphQLSlug : handleId;
        const plainCondition = convertImmutableDataStructure(condition);
        const plainItem = withCleanedSlugs(convertImmutableDataStructure(item), cleanSlug);
        const conditionData = reifyConditions(plainCondition, contextItem, cleanSlug);
        const conditionFields = (0, _FilterUtils.normalizeConditionFields)(conditionData.fields);
        const itemData = conditionFields.reduce((acc, field)=>{
            const { fieldPath, type } = field;
            const itemFieldValue = (0, _DynamoConditionUtils.getItemFieldValue)(plainItem, fieldPath);
            if (itemFieldValue == null) {
                return acc;
            }
            acc[fieldPath] = castFieldValue(itemFieldValue, type, timezone);
            return acc;
        }, {});
        return (0, _DynamoConditionUtils.test)(itemData, conditionData, timezone);
    };
    const fieldConditionsUpdater = (contextItem, cleanSlug)=>(fields)=>{
            const plainFields = convertImmutableDataStructure(fields);
            // Handles the new data shape of `data.dyn.query.filter.fields`
            if (Array.isArray(fields)) {
                return plainFields.map(reifyQueryField(contextItem, cleanSlug));
            }
            return Object.entries(plainFields).reduce((acc, plainField)=>{
                const [path, item] = reifyCondition(contextItem, cleanSlug)(plainField);
                // @ts-expect-error - TS2538 - Type 'Record<string, any>' cannot be used as an index type.
                acc[path] = item;
                return acc;
            }, {});
        };
    const withCleanedSlugs = (obj, cleanSlug)=>{
        return Object.keys(obj).reduce((objWithCleanSlugs, slug)=>{
            objWithCleanSlugs[cleanSlug(slug)] = obj[slug];
            return objWithCleanSlugs;
        }, {});
    };
    const reifyConditions = (conditions, contextItem, cleanSlug)=>({
            ...conditions,
            fields: fieldConditionsUpdater(contextItem, cleanSlug)(getFieldsFromConditions(conditions))
        });
    const createNewFieldPath = (fieldPath, cleanSlug)=>{
        const itemRefFieldSlug = (0, _ParamFieldPathUtils.getItemRefSlug)(fieldPath);
        const valueFieldSlug = (0, _ParamFieldPathUtils.getValueFieldSlug)(fieldPath);
        return itemRefFieldSlug ? (0, _ParamFieldPathUtils.createFieldPath)(cleanSlug(itemRefFieldSlug), cleanSlug(valueFieldSlug)) : (0, _ParamFieldPathUtils.createFieldPath)(cleanSlug(valueFieldSlug));
    };
    const reifyCondition = (contextItem, cleanSlug)=>(fieldEntry)=>{
            const [fieldPath, operation] = fieldEntry;
            const newFieldPath = createNewFieldPath(fieldPath, cleanSlug);
            const pageItemDataReducer = replacePageItemData(contextItem, cleanSlug);
            return [
                newFieldPath,
                Object.entries(operation).reduce((acc, entry)=>{
                    const [key, value] = entry;
                    return pageItemDataReducer(acc, value, key);
                }, {})
            ];
        };
    const reifyQueryField = (contextItem, cleanSlug)=>(field)=>{
            const { fieldPath, value } = field;
            const newFieldPath = createNewFieldPath(fieldPath, cleanSlug);
            return {
                ...field,
                fieldPath: newFieldPath,
                value: replaceValueBasedOnPageItemData(contextItem, cleanSlug, value)
            };
        };
    const replacePageItemData = (contextItem, cleanSlug)=>(acc, value, key)=>{
            acc[key] = replaceValueBasedOnPageItemData(contextItem, cleanSlug, value);
            return acc;
        };
    const replaceValueBasedOnPageItemData = (contextItem, cleanSlug, value)=>{
        const plainPageItem = convertImmutableDataStructure(contextItem);
        const pageItemId = plainPageItem ? getId(plainPageItem) : null;
        if (typeof value === 'string') {
            if (value === 'DYN_CONTEXT') {
                if (pageItemId) {
                    return pageItemId;
                }
            }
            if (/^DYN_CONTEXT/.test(value)) {
                const dynContextFieldSlug = value.replace(/^DYN_CONTEXT\./, '');
                const dynContextFieldValue = plainPageItem && plainPageItem[cleanSlug(dynContextFieldSlug)];
                const conditionValue = Array.isArray(dynContextFieldValue) ? dynContextFieldValue.map(dynContextFieldValueId) : dynContextFieldValueId(dynContextFieldValue);
                if (plainPageItem) {
                    return conditionValue || _constants.NON_EXISTING_ITEM_ID;
                }
            }
        }
        return value;
    };
    const dynContextFieldValueId = (dynContextFieldValue)=>{
        return isObj(dynContextFieldValue) ? getId(dynContextFieldValue) : dynContextFieldValue;
    };
    const castFieldValue = (fieldValue, fieldType, timezone)=>{
        switch(fieldType){
            case 'Date':
                {
                    // GraphQL api returns date-times as ISO strings and simple dates as YYYY-MM-DD format
                    // We know that fieldValue is a string if the itemType is date
                    const dateString = fieldValue;
                    const dateStringWithoutTime = isDateStringWithoutTime(dateString);
                    return dateStringWithoutTime ? _momenttimezone.default.tz(fieldValue, timezone).toDate() : _momenttimezone.default.utc(dateString).toDate();
                }
            case 'Option':
            case 'ItemRef':
                {
                    return isObj(fieldValue) ? getId(fieldValue) : fieldValue;
                }
            case 'ItemRefSet':
                {
                    return Array.isArray(fieldValue) && fieldValue.length ? Object.values(fieldValue).map((ref)=>{
                        if (typeof ref === 'string') {
                            return {
                                _id: ref
                            };
                        }
                        // @ts-expect-error Unknown type
                        const { id: _, ...restOfRef } = ref;
                        return {
                            ...restOfRef,
                            _id: getId(ref)
                        };
                    }) : null;
                }
            default:
                {
                    return fieldValue;
                }
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    44557: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(99369), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQ29uZGl0aW9uVXRpbHMnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==
    
    }),
    95253: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        EXAMPLE_IMG_URL: function() {
            return EXAMPLE_IMG_URL;
        },
        castConditionValue: function() {
            return castConditionValue;
        },
        castItemValue: function() {
            return castItemValue;
        },
        getItemFieldValue: function() {
            return getItemFieldValue;
        },
        parseDate: function() {
            return parseDate;
        },
        test: function() {
            return test;
        }
    });
    const _momenttimezone = /*#__PURE__*/ _interop_require_default(__webpack_require__(47636));
    const _ParamFieldPathUtils = __webpack_require__(68490);
    const _FilterUtils = __webpack_require__(20574);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const EXAMPLE_IMG_URL = 'https://d3e54v103j8qbb.cloudfront.net/img/image-placeholder.svg';
    const OPERATOR_FNS = {
        eq: function(a, b) {
            return a == b; // eslint-disable-line eqeqeq
        },
        ne: function(a, b) {
            return a != b; // eslint-disable-line eqeqeq
        },
        gt: function(a, b) {
            return a > b;
        },
        lt: function(a, b) {
            return a < b;
        },
        gte: function(a, b) {
            return a >= b;
        },
        lte: function(a, b) {
            return a <= b;
        },
        exists: function(a, b) {
            function getATruthiness() {
                if (a != null) {
                    if (Array.isArray(a)) {
                        return a.length > 0;
                    } else if (typeof a === 'object') {
                        return !('url' in a) || a.url !== EXAMPLE_IMG_URL;
                    } else if (typeof a === 'number') {
                        return !Number.isNaN(a);
                    } else {
                        return true;
                    }
                } else {
                    return false;
                }
            }
            function getBTruthiness() {
                return b === 'yes';
            }
            const aIsTruthy = getATruthiness();
            const bIsTruthy = getBTruthiness();
            return aIsTruthy === bIsTruthy;
        },
        idin: function(a, b) {
            return containsResolver(a, b);
        },
        idnin: function(a, b) {
            return !containsResolver(a, b);
        },
        type: false
    };
    const containsResolver = (a, b)=>{
        if (Array.isArray(a) && typeof b === 'string') {
            // A contains B
            return a.includes(b);
        }
        if (Array.isArray(a) && Array.isArray(b)) {
            // A contains any of B
            return b.some((id)=>a.includes(id));
        }
        if (typeof a === 'string' && Array.isArray(b)) {
            // A equals any of B
            return b.includes(a);
        }
        return false;
    };
    function test(itemData, conditionData, timezone) {
        const conditionFields = (0, _FilterUtils.normalizeConditionFields)(conditionData.fields);
        // We use for..of to exit as early as possible
        for (const conditionField of conditionFields){
            const result = testSingleCondition({
                conditionField,
                itemData,
                timezone
            });
            // if a condition does not pass, we return false as quickly as possible
            if (!result) {
                return false;
            }
        }
        return true;
    }
    function testSingleCondition({ conditionField, itemData, timezone }) {
        const { fieldPath, operatorName, value, type } = conditionField;
        const opFn = OPERATOR_FNS[operatorName];
        if (!opFn) {
            console.warn(`Ignoring unsupported condition operator: ${operatorName}`);
            // The condition "passes" because there is no operation to test
            return true;
        }
        /*
        The renderer send out item data in different forms.
        Here, we first try to retrive the item field value in the current format,
        if that fails, we fall back to the legacy format.
    
        The main difference is in how item references are treated in itemData
        Current: { 'author:name': 'Author Name' }
        Legacy: { author: { name: 'Author Name } }
      */ const itemFieldValue = itemData.hasOwnProperty(fieldPath) ? itemData[fieldPath] : getItemFieldValue(itemData, fieldPath);
        // if field type is available in the condition, we use it to determine the item field type
        // otherwise we use the field value to determine item field type
        const itemFieldType = type ? convertFieldTypeToLegacyItemType(type) : _getLegacyItemType(fieldPath, itemFieldValue);
        const resolvedFieldValue = castItemFieldValue(itemFieldValue, itemFieldType);
        const resolvedConditionValue = castConditionValue(value, operatorName, itemFieldType, timezone);
        return opFn(resolvedFieldValue, resolvedConditionValue);
    }
    function castItemValue({ operator, value, type, timezone }) {
        if (value !== undefined) {
            switch(type){
                case 'Bool':
                    return function() {
                        if (typeof value === 'boolean') {
                            return value;
                        } else if (typeof value === 'string') {
                            // Yes. Some sites have "True"
                            return value.toLowerCase() === 'true';
                        } else {
                            return Boolean(value);
                        }
                    }();
                case 'Number':
                    return parseFloat(value);
                case 'Date':
                    return parseDate({
                        operator,
                        value,
                        timezone
                    });
                default:
                    return value;
            }
        } else {
            return value;
        }
    }
    function castConditionValue(value, op, type, timezone) {
        if (op === 'exists') {
            return value;
        } else {
            return castItemValue({
                operator: op,
                timezone,
                type,
                value
            });
        }
    }
    // TODO: swap with imported constant once OperatorTypes is lifted to dynamo package
    // tech debt tracked in: https://github.com/webflow/webflow/issues/29496
    const OPERATOR_LTE_NAME = 'lte';
    // RegEx Patterns required for `parseDate`
    ///////////////////////////////////////////////
    const NOW_REGEX = /^now$/i;
    // The END_OF_TODAY_REGEX pattern collects up to two groups of matches
    // Group 1: if the string begins with "end of "
    // Group 2: if the string contains "today"
    const END_OF_TODAY_REGEX = /^(end of )?(today)$/i;
    // The DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX pattern is to handle parsing older date filters
    // that depended up on an "excluding today" boolean. It collects two groups
    // Group 1: if the string begins with "end of "
    // Group 2: if the string contains "tomorrow" or "yesterday"
    const DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX = /^(end of )?(tomorrow|yesterday)$/i;
    // The DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX pattern is designed to handle parsing older complex date filters
    // It captures 4 groups
    // Group 1: A string combining time lengths and time intervals
    //   Example: 2 days 17 hours 4 minutes
    // Group 2: A string containing either "ago" or "from now"
    // Group 3: A string containing "starting" with either "now" or "end of"
    // Group 4: A string of either "today", "yesterday" or "tomorrow"
    const DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX = /^((?:\d+ (?:year|quarter|month|week|day|hour|minute|second)s? )+)(ago|from now)(?: (?:starting (?:now|(?:(end of )?(today|yesterday|tomorrow)))))?$/i;
    // The RELATIVE_TIME_COMPLEX_REGEX pattern collects two groups of matches
    // Group 1: A string combining time lengths and time intervals.
    //   Example: 2 days 17 hours 4 minutes
    // Group 2: a string of either 'future' or 'past'
    const RELATIVE_TIME_COMPLEX_REGEX = /^((?:\d+ (?:year|quarter|month|week|day|hour|minute|second)s? )+)in the (future|past)$/i;
    // The FULL_TIME_LENGTH_INTERVAL_STRING_REGEX pattern collects all the matches found in
    // Group 1 of RELATIVE_TIME_COMPLEX_REGEX and returns them as an array
    //   Example: '2 days 17 hours 4 minutes' returns a matches array
    //   of ['2 days', '17 hours', '4 minutes']
    const FULL_TIME_LENGTH_INTERVAL_STRING_REGEX = /\d+ (?:year|quarter|month|week|day|hour|minute|second)s?/gi;
    const isDeprecatedDatePattern = (str)=>DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX.test(str) || DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX.test(str);
    function handleDeprecatedParseDate({ value, timezone, momentNowUtc }) {
        function getToday() {
            return momentNowUtc.tz(timezone).startOf('day');
        }
        function getEndOfToday() {
            return momentNowUtc.tz(timezone).endOf('day');
        }
        function getNow() {
            return momentNowUtc.tz(timezone);
        }
        const simpleResults = value.match(DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX);
        if (simpleResults) {
            // handle deprecated end of tomorrow/yesterday scenarios
            const [, endOf, relativeDate] = simpleResults;
            const getStart = endOf ? getEndOfToday : getToday;
            if (relativeDate === 'tomorrow') {
                return getStart().add(1, 'day').toDate();
            }
            if (relativeDate === 'yesterday') {
                return getStart().subtract(1, 'day').toDate();
            }
        }
        const complexResults = value.match(DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX);
        if (complexResults) {
            // handle deprecated complex results
            const [, values, mode, endOf, relativeDate] = complexResults;
            const getStart = endOf ? getEndOfToday : getToday;
            let time;
            switch(relativeDate){
                case 'today':
                    time = getStart();
                    break;
                case 'tomorrow':
                    time = getStart().add(1, 'day');
                    break;
                case 'yesterday':
                    time = getStart().subtract(1, 'day');
                    break;
                default:
                    time = getNow();
                    break;
            }
            // @ts-expect-error - TS18048 - 'values' is possibly 'undefined'.
            const timeLengthIntervalItems = values.match(FULL_TIME_LENGTH_INTERVAL_STRING_REGEX);
            if (!timeLengthIntervalItems) {
                return null;
            }
            const method = mode === 'from now' ? 'add' : 'subtract';
            // Loop through each length-interval item, ex '14 days', and mutate `time` with each one
            timeLengthIntervalItems.forEach((item)=>{
                const [length, interval] = item.split(' ');
                // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
                time[method](parseInt(length, 10), interval);
            });
            return time.toDate();
        }
    }
    function parseDate({ operator, value, timezone = 'UTC', nowUtcString }) {
        const momentNowUtc = nowUtcString ? _momenttimezone.default.utc(nowUtcString) : _momenttimezone.default.utc();
        function getToday() {
            return momentNowUtc.tz(timezone).startOf('day');
        }
        function getEndOfToday() {
            return momentNowUtc.tz(timezone).endOf('day');
        }
        function getNow() {
            return momentNowUtc.tz(timezone);
        }
        const stringValue = String(value).toLowerCase();
        if (NOW_REGEX.test(stringValue)) {
            return getNow().toDate();
        }
        // Capture and handle deprecated date patterns, this code will/should eventually be removed
        if (isDeprecatedDatePattern(stringValue)) {
            return handleDeprecatedParseDate({
                value: stringValue,
                timezone,
                momentNowUtc
            });
        }
        const simpleResults = stringValue.match(END_OF_TODAY_REGEX);
        if (simpleResults) {
            const [, endOf] = simpleResults;
            return endOf ? getEndOfToday().toDate() : getToday().toDate();
        }
        const complexResults = stringValue.match(RELATIVE_TIME_COMPLEX_REGEX);
        if (complexResults) {
            const [, fullTimeLengthIntervalString, tense] = complexResults;
            // @ts-expect-error - TS18048 - 'fullTimeLengthIntervalString' is possibly 'undefined'.
            const timeLengthIntervalItems = fullTimeLengthIntervalString.match(FULL_TIME_LENGTH_INTERVAL_STRING_REGEX);
            if (!timeLengthIntervalItems) {
                return null;
            }
            // We want LTE operators to include everything up to the end of the day
            const getStart = operator && operator === OPERATOR_LTE_NAME ? getEndOfToday : getToday;
            const TENSE_METHODS_MAP = {
                future: 'add',
                past: 'subtract'
            };
            const tenseMethod = TENSE_METHODS_MAP[tense];
            // This loops through each item and accumulatively adds or subtracts
            // the length and intervals from today's date
            const reducedDateTime = timeLengthIntervalItems.reduce((accumulatedMoment, item)=>{
                // `item` is a string in the shape of "2 days" or "14 years"
                const [length, interval] = item.split(' ');
                return accumulatedMoment[tenseMethod](// @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
                parseInt(length, 10), interval);
            }, getStart());
            return reducedDateTime.toDate();
        }
        // Else, fall back on standard ISO 8601 parsing:
        const isoMoment = _momenttimezone.default.utc(value, _momenttimezone.default.ISO_8601).tz(timezone);
        if (!isoMoment || !isoMoment.isValid()) {
            return null;
        }
        // Ok!
        return isoMoment.toDate();
    }
    function castItemFieldValue(fieldValue, fieldType) {
        switch(fieldType){
            case 'CommercePrice':
                {
                    // typeof null equals 'object' so we need to guard against that
                    return fieldValue !== null && typeof fieldValue === 'object' && typeof fieldValue.value === 'number' ? fieldValue.value / 100 : NaN;
                }
            case 'ItemRef':
                {
                    return fieldValue !== null && typeof fieldValue === 'object' ? fieldValue._id : fieldValue;
                }
            case 'ItemRefSet':
                {
                    return Array.isArray(fieldValue) ? fieldValue.map(function(itemRef) {
                        return itemRef._id;
                    }) : [];
                }
            case 'Option':
                {
                    return fieldValue !== null && typeof fieldValue === 'object' ? fieldValue.id : fieldValue;
                }
            case 'Number':
                {
                    return fieldValue === null ? NaN : fieldValue;
                }
            default:
                {
                    return fieldValue;
                }
        }
    }
    function getItemFieldValue(itemData, fieldPath) {
        const itemRefSlug = (0, _ParamFieldPathUtils.getItemRefSlug)(fieldPath);
        const valueFieldSlug = (0, _ParamFieldPathUtils.getValueFieldSlug)(fieldPath);
        return itemRefSlug ? itemData[itemRefSlug] && itemData[itemRefSlug][valueFieldSlug] : itemData[valueFieldSlug];
    }
    /*
     * Converts CMS Field Type into legacy item types used in this file
     *
     * This function maps Field types to the appropriate legacy field type.
     *
     * The legacy field types are `Bool`, `CommercePrice`, `Date`, `Id`,
     * `ImageRef`, `ItemRef`, `ItemRefSet`, `Number`, `Option` and `String`.
     *
     * Of these, only `Bool`, `CommercePrice`, `Date`, `ItemRef`,
     * `ItemRefSet`, `Number` and `Option` are consequential,
     * because condition and item field values are cast based on them
     * in `castConditionValue` and `castItemValue`.
     */ function convertFieldTypeToLegacyItemType(fieldType) {
        switch(fieldType){
            case 'Bool':
            case 'CommercePrice':
            case 'Date':
            case 'ImageRef':
            case 'ItemRef':
            case 'ItemRefSet':
            case 'Number':
            case 'Option':
            case 'Set':
                {
                    return fieldType;
                }
            case 'FileRef':
            case 'Video':
                {
                    return 'ImageRef';
                }
            case 'Email':
            case 'Phone':
            case 'PlainText':
            case 'RichText':
            case 'Link':
                {
                    return 'String';
                }
            default:
                {
                    return 'String';
                }
        }
    }
    /*
     * LEGACY function that derives the field type from field name and value.
     *
     * This way of deriving field type is only used with the Legacy Renderer,
     * where the field type is not added to the associated condition data.
     */ function _getLegacyItemType(name, value) {
        if (name === '_id') {
            return 'Id';
        } else {
            switch(typeof value){
                case 'number':
                    return 'Number';
                case 'boolean':
                    return 'Bool';
                case 'object':
                    return function() {
                        if (value) {
                            if (value instanceof Date) {
                                return 'Date';
                            } else if ('_id' in value && '_cid' in value) {
                                return 'ItemRef';
                            } else if (Array.isArray(value)) {
                                // Do not need to worry about `Set` fields here,
                                // because this function is used only for legacy conditions.
                                return 'ItemRefSet';
                            } else if ('url' in value) {
                                // technically this could be a video as well; we use 'ImageRef' as a stand-in for 'Asset'-type
                                return 'ImageRef';
                            } else if ('value' in value && 'unit' in value) {
                                return 'CommercePrice';
                            } else {
                                return 'Option';
                            }
                        } else {
                            return 'Option';
                        }
                    }();
                default:
                    return 'String';
            }
        }
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    82688: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        formatEmail: function() {
            return formatEmail;
        },
        formatNumber: function() {
            return formatNumber;
        },
        formatPhone: function() {
            return formatPhone;
        }
    });
    function formatNumber(n, formatType) {
        if (typeof n === 'number') {
            const precision = formatType === '' || formatType === 'none' ? NaN : Number(formatType);
            if (!isNaN(precision)) {
                return n.toFixed(precision);
            } else {
                return String(n);
            }
        } else {
            return '';
        }
    }
    function formatEmail(email, subject, property) {
        const prefix = property === 'href' ? 'mailto:' : '';
        if (email && subject) {
            return prefix + email + '?subject=' + subject;
        } else if (email) {
            return prefix + email;
        } else {
            return null;
        }
    }
    function formatPhone(phone, property) {
        if (property === 'href') {
            let tel = phone ? phone.replace(/\s/g, '') : '';
            if (/\d/.test(tel)) {
                // Create a map to replace phonewords with the proper numbers
                const keypadMap = [
                    [
                        /a|b|c/gi,
                        2
                    ],
                    [
                        /d|e|f/gi,
                        3
                    ],
                    [
                        /g|h|i/gi,
                        4
                    ],
                    [
                        /j|k|l/gi,
                        5
                    ],
                    [
                        /m|n|o/gi,
                        6
                    ],
                    [
                        /p|q|r|s/gi,
                        7
                    ],
                    [
                        /t|u|v/gi,
                        8
                    ],
                    [
                        /w|x|y|z/gi,
                        9
                    ]
                ];
                keypadMap.forEach(([key, value])=>{
                    tel = tel.replace(key, value.toString());
                });
            } else {
                phone = '#';
            }
            phone = /\d/.test(tel) ? 'tel:' + tel : '#';
        }
        return phone;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmb3JtYXROdW1iZXIobjogbnVtYmVyLCBmb3JtYXRUeXBlOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgaWYgKHR5cGVvZiBuID09PSAnbnVtYmVyJykge1xuICAgIGNvbnN0IHByZWNpc2lvbiA9XG4gICAgICBmb3JtYXRUeXBlID09PSAnJyB8fCBmb3JtYXRUeXBlID09PSAnbm9uZScgPyBOYU4gOiBOdW1iZXIoZm9ybWF0VHlwZSk7XG5cbiAgICBpZiAoIWlzTmFOKHByZWNpc2lvbikpIHtcbiAgICAgIHJldHVybiBuLnRvRml4ZWQocHJlY2lzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0cmluZyhuKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8vIEZvcm1hdCBlbWFpbCBkZXBlbmRpbmcgb24gdGhlIGJpbmRpbmcgcHJvcGVydHkgYmVpbmcgYW4gaHJlZiBhbmQgaGF2aW5nIGEgc3ViamVjdFxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVtYWlsKGVtYWlsOiBzdHJpbmcsIHN1YmplY3Q6IHN0cmluZywgcHJvcGVydHk6IHN0cmluZykge1xuICBjb25zdCBwcmVmaXggPSBwcm9wZXJ0eSA9PT0gJ2hyZWYnID8gJ21haWx0bzonIDogJyc7XG4gIGlmIChlbWFpbCAmJiBzdWJqZWN0KSB7XG4gICAgcmV0dXJuIHByZWZpeCArIGVtYWlsICsgJz9zdWJqZWN0PScgKyBzdWJqZWN0O1xuICB9IGVsc2UgaWYgKGVtYWlsKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIGVtYWlsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8vIEZvcm1hdCBwaG9uZSBkZXBlbmRpbmcgb24gdGhlIGJpbmRpbmcgcHJvcGVydHkgYmVpbmcgYW4gaHJlZiBhbmQgaGF2aW5nIGEgc3ViamVjdFxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFBob25lKHBob25lOiBzdHJpbmcsIHByb3BlcnR5OiBzdHJpbmcpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnaHJlZicpIHtcbiAgICBsZXQgdGVsID0gcGhvbmUgPyBwaG9uZS5yZXBsYWNlKC9cXHMvZywgJycpIDogJyc7XG4gICAgaWYgKC9cXGQvLnRlc3QodGVsKSkge1xuICAgICAgLy8gQ3JlYXRlIGEgbWFwIHRvIHJlcGxhY2UgcGhvbmV3b3JkcyB3aXRoIHRoZSBwcm9wZXIgbnVtYmVyc1xuICAgICAgY29uc3Qga2V5cGFkTWFwOiBBcnJheTxbUmVnRXhwLCBudW1iZXJdPiA9IFtcbiAgICAgICAgWy9hfGJ8Yy9naSwgMl0sXG4gICAgICAgIFsvZHxlfGYvZ2ksIDNdLFxuICAgICAgICBbL2d8aHxpL2dpLCA0XSxcbiAgICAgICAgWy9qfGt8bC9naSwgNV0sXG4gICAgICAgIFsvbXxufG8vZ2ksIDZdLFxuICAgICAgICBbL3B8cXxyfHMvZ2ksIDddLFxuICAgICAgICBbL3R8dXx2L2dpLCA4XSxcbiAgICAgICAgWy93fHh8eXx6L2dpLCA5XSxcbiAgICAgIF07XG4gICAgICBrZXlwYWRNYXAuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIHRlbCA9IHRlbC5yZXBsYWNlKGtleSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGhvbmUgPSAnIyc7XG4gICAgfVxuXG4gICAgcGhvbmUgPSAvXFxkLy50ZXN0KHRlbCkgPyAndGVsOicgKyB0ZWwgOiAnIyc7XG4gIH1cbiAgcmV0dXJuIHBob25lO1xufVxuIl0sIm5hbWVzIjpbImZvcm1hdEVtYWlsIiwiZm9ybWF0TnVtYmVyIiwiZm9ybWF0UGhvbmUiLCJuIiwiZm9ybWF0VHlwZSIsInByZWNpc2lvbiIsIk5hTiIsIk51bWJlciIsImlzTmFOIiwidG9GaXhlZCIsIlN0cmluZyIsImVtYWlsIiwic3ViamVjdCIsInByb3BlcnR5IiwicHJlZml4IiwicGhvbmUiLCJ0ZWwiLCJyZXBsYWNlIiwidGVzdCIsImtleXBhZE1hcCIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWdCZ0JBLFdBQVc7ZUFBWEE7O0lBaEJBQyxZQUFZO2VBQVpBOztJQTRCQUMsV0FBVztlQUFYQTs7O0FBNUJULFNBQVNELGFBQWFFLENBQVMsRUFBRUMsVUFBMkI7SUFDakUsSUFBSSxPQUFPRCxNQUFNLFVBQVU7UUFDekIsTUFBTUUsWUFDSkQsZUFBZSxNQUFNQSxlQUFlLFNBQVNFLE1BQU1DLE9BQU9IO1FBRTVELElBQUksQ0FBQ0ksTUFBTUgsWUFBWTtZQUNyQixPQUFPRixFQUFFTSxPQUFPLENBQUNKO1FBQ25CLE9BQU87WUFDTCxPQUFPSyxPQUFPUDtRQUNoQjtJQUNGLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUdPLFNBQVNILFlBQVlXLEtBQWEsRUFBRUMsT0FBZSxFQUFFQyxRQUFnQjtJQUMxRSxNQUFNQyxTQUFTRCxhQUFhLFNBQVMsWUFBWTtJQUNqRCxJQUFJRixTQUFTQyxTQUFTO1FBQ3BCLE9BQU9FLFNBQVNILFFBQVEsY0FBY0M7SUFDeEMsT0FBTyxJQUFJRCxPQUFPO1FBQ2hCLE9BQU9HLFNBQVNIO0lBQ2xCLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUdPLFNBQVNULFlBQVlhLEtBQWEsRUFBRUYsUUFBZ0I7SUFDekQsSUFBSUEsYUFBYSxRQUFRO1FBQ3ZCLElBQUlHLE1BQU1ELFFBQVFBLE1BQU1FLE9BQU8sQ0FBQyxPQUFPLE1BQU07UUFDN0MsSUFBSSxLQUFLQyxJQUFJLENBQUNGLE1BQU07WUFDbEIsNkRBQTZEO1lBQzdELE1BQU1HLFlBQXFDO2dCQUN6QztvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBYTtpQkFBRTtnQkFDaEI7b0JBQUM7b0JBQVc7aUJBQUU7Z0JBQ2Q7b0JBQUM7b0JBQWE7aUJBQUU7YUFDakI7WUFDREEsVUFBVUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsS0FBS0MsTUFBTTtnQkFDN0JOLE1BQU1BLElBQUlDLE9BQU8sQ0FBQ0ksS0FBS0MsTUFBTUMsUUFBUTtZQUN2QztRQUNGLE9BQU87WUFDTFIsUUFBUTtRQUNWO1FBRUFBLFFBQVEsS0FBS0csSUFBSSxDQUFDRixPQUFPLFNBQVNBLE1BQU07SUFDMUM7SUFDQSxPQUFPRDtBQUNUIn0=
    
    }),
    4880: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        convertConditionFieldsFromObjectToArray: function() {
            return convertConditionFieldsFromObjectToArray;
        },
        normalizeConditionFields: function() {
            return normalizeConditionFields;
        }
    });
    const _utils = __webpack_require__(1242);
    const convertConditionFieldsFromObjectToArray = (fields)=>{
        const mapper = (fieldPath)=>{
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            const type = fields[fieldPath].type;
            // @ts-expect-error - TS2769 - No overload matches this call.
            return Object.entries(fields[fieldPath]).reduce((conditionFields, [operatorName, value])=>{
                if (operatorName === 'type') {
                    return conditionFields;
                }
                conditionFields.push({
                    fieldPath,
                    operatorName,
                    value,
                    type
                });
                return conditionFields;
            }, []);
        };
        return (0, _utils.flatMap)(mapper)(Object.keys(fields));
    };
    const normalizeConditionFields = (fields = [])=>{
        if (Array.isArray(fields)) {
            return fields;
        }
        return convertConditionFieldsFromObjectToArray(fields);
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZpbHRlclV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtcbiAgQ29uZGl0aW9uc1dpdGhUeXBlVCxcbiAgRGVwcmVjYXRlZENvbmRpdGlvbnNULFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9keW5hbW8vdHlwZXMnO1xuaW1wb3J0IHtmbGF0TWFwfSBmcm9tICdAcGFja2FnZXMvdXRpbGl0aWVzL2ZwL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGNvbnZlcnRDb25kaXRpb25GaWVsZHNGcm9tT2JqZWN0VG9BcnJheSA9IChcbiAgZmllbGRzOiBEZXByZWNhdGVkQ29uZGl0aW9uc1Rcbik6IENvbmRpdGlvbnNXaXRoVHlwZVQgPT4ge1xuICBjb25zdCBtYXBwZXIgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBDb25kaXRpb25zV2l0aFR5cGVUID0+IHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyNTMyIC0gT2JqZWN0IGlzIHBvc3NpYmx5ICd1bmRlZmluZWQnLlxuICAgIGNvbnN0IHR5cGUgPSBmaWVsZHNbZmllbGRQYXRoXS50eXBlO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjc2OSAtIE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhmaWVsZHNbZmllbGRQYXRoXSkucmVkdWNlPENvbmRpdGlvbnNXaXRoVHlwZVQ+KFxuICAgICAgKGNvbmRpdGlvbkZpZWxkcywgW29wZXJhdG9yTmFtZSwgdmFsdWVdOiBbc3RyaW5nLCB1bmtub3duXSkgPT4ge1xuICAgICAgICBpZiAob3BlcmF0b3JOYW1lID09PSAndHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gY29uZGl0aW9uRmllbGRzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZGl0aW9uRmllbGRzLnB1c2goe2ZpZWxkUGF0aCwgb3BlcmF0b3JOYW1lLCB2YWx1ZSwgdHlwZX0pO1xuXG4gICAgICAgIHJldHVybiBjb25kaXRpb25GaWVsZHM7XG4gICAgICB9LFxuICAgICAgW11cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBmbGF0TWFwKG1hcHBlcikoT2JqZWN0LmtleXMoZmllbGRzKSk7XG59O1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplQ29uZGl0aW9uRmllbGRzID0gKFxuICBmaWVsZHM6IERlcHJlY2F0ZWRDb25kaXRpb25zVCB8IENvbmRpdGlvbnNXaXRoVHlwZVQgPSBbXVxuKTogQ29uZGl0aW9uc1dpdGhUeXBlVCA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGZpZWxkcykpIHtcbiAgICByZXR1cm4gZmllbGRzO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRDb25kaXRpb25GaWVsZHNGcm9tT2JqZWN0VG9BcnJheShmaWVsZHMpO1xufTtcbiJdLCJuYW1lcyI6WyJjb252ZXJ0Q29uZGl0aW9uRmllbGRzRnJvbU9iamVjdFRvQXJyYXkiLCJub3JtYWxpemVDb25kaXRpb25GaWVsZHMiLCJmaWVsZHMiLCJtYXBwZXIiLCJmaWVsZFBhdGgiLCJ0eXBlIiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsImNvbmRpdGlvbkZpZWxkcyIsIm9wZXJhdG9yTmFtZSIsInZhbHVlIiwicHVzaCIsImZsYXRNYXAiLCJrZXlzIiwiQXJyYXkiLCJpc0FycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQU1hQSx1Q0FBdUM7ZUFBdkNBOztJQXlCQUMsd0JBQXdCO2VBQXhCQTs7O3VCQTNCUztBQUVmLE1BQU1ELDBDQUEwQyxDQUNyREU7SUFFQSxNQUFNQyxTQUFTLENBQUNDO1FBQ2QsOERBQThEO1FBQzlELE1BQU1DLE9BQU9ILE1BQU0sQ0FBQ0UsVUFBVSxDQUFDQyxJQUFJO1FBRW5DLDZEQUE2RDtRQUM3RCxPQUFPQyxPQUFPQyxPQUFPLENBQUNMLE1BQU0sQ0FBQ0UsVUFBVSxFQUFFSSxNQUFNLENBQzdDLENBQUNDLGlCQUFpQixDQUFDQyxjQUFjQyxNQUF5QjtZQUN4RCxJQUFJRCxpQkFBaUIsUUFBUTtnQkFDM0IsT0FBT0Q7WUFDVDtZQUVBQSxnQkFBZ0JHLElBQUksQ0FBQztnQkFBQ1I7Z0JBQVdNO2dCQUFjQztnQkFBT047WUFBSTtZQUUxRCxPQUFPSTtRQUNULEdBQ0EsRUFBRTtJQUVOO0lBRUEsT0FBT0ksSUFBQUEsY0FBTyxFQUFDVixRQUFRRyxPQUFPUSxJQUFJLENBQUNaO0FBQ3JDO0FBRU8sTUFBTUQsMkJBQTJCLENBQ3RDQyxTQUFzRCxFQUFFO0lBRXhELElBQUlhLE1BQU1DLE9BQU8sQ0FBQ2QsU0FBUztRQUN6QixPQUFPQTtJQUNUO0lBRUEsT0FBT0Ysd0NBQXdDRTtBQUNqRCJ9
    
    }),
    20574: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(4880), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vRmlsdGVyVXRpbHMnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==
    
    }),
    68490: (function (__unused_webpack_module, exports) {
    "use strict";
    /**
     * These utils are for handling field paths in node params (DynList filters and CondVis).
     * For basic fields the fieldPath is currently just the field slug. For fields of an
     * item-reference the fieldPaths are for example `author:post` (separated with SEPARATOR).
     *
     * Encapsulating the internals of fieldPath inside these utils it is easier to refactor the
     * structure of a fieldPath if needed.
     */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        createFieldPath: function() {
            return createFieldPath;
        },
        fieldPathsEqual: function() {
            return fieldPathsEqual;
        },
        getItemRefSlug: function() {
            return getItemRefSlug;
        },
        getValueFieldSlug: function() {
            return getValueFieldSlug;
        },
        isEmptyFieldPath: function() {
            return isEmptyFieldPath;
        },
        isFauxDynContextField: function() {
            return isFauxDynContextField;
        },
        isFieldOfItemRef: function() {
            return isFieldOfItemRef;
        }
    });
    const SEPARATOR = ':';
    const EMPTY_STRING = '';
    const isFieldOfItemRef = (fieldPath)=>fieldPath.indexOf(SEPARATOR) !== -1;
    const getValueFieldSlug = (fieldPath)=>{
        const splitPath = fieldPath.split(SEPARATOR);
        // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
        return splitPath[splitPath.length - 1];
    };
    const getItemRefSlug = (fieldPath)=>{
        if (isFieldOfItemRef(fieldPath)) {
            const splitPath = fieldPath.split(SEPARATOR);
            // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string | null'.
            return splitPath[0];
        }
        return null;
    };
    const createFieldPath = (...fieldSlugs)=>fieldSlugs.join(SEPARATOR);
    const isEmptyFieldPath = (a)=>a === EMPTY_STRING;
    const fieldPathsEqual = (a, b)=>a === b;
    const isFauxDynContextField = (fieldPath)=>!isFieldOfItemRef(fieldPath) && getValueFieldSlug(fieldPath) === '_id';
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlc2UgdXRpbHMgYXJlIGZvciBoYW5kbGluZyBmaWVsZCBwYXRocyBpbiBub2RlIHBhcmFtcyAoRHluTGlzdCBmaWx0ZXJzIGFuZCBDb25kVmlzKS5cbiAqIEZvciBiYXNpYyBmaWVsZHMgdGhlIGZpZWxkUGF0aCBpcyBjdXJyZW50bHkganVzdCB0aGUgZmllbGQgc2x1Zy4gRm9yIGZpZWxkcyBvZiBhblxuICogaXRlbS1yZWZlcmVuY2UgdGhlIGZpZWxkUGF0aHMgYXJlIGZvciBleGFtcGxlIGBhdXRob3I6cG9zdGAgKHNlcGFyYXRlZCB3aXRoIFNFUEFSQVRPUikuXG4gKlxuICogRW5jYXBzdWxhdGluZyB0aGUgaW50ZXJuYWxzIG9mIGZpZWxkUGF0aCBpbnNpZGUgdGhlc2UgdXRpbHMgaXQgaXMgZWFzaWVyIHRvIHJlZmFjdG9yIHRoZVxuICogc3RydWN0dXJlIG9mIGEgZmllbGRQYXRoIGlmIG5lZWRlZC5cbiAqL1xuXG5jb25zdCBTRVBBUkFUT1IgPSAnOic7XG5jb25zdCBFTVBUWV9TVFJJTkcgPSAnJztcblxuZXhwb3J0IGNvbnN0IGlzRmllbGRPZkl0ZW1SZWYgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBib29sZWFuID0+XG4gIGZpZWxkUGF0aC5pbmRleE9mKFNFUEFSQVRPUikgIT09IC0xO1xuXG5leHBvcnQgY29uc3QgZ2V0VmFsdWVGaWVsZFNsdWcgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBzcGxpdFBhdGggPSBmaWVsZFBhdGguc3BsaXQoU0VQQVJBVE9SKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjMyMiAtIFR5cGUgJ3N0cmluZyB8IHVuZGVmaW5lZCcgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnc3RyaW5nJy5cbiAgcmV0dXJuIHNwbGl0UGF0aFtzcGxpdFBhdGgubGVuZ3RoIC0gMV07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SXRlbVJlZlNsdWcgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKGlzRmllbGRPZkl0ZW1SZWYoZmllbGRQYXRoKSkge1xuICAgIGNvbnN0IHNwbGl0UGF0aCA9IGZpZWxkUGF0aC5zcGxpdChTRVBBUkFUT1IpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMjIgLSBUeXBlICdzdHJpbmcgfCB1bmRlZmluZWQnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ3N0cmluZyB8IG51bGwnLlxuICAgIHJldHVybiBzcGxpdFBhdGhbMF07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRmllbGRQYXRoID0gKC4uLmZpZWxkU2x1Z3M6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcgPT5cbiAgZmllbGRTbHVncy5qb2luKFNFUEFSQVRPUik7XG5cbmV4cG9ydCBjb25zdCBpc0VtcHR5RmllbGRQYXRoID0gKGE6IHN0cmluZyk6IGJvb2xlYW4gPT4gYSA9PT0gRU1QVFlfU1RSSU5HO1xuXG5leHBvcnQgY29uc3QgZmllbGRQYXRoc0VxdWFsID0gKGE6IHN0cmluZywgYjogc3RyaW5nKTogYm9vbGVhbiA9PiBhID09PSBiO1xuXG5leHBvcnQgY29uc3QgaXNGYXV4RHluQ29udGV4dEZpZWxkID0gKGZpZWxkUGF0aDogc3RyaW5nKSA9PlxuICAhaXNGaWVsZE9mSXRlbVJlZihmaWVsZFBhdGgpICYmIGdldFZhbHVlRmllbGRTbHVnKGZpZWxkUGF0aCkgPT09ICdfaWQnO1xuIl0sIm5hbWVzIjpbImNyZWF0ZUZpZWxkUGF0aCIsImZpZWxkUGF0aHNFcXVhbCIsImdldEl0ZW1SZWZTbHVnIiwiZ2V0VmFsdWVGaWVsZFNsdWciLCJpc0VtcHR5RmllbGRQYXRoIiwiaXNGYXV4RHluQ29udGV4dEZpZWxkIiwiaXNGaWVsZE9mSXRlbVJlZiIsIlNFUEFSQVRPUiIsIkVNUFRZX1NUUklORyIsImZpZWxkUGF0aCIsImluZGV4T2YiLCJzcGxpdFBhdGgiLCJzcGxpdCIsImxlbmd0aCIsImZpZWxkU2x1Z3MiLCJqb2luIiwiYSIsImIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7Ozs7Ozs7Ozs7O0lBdUJZQSxlQUFlO2VBQWZBOztJQUtBQyxlQUFlO2VBQWZBOztJQWRBQyxjQUFjO2VBQWRBOztJQU5BQyxpQkFBaUI7ZUFBakJBOztJQWtCQUMsZ0JBQWdCO2VBQWhCQTs7SUFJQUMscUJBQXFCO2VBQXJCQTs7SUF6QkFDLGdCQUFnQjtlQUFoQkE7OztBQUhiLE1BQU1DLFlBQVk7QUFDbEIsTUFBTUMsZUFBZTtBQUVkLE1BQU1GLG1CQUFtQixDQUFDRyxZQUMvQkEsVUFBVUMsT0FBTyxDQUFDSCxlQUFlLENBQUM7QUFFN0IsTUFBTUosb0JBQW9CLENBQUNNO0lBQ2hDLE1BQU1FLFlBQVlGLFVBQVVHLEtBQUssQ0FBQ0w7SUFDbEMsNEZBQTRGO0lBQzVGLE9BQU9JLFNBQVMsQ0FBQ0EsVUFBVUUsTUFBTSxHQUFHLEVBQUU7QUFDeEM7QUFFTyxNQUFNWCxpQkFBaUIsQ0FBQ087SUFDN0IsSUFBSUgsaUJBQWlCRyxZQUFZO1FBQy9CLE1BQU1FLFlBQVlGLFVBQVVHLEtBQUssQ0FBQ0w7UUFDbEMsbUdBQW1HO1FBQ25HLE9BQU9JLFNBQVMsQ0FBQyxFQUFFO0lBQ3JCO0lBQ0EsT0FBTztBQUNUO0FBRU8sTUFBTVgsa0JBQWtCLENBQUMsR0FBR2MsYUFDakNBLFdBQVdDLElBQUksQ0FBQ1I7QUFFWCxNQUFNSCxtQkFBbUIsQ0FBQ1ksSUFBdUJBLE1BQU1SO0FBRXZELE1BQU1QLGtCQUFrQixDQUFDZSxHQUFXQyxJQUF1QkQsTUFBTUM7QUFFakUsTUFBTVosd0JBQXdCLENBQUNJLFlBQ3BDLENBQUNILGlCQUFpQkcsY0FBY04sa0JBQWtCTSxlQUFlIn0=
    
    }),
    19336: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        applyConditionToNode: function() {
            return applyConditionToNode;
        },
        removeWDynBindEmptyClass: function() {
            return removeWDynBindEmptyClass;
        },
        walkDOM: function() {
            return walkDOM;
        }
    });
    const _constants = __webpack_require__(29197);
    const _ConditionUtils = __webpack_require__(44557);
    const removeClass = (node, className)=>{
        if (node.classList.contains(className)) {
            node.classList.remove(className);
            if (node.classList.length === 0) {
                node.removeAttribute('class');
            }
        }
    };
    const removeWDynBindEmptyClass = (node)=>removeClass(node, _constants.CLASS_NAME_W_DYN_BIND_EMPTY);
    const addConditionalVisibilityClass = (node)=>{
        node.classList.add(_constants.CONDITION_INVISIBLE_CLASS);
    };
    const removeConditionalVisibilityClass = (node)=>removeClass(node, _constants.CONDITION_INVISIBLE_CLASS);
    const applyConditionToNode = (node, item, conditionData, graphQLSlugs = false)=>{
        if (!conditionData) {
            return;
        }
        const { condition, timezone } = conditionData;
        if (item) {
            const isVisible = (0, _ConditionUtils.testCondition)({
                item,
                contextItem: null,
                timezone,
                condition,
                graphQLSlugs
            });
            if (isVisible) {
                removeConditionalVisibilityClass(node);
            } else {
                addConditionalVisibilityClass(node);
            }
        }
    };
    function walkDOM(el, fn) {
        fn(el);
        if (!el || !el.children) {
            return el;
        }
        const children = Array.from(el.children);
        if (!children.length) {
            return el;
        }
        children.forEach((child)=>walkDOM(child, fn));
        return el;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbmRlcmluZ1V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENMQVNTX05BTUVfV19EWU5fQklORF9FTVBUWSxcbiAgQ09ORElUSU9OX0lOVklTSUJMRV9DTEFTUyxcbn0gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvZHluYW1vL2NvbnN0YW50cyc7XG5pbXBvcnQge3Rlc3RDb25kaXRpb259IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2R5bmFtby91dGlscy9Db25kaXRpb25VdGlscyc7XG5cbmNvbnN0IHJlbW92ZUNsYXNzID0gKG5vZGU6IEVsZW1lbnQsIGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGlmIChub2RlLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgaWYgKG5vZGUuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlV0R5bkJpbmRFbXB0eUNsYXNzID0gKG5vZGU6IEVsZW1lbnQpOiB2b2lkID0+XG4gIHJlbW92ZUNsYXNzKG5vZGUsIENMQVNTX05BTUVfV19EWU5fQklORF9FTVBUWSk7XG5cbmNvbnN0IGFkZENvbmRpdGlvbmFsVmlzaWJpbGl0eUNsYXNzID0gKG5vZGU6IEVsZW1lbnQpOiB2b2lkID0+IHtcbiAgbm9kZS5jbGFzc0xpc3QuYWRkKENPTkRJVElPTl9JTlZJU0lCTEVfQ0xBU1MpO1xufTtcblxuY29uc3QgcmVtb3ZlQ29uZGl0aW9uYWxWaXNpYmlsaXR5Q2xhc3MgPSAobm9kZTogRWxlbWVudCk6IHZvaWQgPT5cbiAgcmVtb3ZlQ2xhc3Mobm9kZSwgQ09ORElUSU9OX0lOVklTSUJMRV9DTEFTUyk7XG5cbmV4cG9ydCBjb25zdCBhcHBseUNvbmRpdGlvblRvTm9kZSA9IChcbiAgbm9kZTogRWxlbWVudCxcbiAgaXRlbTogUmVjb3JkPGFueSwgYW55PiB8IG51bGwsXG4gIGNvbmRpdGlvbkRhdGE6IGFueSxcbiAgZ3JhcGhRTFNsdWdzOiBib29sZWFuID0gZmFsc2Vcbik6IHZvaWQgPT4ge1xuICBpZiAoIWNvbmRpdGlvbkRhdGEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7Y29uZGl0aW9uLCB0aW1lem9uZX0gPSBjb25kaXRpb25EYXRhO1xuXG4gIGlmIChpdGVtKSB7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gdGVzdENvbmRpdGlvbih7XG4gICAgICBpdGVtLFxuICAgICAgY29udGV4dEl0ZW06IG51bGwsXG4gICAgICB0aW1lem9uZSxcbiAgICAgIGNvbmRpdGlvbixcbiAgICAgIGdyYXBoUUxTbHVncyxcbiAgICB9KTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICByZW1vdmVDb25kaXRpb25hbFZpc2liaWxpdHlDbGFzcyhub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkQ29uZGl0aW9uYWxWaXNpYmlsaXR5Q2xhc3Mobm9kZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEJyZWFkdGgtZmlyc3QgdHJhdmVyc2FsIG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fSBlbCAtIFJvb3QgZWxlbWVudCB0byBzdGFydCB3aXRoXG4gKiBAcGFyYW0geyhub2RlOiBFbGVtZW50KSA9PiB2b2lkfSBmbiAtIEZ1bmN0aW9uIHRvIHJ1biBmb3IgZXZlcnkgbm9kZSBlbmNvdW50ZXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2Fsa0RPTShlbDogRWxlbWVudCwgZm46IChub2RlOiBFbGVtZW50KSA9PiB2b2lkKTogYW55IHtcbiAgZm4oZWwpO1xuXG4gIGlmICghZWwgfHwgIWVsLmNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKTtcblxuICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB3YWxrRE9NKGNoaWxkLCBmbikpO1xuXG4gIHJldHVybiBlbDtcbn1cbiJdLCJuYW1lcyI6WyJhcHBseUNvbmRpdGlvblRvTm9kZSIsInJlbW92ZVdEeW5CaW5kRW1wdHlDbGFzcyIsIndhbGtET00iLCJyZW1vdmVDbGFzcyIsIm5vZGUiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsImxlbmd0aCIsInJlbW92ZUF0dHJpYnV0ZSIsIkNMQVNTX05BTUVfV19EWU5fQklORF9FTVBUWSIsImFkZENvbmRpdGlvbmFsVmlzaWJpbGl0eUNsYXNzIiwiYWRkIiwiQ09ORElUSU9OX0lOVklTSUJMRV9DTEFTUyIsInJlbW92ZUNvbmRpdGlvbmFsVmlzaWJpbGl0eUNsYXNzIiwiaXRlbSIsImNvbmRpdGlvbkRhdGEiLCJncmFwaFFMU2x1Z3MiLCJjb25kaXRpb24iLCJ0aW1lem9uZSIsImlzVmlzaWJsZSIsInRlc3RDb25kaXRpb24iLCJjb250ZXh0SXRlbSIsImVsIiwiZm4iLCJjaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJjaGlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUF5QmFBLG9CQUFvQjtlQUFwQkE7O0lBVkFDLHdCQUF3QjtlQUF4QkE7O0lBMkNHQyxPQUFPO2VBQVBBOzs7MkJBdkRUO2dDQUNxQjtBQUU1QixNQUFNQyxjQUFjLENBQUNDLE1BQWVDO0lBQ2xDLElBQUlELEtBQUtFLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDRixZQUFZO1FBQ3RDRCxLQUFLRSxTQUFTLENBQUNFLE1BQU0sQ0FBQ0g7UUFDdEIsSUFBSUQsS0FBS0UsU0FBUyxDQUFDRyxNQUFNLEtBQUssR0FBRztZQUMvQkwsS0FBS00sZUFBZSxDQUFDO1FBQ3ZCO0lBQ0Y7QUFDRjtBQUVPLE1BQU1ULDJCQUEyQixDQUFDRyxPQUN2Q0QsWUFBWUMsTUFBTU8sc0NBQTJCO0FBRS9DLE1BQU1DLGdDQUFnQyxDQUFDUjtJQUNyQ0EsS0FBS0UsU0FBUyxDQUFDTyxHQUFHLENBQUNDLG9DQUF5QjtBQUM5QztBQUVBLE1BQU1DLG1DQUFtQyxDQUFDWCxPQUN4Q0QsWUFBWUMsTUFBTVUsb0NBQXlCO0FBRXRDLE1BQU1kLHVCQUF1QixDQUNsQ0ksTUFDQVksTUFDQUMsZUFDQUMsZUFBd0IsS0FBSztJQUU3QixJQUFJLENBQUNELGVBQWU7UUFDbEI7SUFDRjtJQUVBLE1BQU0sRUFBQ0UsU0FBUyxFQUFFQyxRQUFRLEVBQUMsR0FBR0g7SUFFOUIsSUFBSUQsTUFBTTtRQUNSLE1BQU1LLFlBQVlDLElBQUFBLDZCQUFhLEVBQUM7WUFDOUJOO1lBQ0FPLGFBQWE7WUFDYkg7WUFDQUQ7WUFDQUQ7UUFDRjtRQUNBLElBQUlHLFdBQVc7WUFDYk4saUNBQWlDWDtRQUNuQyxPQUFPO1lBQ0xRLDhCQUE4QlI7UUFDaEM7SUFDRjtBQUNGO0FBT08sU0FBU0YsUUFBUXNCLEVBQVcsRUFBRUMsRUFBMkI7SUFDOURBLEdBQUdEO0lBRUgsSUFBSSxDQUFDQSxNQUFNLENBQUNBLEdBQUdFLFFBQVEsRUFBRTtRQUN2QixPQUFPRjtJQUNUO0lBRUEsTUFBTUUsV0FBV0MsTUFBTUMsSUFBSSxDQUFDSixHQUFHRSxRQUFRO0lBRXZDLElBQUksQ0FBQ0EsU0FBU2pCLE1BQU0sRUFBRTtRQUNwQixPQUFPZTtJQUNUO0lBRUFFLFNBQVNHLE9BQU8sQ0FBQyxDQUFDQyxRQUFVNUIsUUFBUTRCLE9BQU9MO0lBRTNDLE9BQU9EO0FBQ1QifQ==
    
    }),
    86078: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(19336), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vUmVuZGVyaW5nVXRpbHMnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==
    
    }),
    53083: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        _crapCode: function() {
            return _crapCode;
        },
        _test: function() {
            return _test;
        },
        collSlug: function() {
            return collSlug;
        },
        fieldSlug: function() {
            return fieldSlug;
        },
        restoreSlug: function() {
            return restoreSlug;
        }
    });
    const _invert = /*#__PURE__*/ _interop_require_default(__webpack_require__(61576));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
     * This file exists because GraphQL only allows /^[a-z_][a-z_0-9]$/i identifiers, but we allow things to be slugs,
     * like: "foo-bar". Since we allow characters that are not allowed by GraphQL, we need to convert these slugs into an
     * accepted format.
     *
     * Unfortunately, simple conversions (like what the prototype did: slug.replace(/\W/g, '_')) don't work, because this
     * would encode the slugs "foo-bar" and "foo_bar" to the same value. Both are valid slugs according to our system, and
     * can totally co-exist in a collection schema. So if a site existed that accidentally did something like that, schema
     * generation would fail for that user, which is a big "No bueno".
     */ // Consonants are used instead of the traditional hex characters, since there's
    // a lower likelihood of it accidentally spelling something...
    const hex_lookup = {
        '0': 'b',
        '1': 'c',
        '2': 'd',
        '3': 'f',
        '4': 'g',
        '5': 'h',
        '6': 'j',
        '7': 'k',
        '8': 'l',
        '9': 'm',
        a: 'n',
        b: 'p',
        c: 'q',
        d: 'r',
        e: 's',
        f: 't'
    };
    const reverse_hex_lookup = (0, _invert.default)(hex_lookup);
    function _crapCode(str) {
        str = String(str);
        // Right is all rejected chars, in a {idx}{letterhex} format. Letter hex is just hex,
        // but all values are shifted into consonants to avoid ambiguities with idx / the hex
        // data. Left is the original string, with all rejected characters replaced with '_'.
        // This stragegy should have a good 1:1 mapping from source to encoded values. It
        // will produce keys that can be used as identifiers in GraphQL. And it also leaves
        // many of the readable characters in the source string alone, so that the slug is
        // still kinda readable:
        const right = [];
        // Left is all acceptable chars, for "readability".
        const left = str.replace(/[^a-z0-9]/gi, (substr, idx)=>{
            // Get hex of invalid character:
            const hex = substr.charCodeAt(0).toString(16);
            // Map to letters, so there's no ambiguity between indexes and char data.
            // @ts-expect-error - TS2769 - No overload matches this call.
            const letters = hex.replace(/./g, (ch)=>hex_lookup[ch]);
            // Push this {idx}{kinda-hex} combo for later concat:
            right.push(String(idx) + letters);
            // ... and replace the invalid char with '_':
            return '_';
        });
        return left + '_' + right.join('');
    }
    const collSlug = (coll)=>'c_' + _crapCode(coll.slug);
    const fieldSlug = (field)=>'f_' + _crapCode(field.slug);
    const _test = {
        _crapCode
    };
    const restoreSlug = (slugWithPrefixAndCrapCode)=>{
        const results = slugWithPrefixAndCrapCode.match(/^[fc]_([_A-Za-z0-9]+)_([0-9bcdfghjklmnpqrst]*)$/);
        if (!results || results.length < 3) {
            // slug is not a valid Dynamo collection or field GraphQL slug,
            // so it does not need to be restored
            return slugWithPrefixAndCrapCode;
        }
        const left = results[1];
        const right = results[2];
        if (!right) {
            // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
            return left;
        }
        // we use a while loop and mutable variables,
        // because node 10 does not support `matchAll`
        // @ts-expect-error - TS18048 - 'left' is possibly 'undefined'.
        const decrapified = left.split('');
        const re = /(\d+)([bcdfghjklmnpqrst]+)/g;
        let matches = re.exec(right);
        while(matches !== null && matches.length > 2){
            const idx = Number(matches[1]);
            const letters = matches[2];
            // @ts-expect-error - TS18048 - 'letters' is possibly 'undefined'. | TS2769 - No overload matches this call.
            const hex = letters.replace(/./g, (ch)=>reverse_hex_lookup[ch]);
            const char = String.fromCharCode(parseInt(hex, 16));
            decrapified[idx] = char;
            matches = re.exec(right);
        }
        return decrapified.join('');
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    24915: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(53083), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vU2NoZW1hRW5jb2Rlcic7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBYyJ9
    
    }),
    67526: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        collectionSlug: function() {
            return collectionSlug;
        },
        fieldSlug: function() {
            return fieldSlug;
        },
        isDynamoGraphQLFieldSlug: function() {
            return isDynamoGraphQLFieldSlug;
        },
        restoreSlug: function() {
            return _SchemaEncoder.restoreSlug;
        }
    });
    const _SchemaEncoder = __webpack_require__(24915);
    const fieldSlug = (slug)=>(0, _SchemaEncoder.fieldSlug)({
            slug
        });
    const DYNAMO_GQL_FIELD_SLUG = 'f_';
    const isDynamoGraphQLFieldSlug = (str)=>str.startsWith(DYNAMO_GQL_FIELD_SLUG);
    const collectionSlug = (slug)=>(0, _SchemaEncoder.collSlug)({
            slug
        });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNsdWdVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb2xsU2x1ZyxcbiAgZmllbGRTbHVnIGFzIF9maWVsZFNsdWcsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2R5bmFtby91dGlscy9TY2hlbWFFbmNvZGVyJztcblxuZXhwb3J0IHtyZXN0b3JlU2x1Z30gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvZHluYW1vL3V0aWxzL1NjaGVtYUVuY29kZXInO1xuXG5leHBvcnQgY29uc3QgZmllbGRTbHVnID0gKHNsdWc6IHN0cmluZyk6IHN0cmluZyA9PiBfZmllbGRTbHVnKHtzbHVnfSk7XG5cbmNvbnN0IERZTkFNT19HUUxfRklFTERfU0xVRyA9ICdmXyc7XG5leHBvcnQgY29uc3QgaXNEeW5hbW9HcmFwaFFMRmllbGRTbHVnOiAoYXJnMTogc3RyaW5nKSA9PiBib29sZWFuID0gKHN0cikgPT5cbiAgc3RyLnN0YXJ0c1dpdGgoRFlOQU1PX0dRTF9GSUVMRF9TTFVHKTtcblxuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25TbHVnID0gKHNsdWc6IHN0cmluZyk6IHN0cmluZyA9PiBjb2xsU2x1Zyh7c2x1Z30pO1xuIl0sIm5hbWVzIjpbImNvbGxlY3Rpb25TbHVnIiwiZmllbGRTbHVnIiwiaXNEeW5hbW9HcmFwaFFMRmllbGRTbHVnIiwicmVzdG9yZVNsdWciLCJzbHVnIiwiX2ZpZWxkU2x1ZyIsIkRZTkFNT19HUUxfRklFTERfU0xVRyIsInN0ciIsInN0YXJ0c1dpdGgiLCJjb2xsU2x1ZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFhYUEsY0FBYztlQUFkQTs7SUFOQUMsU0FBUztlQUFUQTs7SUFHQUMsd0JBQXdCO2VBQXhCQTs7SUFMTEMsV0FBVztlQUFYQSwwQkFBVzs7OytCQUZaO0FBSUEsTUFBTUYsWUFBWSxDQUFDRyxPQUF5QkMsSUFBQUEsd0JBQVUsRUFBQztRQUFDRDtJQUFJO0FBRW5FLE1BQU1FLHdCQUF3QjtBQUN2QixNQUFNSiwyQkFBc0QsQ0FBQ0ssTUFDbEVBLElBQUlDLFVBQVUsQ0FBQ0Y7QUFFVixNQUFNTixpQkFBaUIsQ0FBQ0ksT0FBeUJLLElBQUFBLHVCQUFRLEVBQUM7UUFBQ0w7SUFBSSJ9
    
    }),
    82985: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(67526), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vU2x1Z1V0aWxzJztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFjIn0=
    
    }),
    73141: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "transformers", ({
        enumerable: true,
        get: function() {
            return transformers;
        }
    }));
    const _escape = /*#__PURE__*/ _interop_require_default(__webpack_require__(28929));
    const _momenttimezone = /*#__PURE__*/ _interop_require_default(__webpack_require__(47636));
    const _CurrencyUtils = __webpack_require__(60937);
    const _DynamoFormattingUtils = __webpack_require__(82688);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // GraphQL api returns date-times as ISO strings and simple dates as YYYY-MM-DD format
    const isSimpleDateFormat = (value)=>/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.test(value);
    const date = (value, [format], { timezone = 'UTC' })=>{
        if (isSimpleDateFormat(value)) {
            timezone = 'UTC';
        }
        const momentDate = _momenttimezone.default.utc(value, _momenttimezone.default.ISO_8601);
        if (momentDate.isValid()) {
            return momentDate.tz(timezone).format(format);
        } else {
            return '';
        }
    };
    const detailPage = (value, [collectionIdOrLegacySlug], { collectionSlugMap })=>{
        // Falling back to collectionIdOrLegacySlug because in the legacy filters, it's
        // actually the collection slug. If there's a legacy filter, the collection slug
        // rename is not enabled yet for the site so the href is still accurate.
        const collectionSlug = collectionSlugMap[collectionIdOrLegacySlug] || collectionIdOrLegacySlug;
        return value ? `/${collectionSlug}/${value}` : null;
    };
    const style = (value, [styleProp])=>{
        if (styleProp === 'background-image') {
            return value ? `url("${value}")` : 'none';
        }
        return value;
    };
    const numberPrecision = (value, [precision])=>{
        return (0, _DynamoFormattingUtils.formatNumber)(value, precision);
    };
    const rich = (value, params, { pageLinkHrefPrefix, collectionSlugMap })=>{
        if (!value) {
            return null;
        }
        if (typeof value !== 'string') {
            return value;
        }
        return value.replace(/<a\s+[^>]+/g, (linkString)=>{
            const isPageLink = /\sdata-rt-link-type="page"/.test(linkString);
            const needsPrefix = pageLinkHrefPrefix && isPageLink;
            const collectionIdMatch = isPageLink && /\sdata-rt-link-collectionid="([a-z0-9]{24})"/.exec(linkString);
            if (needsPrefix || collectionIdMatch) {
                return linkString.replace(/(\shref=")([^"]+)/, (match, begin, href)=>{
                    const end = collectionIdMatch ? replaceDetailPageHrefCollectionSlug(href, // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
                    collectionIdMatch[1], collectionSlugMap) : href;
                    // Need to escape the prefix here as dynamic RTE is added with dangerouslySetInnerHTML in RichText atom.
                    const prefix = pageLinkHrefPrefix ? (0, _escape.default)(pageLinkHrefPrefix) : '';
                    return `${begin}${prefix}${end}`;
                });
            } else {
                return linkString;
            }
        });
    };
    // Collection slug may have been renamed so we need to make sure detail
    // page links in CMS RichText fields still point to the correct page.
    const replaceDetailPageHrefCollectionSlug = (href, collectionId, collectionSlugMap)=>{
        const [emptyString, originalCollectionSlug, ...rest] = href.split('/');
        const collectionSlug = collectionSlugMap[collectionId] || originalCollectionSlug;
        return [
            emptyString,
            collectionSlug,
            ...rest
        ].join('/');
    };
    const get = (obj, key)=>{
        if (obj != null && typeof obj.get === 'function') {
            return obj.get(key);
        }
        return obj[key];
    };
    const price = (obj, params, context)=>{
        if (!obj) return null;
        return (0, _CurrencyUtils.renderPriceFromSettings)({
            unit: get(obj, 'unit'),
            value: get(obj, 'value')
        }, context.currencySettings);
    };
    function getTransformerFn(fnKey) {
        switch(fnKey){
            case 'date':
                {
                    return date;
                }
            case 'detailPage':
                {
                    return detailPage;
                }
            case 'style':
                {
                    return style;
                }
            case 'numberPrecision':
                {
                    return numberPrecision;
                }
            case 'rich':
                {
                    return rich;
                }
            case 'price':
                {
                    return price;
                }
            default:
                {
                    return null;
                }
        }
    }
    const transformers = (value, filter, context)=>{
        const { type: key, params } = filter;
        const fn = getTransformerFn(key);
        return fn ? fn(value, params, context) : value;
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    61649: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    _export_star(__webpack_require__(73141), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vVHJhbnNmb3JtZXJzJztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFjIn0=
    
    }),
    13946: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        actionListPlaybackChanged: function() {
            return actionListPlaybackChanged;
        },
        animationFrameChanged: function() {
            return animationFrameChanged;
        },
        clearRequested: function() {
            return clearRequested;
        },
        elementStateChanged: function() {
            return elementStateChanged;
        },
        eventListenerAdded: function() {
            return eventListenerAdded;
        },
        eventStateChanged: function() {
            return eventStateChanged;
        },
        instanceAdded: function() {
            return instanceAdded;
        },
        instanceRemoved: function() {
            return instanceRemoved;
        },
        instanceStarted: function() {
            return instanceStarted;
        },
        mediaQueriesDefined: function() {
            return mediaQueriesDefined;
        },
        parameterChanged: function() {
            return parameterChanged;
        },
        playbackRequested: function() {
            return playbackRequested;
        },
        previewRequested: function() {
            return previewRequested;
        },
        rawDataImported: function() {
            return rawDataImported;
        },
        sessionInitialized: function() {
            return sessionInitialized;
        },
        sessionStarted: function() {
            return sessionStarted;
        },
        sessionStopped: function() {
            return sessionStopped;
        },
        stopRequested: function() {
            return stopRequested;
        },
        testFrameRendered: function() {
            return testFrameRendered;
        },
        viewportWidthChanged: function() {
            return viewportWidthChanged;
        }
    });
    const _sharedconstants = __webpack_require__(7087);
    const _shared = __webpack_require__(9468);
    const { IX2_RAW_DATA_IMPORTED, IX2_SESSION_INITIALIZED, IX2_SESSION_STARTED, IX2_SESSION_STOPPED, IX2_PREVIEW_REQUESTED, IX2_PLAYBACK_REQUESTED, IX2_STOP_REQUESTED, IX2_CLEAR_REQUESTED, IX2_EVENT_LISTENER_ADDED, IX2_TEST_FRAME_RENDERED, IX2_EVENT_STATE_CHANGED, IX2_ANIMATION_FRAME_CHANGED, IX2_PARAMETER_CHANGED, IX2_INSTANCE_ADDED, IX2_INSTANCE_STARTED, IX2_INSTANCE_REMOVED, IX2_ELEMENT_STATE_CHANGED, IX2_ACTION_LIST_PLAYBACK_CHANGED, IX2_VIEWPORT_WIDTH_CHANGED, IX2_MEDIA_QUERIES_DEFINED } = _sharedconstants.IX2EngineActionTypes;
    const { reifyState } = _shared.IX2VanillaUtils;
    const rawDataImported = (rawData)=>({
            type: IX2_RAW_DATA_IMPORTED,
            payload: {
                ...reifyState(rawData)
            }
        });
    const sessionInitialized = ({ hasBoundaryNodes, reducedMotion })=>({
            type: IX2_SESSION_INITIALIZED,
            payload: {
                hasBoundaryNodes,
                reducedMotion
            }
        });
    const sessionStarted = ()=>({
            type: IX2_SESSION_STARTED
        });
    const sessionStopped = ()=>({
            type: IX2_SESSION_STOPPED
        });
    const previewRequested = ({ rawData, defer })=>({
            type: IX2_PREVIEW_REQUESTED,
            payload: {
                defer,
                rawData
            }
        });
    const playbackRequested = ({ actionTypeId = _sharedconstants.ActionTypeConsts.GENERAL_START_ACTION, actionListId, actionItemId, eventId, allowEvents, immediate, testManual, verbose, rawData })=>({
            type: IX2_PLAYBACK_REQUESTED,
            payload: {
                actionTypeId,
                actionListId,
                actionItemId,
                testManual,
                eventId,
                allowEvents,
                immediate,
                verbose,
                rawData
            }
        });
    const stopRequested = (actionListId)=>({
            type: IX2_STOP_REQUESTED,
            payload: {
                actionListId
            }
        });
    const clearRequested = ()=>({
            type: IX2_CLEAR_REQUESTED
        });
    const eventListenerAdded = (target, listenerParams)=>({
            type: IX2_EVENT_LISTENER_ADDED,
            payload: {
                target,
                listenerParams
            }
        });
    const testFrameRendered = (step = 1)=>({
            type: IX2_TEST_FRAME_RENDERED,
            payload: {
                step
            }
        });
    const eventStateChanged = (stateKey, newState)=>({
            type: IX2_EVENT_STATE_CHANGED,
            payload: {
                stateKey,
                newState
            }
        });
    const animationFrameChanged = (now, parameters)=>({
            type: IX2_ANIMATION_FRAME_CHANGED,
            payload: {
                now,
                parameters
            }
        });
    const parameterChanged = (key, value)=>({
            type: IX2_PARAMETER_CHANGED,
            payload: {
                key,
                value
            }
        });
    const instanceAdded = (options)=>({
            type: IX2_INSTANCE_ADDED,
            payload: {
                ...options
            }
        });
    const instanceStarted = (instanceId, time)=>({
            type: IX2_INSTANCE_STARTED,
            payload: {
                instanceId,
                time
            }
        });
    const instanceRemoved = (instanceId)=>({
            type: IX2_INSTANCE_REMOVED,
            payload: {
                instanceId
            }
        });
    const elementStateChanged = (elementId, actionTypeId, current, actionItem)=>({
            type: IX2_ELEMENT_STATE_CHANGED,
            payload: {
                elementId,
                actionTypeId,
                current,
                actionItem
            }
        });
    const actionListPlaybackChanged = ({ actionListId, isPlaying })=>({
            type: IX2_ACTION_LIST_PLAYBACK_CHANGED,
            payload: {
                actionListId,
                isPlaying
            }
        });
    const viewportWidthChanged = ({ width, mediaQueries })=>({
            type: IX2_VIEWPORT_WIDTH_CHANGED,
            payload: {
                width,
                mediaQueries
            }
        });
    const mediaQueriesDefined = ()=>({
            type: IX2_MEDIA_QUERIES_DEFINED
        });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkVuZ2luZUFjdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWN0aW9uVHlwZUNvbnN0cyxcbiAgSVgyRW5naW5lQWN0aW9uVHlwZXMsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi9zaGFyZWQtY29uc3RhbnRzJztcblxuaW1wb3J0IHtJWDJWYW5pbGxhVXRpbHN9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi9zaGFyZWQnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEFjdGlvbkxpc3RJZCxcbiAgQWN0aW9uSWQsXG4gIEV2ZW50SWQsXG4gIENvbnRpbnVvdXNQYXJhbWV0ZXJHcm91cElkLFxuICBBY3Rpb25UeXBlSWRUeXBlLFxuICBBY3Rpb25MaXN0c1R5cGUsXG4gIEV2ZW50c1R5cGUsXG4gIEV2ZW50VHlwZSxcbn0gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvaXgyL3R5cGVzLWNvcmUnO1xuaW1wb3J0IHtCcmVha3BvaW50SUR9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3N0eWxlL3R5cGVzJztcblxuY29uc3Qge1xuICBJWDJfUkFXX0RBVEFfSU1QT1JURUQsXG4gIElYMl9TRVNTSU9OX0lOSVRJQUxJWkVELFxuICBJWDJfU0VTU0lPTl9TVEFSVEVELFxuICBJWDJfU0VTU0lPTl9TVE9QUEVELFxuICBJWDJfUFJFVklFV19SRVFVRVNURUQsXG4gIElYMl9QTEFZQkFDS19SRVFVRVNURUQsXG4gIElYMl9TVE9QX1JFUVVFU1RFRCxcbiAgSVgyX0NMRUFSX1JFUVVFU1RFRCxcbiAgSVgyX0VWRU5UX0xJU1RFTkVSX0FEREVELFxuICBJWDJfVEVTVF9GUkFNRV9SRU5ERVJFRCxcbiAgSVgyX0VWRU5UX1NUQVRFX0NIQU5HRUQsXG4gIElYMl9BTklNQVRJT05fRlJBTUVfQ0hBTkdFRCxcbiAgSVgyX1BBUkFNRVRFUl9DSEFOR0VELFxuICBJWDJfSU5TVEFOQ0VfQURERUQsXG4gIElYMl9JTlNUQU5DRV9TVEFSVEVELFxuICBJWDJfSU5TVEFOQ0VfUkVNT1ZFRCxcbiAgSVgyX0VMRU1FTlRfU1RBVEVfQ0hBTkdFRCxcbiAgSVgyX0FDVElPTl9MSVNUX1BMQVlCQUNLX0NIQU5HRUQsXG4gIElYMl9WSUVXUE9SVF9XSURUSF9DSEFOR0VELFxuICBJWDJfTUVESUFfUVVFUklFU19ERUZJTkVELFxufSA9IElYMkVuZ2luZUFjdGlvblR5cGVzO1xuXG5jb25zdCB7cmVpZnlTdGF0ZX0gPSBJWDJWYW5pbGxhVXRpbHM7XG5cbmV4cG9ydCB0eXBlIElYMlJhd0RhdGEgPSB7XG4gIGV2ZW50czogRXZlbnRzVHlwZTtcbiAgYWN0aW9uTGlzdHM6IEFjdGlvbkxpc3RzVHlwZTtcbiAgc2l0ZToge21lZGlhUXVlcmllczoge2tleTogQnJlYWtwb2ludElEOyBtaW46IG51bWJlcjsgbWF4OiBudW1iZXJ9W119O1xufTtcblxuZXhwb3J0IHR5cGUgcmF3RGF0YUltcG9ydGVkUGF5bG9hZCA9IHtcbiAgaXhEYXRhOiB7XG4gICAgZXZlbnRzOiBFdmVudHNUeXBlIHwgdW5kZWZpbmVkO1xuICAgIGFjdGlvbkxpc3RzOiBBY3Rpb25MaXN0c1R5cGUgfCB1bmRlZmluZWQ7XG4gICAgZXZlbnRUeXBlTWFwOiB7W2sgaW4gRXZlbnRUeXBlWydldmVudFR5cGVJZCddXToge1trZXk6IHN0cmluZ106IEV2ZW50VHlwZX19O1xuICAgIG1lZGlhUXVlcmllczogSVgyUmF3RGF0YVsnc2l0ZSddWydtZWRpYVF1ZXJpZXMnXTtcbiAgICBtZWRpYVF1ZXJ5S2V5czogQnJlYWtwb2ludElEW107XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgcmF3RGF0YUltcG9ydGVkID0gKHJhd0RhdGE6IElYMlJhd0RhdGEpID0+ICh7XG4gIHR5cGU6IElYMl9SQVdfREFUQV9JTVBPUlRFRCxcbiAgcGF5bG9hZDoge1xuICAgIC4uLnJlaWZ5U3RhdGUocmF3RGF0YSksXG4gIH0sXG59KTtcblxuZXhwb3J0IHR5cGUgc2Vzc2lvbkluaXRpYWxpemVkUGF5bG9hZCA9IHtcbiAgaGFzQm91bmRhcnlOb2RlczogYm9vbGVhbjtcbiAgcmVkdWNlZE1vdGlvbjogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXNzaW9uSW5pdGlhbGl6ZWQgPSAoe1xuICBoYXNCb3VuZGFyeU5vZGVzLFxuICByZWR1Y2VkTW90aW9uLFxufTogc2Vzc2lvbkluaXRpYWxpemVkUGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogSVgyX1NFU1NJT05fSU5JVElBTElaRUQsXG4gIHBheWxvYWQ6IHtcbiAgICBoYXNCb3VuZGFyeU5vZGVzLFxuICAgIHJlZHVjZWRNb3Rpb24sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHNlc3Npb25TdGFydGVkID0gKCkgPT4gKHtcbiAgdHlwZTogSVgyX1NFU1NJT05fU1RBUlRFRCxcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2Vzc2lvblN0b3BwZWQgPSAoKSA9PiAoe1xuICB0eXBlOiBJWDJfU0VTU0lPTl9TVE9QUEVELFxufSk7XG5cbmV4cG9ydCB0eXBlIHByZXZpZXdSZXF1ZXN0ZWRQYXlsb2FkID0ge1xuICByYXdEYXRhOiBJWDJSYXdEYXRhO1xuICBkZWZlcjogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmV2aWV3UmVxdWVzdGVkID0gKHtcbiAgcmF3RGF0YSxcbiAgZGVmZXIsXG59OiBwcmV2aWV3UmVxdWVzdGVkUGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogSVgyX1BSRVZJRVdfUkVRVUVTVEVELFxuICBwYXlsb2FkOiB7XG4gICAgZGVmZXIsXG4gICAgcmF3RGF0YSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgdHlwZSBwbGF5YmFja1JlcXVlc3RlZFBheWxvYWQgPSB7XG4gIGFjdGlvblR5cGVJZDpcbiAgICB8IHR5cGVvZiBBY3Rpb25UeXBlQ29uc3RzLkdFTkVSQUxfU1RBUlRfQUNUSU9OXG4gICAgfCB0eXBlb2YgQWN0aW9uVHlwZUNvbnN0cy5HRU5FUkFMX0NPTlRJTlVPVVNfQUNUSU9OO1xuICBhY3Rpb25MaXN0SWQ6IEFjdGlvbkxpc3RJZDtcbiAgYWN0aW9uSXRlbUlkOiBBY3Rpb25JZDtcbiAgZXZlbnRJZDogRXZlbnRJZDtcbiAgYWxsb3dFdmVudHM6IGJvb2xlYW47XG4gIGltbWVkaWF0ZTogYm9vbGVhbjtcbiAgdGVzdE1hbnVhbD86IGJvb2xlYW47XG4gIHZlcmJvc2U6IGJvb2xlYW47XG4gIHJhd0RhdGE6IElYMlJhd0RhdGE7XG59O1xuXG5leHBvcnQgY29uc3QgcGxheWJhY2tSZXF1ZXN0ZWQgPSAoe1xuICBhY3Rpb25UeXBlSWQgPSBBY3Rpb25UeXBlQ29uc3RzLkdFTkVSQUxfU1RBUlRfQUNUSU9OLFxuICBhY3Rpb25MaXN0SWQsXG4gIGFjdGlvbkl0ZW1JZCxcbiAgZXZlbnRJZCxcbiAgYWxsb3dFdmVudHMsXG4gIGltbWVkaWF0ZSxcbiAgdGVzdE1hbnVhbCxcbiAgdmVyYm9zZSxcbiAgcmF3RGF0YSxcbn06IHBsYXliYWNrUmVxdWVzdGVkUGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogSVgyX1BMQVlCQUNLX1JFUVVFU1RFRCxcbiAgcGF5bG9hZDoge1xuICAgIGFjdGlvblR5cGVJZCxcbiAgICBhY3Rpb25MaXN0SWQsXG4gICAgYWN0aW9uSXRlbUlkLFxuICAgIHRlc3RNYW51YWwsXG4gICAgZXZlbnRJZCxcbiAgICBhbGxvd0V2ZW50cyxcbiAgICBpbW1lZGlhdGUsXG4gICAgdmVyYm9zZSxcbiAgICByYXdEYXRhLFxuICB9LFxufSk7XG5cbmV4cG9ydCB0eXBlIHN0b3BSZXF1ZXN0ZWRQYXlsb2FkID0ge1xuICBhY3Rpb25MaXN0SWQ6IEFjdGlvbkxpc3RJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdG9wUmVxdWVzdGVkID0gKFxuICBhY3Rpb25MaXN0SWQ6IHN0b3BSZXF1ZXN0ZWRQYXlsb2FkWydhY3Rpb25MaXN0SWQnXVxuKSA9PiAoe1xuICB0eXBlOiBJWDJfU1RPUF9SRVFVRVNURUQsXG4gIHBheWxvYWQ6IHtcbiAgICBhY3Rpb25MaXN0SWQsXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyUmVxdWVzdGVkID0gKCkgPT4gKHtcbiAgdHlwZTogSVgyX0NMRUFSX1JFUVVFU1RFRCxcbn0pO1xuXG5leHBvcnQgdHlwZSBldmVudExpc3RlbmVyQWRkZWRQYXlsb2FkID0ge1xuICB0YXJnZXQ6IGFueTtcbiAgbGlzdGVuZXJQYXJhbXM6IGFueTtcbn07XG5cbmV4cG9ydCBjb25zdCBldmVudExpc3RlbmVyQWRkZWQgPSAoXG4gIHRhcmdldDogZXZlbnRMaXN0ZW5lckFkZGVkUGF5bG9hZFsndGFyZ2V0J10sXG4gIGxpc3RlbmVyUGFyYW1zOiBldmVudExpc3RlbmVyQWRkZWRQYXlsb2FkWydsaXN0ZW5lclBhcmFtcyddXG4pID0+ICh7XG4gIHR5cGU6IElYMl9FVkVOVF9MSVNURU5FUl9BRERFRCxcbiAgcGF5bG9hZDoge1xuICAgIHRhcmdldCxcbiAgICBsaXN0ZW5lclBhcmFtcyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgdHlwZSB0ZXN0RnJhbWVSZW5kZXJlZFBheWxvYWQgPSB7XG4gIHN0ZXA/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgY29uc3QgdGVzdEZyYW1lUmVuZGVyZWQgPSAoXG4gIHN0ZXA6IHRlc3RGcmFtZVJlbmRlcmVkUGF5bG9hZFsnc3RlcCddID0gMVxuKSA9PiAoe1xuICB0eXBlOiBJWDJfVEVTVF9GUkFNRV9SRU5ERVJFRCxcbiAgcGF5bG9hZDoge1xuICAgIHN0ZXAsXG4gIH0sXG59KTtcblxuZXhwb3J0IHR5cGUgZXZlbnRTdGF0ZUNoYW5nZWRQYXlsb2FkID0ge1xuICBzdGF0ZUtleTogYW55O1xuICBuZXdTdGF0ZTogYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGV2ZW50U3RhdGVDaGFuZ2VkID0gKFxuICBzdGF0ZUtleTogZXZlbnRTdGF0ZUNoYW5nZWRQYXlsb2FkWydzdGF0ZUtleSddLFxuICBuZXdTdGF0ZTogZXZlbnRTdGF0ZUNoYW5nZWRQYXlsb2FkWyduZXdTdGF0ZSddXG4pID0+ICh7XG4gIHR5cGU6IElYMl9FVkVOVF9TVEFURV9DSEFOR0VELFxuICBwYXlsb2FkOiB7XG4gICAgc3RhdGVLZXksXG4gICAgbmV3U3RhdGUsXG4gIH0sXG59KTtcblxuZXhwb3J0IHR5cGUgYW5pbWF0aW9uRnJhbWVDaGFuZ2VkUGF5bG9hZCA9IHtcbiAgbm93OiBudW1iZXI7XG4gIHBhcmFtZXRlcnM6IGFueTtcbn07XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25GcmFtZUNoYW5nZWQgPSAoXG4gIG5vdzogYW5pbWF0aW9uRnJhbWVDaGFuZ2VkUGF5bG9hZFsnbm93J10sXG4gIHBhcmFtZXRlcnM6IGFuaW1hdGlvbkZyYW1lQ2hhbmdlZFBheWxvYWRbJ3BhcmFtZXRlcnMnXVxuKSA9PiAoe1xuICB0eXBlOiBJWDJfQU5JTUFUSU9OX0ZSQU1FX0NIQU5HRUQsXG4gIHBheWxvYWQ6IHtcbiAgICBub3csXG4gICAgcGFyYW1ldGVycyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgcGFyYW1ldGVyQ2hhbmdlZCA9IChcbiAga2V5OiBDb250aW51b3VzUGFyYW1ldGVyR3JvdXBJZCxcbiAgdmFsdWU6IG51bWJlclxuKSA9PiAoe1xuICB0eXBlOiBJWDJfUEFSQU1FVEVSX0NIQU5HRUQsXG4gIHBheWxvYWQ6IHtcbiAgICBrZXksXG4gICAgdmFsdWUsXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGluc3RhbmNlQWRkZWQgPSAob3B0aW9uczogYW55KSA9PiAoe1xuICB0eXBlOiBJWDJfSU5TVEFOQ0VfQURERUQsXG4gIHBheWxvYWQ6IHtcbiAgICAuLi5vcHRpb25zLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZVN0YXJ0ZWQgPSAoaW5zdGFuY2VJZDogc3RyaW5nLCB0aW1lOiBudW1iZXIpID0+ICh7XG4gIHR5cGU6IElYMl9JTlNUQU5DRV9TVEFSVEVELFxuICBwYXlsb2FkOiB7XG4gICAgaW5zdGFuY2VJZCxcbiAgICB0aW1lLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZVJlbW92ZWQgPSAoaW5zdGFuY2VJZDogc3RyaW5nKSA9PiAoe1xuICB0eXBlOiBJWDJfSU5TVEFOQ0VfUkVNT1ZFRCxcbiAgcGF5bG9hZDoge1xuICAgIGluc3RhbmNlSWQsXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGVsZW1lbnRTdGF0ZUNoYW5nZWQgPSAoXG4gIGVsZW1lbnRJZDogYW55LFxuICBhY3Rpb25UeXBlSWQ6IEFjdGlvblR5cGVJZFR5cGUsXG4gIGN1cnJlbnQ6IGFueSxcbiAgYWN0aW9uSXRlbTogYW55XG4pID0+ICh7XG4gIHR5cGU6IElYMl9FTEVNRU5UX1NUQVRFX0NIQU5HRUQsXG4gIHBheWxvYWQ6IHtcbiAgICBlbGVtZW50SWQsXG4gICAgYWN0aW9uVHlwZUlkLFxuICAgIGN1cnJlbnQsXG4gICAgYWN0aW9uSXRlbSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgdHlwZSBhY3Rpb25MaXN0UGxheWJhY2tDaGFuZ2VkUGF5bG9hZCA9IHtcbiAgYWN0aW9uTGlzdElkOiBBY3Rpb25MaXN0SWQ7XG4gIGlzUGxheWluZzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25MaXN0UGxheWJhY2tDaGFuZ2VkID0gKHtcbiAgYWN0aW9uTGlzdElkLFxuICBpc1BsYXlpbmcsXG59OiBhY3Rpb25MaXN0UGxheWJhY2tDaGFuZ2VkUGF5bG9hZCkgPT4gKHtcbiAgdHlwZTogSVgyX0FDVElPTl9MSVNUX1BMQVlCQUNLX0NIQU5HRUQsXG4gIHBheWxvYWQ6IHtcbiAgICBhY3Rpb25MaXN0SWQsXG4gICAgaXNQbGF5aW5nLFxuICB9LFxufSk7XG5cbmV4cG9ydCB0eXBlIHZpZXdwb3J0V2lkdGhDaGFuZ2VkUGF5bG9hZCA9IHtcbiAgd2lkdGg6IG51bWJlcjtcbiAgbWVkaWFRdWVyaWVzOiBhbnk7XG59O1xuXG5leHBvcnQgY29uc3Qgdmlld3BvcnRXaWR0aENoYW5nZWQgPSAoe1xuICB3aWR0aCxcbiAgbWVkaWFRdWVyaWVzLFxufTogdmlld3BvcnRXaWR0aENoYW5nZWRQYXlsb2FkKSA9PiAoe1xuICB0eXBlOiBJWDJfVklFV1BPUlRfV0lEVEhfQ0hBTkdFRCxcbiAgcGF5bG9hZDoge1xuICAgIHdpZHRoLFxuICAgIG1lZGlhUXVlcmllcyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgbWVkaWFRdWVyaWVzRGVmaW5lZCA9ICgpID0+ICh7XG4gIHR5cGU6IElYMl9NRURJQV9RVUVSSUVTX0RFRklORUQsXG59KTtcbiJdLCJuYW1lcyI6WyJhY3Rpb25MaXN0UGxheWJhY2tDaGFuZ2VkIiwiYW5pbWF0aW9uRnJhbWVDaGFuZ2VkIiwiY2xlYXJSZXF1ZXN0ZWQiLCJlbGVtZW50U3RhdGVDaGFuZ2VkIiwiZXZlbnRMaXN0ZW5lckFkZGVkIiwiZXZlbnRTdGF0ZUNoYW5nZWQiLCJpbnN0YW5jZUFkZGVkIiwiaW5zdGFuY2VSZW1vdmVkIiwiaW5zdGFuY2VTdGFydGVkIiwibWVkaWFRdWVyaWVzRGVmaW5lZCIsInBhcmFtZXRlckNoYW5nZWQiLCJwbGF5YmFja1JlcXVlc3RlZCIsInByZXZpZXdSZXF1ZXN0ZWQiLCJyYXdEYXRhSW1wb3J0ZWQiLCJzZXNzaW9uSW5pdGlhbGl6ZWQiLCJzZXNzaW9uU3RhcnRlZCIsInNlc3Npb25TdG9wcGVkIiwic3RvcFJlcXVlc3RlZCIsInRlc3RGcmFtZVJlbmRlcmVkIiwidmlld3BvcnRXaWR0aENoYW5nZWQiLCJJWDJfUkFXX0RBVEFfSU1QT1JURUQiLCJJWDJfU0VTU0lPTl9JTklUSUFMSVpFRCIsIklYMl9TRVNTSU9OX1NUQVJURUQiLCJJWDJfU0VTU0lPTl9TVE9QUEVEIiwiSVgyX1BSRVZJRVdfUkVRVUVTVEVEIiwiSVgyX1BMQVlCQUNLX1JFUVVFU1RFRCIsIklYMl9TVE9QX1JFUVVFU1RFRCIsIklYMl9DTEVBUl9SRVFVRVNURUQiLCJJWDJfRVZFTlRfTElTVEVORVJfQURERUQiLCJJWDJfVEVTVF9GUkFNRV9SRU5ERVJFRCIsIklYMl9FVkVOVF9TVEFURV9DSEFOR0VEIiwiSVgyX0FOSU1BVElPTl9GUkFNRV9DSEFOR0VEIiwiSVgyX1BBUkFNRVRFUl9DSEFOR0VEIiwiSVgyX0lOU1RBTkNFX0FEREVEIiwiSVgyX0lOU1RBTkNFX1NUQVJURUQiLCJJWDJfSU5TVEFOQ0VfUkVNT1ZFRCIsIklYMl9FTEVNRU5UX1NUQVRFX0NIQU5HRUQiLCJJWDJfQUNUSU9OX0xJU1RfUExBWUJBQ0tfQ0hBTkdFRCIsIklYMl9WSUVXUE9SVF9XSURUSF9DSEFOR0VEIiwiSVgyX01FRElBX1FVRVJJRVNfREVGSU5FRCIsIklYMkVuZ2luZUFjdGlvblR5cGVzIiwicmVpZnlTdGF0ZSIsIklYMlZhbmlsbGFVdGlscyIsInJhd0RhdGEiLCJ0eXBlIiwicGF5bG9hZCIsImhhc0JvdW5kYXJ5Tm9kZXMiLCJyZWR1Y2VkTW90aW9uIiwiZGVmZXIiLCJhY3Rpb25UeXBlSWQiLCJBY3Rpb25UeXBlQ29uc3RzIiwiR0VORVJBTF9TVEFSVF9BQ1RJT04iLCJhY3Rpb25MaXN0SWQiLCJhY3Rpb25JdGVtSWQiLCJldmVudElkIiwiYWxsb3dFdmVudHMiLCJpbW1lZGlhdGUiLCJ0ZXN0TWFudWFsIiwidmVyYm9zZSIsInRhcmdldCIsImxpc3RlbmVyUGFyYW1zIiwic3RlcCIsInN0YXRlS2V5IiwibmV3U3RhdGUiLCJub3ciLCJwYXJhbWV0ZXJzIiwia2V5IiwidmFsdWUiLCJvcHRpb25zIiwiaW5zdGFuY2VJZCIsInRpbWUiLCJlbGVtZW50SWQiLCJjdXJyZW50IiwiYWN0aW9uSXRlbSIsImlzUGxheWluZyIsIndpZHRoIiwibWVkaWFRdWVyaWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXFSYUEseUJBQXlCO2VBQXpCQTs7SUFoRUFDLHFCQUFxQjtlQUFyQkE7O0lBdERBQyxjQUFjO2VBQWRBOztJQWtHQUMsbUJBQW1CO2VBQW5CQTs7SUF6RkFDLGtCQUFrQjtlQUFsQkE7O0lBNkJBQyxpQkFBaUI7ZUFBakJBOztJQXNDQUMsYUFBYTtlQUFiQTs7SUFlQUMsZUFBZTtlQUFmQTs7SUFSQUMsZUFBZTtlQUFmQTs7SUE4REFDLG1CQUFtQjtlQUFuQkE7O0lBaEZBQyxnQkFBZ0I7ZUFBaEJBOztJQXZHQUMsaUJBQWlCO2VBQWpCQTs7SUF6QkFDLGdCQUFnQjtlQUFoQkE7O0lBcENBQyxlQUFlO2VBQWZBOztJQVlBQyxrQkFBa0I7ZUFBbEJBOztJQVdBQyxjQUFjO2VBQWRBOztJQUlBQyxjQUFjO2VBQWRBOztJQStEQUMsYUFBYTtlQUFiQTs7SUFpQ0FDLGlCQUFpQjtlQUFqQkE7O0lBOEdBQyxvQkFBb0I7ZUFBcEJBOzs7aUNBbFNOO3dCQUV1QjtBQWM5QixNQUFNLEVBQ0pDLHFCQUFxQixFQUNyQkMsdUJBQXVCLEVBQ3ZCQyxtQkFBbUIsRUFDbkJDLG1CQUFtQixFQUNuQkMscUJBQXFCLEVBQ3JCQyxzQkFBc0IsRUFDdEJDLGtCQUFrQixFQUNsQkMsbUJBQW1CLEVBQ25CQyx3QkFBd0IsRUFDeEJDLHVCQUF1QixFQUN2QkMsdUJBQXVCLEVBQ3ZCQywyQkFBMkIsRUFDM0JDLHFCQUFxQixFQUNyQkMsa0JBQWtCLEVBQ2xCQyxvQkFBb0IsRUFDcEJDLG9CQUFvQixFQUNwQkMseUJBQXlCLEVBQ3pCQyxnQ0FBZ0MsRUFDaENDLDBCQUEwQixFQUMxQkMseUJBQXlCLEVBQzFCLEdBQUdDLHFDQUFvQjtBQUV4QixNQUFNLEVBQUNDLFVBQVUsRUFBQyxHQUFHQyx1QkFBZTtBQWtCN0IsTUFBTTdCLGtCQUFrQixDQUFDOEIsVUFBeUIsQ0FBQTtRQUN2REMsTUFBTXhCO1FBQ055QixTQUFTO1lBQ1AsR0FBR0osV0FBV0UsUUFBUTtRQUN4QjtJQUNGLENBQUE7QUFPTyxNQUFNN0IscUJBQXFCLENBQUMsRUFDakNnQyxnQkFBZ0IsRUFDaEJDLGFBQWEsRUFDYSxHQUFNLENBQUE7UUFDaENILE1BQU12QjtRQUNOd0IsU0FBUztZQUNQQztZQUNBQztRQUNGO0lBQ0YsQ0FBQTtBQUVPLE1BQU1oQyxpQkFBaUIsSUFBTyxDQUFBO1FBQ25DNkIsTUFBTXRCO0lBQ1IsQ0FBQTtBQUVPLE1BQU1OLGlCQUFpQixJQUFPLENBQUE7UUFDbkM0QixNQUFNckI7SUFDUixDQUFBO0FBT08sTUFBTVgsbUJBQW1CLENBQUMsRUFDL0IrQixPQUFPLEVBQ1BLLEtBQUssRUFDbUIsR0FBTSxDQUFBO1FBQzlCSixNQUFNcEI7UUFDTnFCLFNBQVM7WUFDUEc7WUFDQUw7UUFDRjtJQUNGLENBQUE7QUFnQk8sTUFBTWhDLG9CQUFvQixDQUFDLEVBQ2hDc0MsZUFBZUMsaUNBQWdCLENBQUNDLG9CQUFvQixFQUNwREMsWUFBWSxFQUNaQyxZQUFZLEVBQ1pDLE9BQU8sRUFDUEMsV0FBVyxFQUNYQyxTQUFTLEVBQ1RDLFVBQVUsRUFDVkMsT0FBTyxFQUNQZixPQUFPLEVBQ2tCLEdBQU0sQ0FBQTtRQUMvQkMsTUFBTW5CO1FBQ05vQixTQUFTO1lBQ1BJO1lBQ0FHO1lBQ0FDO1lBQ0FJO1lBQ0FIO1lBQ0FDO1lBQ0FDO1lBQ0FFO1lBQ0FmO1FBQ0Y7SUFDRixDQUFBO0FBTU8sTUFBTTFCLGdCQUFnQixDQUMzQm1DLGVBQ0ksQ0FBQTtRQUNKUixNQUFNbEI7UUFDTm1CLFNBQVM7WUFDUE87UUFDRjtJQUNGLENBQUE7QUFFTyxNQUFNbEQsaUJBQWlCLElBQU8sQ0FBQTtRQUNuQzBDLE1BQU1qQjtJQUNSLENBQUE7QUFPTyxNQUFNdkIscUJBQXFCLENBQ2hDdUQsUUFDQUMsaUJBQ0ksQ0FBQTtRQUNKaEIsTUFBTWhCO1FBQ05pQixTQUFTO1lBQ1BjO1lBQ0FDO1FBQ0Y7SUFDRixDQUFBO0FBTU8sTUFBTTFDLG9CQUFvQixDQUMvQjJDLE9BQXlDLENBQUMsR0FDdEMsQ0FBQTtRQUNKakIsTUFBTWY7UUFDTmdCLFNBQVM7WUFDUGdCO1FBQ0Y7SUFDRixDQUFBO0FBT08sTUFBTXhELG9CQUFvQixDQUMvQnlELFVBQ0FDLFdBQ0ksQ0FBQTtRQUNKbkIsTUFBTWQ7UUFDTmUsU0FBUztZQUNQaUI7WUFDQUM7UUFDRjtJQUNGLENBQUE7QUFPTyxNQUFNOUQsd0JBQXdCLENBQ25DK0QsS0FDQUMsYUFDSSxDQUFBO1FBQ0pyQixNQUFNYjtRQUNOYyxTQUFTO1lBQ1BtQjtZQUNBQztRQUNGO0lBQ0YsQ0FBQTtBQUVPLE1BQU12RCxtQkFBbUIsQ0FDOUJ3RCxLQUNBQyxRQUNJLENBQUE7UUFDSnZCLE1BQU1aO1FBQ05hLFNBQVM7WUFDUHFCO1lBQ0FDO1FBQ0Y7SUFDRixDQUFBO0FBRU8sTUFBTTdELGdCQUFnQixDQUFDOEQsVUFBa0IsQ0FBQTtRQUM5Q3hCLE1BQU1YO1FBQ05ZLFNBQVM7WUFDUCxHQUFHdUIsT0FBTztRQUNaO0lBQ0YsQ0FBQTtBQUVPLE1BQU01RCxrQkFBa0IsQ0FBQzZELFlBQW9CQyxPQUFrQixDQUFBO1FBQ3BFMUIsTUFBTVY7UUFDTlcsU0FBUztZQUNQd0I7WUFDQUM7UUFDRjtJQUNGLENBQUE7QUFFTyxNQUFNL0Qsa0JBQWtCLENBQUM4RCxhQUF3QixDQUFBO1FBQ3REekIsTUFBTVQ7UUFDTlUsU0FBUztZQUNQd0I7UUFDRjtJQUNGLENBQUE7QUFFTyxNQUFNbEUsc0JBQXNCLENBQ2pDb0UsV0FDQXRCLGNBQ0F1QixTQUNBQyxhQUNJLENBQUE7UUFDSjdCLE1BQU1SO1FBQ05TLFNBQVM7WUFDUDBCO1lBQ0F0QjtZQUNBdUI7WUFDQUM7UUFDRjtJQUNGLENBQUE7QUFPTyxNQUFNekUsNEJBQTRCLENBQUMsRUFDeENvRCxZQUFZLEVBQ1pzQixTQUFTLEVBQ3dCLEdBQU0sQ0FBQTtRQUN2QzlCLE1BQU1QO1FBQ05RLFNBQVM7WUFDUE87WUFDQXNCO1FBQ0Y7SUFDRixDQUFBO0FBT08sTUFBTXZELHVCQUF1QixDQUFDLEVBQ25Dd0QsS0FBSyxFQUNMQyxZQUFZLEVBQ2dCLEdBQU0sQ0FBQTtRQUNsQ2hDLE1BQU1OO1FBQ05PLFNBQVM7WUFDUDhCO1lBQ0FDO1FBQ0Y7SUFDRixDQUFBO0FBRU8sTUFBTW5FLHNCQUFzQixJQUFPLENBQUE7UUFDeENtQyxNQUFNTDtJQUNSLENBQUEifQ==
    
    }),
    46011: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    // Array.includes needed for IE11 @packages/systems/ix2/shared-utils/quick-effects
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        actions: function() {
            return _IX2EngineActions;
        },
        destroy: function() {
            return destroy;
        },
        init: function() {
            return init;
        },
        setEnv: function() {
            return setEnv;
        },
        store: function() {
            return store;
        }
    });
    const _redux = __webpack_require__(19516);
    const _IX2Reducer = /*#__PURE__*/ _interop_require_default(__webpack_require__(17243));
    const _IX2VanillaEngine = __webpack_require__(51970);
    const _IX2EngineActions = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(13946));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    const store = (0, _redux.createStore)(_IX2Reducer.default);
    function setEnv(env) {
        if (env()) {
            (0, _IX2VanillaEngine.observeRequests)(store);
        }
    }
    function init(rawData) {
        destroy();
        (0, _IX2VanillaEngine.startEngine)({
            store,
            rawData,
            allowEvents: true
        });
    }
    function destroy() {
        (0, _IX2VanillaEngine.stopEngine)(store);
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFycmF5LmluY2x1ZGVzIG5lZWRlZCBmb3IgSUUxMSBAcGFja2FnZXMvc3lzdGVtcy9peDIvc2hhcmVkLXV0aWxzL3F1aWNrLWVmZmVjdHNcbmltcG9ydCAnY29yZS1qcy9mZWF0dXJlcy9hcnJheS9pbmNsdWRlcyc7XG5cbmltcG9ydCB7Y3JlYXRlU3RvcmV9IGZyb20gJ3JlZHV4JztcbmltcG9ydCByZWR1Y2VyIGZyb20gJy4vcmVkdWNlcnMvSVgyUmVkdWNlcic7XG5pbXBvcnQge1xuICBzdGFydEVuZ2luZSxcbiAgc3RvcEVuZ2luZSxcbiAgb2JzZXJ2ZVJlcXVlc3RzLFxufSBmcm9tICcuL2xvZ2ljL0lYMlZhbmlsbGFFbmdpbmUnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMvSVgyRW5naW5lQWN0aW9ucyc7XG5pbXBvcnQge1xuICB0eXBlIElYMlJhd0RhdGEsXG4gIHR5cGUgcmF3RGF0YUltcG9ydGVkUGF5bG9hZCxcbn0gZnJvbSAnLi9hY3Rpb25zL0lYMkVuZ2luZUFjdGlvbnMnO1xuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIpO1xuXG5mdW5jdGlvbiBzZXRFbnYoZW52OiAoYXJnMT86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpID0+IGJvb2xlYW4pIHtcbiAgaWYgKGVudigpKSB7XG4gICAgb2JzZXJ2ZVJlcXVlc3RzKHN0b3JlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KHJhd0RhdGE6IElYMlJhd0RhdGEpIHtcbiAgZGVzdHJveSgpO1xuXG4gIHN0YXJ0RW5naW5lKHtzdG9yZSwgcmF3RGF0YSwgYWxsb3dFdmVudHM6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgc3RvcEVuZ2luZShzdG9yZSk7XG59XG5cbmV4cG9ydCB7XG4gIHNldEVudixcbiAgaW5pdCxcbiAgZGVzdHJveSxcbiAgc3RvcmUsXG4gIGFjdGlvbnMsXG4gIHR5cGUgSVgyUmF3RGF0YSxcbiAgdHlwZSByYXdEYXRhSW1wb3J0ZWRQYXlsb2FkLFxufTtcbiJdLCJuYW1lcyI6WyJhY3Rpb25zIiwiZGVzdHJveSIsImluaXQiLCJzZXRFbnYiLCJzdG9yZSIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsImVudiIsIm9ic2VydmVSZXF1ZXN0cyIsInJhd0RhdGEiLCJzdGFydEVuZ2luZSIsImFsbG93RXZlbnRzIiwic3RvcEVuZ2luZSJdLCJtYXBwaW5ncyI6IkFBQUEsa0ZBQWtGOzs7Ozs7Ozs7Ozs7SUF1Q2hGQSxPQUFPO2VBQVBBOztJQUZBQyxPQUFPO2VBQVBBOztJQURBQyxJQUFJO2VBQUpBOztJQURBQyxNQUFNO2VBQU5BOztJQUdBQyxLQUFLO2VBQUxBOzs7dUJBbkN3QjttRUFDTjtrQ0FLYjswRUFDa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTXpCLE1BQU1BLFFBQVFDLElBQUFBLGtCQUFXLEVBQUNDLG1CQUFPO0FBRWpDLFNBQVNILE9BQU9JLEdBQWtEO0lBQ2hFLElBQUlBLE9BQU87UUFDVEMsSUFBQUEsaUNBQWUsRUFBQ0o7SUFDbEI7QUFDRjtBQUVBLFNBQVNGLEtBQUtPLE9BQW1CO0lBQy9CUjtJQUVBUyxJQUFBQSw2QkFBVyxFQUFDO1FBQUNOO1FBQU9LO1FBQVNFLGFBQWE7SUFBSTtBQUNoRDtBQUVBLFNBQVNWO0lBQ1BXLElBQUFBLDRCQUFVLEVBQUNSO0FBQ2IifQ==
    
    }),
    15012: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        elementContains: function() {
            return elementContains;
        },
        getChildElements: function() {
            return getChildElements;
        },
        getClosestElement: function() {
            return getClosestElement;
        },
        getProperty: function() {
            return getProperty;
        },
        getQuerySelector: function() {
            return getQuerySelector;
        },
        getRefType: function() {
            return getRefType;
        },
        getSiblingElements: function() {
            return getSiblingElements;
        },
        getStyle: function() {
            return getStyle;
        },
        getValidDocument: function() {
            return getValidDocument;
        },
        isSiblingNode: function() {
            return isSiblingNode;
        },
        matchSelector: function() {
            return matchSelector;
        },
        queryDocument: function() {
            return queryDocument;
        },
        setStyle: function() {
            return setStyle;
        }
    });
    const _shared = __webpack_require__(9468);
    const _sharedconstants = __webpack_require__(7087);
    const { ELEMENT_MATCHES } = _shared.IX2BrowserSupport;
    const { IX2_ID_DELIMITER, HTML_ELEMENT, PLAIN_OBJECT, WF_PAGE } = _sharedconstants.IX2EngineConstants;
    function setStyle(element, prop, value) {
        // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
        element.style[prop] = value;
    }
    function getStyle(element, prop) {
        if (prop.startsWith('--')) {
            return window.getComputedStyle(document.documentElement).getPropertyValue(prop);
        }
        if (element.style instanceof CSSStyleDeclaration) {
            // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
            return element.style[prop];
        }
    }
    function getProperty(element, prop) {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'HTMLElement'.
        return element[prop];
    }
    function matchSelector(selector) {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'HTMLElement'.
        return (element)=>element[ELEMENT_MATCHES](selector);
    }
    function getQuerySelector({ id, selector }) {
        if (id) {
            let nodeId = id;
            if (id.indexOf(IX2_ID_DELIMITER) !== -1) {
                const pair = id.split(IX2_ID_DELIMITER);
                const pageId = pair[0];
                // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
                nodeId = pair[1];
                // Short circuit query if we're on the wrong page
                if (pageId !== document.documentElement.getAttribute(WF_PAGE)) {
                    return null;
                }
            }
            return `[data-w-id="${nodeId}"], [data-w-id^="${nodeId}_instance"]`;
        }
        return selector;
    }
    function getValidDocument(pageId) {
        if (pageId == null || pageId === document.documentElement.getAttribute(WF_PAGE)) {
            return document;
        }
        return null;
    }
    function queryDocument(baseSelector, descendantSelector) {
        return Array.prototype.slice.call(document.querySelectorAll(descendantSelector ? baseSelector + ' ' + descendantSelector : baseSelector));
    }
    function elementContains(parent, child) {
        return parent.contains(child);
    }
    function isSiblingNode(a, b) {
        return a !== b && a.parentNode === b.parentNode;
    }
    function getChildElements(// @ts-expect-error - TS2315 - Type 'NodeList' is not generic.
    sourceElements) {
        const childElements = [];
        for(let i = 0, { length } = sourceElements || []; i < length; i++){
            const { children } = sourceElements[i];
            const { length: childCount } = children;
            if (!childCount) {
                continue;
            }
            for(let j = 0; j < childCount; j++){
                childElements.push(children[j]);
            }
        }
        return childElements;
    }
    function getSiblingElements(sourceElements = []) {
        const elements = [];
        const parentCache = [];
        for(let i = 0, { length } = sourceElements; i < length; i++){
            // @ts-expect-error - TS2339 - Property 'parentNode' does not exist on type 'undefined'.
            const { parentNode } = sourceElements[i];
            if (!parentNode || !parentNode.children || !parentNode.children.length) {
                continue;
            }
            if (parentCache.indexOf(parentNode) !== -1) {
                continue;
            }
            parentCache.push(parentNode);
            let el = parentNode.firstElementChild;
            while(el != null){
                // @ts-expect-error - TS2345 - Argument of type 'any' is not assignable to parameter of type 'never'.
                if (sourceElements.indexOf(el) === -1) {
                    elements.push(el);
                }
                el = el.nextElementSibling;
            }
        }
        return elements;
    }
    const getClosestElement = Element.prototype.closest ? (element, selector)=>{
        if (!document.documentElement.contains(element)) {
            return null;
        }
        return element.closest(selector);
    } : (element, selector)=>{
        if (!document.documentElement.contains(element)) {
            return null;
        }
        let el = element;
        do {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'HTMLElement'. | TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'HTMLElement'.
            if (el[ELEMENT_MATCHES] && el[ELEMENT_MATCHES](selector)) {
                return el;
            }
            // @ts-expect-error - TS2322 - Type 'ParentNode | null' is not assignable to type 'HTMLElement'.
            el = el.parentNode;
        }while (el != null);
        return null;
    };
    function getRefType(ref) {
        if (ref != null && typeof ref == 'object') {
            return ref instanceof Element ? HTML_ELEMENT : PLAIN_OBJECT;
        }
        return null;
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    51970: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        observeRequests: function() {
            return observeRequests;
        },
        startActionGroup: function() {
            return startActionGroup;
        },
        startEngine: function() {
            return startEngine;
        },
        stopActionGroup: function() {
            return stopActionGroup;
        },
        stopAllActionGroups: function() {
            return stopAllActionGroups;
        },
        stopEngine: function() {
            return stopEngine;
        }
    });
    const _find = /*#__PURE__*/ _interop_require_default(__webpack_require__(19777));
    const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
    const _size = /*#__PURE__*/ _interop_require_default(__webpack_require__(64659));
    const _omitBy = /*#__PURE__*/ _interop_require_default(__webpack_require__(13452));
    const _isEmpty = /*#__PURE__*/ _interop_require_default(__webpack_require__(86633));
    const _mapValues = /*#__PURE__*/ _interop_require_default(__webpack_require__(53729));
    const _forEach = /*#__PURE__*/ _interop_require_default(__webpack_require__(32397));
    const _throttle = /*#__PURE__*/ _interop_require_default(__webpack_require__(35082));
    const _sharedconstants = __webpack_require__(7087);
    const _shared = __webpack_require__(9468);
    const _IX2EngineActions = __webpack_require__(13946);
    const _IX2BrowserApi = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(15012));
    const _IX2VanillaEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(58955));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    const QuickEffectsIdList = Object.keys(_sharedconstants.QuickEffectIds);
    const isQuickEffect = (actionTypeId)=>QuickEffectsIdList.includes(actionTypeId);
    const { COLON_DELIMITER, BOUNDARY_SELECTOR, HTML_ELEMENT, RENDER_GENERAL, W_MOD_IX } = _sharedconstants.IX2EngineConstants;
    const { getAffectedElements, getElementId, getDestinationValues, observeStore, getInstanceId, renderHTMLElement, clearAllStyles, getMaxDurationItemIndex, getComputedStyle, getInstanceOrigin, reduceListToGroup, shouldNamespaceEventParameter, getNamespacedParameterId, shouldAllowMediaQuery, cleanupHTMLElement, clearObjectCache, stringifyTarget, mediaQueriesEqual, shallowEqual } = _shared.IX2VanillaUtils;
    const { isPluginType, createPluginInstance, getPluginDuration } = _shared.IX2VanillaPlugins;
    const ua = navigator.userAgent;
    const IS_MOBILE_SAFARI = ua.match(/iPad/i) || ua.match(/iPhone/);
    // Keep throttled events at ~80fps to reduce reflows while maintaining render accuracy
    const THROTTLED_EVENT_WAIT = 12;
    function observeRequests(store) {
        observeStore({
            store,
            select: ({ ixRequest })=>ixRequest.preview,
            onChange: handlePreviewRequest
        });
        observeStore({
            store,
            select: ({ ixRequest })=>ixRequest.playback,
            onChange: handlePlaybackRequest
        });
        observeStore({
            store,
            select: ({ ixRequest })=>ixRequest.stop,
            onChange: handleStopRequest
        });
        observeStore({
            store,
            select: ({ ixRequest })=>ixRequest.clear,
            onChange: handleClearRequest
        });
    }
    function observeMediaQueryChange(store) {
        observeStore({
            store,
            select: ({ ixSession })=>ixSession.mediaQueryKey,
            onChange: ()=>{
                stopEngine(store);
                clearAllStyles({
                    store,
                    elementApi: _IX2BrowserApi
                });
                startEngine({
                    store,
                    allowEvents: true
                });
                dispatchPageUpdateEvent();
            }
        });
    }
    function observeOneRenderTick(store, onTick) {
        const unsubscribe = observeStore({
            store,
            select: ({ ixSession })=>ixSession.tick,
            // @ts-expect-error - TS7006 - Parameter 'tick' implicitly has an 'any' type.
            onChange: (tick)=>{
                onTick(tick);
                unsubscribe();
            }
        });
    }
    function handlePreviewRequest({ rawData, defer }, store) {
        const start = ()=>{
            startEngine({
                store,
                rawData,
                allowEvents: true
            });
            dispatchPageUpdateEvent();
        };
        defer ? setTimeout(start, 0) : start();
    }
    function dispatchPageUpdateEvent() {
        document.dispatchEvent(new CustomEvent('IX2_PAGE_UPDATE'));
    }
    function handlePlaybackRequest(playback, store) {
        const { actionTypeId, actionListId, actionItemId, eventId, allowEvents, immediate, testManual, verbose = true } = playback;
        let { rawData } = playback;
        if (actionListId && actionItemId && rawData && immediate) {
            const actionList = rawData.actionLists[actionListId];
            if (actionList) {
                rawData = reduceListToGroup({
                    actionList,
                    actionItemId,
                    rawData
                });
            }
        }
        startEngine({
            store,
            rawData,
            allowEvents,
            testManual
        });
        if (actionListId && actionTypeId === _sharedconstants.ActionTypeConsts.GENERAL_START_ACTION || isQuickEffect(actionTypeId)) {
            // @ts-expect-error - TS2345 - Argument of type '{ store: any; actionListId: any; }' is not assignable to parameter of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; }'.
            stopActionGroup({
                store,
                actionListId
            });
            renderInitialGroup({
                store,
                actionListId,
                eventId
            });
            // @ts-expect-error - TS2345 - Argument of type '{ store: any; eventId: any; actionListId: any; immediate: any; verbose: any; }' is not assignable to parameter of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; groupIndex?: number | undefined; immediate: any; verbose: any; }'.
            const started = startActionGroup({
                store,
                eventId,
                actionListId,
                immediate,
                verbose
            });
            if (verbose && started) {
                store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
                    actionListId,
                    isPlaying: !immediate
                }));
            }
        }
    }
    function handleStopRequest({ actionListId }, store) {
        if (actionListId) {
            // @ts-expect-error - TS2345 - Argument of type '{ store: any; actionListId: any; }' is not assignable to parameter of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; }'.
            stopActionGroup({
                store,
                actionListId
            });
        } else {
            stopAllActionGroups({
                store
            });
        }
        stopEngine(store);
    }
    function handleClearRequest(state, store) {
        stopEngine(store);
        clearAllStyles({
            store,
            elementApi: _IX2BrowserApi
        });
    }
    function startEngine({ store, rawData, allowEvents, testManual }) {
        const { ixSession } = store.getState();
        if (rawData) {
            store.dispatch((0, _IX2EngineActions.rawDataImported)(rawData));
        }
        if (!ixSession.active) {
            store.dispatch((0, _IX2EngineActions.sessionInitialized)({
                hasBoundaryNodes: Boolean(document.querySelector(BOUNDARY_SELECTOR)),
                reducedMotion: document.body.hasAttribute('data-wf-ix-vacation') && window.matchMedia('(prefers-reduced-motion)').matches
            }));
            if (allowEvents) {
                bindEvents(store);
                addDocumentClass();
                if (store.getState().ixSession.hasDefinedMediaQueries) {
                    observeMediaQueryChange(store);
                }
            }
            store.dispatch((0, _IX2EngineActions.sessionStarted)());
            startRenderLoop(store, testManual);
        }
    }
    function addDocumentClass() {
        const { documentElement } = document;
        if (documentElement.className.indexOf(W_MOD_IX) === -1) {
            documentElement.className += ` ${W_MOD_IX}`;
        }
    }
    function startRenderLoop(store, testManual) {
        const handleFrame = (now)=>{
            const { ixSession, ixParameters } = store.getState();
            if (ixSession.active) {
                store.dispatch((0, _IX2EngineActions.animationFrameChanged)(now, ixParameters));
                if (testManual) {
                    observeOneRenderTick(store, handleFrame);
                } else {
                    requestAnimationFrame(handleFrame);
                }
            }
        };
        handleFrame(window.performance.now());
    }
    function stopEngine(store) {
        const { ixSession } = store.getState();
        if (ixSession.active) {
            const { eventListeners } = ixSession;
            eventListeners.forEach(clearEventListener);
            clearObjectCache();
            store.dispatch((0, _IX2EngineActions.sessionStopped)());
        }
    }
    // @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type. | TS7031 - Binding element 'listenerParams' implicitly has an 'any' type.
    function clearEventListener({ target, listenerParams }) {
        // eslint-disable-next-line prefer-spread
        target.removeEventListener.apply(target, listenerParams);
    }
    function createGroupInstances({ // @ts-expect-error - TS7031 - Binding element 'store' implicitly has an 'any' type.
    store, // @ts-expect-error - TS7031 - Binding element 'eventStateKey' implicitly has an 'any' type.
    eventStateKey, // @ts-expect-error - TS7031 - Binding element 'eventTarget' implicitly has an 'any' type.
    eventTarget, // @ts-expect-error - TS7031 - Binding element 'eventId' implicitly has an 'any' type.
    eventId, // @ts-expect-error - TS7031 - Binding element 'eventConfig' implicitly has an 'any' type.
    eventConfig, // @ts-expect-error - TS7031 - Binding element 'actionListId' implicitly has an 'any' type.
    actionListId, // @ts-expect-error - TS7031 - Binding element 'parameterGroup' implicitly has an 'any' type.
    parameterGroup, // @ts-expect-error - TS7031 - Binding element 'smoothing' implicitly has an 'any' type.
    smoothing, // @ts-expect-error - TS7031 - Binding element 'restingValue' implicitly has an 'any' type.
    restingValue }) {
        const { ixData, ixSession } = store.getState();
        const { events } = ixData;
        const event = events[eventId];
        const { eventTypeId } = event;
        const targetCache = {};
        const instanceActionGroups = {};
        const instanceConfigs = [];
        const { continuousActionGroups } = parameterGroup;
        let { id: parameterId } = parameterGroup;
        if (shouldNamespaceEventParameter(eventTypeId, eventConfig)) {
            parameterId = getNamespacedParameterId(eventStateKey, parameterId);
        }
        // Limit affected elements when event target is within a boundary node
        const eventElementRoot = ixSession.hasBoundaryNodes && eventTarget ? _IX2BrowserApi.getClosestElement(eventTarget, BOUNDARY_SELECTOR) : null;
        // @ts-expect-error - TS7006 - Parameter 'actionGroup' implicitly has an 'any' type.
        continuousActionGroups.forEach((actionGroup)=>{
            const { keyframe, actionItems } = actionGroup;
            // @ts-expect-error - TS7006 - Parameter 'actionItem' implicitly has an 'any' type.
            actionItems.forEach((actionItem)=>{
                const { actionTypeId } = actionItem;
                const { target } = actionItem.config;
                if (!target) {
                    return;
                }
                const elementRoot = target.boundaryMode ? eventElementRoot : null;
                const key = stringifyTarget(target) + COLON_DELIMITER + actionTypeId;
                instanceActionGroups[key] = appendActionItem(instanceActionGroups[key], keyframe, actionItem);
                if (!targetCache[key]) {
                    targetCache[key] = true;
                    const { config } = actionItem;
                    getAffectedElements({
                        config,
                        event,
                        eventTarget,
                        elementRoot,
                        elementApi: _IX2BrowserApi
                    }).forEach((element)=>{
                        instanceConfigs.push({
                            element,
                            key
                        });
                    });
                }
            });
        });
        instanceConfigs.forEach(({ element, key })=>{
            const actionGroups = instanceActionGroups[key];
            const actionItem = (0, _get.default)(actionGroups, `[0].actionItems[0]`, {});
            const { actionTypeId } = actionItem;
            const shouldUsePlugin = // If it's targeted by class, don't query the element by pluginElementId
            actionTypeId === _sharedconstants.ActionTypeConsts.PLUGIN_RIVE ? (actionItem.config?.target?.selectorGuids || []).length === 0 : isPluginType(actionTypeId);
            const pluginInstance = shouldUsePlugin ? createPluginInstance(actionTypeId)?.(element, actionItem) : null;
            const destination = getDestinationValues({
                element,
                actionItem,
                elementApi: _IX2BrowserApi
            }, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            pluginInstance);
            createInstance({
                store,
                element,
                eventId,
                actionListId,
                actionItem,
                destination,
                continuous: true,
                parameterId,
                actionGroups,
                smoothing,
                restingValue,
                pluginInstance
            });
        });
    }
    function appendActionItem(actionGroups = [], keyframe, actionItem) {
        const newActionGroups = [
            ...actionGroups
        ];
        let groupIndex;
        newActionGroups.some((group, index)=>{
            // @ts-expect-error - TS2339 - Property 'keyframe' does not exist on type 'never'.
            if (group.keyframe === keyframe) {
                groupIndex = index;
                return true;
            }
            return false;
        });
        if (groupIndex == null) {
            groupIndex = newActionGroups.length;
            // @ts-expect-error - TS2345 - Argument of type '{ keyframe: any; actionItems: never[]; }' is not assignable to parameter of type 'never'.
            newActionGroups.push({
                keyframe,
                actionItems: []
            });
        }
        // @ts-expect-error - TS2339 - Property 'actionItems' does not exist on type 'never'.
        newActionGroups[groupIndex].actionItems.push(actionItem);
        return newActionGroups;
    }
    function bindEvents(store) {
        const { ixData } = store.getState();
        const { eventTypeMap } = ixData;
        updateViewportWidth(store);
        (0, _forEach.default)(eventTypeMap, (events, key)=>{
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ SLIDER_ACTIVE: { handler: (options: any, state: any) => any; types: string; }; SLIDER_INACTIVE: { handler: (options: any, state: any) => any; types: string; }; DROPDOWN_OPEN: { handler: (options: any, state: any) => any; types: string; }; ... 21 more ...; PAGE_START: { ...; }; }'.
            const logic = _IX2VanillaEvents.default[key];
            if (!logic) {
                console.warn(`IX2 event type not configured: ${key}`);
                return;
            }
            bindEventType({
                // @ts-expect-error - TS7031 - Binding element 'logic' implicitly has an 'any' type.
                logic,
                store,
                events
            });
        });
        const { ixSession } = store.getState();
        if (ixSession.eventListeners.length) {
            bindResizeEvents(store);
        }
    }
    const WINDOW_RESIZE_EVENTS = [
        'resize',
        'orientationchange'
    ];
    function bindResizeEvents(store) {
        const handleResize = ()=>{
            updateViewportWidth(store);
        };
        WINDOW_RESIZE_EVENTS.forEach((type)=>{
            window.addEventListener(type, handleResize);
            store.dispatch((0, _IX2EngineActions.eventListenerAdded)(window, [
                type,
                handleResize
            ]));
        });
        handleResize();
    }
    function updateViewportWidth(store) {
        const { ixSession, ixData } = store.getState();
        const width = window.innerWidth;
        if (width !== ixSession.viewportWidth) {
            const { mediaQueries } = ixData;
            store.dispatch((0, _IX2EngineActions.viewportWidthChanged)({
                width,
                mediaQueries
            }));
        }
    }
    const mapFoundValues = (object, iteratee)=>(0, _omitBy.default)((0, _mapValues.default)(object, iteratee), _isEmpty.default);
    const forEachEventTarget = (eventTargets, eventCallback)=>{
        (0, _forEach.default)(eventTargets, (elements, eventId)=>{
            // @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type. | TS7006 - Parameter 'index' implicitly has an 'any' type.
            elements.forEach((element, index)=>{
                const eventStateKey = eventId + COLON_DELIMITER + index;
                eventCallback(element, eventId, eventStateKey);
            });
        });
    };
    const getAffectedForEvent = (event)=>{
        const config = {
            target: event.target,
            targets: event.targets
        };
        return getAffectedElements({
            config,
            elementApi: _IX2BrowserApi
        });
    };
    // @ts-expect-error - TS7031 - Binding element 'logic' implicitly has an 'any' type. | TS7031 - Binding element 'store' implicitly has an 'any' type. | TS7031 - Binding element 'events' implicitly has an 'any' type.
    function bindEventType({ logic, store, events }) {
        injectBehaviorCSSFixes(events);
        const { types: eventTypes, handler: eventHandler } = logic;
        const { ixData } = store.getState();
        const { actionLists } = ixData;
        const eventTargets = mapFoundValues(events, getAffectedForEvent);
        if (!(0, _size.default)(eventTargets)) {
            return;
        }
        (0, _forEach.default)(eventTargets, (elements, key)=>{
            const event = events[key];
            const { action: eventAction, id: eventId, mediaQueries = ixData.mediaQueryKeys } = event;
            const { actionListId } = eventAction.config;
            if (!mediaQueriesEqual(mediaQueries, ixData.mediaQueryKeys)) {
                store.dispatch((0, _IX2EngineActions.mediaQueriesDefined)());
            }
            if (eventAction.actionTypeId === _sharedconstants.ActionTypeConsts.GENERAL_CONTINUOUS_ACTION) {
                const configs = Array.isArray(event.config) ? event.config : [
                    event.config
                ];
                // @ts-expect-error - TS7006 - Parameter 'eventConfig' implicitly has an 'any' type.
                configs.forEach((eventConfig)=>{
                    const { continuousParameterGroupId } = eventConfig;
                    const paramGroups = (0, _get.default)(actionLists, `${actionListId}.continuousParameterGroups`, []);
                    const parameterGroup = (0, _find.default)(paramGroups, ({ id })=>id === continuousParameterGroupId);
                    const smoothing = (eventConfig.smoothing || 0) / 100;
                    const restingValue = (eventConfig.restingState || 0) / 100;
                    if (!parameterGroup) {
                        return;
                    }
                    elements.forEach((eventTarget, index)=>{
                        const eventStateKey = eventId + COLON_DELIMITER + index;
                        createGroupInstances({
                            store,
                            eventStateKey,
                            eventTarget,
                            eventId,
                            eventConfig,
                            actionListId,
                            parameterGroup,
                            smoothing,
                            restingValue
                        });
                    });
                });
            }
            if (eventAction.actionTypeId === _sharedconstants.ActionTypeConsts.GENERAL_START_ACTION || isQuickEffect(eventAction.actionTypeId)) {
                renderInitialGroup({
                    store,
                    actionListId,
                    eventId
                });
            }
        });
        const handleEvent = (nativeEvent)=>{
            const { ixSession } = store.getState();
            forEachEventTarget(eventTargets, (element, eventId, eventStateKey)=>{
                const event = events[eventId];
                const oldState = ixSession.eventState[eventStateKey];
                const { action: eventAction, mediaQueries = ixData.mediaQueryKeys } = event;
                // Bypass event handler if current media query is not listed in event config
                if (!shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) {
                    return;
                }
                const handleEventWithConfig = (eventConfig = {})=>{
                    const newState = eventHandler({
                        store,
                        element,
                        event,
                        eventConfig,
                        nativeEvent,
                        eventStateKey
                    }, oldState);
                    if (!shallowEqual(newState, oldState)) {
                        store.dispatch((0, _IX2EngineActions.eventStateChanged)(eventStateKey, newState));
                    }
                };
                if (eventAction.actionTypeId === _sharedconstants.ActionTypeConsts.GENERAL_CONTINUOUS_ACTION) {
                    const configs = Array.isArray(event.config) ? event.config : [
                        event.config
                    ];
                    configs.forEach(handleEventWithConfig);
                } else {
                    handleEventWithConfig();
                }
            });
        };
        const handleEventThrottled = (0, _throttle.default)(handleEvent, THROTTLED_EVENT_WAIT);
        const addListeners = ({ target = document, // @ts-expect-error - TS7031 - Binding element 'types' implicitly has an 'any' type.
        types, // @ts-expect-error - TS7031 - Binding element 'shouldThrottle' implicitly has an 'any' type.
        throttle: shouldThrottle })=>{
            types.split(' ').filter(Boolean)// @ts-expect-error - TS7006 - Parameter 'type' implicitly has an 'any' type.
            .forEach((type)=>{
                const handlerFunc = shouldThrottle ? handleEventThrottled : handleEvent;
                target.addEventListener(type, handlerFunc);
                store.dispatch((0, _IX2EngineActions.eventListenerAdded)(target, [
                    type,
                    handlerFunc
                ]));
            });
        };
        if (Array.isArray(eventTypes)) {
            eventTypes.forEach(addListeners);
        } else if (typeof eventTypes === 'string') {
            addListeners(logic);
        }
    }
    /**
     * Injects CSS into the document to fix behavior issues across
     * different devices.
     */ function injectBehaviorCSSFixes(events) {
        if (!IS_MOBILE_SAFARI) {
            return;
        }
        const injectedSelectors = {};
        let cssText = '';
        for(const eventId in events){
            const { eventTypeId, target } = events[eventId];
            const selector = _IX2BrowserApi.getQuerySelector(target);
            // @ts-expect-error - TS2538 - Type 'null' cannot be used as an index type.
            if (injectedSelectors[selector]) {
                continue;
            }
            // add a "cursor: pointer" style rule to ensure that CLICK events get fired for IOS devices
            if (eventTypeId === _sharedconstants.EventTypeConsts.MOUSE_CLICK || eventTypeId === _sharedconstants.EventTypeConsts.MOUSE_SECOND_CLICK) {
                // @ts-expect-error - TS2538 - Type 'null' cannot be used as an index type.
                injectedSelectors[selector] = true;
                cssText += selector + '{' + 'cursor: pointer;' + 'touch-action: manipulation;' + '}';
            }
        }
        if (cssText) {
            const style = document.createElement('style');
            style.textContent = cssText;
            document.body.appendChild(style);
        }
    }
    function renderInitialGroup({ store, actionListId, eventId }) {
        const { ixData, ixSession } = store.getState();
        const { actionLists, events } = ixData;
        // @ts-expect-error - TS18048 - 'events' is possibly 'undefined'.
        const event = events[eventId];
        // @ts-expect-error - TS18048 - 'actionLists' is possibly 'undefined'.
        const actionList = actionLists[actionListId];
        // @ts-expect-error - Property 'useFirstGroupAsInitialState' does not exist on type 'ActionListType'.
        if (actionList && actionList.useFirstGroupAsInitialState) {
            const initialStateItems = (0, _get.default)(actionList, 'actionItemGroups[0].actionItems', []);
            // Bypass initial state render if current media query is not listed in event config
            const mediaQueries = (0, _get.default)(event, 'mediaQueries', ixData.mediaQueryKeys);
            if (!shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) {
                return;
            }
            initialStateItems.forEach((actionItem)=>{
                const { config: itemConfig, actionTypeId } = actionItem;
                const config = // When useEventTarget is explicitly true, use event target/targets to query elements
                // However, skip this condition when objectId is defined
                // @ts-expect-error - Property 'target' does not exist on type 'never'.
                itemConfig?.target?.useEventTarget === true && // @ts-expect-error - Property 'target' does not exist on type 'never'.
                itemConfig?.target?.objectId == null ? {
                    target: event.target,
                    targets: event.targets
                } : itemConfig;
                const itemElements = getAffectedElements({
                    config,
                    event,
                    elementApi: _IX2BrowserApi
                });
                const shouldUsePlugin = isPluginType(actionTypeId);
                itemElements.forEach((element)=>{
                    const pluginInstance = shouldUsePlugin ? createPluginInstance(actionTypeId)?.(element, actionItem) : null;
                    createInstance({
                        destination: getDestinationValues({
                            element,
                            actionItem,
                            elementApi: _IX2BrowserApi
                        }, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-expect-error
                        pluginInstance),
                        immediate: true,
                        store,
                        element,
                        eventId,
                        actionItem,
                        actionListId,
                        pluginInstance
                    });
                });
            });
        }
    }
    function stopAllActionGroups({ store }) {
        const { ixInstances } = store.getState();
        (0, _forEach.default)(ixInstances, (instance)=>{
            if (!instance.continuous) {
                const { actionListId, verbose } = instance;
                removeInstance(instance, store);
                if (verbose) {
                    store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
                        actionListId,
                        isPlaying: false
                    }));
                }
            }
        });
    }
    function stopActionGroup({ // @ts-expect-error - TS7031 - Binding element 'store' implicitly has an 'any' type.
    store, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    eventId, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    eventTarget, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    eventStateKey, // @ts-expect-error - TS7031 - Binding element 'actionListId' implicitly has an 'any' type.
    actionListId }) {
        const { ixInstances, ixSession } = store.getState();
        // Check for element boundary before stopping engine instances
        const eventElementRoot = ixSession.hasBoundaryNodes && eventTarget ? _IX2BrowserApi.getClosestElement(eventTarget, BOUNDARY_SELECTOR) : null;
        (0, _forEach.default)(ixInstances, (instance)=>{
            const boundaryMode = (0, _get.default)(instance, 'actionItem.config.target.boundaryMode');
            // Validate event key if eventStateKey was provided, otherwise default to true
            const validEventKey = eventStateKey ? instance.eventStateKey === eventStateKey : true;
            // Remove engine instances that match the required ids
            if (instance.actionListId === actionListId && instance.eventId === eventId && validEventKey) {
                // Avoid removal when root boundary does not contain instance element
                if (eventElementRoot && boundaryMode && !_IX2BrowserApi.elementContains(eventElementRoot, instance.element)) {
                    return;
                }
                removeInstance(instance, store);
                if (instance.verbose) {
                    store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
                        actionListId,
                        isPlaying: false
                    }));
                }
            }
        });
    }
    function startActionGroup({ // @ts-expect-error - TS7031 - Binding element 'store' implicitly has an 'any' type.
    store, // @ts-expect-error - TS7031 - Binding element 'eventId' implicitly has an 'any' type.
    eventId, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    eventTarget, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    eventStateKey, // @ts-expect-error - TS7031 - Binding element 'actionListId' implicitly has an 'any' type.
    actionListId, groupIndex = 0, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    immediate, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    verbose }) {
        const { ixData, ixSession } = store.getState();
        const { events } = ixData;
        const event = events[eventId] || {};
        const { mediaQueries = ixData.mediaQueryKeys } = event;
        const actionList = (0, _get.default)(ixData, `actionLists.${actionListId}`, {});
        const { actionItemGroups, useFirstGroupAsInitialState } = actionList;
        // Abort playback if no action groups
        if (!actionItemGroups || !actionItemGroups.length) {
            return false;
        }
        // Reset to first group when event loop is configured
        if (groupIndex >= actionItemGroups.length && (0, _get.default)(event, 'config.loop')) {
            groupIndex = 0;
        }
        // Skip initial state group during action list playback, as it should already be applied
        if (groupIndex === 0 && useFirstGroupAsInitialState) {
            groupIndex++;
        }
        // Identify first animated group and apply the initial QuickEffect delay
        const isFirstGroup = groupIndex === 0 || groupIndex === 1 && useFirstGroupAsInitialState;
        const instanceDelay = isFirstGroup && isQuickEffect(event.action?.actionTypeId) ? event.config.delay : undefined;
        // Abort playback if no action items exist at group index
        const actionItems = (0, _get.default)(actionItemGroups, [
            groupIndex,
            'actionItems'
        ], []);
        if (!actionItems.length) {
            return false;
        }
        // Abort playback if current media query is not listed in event config
        if (!shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) {
            return false;
        }
        // Limit affected elements when event target is within a boundary node
        const eventElementRoot = ixSession.hasBoundaryNodes && eventTarget ? _IX2BrowserApi.getClosestElement(eventTarget, BOUNDARY_SELECTOR) : null;
        const carrierIndex = getMaxDurationItemIndex(actionItems);
        let groupStartResult = false;
        // @ts-expect-error - TS7006 - Parameter 'actionItem' implicitly has an 'any' type. | TS7006 - Parameter 'actionIndex' implicitly has an 'any' type.
        actionItems.forEach((actionItem, actionIndex)=>{
            const { config, actionTypeId } = actionItem;
            const shouldUsePlugin = isPluginType(actionTypeId);
            const { target } = config;
            if (!target) {
                return;
            }
            const elementRoot = target.boundaryMode ? eventElementRoot : null;
            const elements = getAffectedElements({
                config,
                event,
                eventTarget,
                elementRoot,
                elementApi: _IX2BrowserApi
            });
            elements.forEach((element, elementIndex)=>{
                const pluginInstance = shouldUsePlugin ? createPluginInstance(actionTypeId)?.(element, actionItem) : null;
                const pluginDuration = shouldUsePlugin ? getPluginDuration(actionTypeId)(element, actionItem) : null;
                groupStartResult = true;
                const isCarrier = carrierIndex === actionIndex && elementIndex === 0;
                const computedStyle = getComputedStyle({
                    element,
                    actionItem
                });
                const destination = getDestinationValues({
                    element,
                    actionItem,
                    elementApi: _IX2BrowserApi
                }, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                pluginInstance);
                createInstance({
                    store,
                    element,
                    actionItem,
                    eventId,
                    eventTarget,
                    eventStateKey,
                    actionListId,
                    groupIndex,
                    isCarrier,
                    computedStyle,
                    destination,
                    immediate,
                    verbose,
                    pluginInstance,
                    pluginDuration,
                    instanceDelay
                });
            });
        });
        return groupStartResult;
    }
    // @ts-expect-error - TS7006 - Parameter 'options' implicitly has an 'any' type.
    function createInstance(options) {
        const { store, computedStyle, ...rest } = options;
        const { element, actionItem, immediate, pluginInstance, continuous, restingValue, eventId } = rest;
        const autoStart = !continuous;
        const instanceId = getInstanceId();
        const { ixElements, ixSession, ixData } = store.getState();
        const elementId = getElementId(ixElements, element);
        const { refState } = ixElements[elementId] || {};
        const refType = _IX2BrowserApi.getRefType(element);
        const skipMotion = // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly TRANSFORM_MOVE: true; readonly TRANSFORM_SCALE: true; readonly TRANSFORM_ROTATE: true; readonly TRANSFORM_SKEW: true; readonly STYLE_SIZE: true; readonly STYLE_FILTER: true; readonly STYLE_FONT_VARIATION: true; }'.
        ixSession.reducedMotion && _sharedconstants.ReducedMotionTypes[actionItem.actionTypeId];
        let skipToValue;
        if (skipMotion && continuous) {
            switch(ixData.events[eventId]?.eventTypeId){
                case _sharedconstants.EventTypeConsts.MOUSE_MOVE:
                case _sharedconstants.EventTypeConsts.MOUSE_MOVE_IN_VIEWPORT:
                    skipToValue = restingValue;
                    break;
                default:
                    skipToValue = 0.5;
                    break;
            }
        }
        const origin = getInstanceOrigin(element, refState, computedStyle, actionItem, _IX2BrowserApi, // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        pluginInstance);
        store.dispatch((0, _IX2EngineActions.instanceAdded)({
            instanceId,
            elementId,
            origin,
            refType,
            skipMotion,
            skipToValue,
            ...rest
        }));
        dispatchCustomEvent(document.body, 'ix2-animation-started', instanceId);
        if (immediate) {
            renderImmediateInstance(store, instanceId);
            return;
        }
        observeStore({
            store,
            // @ts-expect-error - TS7031 - Binding element 'ixInstances' implicitly has an 'any' type.
            select: ({ ixInstances })=>ixInstances[instanceId],
            onChange: handleInstanceChange
        });
        if (autoStart) {
            store.dispatch((0, _IX2EngineActions.instanceStarted)(instanceId, ixSession.tick));
        }
    }
    function removeInstance(instance, store) {
        dispatchCustomEvent(document.body, 'ix2-animation-stopping', {
            instanceId: instance.id,
            state: store.getState()
        });
        const { elementId, actionItem } = instance;
        const { ixElements } = store.getState();
        const { ref, refType } = ixElements[elementId] || {};
        if (refType === HTML_ELEMENT) {
            cleanupHTMLElement(ref, actionItem, _IX2BrowserApi);
        }
        store.dispatch((0, _IX2EngineActions.instanceRemoved)(instance.id));
    }
    function dispatchCustomEvent(element, eventName, detail) {
        const event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, true, true, detail);
        // @ts-expect-error - TS18047 - 'element' is possibly 'null'.
        element.dispatchEvent(event);
    }
    function renderImmediateInstance(store, instanceId) {
        const { ixParameters } = store.getState();
        store.dispatch((0, _IX2EngineActions.instanceStarted)(instanceId, 0));
        store.dispatch((0, _IX2EngineActions.animationFrameChanged)(performance.now(), ixParameters));
        const { ixInstances } = store.getState();
        handleInstanceChange(ixInstances[instanceId], store);
    }
    function handleInstanceChange(instance, store) {
        const { active, continuous, complete, elementId, actionItem, actionTypeId, renderType, current, groupIndex, eventId, eventTarget, eventStateKey, actionListId, isCarrier, styleProp, verbose, pluginInstance } = instance;
        // Bypass render if current media query is not listed in event config
        const { ixData, ixSession } = store.getState();
        const { events } = ixData;
        const event = events && events[eventId] ? events[eventId] : {};
        // @ts-expect-error - TS2339 -  Property 'mediaQueries' does not exist on type '{} | undefined'.
        const { mediaQueries = ixData.mediaQueryKeys } = event;
        if (!shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) {
            return;
        }
        if (continuous || active || complete) {
            if (current || renderType === RENDER_GENERAL && complete) {
                // Render current values to ref state and grab latest
                store.dispatch((0, _IX2EngineActions.elementStateChanged)(elementId, actionTypeId, current, actionItem));
                const { ixElements } = store.getState();
                const { ref, refType, refState } = ixElements[elementId] || {};
                const actionState = refState && refState[actionTypeId];
                // Render HTML and plugin elements
                if (refType === HTML_ELEMENT || isPluginType(actionTypeId)) {
                    renderHTMLElement(ref, refState, actionState, eventId, actionItem, styleProp, _IX2BrowserApi, renderType, pluginInstance);
                }
            }
            if (complete) {
                if (isCarrier) {
                    // @ts-expect-error - TS2345 - Argument of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; groupIndex: any; verbose: any; }' is not assignable to parameter of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; groupIndex?: number | undefined; immediate: any; verbose: any; }'.
                    const started = startActionGroup({
                        store,
                        eventId,
                        eventTarget,
                        eventStateKey,
                        actionListId,
                        groupIndex: groupIndex + 1,
                        verbose
                    });
                    if (verbose && !started) {
                        store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
                            actionListId,
                            isPlaying: false
                        }));
                    }
                }
                removeInstance(instance, store);
            }
        }
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    58955: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return _default;
        }
    }));
    const _flow = /*#__PURE__*/ _interop_require_default(__webpack_require__(85801));
    const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
    const _clamp = /*#__PURE__*/ _interop_require_default(__webpack_require__(43789));
    const _sharedconstants = __webpack_require__(7087);
    const _IX2VanillaEngine = __webpack_require__(51970);
    const _IX2EngineActions = __webpack_require__(13946);
    const _shared = __webpack_require__(9468);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const { MOUSE_CLICK, MOUSE_SECOND_CLICK, MOUSE_DOWN, MOUSE_UP, MOUSE_OVER, MOUSE_OUT, DROPDOWN_CLOSE, DROPDOWN_OPEN, SLIDER_ACTIVE, SLIDER_INACTIVE, TAB_ACTIVE, TAB_INACTIVE, NAVBAR_CLOSE, NAVBAR_OPEN, MOUSE_MOVE, PAGE_SCROLL_DOWN, SCROLL_INTO_VIEW, SCROLL_OUT_OF_VIEW, PAGE_SCROLL_UP, SCROLLING_IN_VIEW, PAGE_FINISH, ECOMMERCE_CART_CLOSE, ECOMMERCE_CART_OPEN, PAGE_START, PAGE_SCROLL } = _sharedconstants.EventTypeConsts;
    const COMPONENT_ACTIVE = 'COMPONENT_ACTIVE';
    const COMPONENT_INACTIVE = 'COMPONENT_INACTIVE';
    const { COLON_DELIMITER } = _sharedconstants.IX2EngineConstants;
    const { getNamespacedParameterId } = _shared.IX2VanillaUtils;
    const composableFilter = (predicate)=>(options)=>{
            if (typeof options === 'object' && predicate(options)) {
                return true;
            }
            return options;
        };
    const isElement = composableFilter(({ element, nativeEvent })=>{
        return element === nativeEvent.target;
    });
    const containsElement = composableFilter(({ element, nativeEvent })=>{
        return element.contains(nativeEvent.target);
    });
    const isOrContainsElement = (0, _flow.default)([
        isElement,
        containsElement
    ]);
    const getAutoStopEvent = (store, autoStopEventId)=>{
        if (autoStopEventId) {
            const { ixData } = store.getState();
            const { events } = ixData;
            const eventToStop = events[autoStopEventId];
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly PAGE_START: "PAGE_START"; readonly PAGE_FINISH: "PAGE_FINISH"; }'.
            if (eventToStop && !AUTO_STOP_DISABLED_EVENTS[eventToStop.eventTypeId]) {
                return eventToStop;
            }
        }
        return null;
    };
    // @ts-expect-error - TS7031 - Binding element 'store' implicitly has an 'any' type. | TS7031 - Binding element 'event' implicitly has an 'any' type.
    const hasAutoStopEvent = ({ store, event })=>{
        const { action: eventAction } = event;
        const { autoStopEventId } = eventAction.config;
        return Boolean(getAutoStopEvent(store, autoStopEventId));
    };
    // @ts-expect-error - TS7031 - Binding element 'store' implicitly has an 'any' type. | TS7031 - Binding element 'event' implicitly has an 'any' type. | TS7031 - Binding element 'element' implicitly has an 'any' type. | TS7031 - Binding element 'eventStateKey' implicitly has an 'any' type. | TS7006 - Parameter 'state' implicitly has an 'any' type.
    const actionGroupCreator = ({ store, event, element, eventStateKey }, state)=>{
        const { action: eventAction, id: eventId } = event;
        const { actionListId, autoStopEventId } = eventAction.config;
        const eventToStop = getAutoStopEvent(store, autoStopEventId);
        if (eventToStop) {
            (0, _IX2VanillaEngine.stopActionGroup)({
                store,
                eventId: autoStopEventId,
                eventTarget: element,
                eventStateKey: autoStopEventId + COLON_DELIMITER + eventStateKey.split(COLON_DELIMITER)[1],
                actionListId: (0, _get.default)(eventToStop, 'action.config.actionListId')
            });
        }
        (0, _IX2VanillaEngine.stopActionGroup)({
            store,
            eventId,
            eventTarget: element,
            eventStateKey,
            actionListId
        });
        // @ts-expect-error - TS2345 - Argument of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; }' is not assignable to parameter of type '{ store: any; eventId: any; eventTarget: any; eventStateKey: any; actionListId: any; groupIndex?: number | undefined; immediate: any; verbose: any; }'.
        (0, _IX2VanillaEngine.startActionGroup)({
            store,
            eventId,
            eventTarget: element,
            eventStateKey,
            actionListId
        });
        return state;
    };
    // @ts-expect-error - TS7006 - Parameter 'filter' implicitly has an 'any' type. | TS7006 - Parameter 'handler' implicitly has an 'any' type.
    const withFilter = (filter, handler)=>(options, state)=>filter(options, state) === true ? handler(options, state) : state;
    const baseActionGroupOptions = {
        handler: withFilter(isOrContainsElement, actionGroupCreator)
    };
    const baseActivityActionGroupOptions = {
        ...baseActionGroupOptions,
        types: [
            COMPONENT_ACTIVE,
            COMPONENT_INACTIVE
        ].join(' ')
    };
    const SCROLL_EVENT_TYPES = [
        {
            target: window,
            types: 'resize orientationchange',
            throttle: true
        },
        {
            target: document,
            types: 'scroll wheel readystatechange IX2_PAGE_UPDATE',
            throttle: true
        }
    ];
    const MOUSE_OVER_OUT_TYPES = 'mouseover mouseout';
    const baseScrollActionGroupOptions = {
        types: SCROLL_EVENT_TYPES
    };
    const AUTO_STOP_DISABLED_EVENTS = {
        PAGE_START,
        PAGE_FINISH
    };
    const getDocumentState = (()=>{
        const supportOffset = window.pageXOffset !== undefined;
        const isCSS1Compat = document.compatMode === 'CSS1Compat';
        const rootElement = isCSS1Compat ? document.documentElement : document.body;
        return ()=>({
                scrollLeft: supportOffset ? window.pageXOffset : rootElement.scrollLeft,
                scrollTop: supportOffset ? window.pageYOffset : rootElement.scrollTop,
                // required to remove elasticity in Safari scrolling.
                stiffScrollTop: (0, _clamp.default)(supportOffset ? window.pageYOffset : rootElement.scrollTop, 0, rootElement.scrollHeight - window.innerHeight),
                scrollWidth: rootElement.scrollWidth,
                scrollHeight: rootElement.scrollHeight,
                clientWidth: rootElement.clientWidth,
                clientHeight: rootElement.clientHeight,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            });
    })();
    const areBoxesIntersecting = (a, b)=>!(a.left > b.right || a.right < b.left || a.top > b.bottom || a.bottom < b.top);
    // @ts-expect-error - TS7031 - Binding element 'element' implicitly has an 'any' type. | TS7031 - Binding element 'nativeEvent' implicitly has an 'any' type.
    const isElementHovered = ({ element, nativeEvent })=>{
        const { type, target, relatedTarget } = nativeEvent;
        const containsTarget = element.contains(target);
        if (type === 'mouseover' && containsTarget) {
            return true;
        }
        const containsRelated = element.contains(relatedTarget);
        if (type === 'mouseout' && containsTarget && containsRelated) {
            return true;
        }
        return false;
    };
    const isElementVisible = (options)=>{
        const { element, event: { config } } = options;
        const { clientWidth, clientHeight } = getDocumentState();
        const scrollOffsetValue = config.scrollOffsetValue;
        const scrollOffsetUnit = config.scrollOffsetUnit;
        const isPX = scrollOffsetUnit === 'PX';
        const offsetPadding = isPX ? scrollOffsetValue : clientHeight * (scrollOffsetValue || 0) / 100;
        return areBoxesIntersecting(element.getBoundingClientRect(), {
            left: 0,
            top: offsetPadding,
            right: clientWidth,
            bottom: clientHeight - offsetPadding
        });
    };
    const whenComponentActiveChange = // @ts-expect-error - TS7006 - Parameter 'handler' implicitly has an 'any' type.
    (handler)=>(options, oldState)=>{
            const { type } = options.nativeEvent;
            // prettier-ignore
            const isActive = [
                COMPONENT_ACTIVE,
                COMPONENT_INACTIVE
            ].indexOf(type) !== -1 ? type === COMPONENT_ACTIVE : oldState.isActive;
            const newState = {
                ...oldState,
                isActive
            };
            if (!oldState || newState.isActive !== oldState.isActive) {
                return handler(options, newState) || newState;
            }
            return newState;
        };
    const whenElementHoverChange = (handler)=>(options, oldState)=>{
            const newState = {
                elementHovered: isElementHovered(options)
            };
            if (oldState ? newState.elementHovered !== oldState.elementHovered : newState.elementHovered) {
                // @ts-expect-error - TS1345 - An expression of type 'void' cannot be tested for truthiness.
                return handler(options, newState) || newState;
            }
            return newState;
        };
    const whenElementVisibiltyChange = (handler)=>(options, oldState)=>{
            const newState = {
                ...oldState,
                elementVisible: isElementVisible(options)
            };
            if (oldState ? newState.elementVisible !== oldState.elementVisible : newState.elementVisible) {
                return handler(options, newState) || newState;
            }
            return newState;
        };
    const whenScrollDirectionChange = // @ts-expect-error - TS7006 - Parameter 'handler' implicitly has an 'any' type.
    (handler)=>(options, oldState = {})=>{
            const { stiffScrollTop: scrollTop, scrollHeight, innerHeight } = getDocumentState();
            const { event: { config, eventTypeId } } = options;
            const { scrollOffsetValue, scrollOffsetUnit } = config;
            const isPX = scrollOffsetUnit === 'PX';
            const scrollHeightBounds = scrollHeight - innerHeight;
            // percent top since innerHeight may change for mobile devices which also changes the scrollTop value.
            const percentTop = Number((scrollTop / scrollHeightBounds).toFixed(2));
            // no state change
            // @ts-expect-error - TS2339 - Property 'percentTop' does not exist on type '{}'.
            if (oldState && oldState.percentTop === percentTop) {
                return oldState;
            }
            const scrollTopPadding = (isPX ? scrollOffsetValue : innerHeight * (scrollOffsetValue || 0) / 100) / scrollHeightBounds;
            let scrollingDown;
            let scrollDirectionChanged;
            let anchorTop = 0;
            if (oldState) {
                // @ts-expect-error - TS2339 - Property 'percentTop' does not exist on type '{}'.
                scrollingDown = percentTop > oldState.percentTop;
                // @ts-expect-error - TS2339 - Property 'scrollingDown' does not exist on type '{}'.
                scrollDirectionChanged = oldState.scrollingDown !== scrollingDown;
                // @ts-expect-error - TS2339 - Property 'anchorTop' does not exist on type '{}'.
                anchorTop = scrollDirectionChanged ? percentTop : oldState.anchorTop;
            }
            const inBounds = eventTypeId === PAGE_SCROLL_DOWN ? percentTop >= anchorTop + scrollTopPadding : percentTop <= anchorTop - scrollTopPadding;
            const newState = {
                ...oldState,
                percentTop,
                inBounds,
                anchorTop,
                scrollingDown
            };
            if (oldState && inBounds && // @ts-expect-error - TS2339 - Property 'inBounds' does not exist on type '{}'.
            (scrollDirectionChanged || newState.inBounds !== oldState.inBounds)) {
                return handler(options, newState) || newState;
            }
            return newState;
        };
    const pointIntersects = (point, rect)=>point.left > rect.left && point.left < rect.right && point.top > rect.top && point.top < rect.bottom;
    const whenPageLoadFinish = (handler)=>(options, oldState)=>{
            const newState = {
                finished: document.readyState === 'complete'
            };
            if (newState.finished && !(oldState && oldState.finshed)) {
                // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                handler(options);
            }
            return newState;
        };
    const whenPageLoadStart = (handler)=>(options, oldState)=>{
            const newState = {
                started: true
            };
            if (!oldState) {
                // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                handler(options);
            }
            return newState;
        };
    const whenClickCountChange = (handler)=>(options, oldState = {
            clickCount: 0
        })=>{
            const newState = {
                clickCount: oldState.clickCount % 2 + 1
            };
            if (newState.clickCount !== oldState.clickCount) {
                // @ts-expect-error - TS1345 - An expression of type 'void' cannot be tested for truthiness.
                return handler(options, newState) || newState;
            }
            return newState;
        };
    const getComponentActiveOptions = (allowNestedChildrenEvents = true)=>({
            ...baseActivityActionGroupOptions,
            handler: withFilter(allowNestedChildrenEvents ? isOrContainsElement : isElement, // @ts-expect-error - TS7006 - Parameter 'options' implicitly has an 'any' type. | TS7006 - Parameter 'state' implicitly has an 'any' type.
            whenComponentActiveChange((options, state)=>{
                return state.isActive ? baseActionGroupOptions.handler(options, state) : state;
            }))
        });
    const getComponentInactiveOptions = (allowNestedChildrenEvents = true)=>({
            ...baseActivityActionGroupOptions,
            handler: withFilter(allowNestedChildrenEvents ? isOrContainsElement : isElement, // @ts-expect-error - TS7006 - Parameter 'options' implicitly has an 'any' type. | TS7006 - Parameter 'state' implicitly has an 'any' type.
            whenComponentActiveChange((options, state)=>{
                return !state.isActive ? baseActionGroupOptions.handler(options, state) : state;
            }))
        });
    const scrollIntoOutOfViewOptions = {
        ...baseScrollActionGroupOptions,
        handler: whenElementVisibiltyChange((options, state)=>{
            const { elementVisible } = state;
            const { event, store } = options;
            const { ixData } = store.getState();
            const { events } = ixData;
            // trigger the handler only once if only one of SCROLL_INTO or SCROLL_OUT_OF event types
            // are registered.
            if (!events[event.action.config.autoStopEventId] && state.triggered) {
                return state;
            }
            if (event.eventTypeId === SCROLL_INTO_VIEW === elementVisible) {
                // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                actionGroupCreator(options);
                return {
                    ...state,
                    triggered: true
                };
            } else {
                return state;
            }
        })
    };
    const MOUSE_OUT_ROUND_THRESHOLD = 0.05;
    const _default = {
        [SLIDER_ACTIVE]: getComponentActiveOptions(),
        [SLIDER_INACTIVE]: getComponentInactiveOptions(),
        [DROPDOWN_OPEN]: getComponentActiveOptions(),
        [DROPDOWN_CLOSE]: getComponentInactiveOptions(),
        // navbar elements may contain nested components in the menu. To prevent activity misfires, only listed for activity
        // events where the target is the navbar element, and ignore children that dispatch activitiy events.
        [NAVBAR_OPEN]: getComponentActiveOptions(false),
        [NAVBAR_CLOSE]: getComponentInactiveOptions(false),
        [TAB_ACTIVE]: getComponentActiveOptions(),
        [TAB_INACTIVE]: getComponentInactiveOptions(),
        [ECOMMERCE_CART_OPEN]: {
            types: 'ecommerce-cart-open',
            handler: withFilter(isOrContainsElement, actionGroupCreator)
        },
        [ECOMMERCE_CART_CLOSE]: {
            types: 'ecommerce-cart-close',
            handler: withFilter(isOrContainsElement, actionGroupCreator)
        },
        [MOUSE_CLICK]: {
            types: 'click',
            handler: withFilter(isOrContainsElement, whenClickCountChange((options, { clickCount })=>{
                if (hasAutoStopEvent(options)) {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    clickCount === 1 && actionGroupCreator(options);
                } else {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    actionGroupCreator(options);
                }
            }))
        },
        [MOUSE_SECOND_CLICK]: {
            types: 'click',
            handler: withFilter(isOrContainsElement, whenClickCountChange((options, { clickCount })=>{
                if (clickCount === 2) {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    actionGroupCreator(options);
                }
            }))
        },
        [MOUSE_DOWN]: {
            ...baseActionGroupOptions,
            types: 'mousedown'
        },
        [MOUSE_UP]: {
            ...baseActionGroupOptions,
            types: 'mouseup'
        },
        [MOUSE_OVER]: {
            types: MOUSE_OVER_OUT_TYPES,
            handler: withFilter(isOrContainsElement, whenElementHoverChange((options, state)=>{
                if (state.elementHovered) {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    actionGroupCreator(options);
                }
            }))
        },
        [MOUSE_OUT]: {
            types: MOUSE_OVER_OUT_TYPES,
            handler: withFilter(isOrContainsElement, whenElementHoverChange((options, state)=>{
                if (!state.elementHovered) {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    actionGroupCreator(options);
                }
            }))
        },
        [MOUSE_MOVE]: {
            types: 'mousemove mouseout scroll',
            handler: (// eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            { store, element, eventConfig, nativeEvent, eventStateKey }, state = {
                clientX: 0,
                clientY: 0,
                pageX: 0,
                pageY: 0
            })=>{
                const { basedOn, selectedAxis, continuousParameterGroupId, reverse, restingState = 0 } = eventConfig;
                const { clientX = state.clientX, clientY = state.clientY, pageX = state.pageX, pageY = state.pageY } = nativeEvent;
                const isXAxis = selectedAxis === 'X_AXIS';
                const isMouseOut = nativeEvent.type === 'mouseout';
                let value = restingState / 100;
                let namespacedParameterId = continuousParameterGroupId;
                let elementHovered = false;
                switch(basedOn){
                    case _sharedconstants.EventBasedOn.VIEWPORT:
                        {
                            value = isXAxis ? Math.min(clientX, window.innerWidth) / window.innerWidth : Math.min(clientY, window.innerHeight) / window.innerHeight;
                            break;
                        }
                    // @ts-expect-error - TS2339 - Property 'PAGE' does not exist on type '{ readonly ELEMENT: "ELEMENT"; readonly VIEWPORT: "VIEWPORT"; }'.
                    case _sharedconstants.EventBasedOn.PAGE:
                        {
                            const { scrollLeft, scrollTop, scrollWidth, scrollHeight } = getDocumentState();
                            value = isXAxis ? Math.min(scrollLeft + pageX, scrollWidth) / scrollWidth : Math.min(scrollTop + pageY, scrollHeight) / scrollHeight;
                            break;
                        }
                    case _sharedconstants.EventBasedOn.ELEMENT:
                    default:
                        {
                            namespacedParameterId = getNamespacedParameterId(eventStateKey, continuousParameterGroupId);
                            const isMouseEvent = nativeEvent.type.indexOf('mouse') === 0;
                            // Use isOrContainsElement for mouse events since they are fired from the target
                            if (isMouseEvent && isOrContainsElement({
                                element,
                                nativeEvent
                            }) !== true) {
                                break;
                            }
                            const rect = element.getBoundingClientRect();
                            const { left, top, width, height } = rect;
                            // Otherwise we'll need to calculate the mouse position from the previous handler state
                            // against the target element's rect
                            if (!isMouseEvent && !pointIntersects({
                                left: clientX,
                                top: clientY
                            }, rect)) {
                                break;
                            }
                            elementHovered = true;
                            value = isXAxis ? (clientX - left) / width : (clientY - top) / height;
                            break;
                        }
                }
                // cover case where the event is a mouse out, but the value is not quite at 100%
                if (isMouseOut && (value > 1 - MOUSE_OUT_ROUND_THRESHOLD || value < MOUSE_OUT_ROUND_THRESHOLD)) {
                    value = Math.round(value);
                }
                // Only update based on element if the mouse is moving over or has just left the element
                if (basedOn !== _sharedconstants.EventBasedOn.ELEMENT || elementHovered || // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                elementHovered !== state.elementHovered) {
                    value = reverse ? 1 - value : value;
                    store.dispatch((0, _IX2EngineActions.parameterChanged)(namespacedParameterId, value));
                }
                return {
                    elementHovered,
                    clientX,
                    clientY,
                    pageX,
                    pageY
                };
            }
        },
        [PAGE_SCROLL]: {
            types: SCROLL_EVENT_TYPES,
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            handler: ({ store, eventConfig })=>{
                const { continuousParameterGroupId, reverse } = eventConfig;
                const { scrollTop, scrollHeight, clientHeight } = getDocumentState();
                let value = scrollTop / (scrollHeight - clientHeight);
                value = reverse ? 1 - value : value;
                store.dispatch((0, _IX2EngineActions.parameterChanged)(continuousParameterGroupId, value));
            }
        },
        [SCROLLING_IN_VIEW]: {
            types: SCROLL_EVENT_TYPES,
            handler: (// eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            { element, store, eventConfig, eventStateKey }, state = {
                scrollPercent: 0
            })=>{
                const { scrollLeft, scrollTop, scrollWidth, scrollHeight, clientHeight: visibleHeight } = getDocumentState();
                const { basedOn, selectedAxis, continuousParameterGroupId, startsEntering, startsExiting, addEndOffset, addStartOffset, addOffsetValue = 0, endOffsetValue = 0 } = eventConfig;
                const isXAxis = selectedAxis === 'X_AXIS';
                if (basedOn === _sharedconstants.EventBasedOn.VIEWPORT) {
                    const value = isXAxis ? scrollLeft / scrollWidth : scrollTop / scrollHeight;
                    if (value !== state.scrollPercent) {
                        store.dispatch((0, _IX2EngineActions.parameterChanged)(continuousParameterGroupId, value));
                    }
                    return {
                        scrollPercent: value
                    };
                } else {
                    const namespacedParameterId = getNamespacedParameterId(eventStateKey, continuousParameterGroupId);
                    const elementRect = element.getBoundingClientRect();
                    let offsetStartPerc = (addStartOffset ? addOffsetValue : 0) / 100;
                    let offsetEndPerc = (addEndOffset ? endOffsetValue : 0) / 100;
                    // flip the offset percentages depending on start / exit type
                    offsetStartPerc = startsEntering ? offsetStartPerc : 1 - offsetStartPerc;
                    offsetEndPerc = startsExiting ? offsetEndPerc : 1 - offsetEndPerc;
                    const offsetElementTop = elementRect.top + Math.min(elementRect.height * offsetStartPerc, visibleHeight);
                    const offsetElementBottom = elementRect.top + elementRect.height * offsetEndPerc;
                    const offsetHeight = offsetElementBottom - offsetElementTop;
                    const fixedScrollHeight = Math.min(visibleHeight + offsetHeight, scrollHeight);
                    const fixedScrollTop = Math.min(Math.max(0, visibleHeight - offsetElementTop), fixedScrollHeight);
                    const fixedScrollPerc = fixedScrollTop / fixedScrollHeight;
                    if (fixedScrollPerc !== state.scrollPercent) {
                        store.dispatch((0, _IX2EngineActions.parameterChanged)(namespacedParameterId, fixedScrollPerc));
                    }
                    return {
                        scrollPercent: fixedScrollPerc
                    };
                }
            }
        },
        [SCROLL_INTO_VIEW]: scrollIntoOutOfViewOptions,
        [SCROLL_OUT_OF_VIEW]: scrollIntoOutOfViewOptions,
        [PAGE_SCROLL_DOWN]: {
            ...baseScrollActionGroupOptions,
            // @ts-expect-error - TS7006 - Parameter 'options' implicitly has an 'any' type. | TS7006 - Parameter 'state' implicitly has an 'any' type.
            handler: whenScrollDirectionChange((options, state)=>{
                if (state.scrollingDown) {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    actionGroupCreator(options);
                }
            })
        },
        [PAGE_SCROLL_UP]: {
            ...baseScrollActionGroupOptions,
            // @ts-expect-error - TS7006 - Parameter 'options' implicitly has an 'any' type. | TS7006 - Parameter 'state' implicitly has an 'any' type.
            handler: whenScrollDirectionChange((options, state)=>{
                if (!state.scrollingDown) {
                    // @ts-expect-error - TS2554 - Expected 2 arguments, but got 1.
                    actionGroupCreator(options);
                }
            })
        },
        [PAGE_FINISH]: {
            types: 'readystatechange IX2_PAGE_UPDATE',
            handler: withFilter(isElement, whenPageLoadFinish(actionGroupCreator))
        },
        [PAGE_START]: {
            types: 'readystatechange IX2_PAGE_UPDATE',
            handler: withFilter(isElement, whenPageLoadStart(actionGroupCreator))
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    34609: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "ixData", ({
        enumerable: true,
        get: function() {
            return ixData;
        }
    }));
    const _sharedconstants = __webpack_require__(7087);
    const { IX2_RAW_DATA_IMPORTED } = _sharedconstants.IX2EngineActionTypes;
    const ixData = (state = Object.freeze({}), action)=>{
        switch(action.type){
            case IX2_RAW_DATA_IMPORTED:
                {
                    return action.payload.ixData || Object.freeze({});
                }
            default:
                {
                    return state;
                }
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkRhdGFSZWR1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVgyRW5naW5lQWN0aW9uVHlwZXN9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi9zaGFyZWQtY29uc3RhbnRzJztcbmltcG9ydCB7cmF3RGF0YUltcG9ydGVkUGF5bG9hZH0gZnJvbSAnLi4vYWN0aW9ucy9JWDJFbmdpbmVBY3Rpb25zJztcbmNvbnN0IHtJWDJfUkFXX0RBVEFfSU1QT1JURUR9ID0gSVgyRW5naW5lQWN0aW9uVHlwZXM7XG5cbnR5cGUgaXhEYXRhUmVkdWNlckFjdGlvbiA9IHtcbiAgdHlwZTogdHlwZW9mIElYMl9SQVdfREFUQV9JTVBPUlRFRDtcbiAgcGF5bG9hZDogcmF3RGF0YUltcG9ydGVkUGF5bG9hZDtcbn07XG5cbmV4cG9ydCB0eXBlIGl4RGF0YVJlZHVjZXJTdGF0ZSA9IHJhd0RhdGFJbXBvcnRlZFBheWxvYWRbJ2l4RGF0YSddO1xuXG5leHBvcnQgY29uc3QgaXhEYXRhID0gKFxuICBzdGF0ZTogaXhEYXRhUmVkdWNlclN0YXRlID0gT2JqZWN0LmZyZWV6ZShcbiAgICB7fVxuICApIGFzIHJhd0RhdGFJbXBvcnRlZFBheWxvYWRbJ2l4RGF0YSddLFxuICBhY3Rpb246IGl4RGF0YVJlZHVjZXJBY3Rpb25cbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBJWDJfUkFXX0RBVEFfSU1QT1JURUQ6IHtcbiAgICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZC5peERhdGEgfHwgT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiaXhEYXRhIiwiSVgyX1JBV19EQVRBX0lNUE9SVEVEIiwiSVgyRW5naW5lQWN0aW9uVHlwZXMiLCJzdGF0ZSIsIk9iamVjdCIsImZyZWV6ZSIsImFjdGlvbiIsInR5cGUiLCJwYXlsb2FkIl0sIm1hcHBpbmdzIjoiOzs7OytCQVdhQTs7O2VBQUFBOzs7aUNBWHNCO0FBRW5DLE1BQU0sRUFBQ0MscUJBQXFCLEVBQUMsR0FBR0MscUNBQW9CO0FBUzdDLE1BQU1GLFNBQVMsQ0FDcEJHLFFBQTRCQyxPQUFPQyxNQUFNLENBQ3ZDLENBQUMsRUFDa0MsRUFDckNDO0lBRUEsT0FBUUEsT0FBT0MsSUFBSTtRQUNqQixLQUFLTjtZQUF1QjtnQkFDMUIsT0FBT0ssT0FBT0UsT0FBTyxDQUFDUixNQUFNLElBQUlJLE9BQU9DLE1BQU0sQ0FBQyxDQUFDO1lBQ2pEO1FBQ0E7WUFBUztnQkFDUCxPQUFPRjtZQUNUO0lBQ0Y7QUFDRiJ9
    
    }),
    7718: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "ixInstances", ({
        enumerable: true,
        get: function() {
            return ixInstances;
        }
    }));
    const _sharedconstants = __webpack_require__(7087);
    const _shared = __webpack_require__(9468);
    const _timm = __webpack_require__(81185);
    const { IX2_RAW_DATA_IMPORTED, IX2_SESSION_STOPPED, IX2_INSTANCE_ADDED, IX2_INSTANCE_STARTED, IX2_INSTANCE_REMOVED, IX2_ANIMATION_FRAME_CHANGED } = _sharedconstants.IX2EngineActionTypes;
    const { optimizeFloat, applyEasing, createBezierEasing } = _shared.IX2EasingUtils;
    const { RENDER_GENERAL } = _sharedconstants.IX2EngineConstants;
    const { getItemConfigByKey, getRenderType, getStyleProp } = _shared.IX2VanillaUtils;
    const continuousInstance = (state, action)=>{
        const { position: lastPosition, parameterId, actionGroups, destinationKeys, smoothing, restingValue, actionTypeId, customEasingFn, skipMotion, skipToValue } = state;
        const { parameters } = action.payload;
        let velocity = Math.max(1 - smoothing, 0.01);
        let paramValue = parameters[parameterId];
        if (paramValue == null) {
            velocity = 1;
            paramValue = restingValue;
        }
        const nextPosition = Math.max(paramValue, 0) || 0;
        const positionDiff = optimizeFloat(nextPosition - lastPosition);
        const position = skipMotion ? skipToValue : optimizeFloat(lastPosition + positionDiff * velocity);
        const keyframePosition = position * 100;
        if (position === lastPosition && state.current) {
            return state;
        }
        let fromActionItem;
        let toActionItem;
        let positionOffset;
        let positionRange;
        for(let i = 0, { length } = actionGroups; i < length; i++){
            const { keyframe, actionItems } = actionGroups[i];
            if (i === 0) {
                fromActionItem = actionItems[0];
            }
            if (keyframePosition >= keyframe) {
                fromActionItem = actionItems[0];
                const nextGroup = actionGroups[i + 1];
                const hasNextItem = nextGroup && keyframePosition !== keyframe;
                toActionItem = hasNextItem ? nextGroup.actionItems[0] : null;
                if (hasNextItem) {
                    positionOffset = keyframe / 100;
                    positionRange = (nextGroup.keyframe - keyframe) / 100;
                }
            }
        }
        const current = {};
        if (fromActionItem && !toActionItem) {
            for(let i = 0, { length } = destinationKeys; i < length; i++){
                const key = destinationKeys[i];
                current[key] = getItemConfigByKey(actionTypeId, key, fromActionItem.config);
            }
        } else if (fromActionItem && toActionItem && positionOffset !== undefined && positionRange !== undefined) {
            const localPosition = (position - positionOffset) / positionRange;
            const easing = fromActionItem.config.easing;
            const eased = applyEasing(easing, localPosition, customEasingFn);
            for(let i = 0, { length } = destinationKeys; i < length; i++){
                const key = destinationKeys[i];
                const fromVal = getItemConfigByKey(actionTypeId, key, fromActionItem.config);
                const toVal = getItemConfigByKey(actionTypeId, key, toActionItem.config);
                const diff = toVal - fromVal;
                const value = diff * eased + fromVal;
                current[key] = value;
            }
        }
        return (0, _timm.merge)(state, {
            position,
            current
        });
    };
    const timedInstance = (state, action)=>{
        const { active, origin, start, immediate, renderType, verbose, actionItem, destination, destinationKeys, pluginDuration, instanceDelay, customEasingFn, skipMotion } = state;
        const easing = actionItem.config.easing;
        let { duration, delay } = actionItem.config;
        if (pluginDuration != null) {
            duration = pluginDuration;
        }
        delay = instanceDelay != null ? instanceDelay : delay;
        if (renderType === RENDER_GENERAL) {
            duration = 0;
        } else if (immediate || skipMotion) {
            duration = delay = 0;
        }
        const { now } = action.payload;
        if (active && origin) {
            const delta = now - (start + delay);
            if (verbose) {
                const verboseDelta = now - start;
                const verboseDuration = duration + delay;
                const verbosePosition = optimizeFloat(Math.min(Math.max(0, verboseDelta / verboseDuration), 1));
                state = (0, _timm.set)(state, 'verboseTimeElapsed', verboseDuration * verbosePosition);
            }
            if (delta < 0) {
                return state;
            }
            const position = optimizeFloat(Math.min(Math.max(0, delta / duration), 1));
            const eased = applyEasing(easing, position, customEasingFn);
            const newProps = {};
            let current = null;
            if (destinationKeys.length) {
                // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments. | TS7006 - Parameter 'result' implicitly has an 'any' type. | TS7006 - Parameter 'key' implicitly has an 'any' type.
                current = destinationKeys.reduce((result, key)=>{
                    const destValue = destination[key];
                    const originVal = parseFloat(origin[key]) || 0;
                    const diff = parseFloat(destValue) - originVal;
                    const value = diff * eased + originVal;
                    result[key] = value;
                    return result;
                }, {});
            }
            newProps.current = current;
            newProps.position = position;
            if (position === 1) {
                newProps.active = false;
                newProps.complete = true;
            }
            return (0, _timm.merge)(state, newProps);
        }
        return state;
    };
    const ixInstances = (state = Object.freeze({}), action)=>{
        switch(action.type){
            case IX2_RAW_DATA_IMPORTED:
                {
                    return action.payload.ixInstances || Object.freeze({});
                }
            case IX2_SESSION_STOPPED:
                {
                    return Object.freeze({});
                }
            case IX2_INSTANCE_ADDED:
                {
                    const { instanceId, elementId, actionItem, eventId, eventTarget, eventStateKey, actionListId, groupIndex, isCarrier, origin, destination, immediate, verbose, continuous, parameterId, actionGroups, smoothing, restingValue, pluginInstance, pluginDuration, instanceDelay, skipMotion, skipToValue } = action.payload;
                    const { actionTypeId } = actionItem;
                    const renderType = getRenderType(actionTypeId);
                    const styleProp = getStyleProp(renderType, actionTypeId);
                    const destinationKeys = Object.keys(destination).filter((key)=>// Skip null destination values
                        destination[key] != null && // Skip string destination values
                        typeof destination[key] !== 'string');
                    const { easing } = actionItem.config;
                    return (0, _timm.set)(state, instanceId, {
                        id: instanceId,
                        elementId,
                        active: false,
                        position: 0,
                        start: 0,
                        origin,
                        destination,
                        destinationKeys,
                        immediate,
                        verbose,
                        current: null,
                        actionItem,
                        actionTypeId,
                        eventId,
                        eventTarget,
                        eventStateKey,
                        actionListId,
                        groupIndex,
                        renderType,
                        isCarrier,
                        styleProp,
                        continuous,
                        parameterId,
                        actionGroups,
                        smoothing,
                        restingValue,
                        pluginInstance,
                        pluginDuration,
                        instanceDelay,
                        skipMotion,
                        skipToValue,
                        customEasingFn: Array.isArray(easing) && easing.length === 4 ? createBezierEasing(easing) : undefined
                    });
                }
            case IX2_INSTANCE_STARTED:
                {
                    const { instanceId, time } = action.payload;
                    return (0, _timm.mergeIn)(state, [
                        instanceId
                    ], {
                        active: true,
                        complete: false,
                        start: time
                    });
                }
            case IX2_INSTANCE_REMOVED:
                {
                    const { instanceId } = action.payload;
                    if (!state[instanceId]) {
                        return state;
                    }
                    const newState = {};
                    const keys = Object.keys(state);
                    const { length } = keys;
                    for(let i = 0; i < length; i++){
                        const key = keys[i];
                        if (key !== instanceId) {
                            // @ts-expect-error - TS2538 - Type 'undefined' cannot be used as an index type. | TS2538 - Type 'undefined' cannot be used as an index type.
                            newState[key] = state[key];
                        }
                    }
                    return newState;
                }
            case IX2_ANIMATION_FRAME_CHANGED:
                {
                    let newState = state;
                    const keys = Object.keys(state);
                    const { length } = keys;
                    for(let i = 0; i < length; i++){
                        const key = keys[i];
                        // @ts-expect-error - TS2538 - Type 'undefined' cannot be used as an index type.
                        const instance = state[key];
                        const reducer = instance.continuous ? continuousInstance : timedInstance;
                        // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'Key'.
                        newState = (0, _timm.set)(newState, key, reducer(instance, action));
                    }
                    return newState;
                }
            default:
                {
                    return state;
                }
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    71540: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "ixParameters", ({
        enumerable: true,
        get: function() {
            return ixParameters;
        }
    }));
    const _sharedconstants = __webpack_require__(7087);
    const { IX2_RAW_DATA_IMPORTED, IX2_SESSION_STOPPED, IX2_PARAMETER_CHANGED } = _sharedconstants.IX2EngineActionTypes;
    const ixParameters = (state = {}, action)=>{
        switch(action.type){
            case IX2_RAW_DATA_IMPORTED:
                {
                    return(// @ts-expect-error - Further investigation is needed as looks like IX2_RAW_DATA_IMPORTED is never triggered with ixParameters
                    action.payload.ixParameters || {});
                }
            case IX2_SESSION_STOPPED:
                {
                    return {};
                }
            case IX2_PARAMETER_CHANGED:
                {
                    const { key, value } = action.payload;
                    state[key] = value;
                    return state;
                }
            default:
                {
                    return state;
                }
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMlBhcmFtZXRlcnNSZWR1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVgyRW5naW5lQWN0aW9uVHlwZXN9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi9zaGFyZWQtY29uc3RhbnRzJztcbmltcG9ydCB7cmF3RGF0YUltcG9ydGVkUGF5bG9hZH0gZnJvbSAnLi4vYWN0aW9ucy9JWDJFbmdpbmVBY3Rpb25zJztcbmNvbnN0IHtJWDJfUkFXX0RBVEFfSU1QT1JURUQsIElYMl9TRVNTSU9OX1NUT1BQRUQsIElYMl9QQVJBTUVURVJfQ0hBTkdFRH0gPVxuICBJWDJFbmdpbmVBY3Rpb25UeXBlcztcblxudHlwZSBpeFBhcmFtZXRlcnNBY3Rpb24gPVxuICB8IHtcbiAgICAgIHR5cGU6IHR5cGVvZiBJWDJfUkFXX0RBVEFfSU1QT1JURUQ7XG4gICAgICBwYXlsb2FkOiByYXdEYXRhSW1wb3J0ZWRQYXlsb2FkO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiB0eXBlb2YgSVgyX1NFU1NJT05fU1RPUFBFRDtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogdHlwZW9mIElYMl9QQVJBTUVURVJfQ0hBTkdFRDtcbiAgICAgIHBheWxvYWQ6IHtrZXk6IHN0cmluZzsgdmFsdWU6IG51bWJlcn07XG4gICAgfTtcblxudHlwZSBpeFBhcmFtZXRlcnNSZWR1Y2VyU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBpeFBhcmFtZXRlcnMgPSAoXG4gIHN0YXRlOiBpeFBhcmFtZXRlcnNSZWR1Y2VyU3RhdGUgPSB7LyptdXRhYmxlIGZsYXQgc3RhdGUqL30sXG4gIGFjdGlvbjogaXhQYXJhbWV0ZXJzQWN0aW9uXG4pOiBpeFBhcmFtZXRlcnNSZWR1Y2VyU3RhdGUgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBJWDJfUkFXX0RBVEFfSU1QT1JURUQ6IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBGdXJ0aGVyIGludmVzdGlnYXRpb24gaXMgbmVlZGVkIGFzIGxvb2tzIGxpa2UgSVgyX1JBV19EQVRBX0lNUE9SVEVEIGlzIG5ldmVyIHRyaWdnZXJlZCB3aXRoIGl4UGFyYW1ldGVyc1xuICAgICAgICBhY3Rpb24ucGF5bG9hZC5peFBhcmFtZXRlcnMgfHwgey8qbXV0YWJsZSBmbGF0IHN0YXRlKi99XG4gICAgICApO1xuICAgIH1cbiAgICBjYXNlIElYMl9TRVNTSU9OX1NUT1BQRUQ6IHtcbiAgICAgIHJldHVybiB7LyptdXRhYmxlIGZsYXQgc3RhdGUqL307XG4gICAgfVxuICAgIGNhc2UgSVgyX1BBUkFNRVRFUl9DSEFOR0VEOiB7XG4gICAgICBjb25zdCB7a2V5LCB2YWx1ZX0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIHN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJpeFBhcmFtZXRlcnMiLCJJWDJfUkFXX0RBVEFfSU1QT1JURUQiLCJJWDJfU0VTU0lPTl9TVE9QUEVEIiwiSVgyX1BBUkFNRVRFUl9DSEFOR0VEIiwiSVgyRW5naW5lQWN0aW9uVHlwZXMiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJwYXlsb2FkIiwia2V5IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBcUJhQTs7O2VBQUFBOzs7aUNBckJzQjtBQUVuQyxNQUFNLEVBQUNDLHFCQUFxQixFQUFFQyxtQkFBbUIsRUFBRUMscUJBQXFCLEVBQUMsR0FDdkVDLHFDQUFvQjtBQWtCZixNQUFNSixlQUFlLENBQzFCSyxRQUFrQyxDQUF1QixDQUFDLEVBQzFEQztJQUVBLE9BQVFBLE9BQU9DLElBQUk7UUFDakIsS0FBS047WUFBdUI7Z0JBQzFCLE9BQ0UsOEhBQThIO2dCQUM5SEssT0FBT0UsT0FBTyxDQUFDUixZQUFZLElBQUksQ0FBdUI7WUFFMUQ7UUFDQSxLQUFLRTtZQUFxQjtnQkFDeEIsT0FBTyxDQUF1QjtZQUNoQztRQUNBLEtBQUtDO1lBQXVCO2dCQUMxQixNQUFNLEVBQUNNLEdBQUcsRUFBRUMsS0FBSyxFQUFDLEdBQUdKLE9BQU9FLE9BQU87Z0JBQ25DSCxLQUFLLENBQUNJLElBQUksR0FBR0M7Z0JBQ2IsT0FBT0w7WUFDVDtRQUNBO1lBQVM7Z0JBQ1AsT0FBT0E7WUFDVDtJQUNGO0FBQ0YifQ==
    
    }),
    17243: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return _default;
        }
    }));
    const _redux = __webpack_require__(19516);
    const _IX2DataReducer = __webpack_require__(34609);
    const _IX2RequestReducer = __webpack_require__(30628);
    const _IX2SessionReducer = __webpack_require__(25862);
    const _shared = __webpack_require__(9468);
    const _IX2InstancesReducer = __webpack_require__(7718);
    const _IX2ParametersReducer = __webpack_require__(71540);
    const { ixElements } = _shared.IX2ElementsReducer;
    const _default = (0, _redux.combineReducers)({
        ixData: _IX2DataReducer.ixData,
        ixRequest: _IX2RequestReducer.ixRequest,
        ixSession: _IX2SessionReducer.ixSession,
        ixElements,
        ixInstances: _IX2InstancesReducer.ixInstances,
        ixParameters: _IX2ParametersReducer.ixParameters
    });
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMlJlZHVjZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yZSwgY29tYmluZVJlZHVjZXJzLCB0eXBlIFJlZHVjZXJ9IGZyb20gJ3JlZHV4JztcblxuaW1wb3J0IHtpeERhdGEsIHR5cGUgaXhEYXRhUmVkdWNlclN0YXRlfSBmcm9tICcuL0lYMkRhdGFSZWR1Y2VyJztcbmltcG9ydCB7aXhSZXF1ZXN0fSBmcm9tICcuL0lYMlJlcXVlc3RSZWR1Y2VyJztcbmltcG9ydCB7aXhTZXNzaW9ufSBmcm9tICcuL0lYMlNlc3Npb25SZWR1Y2VyJztcbmltcG9ydCB7SVgyRWxlbWVudHNSZWR1Y2VyfSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9peDIvc2hhcmVkJztcbmNvbnN0IHtpeEVsZW1lbnRzfSA9IElYMkVsZW1lbnRzUmVkdWNlcjtcbmltcG9ydCB7aXhJbnN0YW5jZXN9IGZyb20gJy4vSVgySW5zdGFuY2VzUmVkdWNlcic7XG5pbXBvcnQge2l4UGFyYW1ldGVyc30gZnJvbSAnLi9JWDJQYXJhbWV0ZXJzUmVkdWNlcic7XG5cbmV4cG9ydCB0eXBlIElYMkVuZ2luZVJlZHVjZXJTdGF0ZVNoYXBlID0ge1xuICBpeERhdGE6IFJldHVyblR5cGU8dHlwZW9mIGl4RGF0YT47XG4gIGl4UGFyYW1ldGVyczogUmV0dXJuVHlwZTx0eXBlb2YgaXhQYXJhbWV0ZXJzPjtcbiAgaXhTZXNzaW9uOiBSZXR1cm5UeXBlPHR5cGVvZiBpeFNlc3Npb24+O1xuICBpeEVsZW1lbnRzOiBSZXR1cm5UeXBlPHR5cGVvZiBpeEVsZW1lbnRzPjtcbiAgaXhJbnN0YW5jZXM6IFJldHVyblR5cGU8dHlwZW9mIGl4SW5zdGFuY2VzPjtcbiAgaXhSZXF1ZXN0OiBSZXR1cm5UeXBlPHR5cGVvZiBpeFJlcXVlc3Q+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzPElYMkVuZ2luZVJlZHVjZXJTdGF0ZVNoYXBlPih7XG4gIGl4RGF0YTogaXhEYXRhIGFzIFJlZHVjZXI8aXhEYXRhUmVkdWNlclN0YXRlPixcbiAgaXhSZXF1ZXN0LFxuICBpeFNlc3Npb24sXG4gIGl4RWxlbWVudHMsXG4gIGl4SW5zdGFuY2VzLFxuICBpeFBhcmFtZXRlcnMsXG59KTtcblxuZXhwb3J0IHR5cGUgSVgyRW5naW5lUmVkdWNlclN0b3JlID0gU3RvcmU8SVgyRW5naW5lUmVkdWNlclN0YXRlU2hhcGU+O1xuIl0sIm5hbWVzIjpbIml4RWxlbWVudHMiLCJJWDJFbGVtZW50c1JlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJpeERhdGEiLCJpeFJlcXVlc3QiLCJpeFNlc3Npb24iLCJpeEluc3RhbmNlcyIsIml4UGFyYW1ldGVycyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFtQkE7OztlQUFBOzs7dUJBbkJtRDtnQ0FFTDttQ0FDdEI7bUNBQ0E7d0JBQ1M7cUNBRVA7c0NBQ0M7QUFGM0IsTUFBTSxFQUFDQSxVQUFVLEVBQUMsR0FBR0MsMEJBQWtCO01BYXZDLFdBQWVDLElBQUFBLHNCQUFlLEVBQTZCO0lBQ3pEQyxRQUFRQSxzQkFBTTtJQUNkQyxXQUFBQSw0QkFBUztJQUNUQyxXQUFBQSw0QkFBUztJQUNUTDtJQUNBTSxhQUFBQSxnQ0FBVztJQUNYQyxjQUFBQSxrQ0FBWTtBQUNkIn0=
    
    }),
    30628: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "ixRequest", ({
        enumerable: true,
        get: function() {
            return ixRequest;
        }
    }));
    const _sharedconstants = __webpack_require__(7087);
    const _timm = __webpack_require__(81185);
    const { IX2_PREVIEW_REQUESTED, IX2_PLAYBACK_REQUESTED, IX2_STOP_REQUESTED, IX2_CLEAR_REQUESTED } = _sharedconstants.IX2EngineActionTypes;
    const initialState = {
        preview: {},
        playback: {},
        stop: {},
        clear: {}
    };
    const stateKeys = Object.create(null, {
        [IX2_PREVIEW_REQUESTED]: {
            value: 'preview'
        },
        [IX2_PLAYBACK_REQUESTED]: {
            value: 'playback'
        },
        [IX2_STOP_REQUESTED]: {
            value: 'stop'
        },
        [IX2_CLEAR_REQUESTED]: {
            value: 'clear'
        }
    });
    const ixRequest = (state = initialState, action)=>{
        if (action.type in stateKeys) {
            const key = [
                stateKeys[action.type]
            ];
            return (0, _timm.setIn)(state, [
                key
            ], {
                ...action.payload
            });
        }
        return state;
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMlJlcXVlc3RSZWR1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVgyRW5naW5lQWN0aW9uVHlwZXN9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi9zaGFyZWQtY29uc3RhbnRzJztcbmNvbnN0IHtcbiAgSVgyX1BSRVZJRVdfUkVRVUVTVEVELFxuICBJWDJfUExBWUJBQ0tfUkVRVUVTVEVELFxuICBJWDJfU1RPUF9SRVFVRVNURUQsXG4gIElYMl9DTEVBUl9SRVFVRVNURUQsXG59ID0gSVgyRW5naW5lQWN0aW9uVHlwZXM7XG5pbXBvcnQge3NldElufSBmcm9tICd0aW1tJztcbmltcG9ydCB7XG4gIHBsYXliYWNrUmVxdWVzdGVkUGF5bG9hZCxcbiAgcHJldmlld1JlcXVlc3RlZFBheWxvYWQsXG4gIHN0b3BSZXF1ZXN0ZWRQYXlsb2FkLFxufSBmcm9tICcuLi9hY3Rpb25zL0lYMkVuZ2luZUFjdGlvbnMnO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHByZXZpZXc6IHt9IGFzIHByZXZpZXdSZXF1ZXN0ZWRQYXlsb2FkLFxuICBwbGF5YmFjazoge30gYXMgcGxheWJhY2tSZXF1ZXN0ZWRQYXlsb2FkLFxuICBzdG9wOiB7fSBhcyBzdG9wUmVxdWVzdGVkUGF5bG9hZCxcbiAgY2xlYXI6IHt9LFxufTtcblxuY29uc3Qgc3RhdGVLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsLCB7XG4gIFtJWDJfUFJFVklFV19SRVFVRVNURURdOiB7dmFsdWU6ICdwcmV2aWV3J30sXG4gIFtJWDJfUExBWUJBQ0tfUkVRVUVTVEVEXToge3ZhbHVlOiAncGxheWJhY2snfSxcbiAgW0lYMl9TVE9QX1JFUVVFU1RFRF06IHt2YWx1ZTogJ3N0b3AnfSxcbiAgW0lYMl9DTEVBUl9SRVFVRVNURURdOiB7dmFsdWU6ICdjbGVhcid9LFxufSk7XG5cbnR5cGUgaXhSZXF1ZXN0U3RhdGUgPSB7XG4gIHByZXZpZXc6IHByZXZpZXdSZXF1ZXN0ZWRQYXlsb2FkO1xuICBwbGF5YmFjazogcGxheWJhY2tSZXF1ZXN0ZWRQYXlsb2FkO1xuICBzdG9wOiBzdG9wUmVxdWVzdGVkUGF5bG9hZDtcbiAgY2xlYXI6IFJlY29yZDxuZXZlciwgbmV2ZXI+O1xufTtcblxudHlwZSBpeFJlcXVlc3RBY3Rpb24gPVxuICB8IHtcbiAgICAgIHR5cGU6IHR5cGVvZiBJWDJfUFJFVklFV19SRVFVRVNURUQ7XG4gICAgICBwYXlsb2FkOiBwcmV2aWV3UmVxdWVzdGVkUGF5bG9hZDtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogdHlwZW9mIElYMl9QTEFZQkFDS19SRVFVRVNURUQ7XG4gICAgICBwYXlsb2FkOiBwbGF5YmFja1JlcXVlc3RlZFBheWxvYWQ7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IHR5cGVvZiBJWDJfU1RPUF9SRVFVRVNURUQ7XG4gICAgICBwYXlsb2FkOiBzdG9wUmVxdWVzdGVkUGF5bG9hZDtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogdHlwZW9mIElYMl9DTEVBUl9SRVFVRVNURUQ7XG4gICAgICBwYXlsb2FkPzogbmV2ZXI7XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IGl4UmVxdWVzdCA9IChcbiAgc3RhdGU6IGl4UmVxdWVzdFN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IGl4UmVxdWVzdEFjdGlvblxuKTogaXhSZXF1ZXN0U3RhdGUgPT4ge1xuICBpZiAoYWN0aW9uLnR5cGUgaW4gc3RhdGVLZXlzKSB7XG4gICAgY29uc3Qga2V5ID0gW3N0YXRlS2V5c1thY3Rpb24udHlwZV1dIGFzIGFueTtcbiAgICByZXR1cm4gc2V0SW4oc3RhdGUsIFtrZXldLCB7Li4uYWN0aW9uLnBheWxvYWR9KTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuIl0sIm5hbWVzIjpbIml4UmVxdWVzdCIsIklYMl9QUkVWSUVXX1JFUVVFU1RFRCIsIklYMl9QTEFZQkFDS19SRVFVRVNURUQiLCJJWDJfU1RPUF9SRVFVRVNURUQiLCJJWDJfQ0xFQVJfUkVRVUVTVEVEIiwiSVgyRW5naW5lQWN0aW9uVHlwZXMiLCJpbml0aWFsU3RhdGUiLCJwcmV2aWV3IiwicGxheWJhY2siLCJzdG9wIiwiY2xlYXIiLCJzdGF0ZUtleXMiLCJPYmplY3QiLCJjcmVhdGUiLCJ2YWx1ZSIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsImtleSIsInNldEluIiwicGF5bG9hZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFxRGFBOzs7ZUFBQUE7OztpQ0FyRHNCO3NCQU9mO0FBTnBCLE1BQU0sRUFDSkMscUJBQXFCLEVBQ3JCQyxzQkFBc0IsRUFDdEJDLGtCQUFrQixFQUNsQkMsbUJBQW1CLEVBQ3BCLEdBQUdDLHFDQUFvQjtBQVF4QixNQUFNQyxlQUFlO0lBQ25CQyxTQUFTLENBQUM7SUFDVkMsVUFBVSxDQUFDO0lBQ1hDLE1BQU0sQ0FBQztJQUNQQyxPQUFPLENBQUM7QUFDVjtBQUVBLE1BQU1DLFlBQVlDLE9BQU9DLE1BQU0sQ0FBQyxNQUFNO0lBQ3BDLENBQUNaLHNCQUFzQixFQUFFO1FBQUNhLE9BQU87SUFBUztJQUMxQyxDQUFDWix1QkFBdUIsRUFBRTtRQUFDWSxPQUFPO0lBQVU7SUFDNUMsQ0FBQ1gsbUJBQW1CLEVBQUU7UUFBQ1csT0FBTztJQUFNO0lBQ3BDLENBQUNWLG9CQUFvQixFQUFFO1FBQUNVLE9BQU87SUFBTztBQUN4QztBQTJCTyxNQUFNZCxZQUFZLENBQ3ZCZSxRQUF3QlQsWUFBWSxFQUNwQ1U7SUFFQSxJQUFJQSxPQUFPQyxJQUFJLElBQUlOLFdBQVc7UUFDNUIsTUFBTU8sTUFBTTtZQUFDUCxTQUFTLENBQUNLLE9BQU9DLElBQUksQ0FBQztTQUFDO1FBQ3BDLE9BQU9FLElBQUFBLFdBQUssRUFBQ0osT0FBTztZQUFDRztTQUFJLEVBQUU7WUFBQyxHQUFHRixPQUFPSSxPQUFPO1FBQUE7SUFDL0M7SUFDQSxPQUFPTDtBQUNUIn0=
    
    }),
    25862: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "ixSession", ({
        enumerable: true,
        get: function() {
            return ixSession;
        }
    }));
    const _sharedconstants = __webpack_require__(7087);
    const _timm = __webpack_require__(81185);
    const { IX2_SESSION_INITIALIZED, IX2_SESSION_STARTED, IX2_TEST_FRAME_RENDERED, IX2_SESSION_STOPPED, IX2_EVENT_LISTENER_ADDED, IX2_EVENT_STATE_CHANGED, IX2_ANIMATION_FRAME_CHANGED, IX2_ACTION_LIST_PLAYBACK_CHANGED, IX2_VIEWPORT_WIDTH_CHANGED, IX2_MEDIA_QUERIES_DEFINED } = _sharedconstants.IX2EngineActionTypes;
    const initialState = {
        active: false,
        tick: 0,
        eventListeners: [],
        eventState: {},
        playbackState: {},
        viewportWidth: 0,
        mediaQueryKey: null,
        hasBoundaryNodes: false,
        hasDefinedMediaQueries: false,
        reducedMotion: false
    };
    const TEST_FRAME_STEPS_SIZE = 20;
    const ixSession = (state = initialState, action)=>{
        switch(action.type){
            case IX2_SESSION_INITIALIZED:
                {
                    const { hasBoundaryNodes, reducedMotion } = action.payload;
                    return (0, _timm.merge)(state, {
                        hasBoundaryNodes,
                        reducedMotion
                    });
                }
            case IX2_SESSION_STARTED:
                {
                    return (0, _timm.set)(state, 'active', true);
                }
            case IX2_TEST_FRAME_RENDERED:
                {
                    const { payload: { step = TEST_FRAME_STEPS_SIZE } } = action;
                    return (0, _timm.set)(state, 'tick', state.tick + step);
                }
            case IX2_SESSION_STOPPED:
                {
                    return initialState;
                }
            case IX2_ANIMATION_FRAME_CHANGED:
                {
                    const { payload: { now } } = action;
                    return (0, _timm.set)(state, 'tick', now);
                }
            case IX2_EVENT_LISTENER_ADDED:
                {
                    const eventListeners = (0, _timm.addLast)(state.eventListeners, action.payload);
                    return (0, _timm.set)(state, 'eventListeners', eventListeners);
                }
            case IX2_EVENT_STATE_CHANGED:
                {
                    const { stateKey, newState } = action.payload;
                    return (0, _timm.setIn)(state, [
                        'eventState',
                        stateKey
                    ], newState);
                }
            case IX2_ACTION_LIST_PLAYBACK_CHANGED:
                {
                    const { actionListId, isPlaying } = action.payload;
                    return (0, _timm.setIn)(state, [
                        'playbackState',
                        actionListId
                    ], isPlaying);
                }
            case IX2_VIEWPORT_WIDTH_CHANGED:
                {
                    const { width, mediaQueries } = action.payload;
                    const mediaQueryCount = mediaQueries.length;
                    let mediaQueryKey = null;
                    for(let i = 0; i < mediaQueryCount; i++){
                        const { key, min, max } = mediaQueries[i];
                        if (width >= min && width <= max) {
                            mediaQueryKey = key;
                            break;
                        }
                    }
                    return (0, _timm.merge)(state, {
                        viewportWidth: width,
                        mediaQueryKey
                    });
                }
            case IX2_MEDIA_QUERIES_DEFINED:
                {
                    return (0, _timm.set)(state, 'hasDefinedMediaQueries', true);
                }
            default:
                {
                    return state;
                }
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    97377: (function (__unused_webpack_module, exports) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        clearPlugin: function() {
            return clearPlugin;
        },
        createPluginInstance: function() {
            return createPluginInstance;
        },
        getPluginConfig: function() {
            return getPluginConfig;
        },
        getPluginDestination: function() {
            return getPluginDestination;
        },
        getPluginDuration: function() {
            return getPluginDuration;
        },
        getPluginOrigin: function() {
            return getPluginOrigin;
        },
        renderPlugin: function() {
            return renderPlugin;
        }
    });
    const getPluginConfig = (actionItemConfig)=>{
        return actionItemConfig.value;
    };
    const getPluginDuration = (element, actionItem)=>{
        if (actionItem.config.duration !== 'auto') {
            return null;
        }
        const duration = parseFloat(element.getAttribute('data-duration'));
        if (duration > 0) {
            return duration * 1000;
        }
        return parseFloat(element.getAttribute('data-default-duration')) * 1000;
    };
    const getPluginOrigin = (refState)=>{
        return refState || {
            value: 0
        };
    };
    const getPluginDestination = (actionItemConfig)=>{
        return {
            value: actionItemConfig.value
        };
    };
    const createPluginInstance = (element)=>{
        const lottie = window.Webflow.require('lottie');
        if (!lottie) return null;
        const instance = lottie.createInstance(element);
        instance.stop();
        instance.setSubframe(true);
        return instance;
    };
    const renderPlugin = (pluginInstance, refState, actionItem)=>{
        if (!pluginInstance) {
            return;
        }
        const percent = refState[actionItem.actionTypeId].value / 100;
        pluginInstance.goToFrame(pluginInstance.frames * percent);
    };
    const clearPlugin = (element)=>{
        const lottie = window.Webflow.require('lottie');
        if (lottie) {
            lottie.createInstance(element).stop();
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkxvdHRpZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuZXhwb3J0IGNvbnN0IGdldFBsdWdpbkNvbmZpZyA9IChhY3Rpb25JdGVtQ29uZmlnKSA9PiB7XG4gIHJldHVybiBhY3Rpb25JdGVtQ29uZmlnLnZhbHVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFBsdWdpbkR1cmF0aW9uID0gKGVsZW1lbnQsIGFjdGlvbkl0ZW0pID0+IHtcbiAgaWYgKGFjdGlvbkl0ZW0uY29uZmlnLmR1cmF0aW9uICE9PSAnYXV0bycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uID0gcGFyc2VGbG9hdChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1kdXJhdGlvbicpKTtcblxuICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgcmV0dXJuIGR1cmF0aW9uICogMTAwMDtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUZsb2F0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWRlZmF1bHQtZHVyYXRpb24nKSkgKiAxMDAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFBsdWdpbk9yaWdpbiA9IChyZWZTdGF0ZSkgPT4ge1xuICByZXR1cm4gcmVmU3RhdGUgfHwge3ZhbHVlOiAwfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQbHVnaW5EZXN0aW5hdGlvbiA9IChhY3Rpb25JdGVtQ29uZmlnKSA9PiB7XG4gIHJldHVybiB7dmFsdWU6IGFjdGlvbkl0ZW1Db25maWcudmFsdWV9O1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBsdWdpbkluc3RhbmNlID0gKGVsZW1lbnQpID0+IHtcbiAgY29uc3QgbG90dGllID0gd2luZG93LldlYmZsb3cucmVxdWlyZSgnbG90dGllJyk7XG4gIGlmICghbG90dGllKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgaW5zdGFuY2UgPSBsb3R0aWUuY3JlYXRlSW5zdGFuY2UoZWxlbWVudCk7XG4gIGluc3RhbmNlLnN0b3AoKTtcbiAgaW5zdGFuY2Uuc2V0U3ViZnJhbWUodHJ1ZSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJQbHVnaW4gPSAocGx1Z2luSW5zdGFuY2UsIHJlZlN0YXRlLCBhY3Rpb25JdGVtKSA9PiB7XG4gIGlmICghcGx1Z2luSW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcGVyY2VudCA9IHJlZlN0YXRlW2FjdGlvbkl0ZW0uYWN0aW9uVHlwZUlkXS52YWx1ZSAvIDEwMDtcbiAgcGx1Z2luSW5zdGFuY2UuZ29Ub0ZyYW1lKHBsdWdpbkluc3RhbmNlLmZyYW1lcyAqIHBlcmNlbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyUGx1Z2luID0gKGVsZW1lbnQpID0+IHtcbiAgY29uc3QgbG90dGllID0gd2luZG93LldlYmZsb3cucmVxdWlyZSgnbG90dGllJyk7XG4gIGlmIChsb3R0aWUpIHtcbiAgICBsb3R0aWUuY3JlYXRlSW5zdGFuY2UoZWxlbWVudCkuc3RvcCgpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImNsZWFyUGx1Z2luIiwiY3JlYXRlUGx1Z2luSW5zdGFuY2UiLCJnZXRQbHVnaW5Db25maWciLCJnZXRQbHVnaW5EZXN0aW5hdGlvbiIsImdldFBsdWdpbkR1cmF0aW9uIiwiZ2V0UGx1Z2luT3JpZ2luIiwicmVuZGVyUGx1Z2luIiwiYWN0aW9uSXRlbUNvbmZpZyIsInZhbHVlIiwiZWxlbWVudCIsImFjdGlvbkl0ZW0iLCJjb25maWciLCJkdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJnZXRBdHRyaWJ1dGUiLCJyZWZTdGF0ZSIsImxvdHRpZSIsIndpbmRvdyIsIldlYmZsb3ciLCJyZXF1aXJlIiwiaW5zdGFuY2UiLCJjcmVhdGVJbnN0YW5jZSIsInN0b3AiLCJzZXRTdWJmcmFtZSIsInBsdWdpbkluc3RhbmNlIiwicGVyY2VudCIsImFjdGlvblR5cGVJZCIsImdvVG9GcmFtZSIsImZyYW1lcyJdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCOzs7Ozs7Ozs7OztJQTZDVEEsV0FBVztlQUFYQTs7SUFqQkFDLG9CQUFvQjtlQUFwQkE7O0lBMUJBQyxlQUFlO2VBQWZBOztJQXNCQUMsb0JBQW9CO2VBQXBCQTs7SUFsQkFDLGlCQUFpQjtlQUFqQkE7O0lBY0FDLGVBQWU7ZUFBZkE7O0lBaUJBQyxZQUFZO2VBQVpBOzs7QUFuQ04sTUFBTUosa0JBQWtCLENBQUNLO0lBQzlCLE9BQU9BLGlCQUFpQkMsS0FBSztBQUMvQjtBQUVPLE1BQU1KLG9CQUFvQixDQUFDSyxTQUFTQztJQUN6QyxJQUFJQSxXQUFXQyxNQUFNLENBQUNDLFFBQVEsS0FBSyxRQUFRO1FBQ3pDLE9BQU87SUFDVDtJQUVBLE1BQU1BLFdBQVdDLFdBQVdKLFFBQVFLLFlBQVksQ0FBQztJQUVqRCxJQUFJRixXQUFXLEdBQUc7UUFDaEIsT0FBT0EsV0FBVztJQUNwQjtJQUVBLE9BQU9DLFdBQVdKLFFBQVFLLFlBQVksQ0FBQyw0QkFBNEI7QUFDckU7QUFFTyxNQUFNVCxrQkFBa0IsQ0FBQ1U7SUFDOUIsT0FBT0EsWUFBWTtRQUFDUCxPQUFPO0lBQUM7QUFDOUI7QUFFTyxNQUFNTCx1QkFBdUIsQ0FBQ0k7SUFDbkMsT0FBTztRQUFDQyxPQUFPRCxpQkFBaUJDLEtBQUs7SUFBQTtBQUN2QztBQUVPLE1BQU1QLHVCQUF1QixDQUFDUTtJQUNuQyxNQUFNTyxTQUFTQyxPQUFPQyxPQUFPLENBQUNDLE9BQU8sQ0FBQztJQUN0QyxJQUFJLENBQUNILFFBQVEsT0FBTztJQUNwQixNQUFNSSxXQUFXSixPQUFPSyxjQUFjLENBQUNaO0lBQ3ZDVyxTQUFTRSxJQUFJO0lBQ2JGLFNBQVNHLFdBQVcsQ0FBQztJQUNyQixPQUFPSDtBQUNUO0FBRU8sTUFBTWQsZUFBZSxDQUFDa0IsZ0JBQWdCVCxVQUFVTDtJQUNyRCxJQUFJLENBQUNjLGdCQUFnQjtRQUNuQjtJQUNGO0lBQ0EsTUFBTUMsVUFBVVYsUUFBUSxDQUFDTCxXQUFXZ0IsWUFBWSxDQUFDLENBQUNsQixLQUFLLEdBQUc7SUFDMURnQixlQUFlRyxTQUFTLENBQUNILGVBQWVJLE1BQU0sR0FBR0g7QUFDbkQ7QUFFTyxNQUFNekIsY0FBYyxDQUFDUztJQUMxQixNQUFNTyxTQUFTQyxPQUFPQyxPQUFPLENBQUNDLE9BQU8sQ0FBQztJQUN0QyxJQUFJSCxRQUFRO1FBQ1ZBLE9BQU9LLGNBQWMsQ0FBQ1osU0FBU2EsSUFBSTtJQUNyQztBQUNGIn0=
    
    }),
    92570: (function (__unused_webpack_module, exports) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        clearPlugin: function() {
            return clearPlugin;
        },
        createPluginInstance: function() {
            return createPluginInstance;
        },
        getPluginConfig: function() {
            return getPluginConfig;
        },
        getPluginDestination: function() {
            return getPluginDestination;
        },
        getPluginDuration: function() {
            return getPluginDuration;
        },
        getPluginOrigin: function() {
            return getPluginOrigin;
        },
        renderPlugin: function() {
            return renderPlugin;
        }
    });
    const FIT_KEY = '--wf-rive-fit';
    const ALIGNMENT_KEY = '--wf-rive-alignment';
    const queryContainerElement = (elementId)=>document.querySelector(`[data-w-id="${elementId}"]`);
    const getFrontendModule = ()=>window.Webflow.require('rive');
    const getPluginConfig = (actionItemConfig, key)=>actionItemConfig.value.inputs[key];
    const getPluginDuration = ()=>null; // Not used by this plugin
    const getPluginOrigin = (refState, actionItem)=>{
        if (refState) return refState;
        const result = {};
        const { inputs = {} } = actionItem.config.value;
        for(const input in inputs)if (inputs[input] == null) result[input] = 0;
        return result;
    };
    const getPluginDestination = (actionItemConfig)=>actionItemConfig.value.inputs ?? {};
    const createPluginInstance = (element, actionItem)=>{
        const selectorGuids = actionItem.config?.target?.selectorGuids || [];
        if (selectorGuids.length > 0) return element;
        // In this case, we define pluginInstance as a reference to the container element
        const pluginElementId = actionItem?.config?.target?.pluginElement;
        return pluginElementId ? queryContainerElement(pluginElementId) : null;
    };
    const renderPlugin = (containerElement, { PLUGIN_RIVE: props }, actionItem)=>{
        const frontendModule = getFrontendModule();
        if (!frontendModule) return;
        const instance = frontendModule.getInstance(containerElement);
        const StateMachineInputType = frontendModule.rive.StateMachineInputType;
        const { name, inputs = {} } = actionItem.config.value || {};
        function renderRive(riveInstance) {
            if (riveInstance.loaded) {
                render();
            } else {
                // Render instance immediately on load and then clean up handler
                const onLoad = ()=>{
                    render();
                    riveInstance?.off('load', onLoad);
                };
                riveInstance?.on('load', onLoad);
            }
            function render() {
                const stateMachineInputs = riveInstance.stateMachineInputs(name);
                if (stateMachineInputs == null) return; // exit early since no inputs found
                if (!riveInstance.isPlaying) riveInstance.play(name, false); // set autoplay: false because IX engine is controlling playback.
                if (FIT_KEY in inputs || ALIGNMENT_KEY in inputs) {
                    const currentLayout = riveInstance.layout;
                    const nextFit = inputs[FIT_KEY] ?? currentLayout.fit;
                    const nextAlignment = inputs[ALIGNMENT_KEY] ?? currentLayout.alignment;
                    if (nextFit !== currentLayout.fit || nextAlignment !== currentLayout.alignment) {
                        riveInstance.layout = currentLayout.copyWith({
                            fit: nextFit,
                            alignment: nextAlignment
                        });
                    }
                }
                for(const inputName in inputs){
                    if (inputName === FIT_KEY || inputName === ALIGNMENT_KEY) continue;
                    const machineInput = stateMachineInputs.find((m)=>m.name === inputName);
                    if (machineInput == null) continue;
                    switch(machineInput.type){
                        case StateMachineInputType.Boolean:
                            {
                                if (inputs[inputName] != null) {
                                    const booleanValue = Boolean(inputs[inputName]);
                                    machineInput.value = booleanValue;
                                }
                                break;
                            }
                        case StateMachineInputType.Number:
                            {
                                const numberValue = props[inputName];
                                if (numberValue != null) machineInput.value = numberValue;
                                break;
                            }
                        case StateMachineInputType.Trigger:
                            {
                                if (inputs[inputName]) machineInput.fire();
                                break;
                            }
                    }
                }
            }
        }
        // Render rive if the instance is available
        if (instance?.rive) renderRive(instance.rive);
        else frontendModule.setLoadHandler(containerElement, renderRive);
    };
    const clearPlugin = (_containerElement, _actionItem)=>null; // Not used by this plugin
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    22866: (function (__unused_webpack_module, exports) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        clearPlugin: function() {
            return clearPlugin;
        },
        createPluginInstance: function() {
            return createPluginInstance;
        },
        getPluginConfig: function() {
            return getPluginConfig;
        },
        getPluginDestination: function() {
            return getPluginDestination;
        },
        getPluginDuration: function() {
            return getPluginDuration;
        },
        getPluginOrigin: function() {
            return getPluginOrigin;
        },
        renderPlugin: function() {
            return renderPlugin;
        }
    });
    const queryContainerElement = (elementId)=>document.querySelector(`[data-w-id="${elementId}"]`);
    const getFrontendModule = ()=>window.Webflow.require('spline');
    const difference = (arr1, arr2)=>arr1.filter((x)=>!arr2.includes(x));
    const getPluginConfig = (actionItemConfig, key)=>{
        return actionItemConfig.value[key];
    };
    const getPluginDuration = ()=>{
        // Not used by this plugin
        return null;
    };
    const DEFAULT_VALUES = Object.freeze({
        positionX: 0,
        positionY: 0,
        positionZ: 0,
        rotationX: 0,
        rotationY: 0,
        rotationZ: 0,
        scaleX: 1,
        scaleY: 1,
        scaleZ: 1
    });
    const getPluginOrigin = (refState, actionItem)=>{
        // Determine which props we care about in the destination
        const destination = actionItem.config.value;
        const destinationKeys = Object.keys(destination);
        // Check the current state for any missing origin props
        if (refState) {
            const stateKeys = Object.keys(refState);
            const diffKeys = difference(destinationKeys, stateKeys);
            // If new props are needed, merge new origin values with current state
            if (diffKeys.length) {
                const origin = diffKeys.reduce((result, key)=>{
                    result[key] = DEFAULT_VALUES[key];
                    return result;
                }, refState);
                return origin;
            }
            // No difference, return current state
            return refState;
        }
        // State doesn't exist so define new origin based on destination
        const origin = destinationKeys.reduce((result, key)=>{
            result[key] = DEFAULT_VALUES[key];
            return result;
        }, {});
        return origin;
    };
    const getPluginDestination = (actionItemConfig)=>{
        return actionItemConfig.value;
    };
    const createPluginInstance = (element, actionItem)=>{
        // In this case, we define pluginInstance as a reference to the container element
        const pluginElementId = actionItem?.config?.target?.pluginElement;
        return pluginElementId ? queryContainerElement(pluginElementId) : null;
    };
    const renderPlugin = (containerElement, refState, actionItem)=>{
        const frontendModule = getFrontendModule();
        if (!frontendModule) return;
        const instance = frontendModule.getInstance(containerElement);
        const objectId = actionItem.config.target.objectId;
        const renderSpline = (spline)=>{
            if (!spline) {
                throw new Error('Invalid spline app passed to renderSpline');
            }
            const obj = objectId && spline.findObjectById(objectId);
            if (!obj) {
                return;
            }
            const { PLUGIN_SPLINE: props } = refState;
            if (props.positionX != null) {
                obj.position.x = props.positionX;
            }
            if (props.positionY != null) {
                obj.position.y = props.positionY;
            }
            if (props.positionZ != null) {
                obj.position.z = props.positionZ;
            }
            if (props.rotationX != null) {
                obj.rotation.x = props.rotationX;
            }
            if (props.rotationY != null) {
                obj.rotation.y = props.rotationY;
            }
            if (props.rotationZ != null) {
                obj.rotation.z = props.rotationZ;
            }
            if (props.scaleX != null) {
                obj.scale.x = props.scaleX;
            }
            if (props.scaleY != null) {
                obj.scale.y = props.scaleY;
            }
            if (props.scaleZ != null) {
                obj.scale.z = props.scaleZ;
            }
        };
        if (instance) {
            // Render spline if the app instance is already loaded
            renderSpline(instance.spline);
        } else {
            // Otherwise, store latest render as a callback to fire when loaded
            frontendModule.setLoadHandler(containerElement, renderSpline);
        }
    };
    const clearPlugin = ()=>{
        // Not used by this plugin
        return null;
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    11407: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ // Importing directly to avoid importing the entire shared-utils package.
    // eslint-disable-next-line webflow/package-boundaries
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        clearPlugin: function() {
            return clearPlugin;
        },
        createPluginInstance: function() {
            return createPluginInstance;
        },
        getPluginConfig: function() {
            return getPluginConfig;
        },
        getPluginDestination: function() {
            return getPluginDestination;
        },
        getPluginDuration: function() {
            return getPluginDuration;
        },
        getPluginOrigin: function() {
            return getPluginOrigin;
        },
        renderPlugin: function() {
            return renderPlugin;
        }
    });
    const _normalizeColor = __webpack_require__(40380);
    const getPluginConfig = (actionItemConfig, key)=>{
        return actionItemConfig.value[key];
    };
    const getPluginDuration = ()=>{
        // Not used by this plugin
        return null;
    };
    const getPluginOrigin = (refState, actionItem)=>{
        if (refState) {
            return refState;
        }
        // Determine which props we care about in the destination
        const destination = actionItem.config.value;
        // Look up root variable to parse origin values
        const objectId = actionItem.config.target.objectId;
        const computedValue = getComputedStyle(document.documentElement).getPropertyValue(objectId);
        if (destination.size != null) {
            return {
                size: parseInt(computedValue, 10)
            };
        }
        if (destination.unit === '%' || destination.unit === '-') {
            return {
                size: parseFloat(computedValue)
            };
        }
        if (destination.red != null && destination.green != null && destination.blue != null) {
            return (0, _normalizeColor.normalizeColor)(computedValue);
        }
    };
    const getPluginDestination = (actionItemConfig)=>{
        return actionItemConfig.value;
    };
    const createPluginInstance = ()=>{
        // Not used by this plugin
        return null;
    };
    const variableHandlers = {
        color: {
            match: ({ red, green, blue, alpha })=>[
                    red,
                    green,
                    blue,
                    alpha
                ].every((x)=>x != null),
            getValue: ({ red, green, blue, alpha })=>`rgba(${red}, ${green}, ${blue}, ${alpha})`
        },
        // Size, Percentage, and Unitless variables.
        size: {
            match: ({ size })=>size != null,
            getValue: ({ size }, unit)=>{
                switch(unit){
                    case '-':
                        return size;
                    default:
                        return `${size}${unit}`;
                }
            }
        }
    };
    const renderPlugin = (_, refState, actionItem)=>{
        const { target: { objectId }, value: { unit } } = actionItem.config;
        const props = refState.PLUGIN_VARIABLE;
        const handler = Object.values(variableHandlers).find((h)=>h.match(props, unit));
        if (handler) {
            document.documentElement.style.setProperty(objectId, handler.getValue(props, unit));
        }
    };
    const clearPlugin = (ref, actionItem)=>{
        const objectId = actionItem.config.target.objectId;
        document.documentElement.style.removeProperty(objectId);
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMlZhcmlhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vLyBJbXBvcnRpbmcgZGlyZWN0bHkgdG8gYXZvaWQgaW1wb3J0aW5nIHRoZSBlbnRpcmUgc2hhcmVkLXV0aWxzIHBhY2thZ2UuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgd2ViZmxvdy9wYWNrYWdlLWJvdW5kYXJpZXNcbmltcG9ydCB7bm9ybWFsaXplQ29sb3J9IGZyb20gJy4uL3NoYXJlZC11dGlscy9ub3JtYWxpemVDb2xvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRQbHVnaW5Db25maWcgPSAoYWN0aW9uSXRlbUNvbmZpZywga2V5KSA9PiB7XG4gIHJldHVybiBhY3Rpb25JdGVtQ29uZmlnLnZhbHVlW2tleV07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGx1Z2luRHVyYXRpb24gPSAoKSA9PiB7XG4gIC8vIE5vdCB1c2VkIGJ5IHRoaXMgcGx1Z2luXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFBsdWdpbk9yaWdpbiA9IChyZWZTdGF0ZSwgYWN0aW9uSXRlbSkgPT4ge1xuICBpZiAocmVmU3RhdGUpIHtcbiAgICByZXR1cm4gcmVmU3RhdGU7XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgd2hpY2ggcHJvcHMgd2UgY2FyZSBhYm91dCBpbiB0aGUgZGVzdGluYXRpb25cbiAgY29uc3QgZGVzdGluYXRpb24gPSBhY3Rpb25JdGVtLmNvbmZpZy52YWx1ZTtcblxuICAvLyBMb29rIHVwIHJvb3QgdmFyaWFibGUgdG8gcGFyc2Ugb3JpZ2luIHZhbHVlc1xuICBjb25zdCBvYmplY3RJZCA9IGFjdGlvbkl0ZW0uY29uZmlnLnRhcmdldC5vYmplY3RJZDtcbiAgY29uc3QgY29tcHV0ZWRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUoXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4gICkuZ2V0UHJvcGVydHlWYWx1ZShvYmplY3RJZCk7XG5cbiAgaWYgKGRlc3RpbmF0aW9uLnNpemUgIT0gbnVsbCkge1xuICAgIHJldHVybiB7c2l6ZTogcGFyc2VJbnQoY29tcHV0ZWRWYWx1ZSwgMTApfTtcbiAgfVxuXG4gIGlmIChkZXN0aW5hdGlvbi51bml0ID09PSAnJScgfHwgZGVzdGluYXRpb24udW5pdCA9PT0gJy0nKSB7XG4gICAgcmV0dXJuIHtzaXplOiBwYXJzZUZsb2F0KGNvbXB1dGVkVmFsdWUpfTtcbiAgfVxuXG4gIGlmIChcbiAgICBkZXN0aW5hdGlvbi5yZWQgIT0gbnVsbCAmJlxuICAgIGRlc3RpbmF0aW9uLmdyZWVuICE9IG51bGwgJiZcbiAgICBkZXN0aW5hdGlvbi5ibHVlICE9IG51bGxcbiAgKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUNvbG9yKGNvbXB1dGVkVmFsdWUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGx1Z2luRGVzdGluYXRpb24gPSAoYWN0aW9uSXRlbUNvbmZpZykgPT4ge1xuICByZXR1cm4gYWN0aW9uSXRlbUNvbmZpZy52YWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQbHVnaW5JbnN0YW5jZSA9ICgpID0+IHtcbiAgLy8gTm90IHVzZWQgYnkgdGhpcyBwbHVnaW5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCB2YXJpYWJsZUhhbmRsZXJzID0ge1xuICBjb2xvcjoge1xuICAgIG1hdGNoOiAoe3JlZCwgZ3JlZW4sIGJsdWUsIGFscGhhfSkgPT5cbiAgICAgIFtyZWQsIGdyZWVuLCBibHVlLCBhbHBoYV0uZXZlcnkoKHgpID0+IHggIT0gbnVsbCksXG4gICAgZ2V0VmFsdWU6ICh7cmVkLCBncmVlbiwgYmx1ZSwgYWxwaGF9KSA9PlxuICAgICAgYHJnYmEoJHtyZWR9LCAke2dyZWVufSwgJHtibHVlfSwgJHthbHBoYX0pYCxcbiAgfSxcblxuICAvLyBTaXplLCBQZXJjZW50YWdlLCBhbmQgVW5pdGxlc3MgdmFyaWFibGVzLlxuICBzaXplOiB7XG4gICAgbWF0Y2g6ICh7c2l6ZX0pID0+IHNpemUgIT0gbnVsbCxcbiAgICBnZXRWYWx1ZTogKHtzaXplfSwgdW5pdCkgPT4ge1xuICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBgJHtzaXplfSR7dW5pdH1gO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyUGx1Z2luID0gKF8sIHJlZlN0YXRlLCBhY3Rpb25JdGVtKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXQ6IHtvYmplY3RJZH0sXG4gICAgdmFsdWU6IHt1bml0fSxcbiAgfSA9IGFjdGlvbkl0ZW0uY29uZmlnO1xuICBjb25zdCBwcm9wcyA9IHJlZlN0YXRlLlBMVUdJTl9WQVJJQUJMRTtcblxuICBjb25zdCBoYW5kbGVyID0gT2JqZWN0LnZhbHVlcyh2YXJpYWJsZUhhbmRsZXJzKS5maW5kKChoKSA9PlxuICAgIGgubWF0Y2gocHJvcHMsIHVuaXQpXG4gICk7XG5cbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICBvYmplY3RJZCxcbiAgICAgIGhhbmRsZXIuZ2V0VmFsdWUocHJvcHMsIHVuaXQpXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyUGx1Z2luID0gKHJlZiwgYWN0aW9uSXRlbSkgPT4ge1xuICBjb25zdCBvYmplY3RJZCA9IGFjdGlvbkl0ZW0uY29uZmlnLnRhcmdldC5vYmplY3RJZDtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KG9iamVjdElkKTtcbn07XG4iXSwibmFtZXMiOlsiY2xlYXJQbHVnaW4iLCJjcmVhdGVQbHVnaW5JbnN0YW5jZSIsImdldFBsdWdpbkNvbmZpZyIsImdldFBsdWdpbkRlc3RpbmF0aW9uIiwiZ2V0UGx1Z2luRHVyYXRpb24iLCJnZXRQbHVnaW5PcmlnaW4iLCJyZW5kZXJQbHVnaW4iLCJhY3Rpb25JdGVtQ29uZmlnIiwia2V5IiwidmFsdWUiLCJyZWZTdGF0ZSIsImFjdGlvbkl0ZW0iLCJkZXN0aW5hdGlvbiIsImNvbmZpZyIsIm9iamVjdElkIiwidGFyZ2V0IiwiY29tcHV0ZWRWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFByb3BlcnR5VmFsdWUiLCJzaXplIiwicGFyc2VJbnQiLCJ1bml0IiwicGFyc2VGbG9hdCIsInJlZCIsImdyZWVuIiwiYmx1ZSIsIm5vcm1hbGl6ZUNvbG9yIiwidmFyaWFibGVIYW5kbGVycyIsImNvbG9yIiwibWF0Y2giLCJhbHBoYSIsImV2ZXJ5IiwieCIsImdldFZhbHVlIiwiXyIsInByb3BzIiwiUExVR0lOX1ZBUklBQkxFIiwiaGFuZGxlciIsIk9iamVjdCIsInZhbHVlcyIsImZpbmQiLCJoIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInJlZiIsInJlbW92ZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0IsR0FFdEIseUVBQXlFO0FBQ3pFLHNEQUFzRDs7Ozs7Ozs7Ozs7O0lBNkZ6Q0EsV0FBVztlQUFYQTs7SUE5Q0FDLG9CQUFvQjtlQUFwQkE7O0lBNUNBQyxlQUFlO2VBQWZBOztJQXdDQUMsb0JBQW9CO2VBQXBCQTs7SUFwQ0FDLGlCQUFpQjtlQUFqQkE7O0lBS0FDLGVBQWU7ZUFBZkE7O0lBOERBQyxZQUFZO2VBQVpBOzs7Z0NBekVnQjtBQUV0QixNQUFNSixrQkFBa0IsQ0FBQ0ssa0JBQWtCQztJQUNoRCxPQUFPRCxpQkFBaUJFLEtBQUssQ0FBQ0QsSUFBSTtBQUNwQztBQUVPLE1BQU1KLG9CQUFvQjtJQUMvQiwwQkFBMEI7SUFDMUIsT0FBTztBQUNUO0FBRU8sTUFBTUMsa0JBQWtCLENBQUNLLFVBQVVDO0lBQ3hDLElBQUlELFVBQVU7UUFDWixPQUFPQTtJQUNUO0lBRUEseURBQXlEO0lBQ3pELE1BQU1FLGNBQWNELFdBQVdFLE1BQU0sQ0FBQ0osS0FBSztJQUUzQywrQ0FBK0M7SUFDL0MsTUFBTUssV0FBV0gsV0FBV0UsTUFBTSxDQUFDRSxNQUFNLENBQUNELFFBQVE7SUFDbEQsTUFBTUUsZ0JBQWdCQyxpQkFDcEJDLFNBQVNDLGVBQWUsRUFDeEJDLGdCQUFnQixDQUFDTjtJQUVuQixJQUFJRixZQUFZUyxJQUFJLElBQUksTUFBTTtRQUM1QixPQUFPO1lBQUNBLE1BQU1DLFNBQVNOLGVBQWU7UUFBRztJQUMzQztJQUVBLElBQUlKLFlBQVlXLElBQUksS0FBSyxPQUFPWCxZQUFZVyxJQUFJLEtBQUssS0FBSztRQUN4RCxPQUFPO1lBQUNGLE1BQU1HLFdBQVdSO1FBQWM7SUFDekM7SUFFQSxJQUNFSixZQUFZYSxHQUFHLElBQUksUUFDbkJiLFlBQVljLEtBQUssSUFBSSxRQUNyQmQsWUFBWWUsSUFBSSxJQUFJLE1BQ3BCO1FBQ0EsT0FBT0MsSUFBQUEsOEJBQWMsRUFBQ1o7SUFDeEI7QUFDRjtBQUVPLE1BQU1iLHVCQUF1QixDQUFDSTtJQUNuQyxPQUFPQSxpQkFBaUJFLEtBQUs7QUFDL0I7QUFFTyxNQUFNUix1QkFBdUI7SUFDbEMsMEJBQTBCO0lBQzFCLE9BQU87QUFDVDtBQUVBLE1BQU00QixtQkFBbUI7SUFDdkJDLE9BQU87UUFDTEMsT0FBTyxDQUFDLEVBQUNOLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVLLEtBQUssRUFBQyxHQUMvQjtnQkFBQ1A7Z0JBQUtDO2dCQUFPQztnQkFBTUs7YUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQ0MsSUFBTUEsS0FBSztRQUM5Q0MsVUFBVSxDQUFDLEVBQUNWLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVLLEtBQUssRUFBQyxHQUNsQyxDQUFDLEtBQUssRUFBRVAsSUFBSSxFQUFFLEVBQUVDLE1BQU0sRUFBRSxFQUFFQyxLQUFLLEVBQUUsRUFBRUssTUFBTSxDQUFDLENBQUM7SUFDL0M7SUFFQSw0Q0FBNEM7SUFDNUNYLE1BQU07UUFDSlUsT0FBTyxDQUFDLEVBQUNWLElBQUksRUFBQyxHQUFLQSxRQUFRO1FBQzNCYyxVQUFVLENBQUMsRUFBQ2QsSUFBSSxFQUFDLEVBQUVFO1lBQ2pCLE9BQVFBO2dCQUNOLEtBQUs7b0JBQ0gsT0FBT0Y7Z0JBQ1Q7b0JBQ0UsT0FBTyxDQUFDLEVBQUVBLEtBQUssRUFBRUUsS0FBSyxDQUFDO1lBQzNCO1FBQ0Y7SUFDRjtBQUNGO0FBRU8sTUFBTWpCLGVBQWUsQ0FBQzhCLEdBQUcxQixVQUFVQztJQUN4QyxNQUFNLEVBQ0pJLFFBQVEsRUFBQ0QsUUFBUSxFQUFDLEVBQ2xCTCxPQUFPLEVBQUNjLElBQUksRUFBQyxFQUNkLEdBQUdaLFdBQVdFLE1BQU07SUFDckIsTUFBTXdCLFFBQVEzQixTQUFTNEIsZUFBZTtJQUV0QyxNQUFNQyxVQUFVQyxPQUFPQyxNQUFNLENBQUNaLGtCQUFrQmEsSUFBSSxDQUFDLENBQUNDLElBQ3BEQSxFQUFFWixLQUFLLENBQUNNLE9BQU9kO0lBR2pCLElBQUlnQixTQUFTO1FBQ1hyQixTQUFTQyxlQUFlLENBQUN5QixLQUFLLENBQUNDLFdBQVcsQ0FDeEMvQixVQUNBeUIsUUFBUUosUUFBUSxDQUFDRSxPQUFPZDtJQUU1QjtBQUNGO0FBRU8sTUFBTXZCLGNBQWMsQ0FBQzhDLEtBQUtuQztJQUMvQixNQUFNRyxXQUFXSCxXQUFXRSxNQUFNLENBQUNFLE1BQU0sQ0FBQ0QsUUFBUTtJQUNsREksU0FBU0MsZUFBZSxDQUFDeUIsS0FBSyxDQUFDRyxjQUFjLENBQUNqQztBQUNoRCJ9
    
    }),
    63690: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "pluginMethodMap", ({
        enumerable: true,
        get: function() {
            return pluginMethodMap;
        }
    }));
    const _sharedconstants = __webpack_require__(7087);
    const _IX2Lottie = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(97377));
    const _IX2Spline = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(22866));
    const _IX2Rive = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(92570));
    const _IX2Variable = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(11407));
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    const pluginMethodMap = new Map([
        [
            _sharedconstants.ActionTypeConsts.PLUGIN_LOTTIE,
            {
                ..._IX2Lottie
            }
        ],
        [
            _sharedconstants.ActionTypeConsts.PLUGIN_SPLINE,
            {
                ..._IX2Spline
            }
        ],
        [
            _sharedconstants.ActionTypeConsts.PLUGIN_RIVE,
            {
                ..._IX2Rive
            }
        ],
        [
            _sharedconstants.ActionTypeConsts.PLUGIN_VARIABLE,
            {
                ..._IX2Variable
            }
        ]
    ]);
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWN0aW9uVHlwZUNvbnN0c30gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvaXgyL3NoYXJlZC1jb25zdGFudHMnO1xuXG5pbXBvcnQgKiBhcyBsb3R0aWUgZnJvbSAnLi9JWDJMb3R0aWUnO1xuaW1wb3J0ICogYXMgc3BsaW5lIGZyb20gJy4vSVgyU3BsaW5lJztcbmltcG9ydCAqIGFzIHJpdmUgZnJvbSAnLi9JWDJSaXZlJztcbmltcG9ydCAqIGFzIHZhcmlhYmxlIGZyb20gJy4vSVgyVmFyaWFibGUnO1xuXG5leHBvcnQgdHlwZSBQbHVnaW5UeXBlID1cbiAgfCB0eXBlb2YgQWN0aW9uVHlwZUNvbnN0cy5QTFVHSU5fTE9UVElFXG4gIHwgdHlwZW9mIEFjdGlvblR5cGVDb25zdHMuUExVR0lOX1NQTElORVxuICB8IHR5cGVvZiBBY3Rpb25UeXBlQ29uc3RzLlBMVUdJTl9WQVJJQUJMRVxuICB8IHR5cGVvZiBBY3Rpb25UeXBlQ29uc3RzLlBMVUdJTl9SSVZFO1xuXG5leHBvcnQgY29uc3QgcGx1Z2luTWV0aG9kTWFwID0gbmV3IE1hcChbXG4gIFtBY3Rpb25UeXBlQ29uc3RzLlBMVUdJTl9MT1RUSUUsIHsuLi5sb3R0aWV9XSxcbiAgW0FjdGlvblR5cGVDb25zdHMuUExVR0lOX1NQTElORSwgey4uLnNwbGluZX1dLFxuICBbQWN0aW9uVHlwZUNvbnN0cy5QTFVHSU5fUklWRSwgey4uLnJpdmV9XSxcbiAgW0FjdGlvblR5cGVDb25zdHMuUExVR0lOX1ZBUklBQkxFLCB7Li4udmFyaWFibGV9XSxcbl0pO1xuIl0sIm5hbWVzIjpbInBsdWdpbk1ldGhvZE1hcCIsIk1hcCIsIkFjdGlvblR5cGVDb25zdHMiLCJQTFVHSU5fTE9UVElFIiwibG90dGllIiwiUExVR0lOX1NQTElORSIsInNwbGluZSIsIlBMVUdJTl9SSVZFIiwicml2ZSIsIlBMVUdJTl9WQVJJQUJMRSIsInZhcmlhYmxlIl0sIm1hcHBpbmdzIjoiOzs7OytCQWFhQTs7O2VBQUFBOzs7aUNBYmtCO21FQUVQO21FQUNBO2lFQUNGO3FFQUNJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRbkIsTUFBTUEsa0JBQWtCLElBQUlDLElBQUk7SUFDckM7UUFBQ0MsaUNBQWdCLENBQUNDLGFBQWE7UUFBRTtZQUFDLEdBQUdDLFVBQU07UUFBQTtLQUFFO0lBQzdDO1FBQUNGLGlDQUFnQixDQUFDRyxhQUFhO1FBQUU7WUFBQyxHQUFHQyxVQUFNO1FBQUE7S0FBRTtJQUM3QztRQUFDSixpQ0FBZ0IsQ0FBQ0ssV0FBVztRQUFFO1lBQUMsR0FBR0MsUUFBSTtRQUFBO0tBQUU7SUFDekM7UUFBQ04saUNBQWdCLENBQUNPLGVBQWU7UUFBRTtZQUFDLEdBQUdDLFlBQVE7UUFBQTtLQUFFO0NBQ2xEIn0=
    
    }),
    48023: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        IX2_ACTION_LIST_PLAYBACK_CHANGED: function() {
            return IX2_ACTION_LIST_PLAYBACK_CHANGED;
        },
        IX2_ANIMATION_FRAME_CHANGED: function() {
            return IX2_ANIMATION_FRAME_CHANGED;
        },
        IX2_CLEAR_REQUESTED: function() {
            return IX2_CLEAR_REQUESTED;
        },
        IX2_ELEMENT_STATE_CHANGED: function() {
            return IX2_ELEMENT_STATE_CHANGED;
        },
        IX2_EVENT_LISTENER_ADDED: function() {
            return IX2_EVENT_LISTENER_ADDED;
        },
        IX2_EVENT_STATE_CHANGED: function() {
            return IX2_EVENT_STATE_CHANGED;
        },
        IX2_INSTANCE_ADDED: function() {
            return IX2_INSTANCE_ADDED;
        },
        IX2_INSTANCE_REMOVED: function() {
            return IX2_INSTANCE_REMOVED;
        },
        IX2_INSTANCE_STARTED: function() {
            return IX2_INSTANCE_STARTED;
        },
        IX2_MEDIA_QUERIES_DEFINED: function() {
            return IX2_MEDIA_QUERIES_DEFINED;
        },
        IX2_PARAMETER_CHANGED: function() {
            return IX2_PARAMETER_CHANGED;
        },
        IX2_PLAYBACK_REQUESTED: function() {
            return IX2_PLAYBACK_REQUESTED;
        },
        IX2_PREVIEW_REQUESTED: function() {
            return IX2_PREVIEW_REQUESTED;
        },
        IX2_RAW_DATA_IMPORTED: function() {
            return IX2_RAW_DATA_IMPORTED;
        },
        IX2_SESSION_INITIALIZED: function() {
            return IX2_SESSION_INITIALIZED;
        },
        IX2_SESSION_STARTED: function() {
            return IX2_SESSION_STARTED;
        },
        IX2_SESSION_STOPPED: function() {
            return IX2_SESSION_STOPPED;
        },
        IX2_STOP_REQUESTED: function() {
            return IX2_STOP_REQUESTED;
        },
        IX2_TEST_FRAME_RENDERED: function() {
            return IX2_TEST_FRAME_RENDERED;
        },
        IX2_VIEWPORT_WIDTH_CHANGED: function() {
            return IX2_VIEWPORT_WIDTH_CHANGED;
        }
    });
    const IX2_RAW_DATA_IMPORTED = 'IX2_RAW_DATA_IMPORTED';
    const IX2_SESSION_INITIALIZED = 'IX2_SESSION_INITIALIZED';
    const IX2_SESSION_STARTED = 'IX2_SESSION_STARTED';
    const IX2_SESSION_STOPPED = 'IX2_SESSION_STOPPED';
    const IX2_PREVIEW_REQUESTED = 'IX2_PREVIEW_REQUESTED';
    const IX2_PLAYBACK_REQUESTED = 'IX2_PLAYBACK_REQUESTED';
    const IX2_STOP_REQUESTED = 'IX2_STOP_REQUESTED';
    const IX2_CLEAR_REQUESTED = 'IX2_CLEAR_REQUESTED';
    const IX2_EVENT_LISTENER_ADDED = 'IX2_EVENT_LISTENER_ADDED';
    const IX2_EVENT_STATE_CHANGED = 'IX2_EVENT_STATE_CHANGED';
    const IX2_ANIMATION_FRAME_CHANGED = 'IX2_ANIMATION_FRAME_CHANGED';
    const IX2_PARAMETER_CHANGED = 'IX2_PARAMETER_CHANGED';
    const IX2_INSTANCE_ADDED = 'IX2_INSTANCE_ADDED';
    const IX2_INSTANCE_STARTED = 'IX2_INSTANCE_STARTED';
    const IX2_INSTANCE_REMOVED = 'IX2_INSTANCE_REMOVED';
    const IX2_ELEMENT_STATE_CHANGED = 'IX2_ELEMENT_STATE_CHANGED';
    const IX2_ACTION_LIST_PLAYBACK_CHANGED = 'IX2_ACTION_LIST_PLAYBACK_CHANGED';
    const IX2_VIEWPORT_WIDTH_CHANGED = 'IX2_VIEWPORT_WIDTH_CHANGED';
    const IX2_MEDIA_QUERIES_DEFINED = 'IX2_MEDIA_QUERIES_DEFINED';
    const IX2_TEST_FRAME_RENDERED = 'IX2_TEST_FRAME_RENDERED';
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkVuZ2luZUFjdGlvblR5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBJWDJfUkFXX0RBVEFfSU1QT1JURUQgPSAnSVgyX1JBV19EQVRBX0lNUE9SVEVEJztcbmV4cG9ydCBjb25zdCBJWDJfU0VTU0lPTl9JTklUSUFMSVpFRCA9ICdJWDJfU0VTU0lPTl9JTklUSUFMSVpFRCc7XG5leHBvcnQgY29uc3QgSVgyX1NFU1NJT05fU1RBUlRFRCA9ICdJWDJfU0VTU0lPTl9TVEFSVEVEJztcbmV4cG9ydCBjb25zdCBJWDJfU0VTU0lPTl9TVE9QUEVEID0gJ0lYMl9TRVNTSU9OX1NUT1BQRUQnO1xuZXhwb3J0IGNvbnN0IElYMl9QUkVWSUVXX1JFUVVFU1RFRCA9ICdJWDJfUFJFVklFV19SRVFVRVNURUQnO1xuZXhwb3J0IGNvbnN0IElYMl9QTEFZQkFDS19SRVFVRVNURUQgPSAnSVgyX1BMQVlCQUNLX1JFUVVFU1RFRCc7XG5leHBvcnQgY29uc3QgSVgyX1NUT1BfUkVRVUVTVEVEID0gJ0lYMl9TVE9QX1JFUVVFU1RFRCc7XG5leHBvcnQgY29uc3QgSVgyX0NMRUFSX1JFUVVFU1RFRCA9ICdJWDJfQ0xFQVJfUkVRVUVTVEVEJztcbmV4cG9ydCBjb25zdCBJWDJfRVZFTlRfTElTVEVORVJfQURERUQgPSAnSVgyX0VWRU5UX0xJU1RFTkVSX0FEREVEJztcbmV4cG9ydCBjb25zdCBJWDJfRVZFTlRfU1RBVEVfQ0hBTkdFRCA9ICdJWDJfRVZFTlRfU1RBVEVfQ0hBTkdFRCc7XG5leHBvcnQgY29uc3QgSVgyX0FOSU1BVElPTl9GUkFNRV9DSEFOR0VEID0gJ0lYMl9BTklNQVRJT05fRlJBTUVfQ0hBTkdFRCc7XG5leHBvcnQgY29uc3QgSVgyX1BBUkFNRVRFUl9DSEFOR0VEID0gJ0lYMl9QQVJBTUVURVJfQ0hBTkdFRCc7XG5leHBvcnQgY29uc3QgSVgyX0lOU1RBTkNFX0FEREVEID0gJ0lYMl9JTlNUQU5DRV9BRERFRCc7XG5leHBvcnQgY29uc3QgSVgyX0lOU1RBTkNFX1NUQVJURUQgPSAnSVgyX0lOU1RBTkNFX1NUQVJURUQnO1xuZXhwb3J0IGNvbnN0IElYMl9JTlNUQU5DRV9SRU1PVkVEID0gJ0lYMl9JTlNUQU5DRV9SRU1PVkVEJztcbmV4cG9ydCBjb25zdCBJWDJfRUxFTUVOVF9TVEFURV9DSEFOR0VEID0gJ0lYMl9FTEVNRU5UX1NUQVRFX0NIQU5HRUQnO1xuZXhwb3J0IGNvbnN0IElYMl9BQ1RJT05fTElTVF9QTEFZQkFDS19DSEFOR0VEID1cbiAgJ0lYMl9BQ1RJT05fTElTVF9QTEFZQkFDS19DSEFOR0VEJztcbmV4cG9ydCBjb25zdCBJWDJfVklFV1BPUlRfV0lEVEhfQ0hBTkdFRCA9ICdJWDJfVklFV1BPUlRfV0lEVEhfQ0hBTkdFRCc7XG5leHBvcnQgY29uc3QgSVgyX01FRElBX1FVRVJJRVNfREVGSU5FRCA9ICdJWDJfTUVESUFfUVVFUklFU19ERUZJTkVEJztcbmV4cG9ydCBjb25zdCBJWDJfVEVTVF9GUkFNRV9SRU5ERVJFRCA9ICdJWDJfVEVTVF9GUkFNRV9SRU5ERVJFRCc7XG4iXSwibmFtZXMiOlsiSVgyX0FDVElPTl9MSVNUX1BMQVlCQUNLX0NIQU5HRUQiLCJJWDJfQU5JTUFUSU9OX0ZSQU1FX0NIQU5HRUQiLCJJWDJfQ0xFQVJfUkVRVUVTVEVEIiwiSVgyX0VMRU1FTlRfU1RBVEVfQ0hBTkdFRCIsIklYMl9FVkVOVF9MSVNURU5FUl9BRERFRCIsIklYMl9FVkVOVF9TVEFURV9DSEFOR0VEIiwiSVgyX0lOU1RBTkNFX0FEREVEIiwiSVgyX0lOU1RBTkNFX1JFTU9WRUQiLCJJWDJfSU5TVEFOQ0VfU1RBUlRFRCIsIklYMl9NRURJQV9RVUVSSUVTX0RFRklORUQiLCJJWDJfUEFSQU1FVEVSX0NIQU5HRUQiLCJJWDJfUExBWUJBQ0tfUkVRVUVTVEVEIiwiSVgyX1BSRVZJRVdfUkVRVUVTVEVEIiwiSVgyX1JBV19EQVRBX0lNUE9SVEVEIiwiSVgyX1NFU1NJT05fSU5JVElBTElaRUQiLCJJWDJfU0VTU0lPTl9TVEFSVEVEIiwiSVgyX1NFU1NJT05fU1RPUFBFRCIsIklYMl9TVE9QX1JFUVVFU1RFRCIsIklYMl9URVNUX0ZSQU1FX1JFTkRFUkVEIiwiSVgyX1ZJRVdQT1JUX1dJRFRIX0NIQU5HRUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBZ0JhQSxnQ0FBZ0M7ZUFBaENBOztJQU5BQywyQkFBMkI7ZUFBM0JBOztJQUhBQyxtQkFBbUI7ZUFBbkJBOztJQVFBQyx5QkFBeUI7ZUFBekJBOztJQVBBQyx3QkFBd0I7ZUFBeEJBOztJQUNBQyx1QkFBdUI7ZUFBdkJBOztJQUdBQyxrQkFBa0I7ZUFBbEJBOztJQUVBQyxvQkFBb0I7ZUFBcEJBOztJQURBQyxvQkFBb0I7ZUFBcEJBOztJQU1BQyx5QkFBeUI7ZUFBekJBOztJQVJBQyxxQkFBcUI7ZUFBckJBOztJQU5BQyxzQkFBc0I7ZUFBdEJBOztJQURBQyxxQkFBcUI7ZUFBckJBOztJQUpBQyxxQkFBcUI7ZUFBckJBOztJQUNBQyx1QkFBdUI7ZUFBdkJBOztJQUNBQyxtQkFBbUI7ZUFBbkJBOztJQUNBQyxtQkFBbUI7ZUFBbkJBOztJQUdBQyxrQkFBa0I7ZUFBbEJBOztJQWNBQyx1QkFBdUI7ZUFBdkJBOztJQUZBQywwQkFBMEI7ZUFBMUJBOzs7QUFsQk4sTUFBTU4sd0JBQXdCO0FBQzlCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsc0JBQXNCO0FBQzVCLE1BQU1KLHdCQUF3QjtBQUM5QixNQUFNRCx5QkFBeUI7QUFDL0IsTUFBTU0scUJBQXFCO0FBQzNCLE1BQU1mLHNCQUFzQjtBQUM1QixNQUFNRSwyQkFBMkI7QUFDakMsTUFBTUMsMEJBQTBCO0FBQ2hDLE1BQU1KLDhCQUE4QjtBQUNwQyxNQUFNUyx3QkFBd0I7QUFDOUIsTUFBTUoscUJBQXFCO0FBQzNCLE1BQU1FLHVCQUF1QjtBQUM3QixNQUFNRCx1QkFBdUI7QUFDN0IsTUFBTUosNEJBQTRCO0FBQ2xDLE1BQU1ILG1DQUNYO0FBQ0ssTUFBTW1CLDZCQUE2QjtBQUNuQyxNQUFNViw0QkFBNEI7QUFDbEMsTUFBTVMsMEJBQTBCIn0=
    
    }),
    52686: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ABSTRACT_NODE: function() {
            return ABSTRACT_NODE;
        },
        AUTO: function() {
            return AUTO;
        },
        BACKGROUND: function() {
            return BACKGROUND;
        },
        BACKGROUND_COLOR: function() {
            return BACKGROUND_COLOR;
        },
        BAR_DELIMITER: function() {
            return BAR_DELIMITER;
        },
        BORDER_COLOR: function() {
            return BORDER_COLOR;
        },
        BOUNDARY_SELECTOR: function() {
            return BOUNDARY_SELECTOR;
        },
        CHILDREN: function() {
            return CHILDREN;
        },
        COLON_DELIMITER: function() {
            return COLON_DELIMITER;
        },
        COLOR: function() {
            return COLOR;
        },
        COMMA_DELIMITER: function() {
            return COMMA_DELIMITER;
        },
        CONFIG_UNIT: function() {
            return CONFIG_UNIT;
        },
        CONFIG_VALUE: function() {
            return CONFIG_VALUE;
        },
        CONFIG_X_UNIT: function() {
            return CONFIG_X_UNIT;
        },
        CONFIG_X_VALUE: function() {
            return CONFIG_X_VALUE;
        },
        CONFIG_Y_UNIT: function() {
            return CONFIG_Y_UNIT;
        },
        CONFIG_Y_VALUE: function() {
            return CONFIG_Y_VALUE;
        },
        CONFIG_Z_UNIT: function() {
            return CONFIG_Z_UNIT;
        },
        CONFIG_Z_VALUE: function() {
            return CONFIG_Z_VALUE;
        },
        DISPLAY: function() {
            return DISPLAY;
        },
        FILTER: function() {
            return FILTER;
        },
        FLEX: function() {
            return FLEX;
        },
        FONT_VARIATION_SETTINGS: function() {
            return FONT_VARIATION_SETTINGS;
        },
        HEIGHT: function() {
            return HEIGHT;
        },
        HTML_ELEMENT: function() {
            return HTML_ELEMENT;
        },
        IMMEDIATE_CHILDREN: function() {
            return IMMEDIATE_CHILDREN;
        },
        IX2_ID_DELIMITER: function() {
            return IX2_ID_DELIMITER;
        },
        OPACITY: function() {
            return OPACITY;
        },
        PARENT: function() {
            return PARENT;
        },
        PLAIN_OBJECT: function() {
            return PLAIN_OBJECT;
        },
        PRESERVE_3D: function() {
            return PRESERVE_3D;
        },
        RENDER_GENERAL: function() {
            return RENDER_GENERAL;
        },
        RENDER_PLUGIN: function() {
            return RENDER_PLUGIN;
        },
        RENDER_STYLE: function() {
            return RENDER_STYLE;
        },
        RENDER_TRANSFORM: function() {
            return RENDER_TRANSFORM;
        },
        ROTATE_X: function() {
            return ROTATE_X;
        },
        ROTATE_Y: function() {
            return ROTATE_Y;
        },
        ROTATE_Z: function() {
            return ROTATE_Z;
        },
        SCALE_3D: function() {
            return SCALE_3D;
        },
        SCALE_X: function() {
            return SCALE_X;
        },
        SCALE_Y: function() {
            return SCALE_Y;
        },
        SCALE_Z: function() {
            return SCALE_Z;
        },
        SIBLINGS: function() {
            return SIBLINGS;
        },
        SKEW: function() {
            return SKEW;
        },
        SKEW_X: function() {
            return SKEW_X;
        },
        SKEW_Y: function() {
            return SKEW_Y;
        },
        TRANSFORM: function() {
            return TRANSFORM;
        },
        TRANSLATE_3D: function() {
            return TRANSLATE_3D;
        },
        TRANSLATE_X: function() {
            return TRANSLATE_X;
        },
        TRANSLATE_Y: function() {
            return TRANSLATE_Y;
        },
        TRANSLATE_Z: function() {
            return TRANSLATE_Z;
        },
        WF_PAGE: function() {
            return WF_PAGE;
        },
        WIDTH: function() {
            return WIDTH;
        },
        WILL_CHANGE: function() {
            return WILL_CHANGE;
        },
        W_MOD_IX: function() {
            return W_MOD_IX;
        },
        W_MOD_JS: function() {
            return W_MOD_JS;
        }
    });
    const IX2_ID_DELIMITER = '|';
    const WF_PAGE = 'data-wf-page';
    const W_MOD_JS = 'w-mod-js';
    const W_MOD_IX = 'w-mod-ix';
    const BOUNDARY_SELECTOR = '.w-dyn-item';
    const CONFIG_X_VALUE = 'xValue';
    const CONFIG_Y_VALUE = 'yValue';
    const CONFIG_Z_VALUE = 'zValue';
    const CONFIG_VALUE = 'value';
    const CONFIG_X_UNIT = 'xUnit';
    const CONFIG_Y_UNIT = 'yUnit';
    const CONFIG_Z_UNIT = 'zUnit';
    const CONFIG_UNIT = 'unit';
    const TRANSFORM = 'transform';
    const TRANSLATE_X = 'translateX';
    const TRANSLATE_Y = 'translateY';
    const TRANSLATE_Z = 'translateZ';
    const TRANSLATE_3D = 'translate3d';
    const SCALE_X = 'scaleX';
    const SCALE_Y = 'scaleY';
    const SCALE_Z = 'scaleZ';
    const SCALE_3D = 'scale3d';
    const ROTATE_X = 'rotateX';
    const ROTATE_Y = 'rotateY';
    const ROTATE_Z = 'rotateZ';
    const SKEW = 'skew';
    const SKEW_X = 'skewX';
    const SKEW_Y = 'skewY';
    const OPACITY = 'opacity';
    const FILTER = 'filter';
    const FONT_VARIATION_SETTINGS = 'font-variation-settings';
    const WIDTH = 'width';
    const HEIGHT = 'height';
    const BACKGROUND_COLOR = 'backgroundColor';
    const BACKGROUND = 'background';
    const BORDER_COLOR = 'borderColor';
    const COLOR = 'color';
    const DISPLAY = 'display';
    const FLEX = 'flex';
    const WILL_CHANGE = 'willChange';
    const AUTO = 'AUTO';
    const COMMA_DELIMITER = ',';
    const COLON_DELIMITER = ':';
    const BAR_DELIMITER = '|';
    const CHILDREN = 'CHILDREN';
    const IMMEDIATE_CHILDREN = 'IMMEDIATE_CHILDREN';
    const SIBLINGS = 'SIBLINGS';
    const PARENT = 'PARENT';
    const PRESERVE_3D = 'preserve-3d';
    const HTML_ELEMENT = 'HTML_ELEMENT';
    const PLAIN_OBJECT = 'PLAIN_OBJECT';
    const ABSTRACT_NODE = 'ABSTRACT_NODE';
    const RENDER_TRANSFORM = 'RENDER_TRANSFORM';
    const RENDER_GENERAL = 'RENDER_GENERAL';
    const RENDER_STYLE = 'RENDER_STYLE';
    const RENDER_PLUGIN = 'RENDER_PLUGIN';
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkVuZ2luZUNvbnN0YW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSVgyX0lEX0RFTElNSVRFUiA9ICd8Jztcbi8qKlxuICogU3RvcmVzIHBhZ2VJZCBvZiB0aGUgY3VycmVudCBwYWdlLCBzbyBpdCBjYW4gYmUgYWNjZXNzZWQgaW4gdGhlIElYMkJyb3dzZXJBcGlcbiAqL1xuZXhwb3J0IGNvbnN0IFdGX1BBR0UgPSAnZGF0YS13Zi1wYWdlJztcbmV4cG9ydCBjb25zdCBXX01PRF9KUyA9ICd3LW1vZC1qcyc7XG5leHBvcnQgY29uc3QgV19NT0RfSVggPSAndy1tb2QtaXgnO1xuZXhwb3J0IGNvbnN0IEJPVU5EQVJZX1NFTEVDVE9SID0gJy53LWR5bi1pdGVtJztcbmV4cG9ydCBjb25zdCBDT05GSUdfWF9WQUxVRSA9ICd4VmFsdWUnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19ZX1ZBTFVFID0gJ3lWYWx1ZSc7XG5leHBvcnQgY29uc3QgQ09ORklHX1pfVkFMVUUgPSAnelZhbHVlJztcbmV4cG9ydCBjb25zdCBDT05GSUdfVkFMVUUgPSAndmFsdWUnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19YX1VOSVQgPSAneFVuaXQnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19ZX1VOSVQgPSAneVVuaXQnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19aX1VOSVQgPSAnelVuaXQnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19VTklUID0gJ3VuaXQnO1xuZXhwb3J0IGNvbnN0IFRSQU5TRk9STSA9ICd0cmFuc2Zvcm0nO1xuZXhwb3J0IGNvbnN0IFRSQU5TTEFURV9YID0gJ3RyYW5zbGF0ZVgnO1xuZXhwb3J0IGNvbnN0IFRSQU5TTEFURV9ZID0gJ3RyYW5zbGF0ZVknO1xuZXhwb3J0IGNvbnN0IFRSQU5TTEFURV9aID0gJ3RyYW5zbGF0ZVonO1xuZXhwb3J0IGNvbnN0IFRSQU5TTEFURV8zRCA9ICd0cmFuc2xhdGUzZCc7XG5leHBvcnQgY29uc3QgU0NBTEVfWCA9ICdzY2FsZVgnO1xuZXhwb3J0IGNvbnN0IFNDQUxFX1kgPSAnc2NhbGVZJztcbmV4cG9ydCBjb25zdCBTQ0FMRV9aID0gJ3NjYWxlWic7XG5leHBvcnQgY29uc3QgU0NBTEVfM0QgPSAnc2NhbGUzZCc7XG5leHBvcnQgY29uc3QgUk9UQVRFX1ggPSAncm90YXRlWCc7XG5leHBvcnQgY29uc3QgUk9UQVRFX1kgPSAncm90YXRlWSc7XG5leHBvcnQgY29uc3QgUk9UQVRFX1ogPSAncm90YXRlWic7XG5leHBvcnQgY29uc3QgU0tFVyA9ICdza2V3JztcbmV4cG9ydCBjb25zdCBTS0VXX1ggPSAnc2tld1gnO1xuZXhwb3J0IGNvbnN0IFNLRVdfWSA9ICdza2V3WSc7XG5leHBvcnQgY29uc3QgT1BBQ0lUWSA9ICdvcGFjaXR5JztcbmV4cG9ydCBjb25zdCBGSUxURVIgPSAnZmlsdGVyJztcbmV4cG9ydCBjb25zdCBGT05UX1ZBUklBVElPTl9TRVRUSU5HUyA9ICdmb250LXZhcmlhdGlvbi1zZXR0aW5ncyc7XG5leHBvcnQgY29uc3QgV0lEVEggPSAnd2lkdGgnO1xuZXhwb3J0IGNvbnN0IEhFSUdIVCA9ICdoZWlnaHQnO1xuZXhwb3J0IGNvbnN0IEJBQ0tHUk9VTkRfQ09MT1IgPSAnYmFja2dyb3VuZENvbG9yJztcbmV4cG9ydCBjb25zdCBCQUNLR1JPVU5EID0gJ2JhY2tncm91bmQnO1xuZXhwb3J0IGNvbnN0IEJPUkRFUl9DT0xPUiA9ICdib3JkZXJDb2xvcic7XG5leHBvcnQgY29uc3QgQ09MT1IgPSAnY29sb3InO1xuZXhwb3J0IGNvbnN0IERJU1BMQVkgPSAnZGlzcGxheSc7XG5leHBvcnQgY29uc3QgRkxFWCA9ICdmbGV4JztcbmV4cG9ydCBjb25zdCBXSUxMX0NIQU5HRSA9ICd3aWxsQ2hhbmdlJztcbmV4cG9ydCBjb25zdCBBVVRPID0gJ0FVVE8nO1xuZXhwb3J0IGNvbnN0IENPTU1BX0RFTElNSVRFUiA9ICcsJztcbmV4cG9ydCBjb25zdCBDT0xPTl9ERUxJTUlURVIgPSAnOic7XG5leHBvcnQgY29uc3QgQkFSX0RFTElNSVRFUiA9ICd8JztcbmV4cG9ydCBjb25zdCBDSElMRFJFTiA9ICdDSElMRFJFTic7XG5leHBvcnQgY29uc3QgSU1NRURJQVRFX0NISUxEUkVOID0gJ0lNTUVESUFURV9DSElMRFJFTic7XG5leHBvcnQgY29uc3QgU0lCTElOR1MgPSAnU0lCTElOR1MnO1xuZXhwb3J0IGNvbnN0IFBBUkVOVCA9ICdQQVJFTlQnO1xuZXhwb3J0IGNvbnN0IFBSRVNFUlZFXzNEID0gJ3ByZXNlcnZlLTNkJztcbmV4cG9ydCBjb25zdCBIVE1MX0VMRU1FTlQgPSAnSFRNTF9FTEVNRU5UJztcbmV4cG9ydCBjb25zdCBQTEFJTl9PQkpFQ1QgPSAnUExBSU5fT0JKRUNUJztcbmV4cG9ydCBjb25zdCBBQlNUUkFDVF9OT0RFID0gJ0FCU1RSQUNUX05PREUnO1xuZXhwb3J0IGNvbnN0IFJFTkRFUl9UUkFOU0ZPUk0gPSAnUkVOREVSX1RSQU5TRk9STSc7XG5leHBvcnQgY29uc3QgUkVOREVSX0dFTkVSQUwgPSAnUkVOREVSX0dFTkVSQUwnO1xuZXhwb3J0IGNvbnN0IFJFTkRFUl9TVFlMRSA9ICdSRU5ERVJfU1RZTEUnO1xuZXhwb3J0IGNvbnN0IFJFTkRFUl9QTFVHSU4gPSAnUkVOREVSX1BMVUdJTic7XG4iXSwibmFtZXMiOlsiQUJTVFJBQ1RfTk9ERSIsIkFVVE8iLCJCQUNLR1JPVU5EIiwiQkFDS0dST1VORF9DT0xPUiIsIkJBUl9ERUxJTUlURVIiLCJCT1JERVJfQ09MT1IiLCJCT1VOREFSWV9TRUxFQ1RPUiIsIkNISUxEUkVOIiwiQ09MT05fREVMSU1JVEVSIiwiQ09MT1IiLCJDT01NQV9ERUxJTUlURVIiLCJDT05GSUdfVU5JVCIsIkNPTkZJR19WQUxVRSIsIkNPTkZJR19YX1VOSVQiLCJDT05GSUdfWF9WQUxVRSIsIkNPTkZJR19ZX1VOSVQiLCJDT05GSUdfWV9WQUxVRSIsIkNPTkZJR19aX1VOSVQiLCJDT05GSUdfWl9WQUxVRSIsIkRJU1BMQVkiLCJGSUxURVIiLCJGTEVYIiwiRk9OVF9WQVJJQVRJT05fU0VUVElOR1MiLCJIRUlHSFQiLCJIVE1MX0VMRU1FTlQiLCJJTU1FRElBVEVfQ0hJTERSRU4iLCJJWDJfSURfREVMSU1JVEVSIiwiT1BBQ0lUWSIsIlBBUkVOVCIsIlBMQUlOX09CSkVDVCIsIlBSRVNFUlZFXzNEIiwiUkVOREVSX0dFTkVSQUwiLCJSRU5ERVJfUExVR0lOIiwiUkVOREVSX1NUWUxFIiwiUkVOREVSX1RSQU5TRk9STSIsIlJPVEFURV9YIiwiUk9UQVRFX1kiLCJST1RBVEVfWiIsIlNDQUxFXzNEIiwiU0NBTEVfWCIsIlNDQUxFX1kiLCJTQ0FMRV9aIiwiU0lCTElOR1MiLCJTS0VXIiwiU0tFV19YIiwiU0tFV19ZIiwiVFJBTlNGT1JNIiwiVFJBTlNMQVRFXzNEIiwiVFJBTlNMQVRFX1giLCJUUkFOU0xBVEVfWSIsIlRSQU5TTEFURV9aIiwiV0ZfUEFHRSIsIldJRFRIIiwiV0lMTF9DSEFOR0UiLCJXX01PRF9JWCIsIldfTU9EX0pTIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXNEYUEsYUFBYTtlQUFiQTs7SUFYQUMsSUFBSTtlQUFKQTs7SUFOQUMsVUFBVTtlQUFWQTs7SUFEQUMsZ0JBQWdCO2VBQWhCQTs7SUFVQUMsYUFBYTtlQUFiQTs7SUFSQUMsWUFBWTtlQUFaQTs7SUEvQkFDLGlCQUFpQjtlQUFqQkE7O0lBd0NBQyxRQUFRO2VBQVJBOztJQUZBQyxlQUFlO2VBQWZBOztJQU5BQyxLQUFLO2VBQUxBOztJQUtBQyxlQUFlO2VBQWZBOztJQTdCQUMsV0FBVztlQUFYQTs7SUFKQUMsWUFBWTtlQUFaQTs7SUFDQUMsYUFBYTtlQUFiQTs7SUFKQUMsY0FBYztlQUFkQTs7SUFLQUMsYUFBYTtlQUFiQTs7SUFKQUMsY0FBYztlQUFkQTs7SUFLQUMsYUFBYTtlQUFiQTs7SUFKQUMsY0FBYztlQUFkQTs7SUE4QkFDLE9BQU87ZUFBUEE7O0lBUkFDLE1BQU07ZUFBTkE7O0lBU0FDLElBQUk7ZUFBSkE7O0lBUkFDLHVCQUF1QjtlQUF2QkE7O0lBRUFDLE1BQU07ZUFBTkE7O0lBaUJBQyxZQUFZO2VBQVpBOztJQUpBQyxrQkFBa0I7ZUFBbEJBOztJQWhEQUMsZ0JBQWdCO2VBQWhCQTs7SUErQkFDLE9BQU87ZUFBUEE7O0lBbUJBQyxNQUFNO2VBQU5BOztJQUdBQyxZQUFZO2VBQVpBOztJQUZBQyxXQUFXO2VBQVhBOztJQUtBQyxjQUFjO2VBQWRBOztJQUVBQyxhQUFhO2VBQWJBOztJQURBQyxZQUFZO2VBQVpBOztJQUZBQyxnQkFBZ0I7ZUFBaEJBOztJQTlCQUMsUUFBUTtlQUFSQTs7SUFDQUMsUUFBUTtlQUFSQTs7SUFDQUMsUUFBUTtlQUFSQTs7SUFIQUMsUUFBUTtlQUFSQTs7SUFIQUMsT0FBTztlQUFQQTs7SUFDQUMsT0FBTztlQUFQQTs7SUFDQUMsT0FBTztlQUFQQTs7SUEwQkFDLFFBQVE7ZUFBUkE7O0lBckJBQyxJQUFJO2VBQUpBOztJQUNBQyxNQUFNO2VBQU5BOztJQUNBQyxNQUFNO2VBQU5BOztJQWRBQyxTQUFTO2VBQVRBOztJQUlBQyxZQUFZO2VBQVpBOztJQUhBQyxXQUFXO2VBQVhBOztJQUNBQyxXQUFXO2VBQVhBOztJQUNBQyxXQUFXO2VBQVhBOztJQWZBQyxPQUFPO2VBQVBBOztJQThCQUMsS0FBSztlQUFMQTs7SUFRQUMsV0FBVztlQUFYQTs7SUFwQ0FDLFFBQVE7ZUFBUkE7O0lBREFDLFFBQVE7ZUFBUkE7OztBQUxOLE1BQU03QixtQkFBbUI7QUFJekIsTUFBTXlCLFVBQVU7QUFDaEIsTUFBTUksV0FBVztBQUNqQixNQUFNRCxXQUFXO0FBQ2pCLE1BQU1oRCxvQkFBb0I7QUFDMUIsTUFBTVEsaUJBQWlCO0FBQ3ZCLE1BQU1FLGlCQUFpQjtBQUN2QixNQUFNRSxpQkFBaUI7QUFDdkIsTUFBTU4sZUFBZTtBQUNyQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUUsZ0JBQWdCO0FBQ3RCLE1BQU1FLGdCQUFnQjtBQUN0QixNQUFNTixjQUFjO0FBQ3BCLE1BQU1tQyxZQUFZO0FBQ2xCLE1BQU1FLGNBQWM7QUFDcEIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxjQUFjO0FBQ3BCLE1BQU1ILGVBQWU7QUFDckIsTUFBTVIsVUFBVTtBQUNoQixNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLFVBQVU7QUFDaEIsTUFBTUgsV0FBVztBQUNqQixNQUFNSCxXQUFXO0FBQ2pCLE1BQU1DLFdBQVc7QUFDakIsTUFBTUMsV0FBVztBQUNqQixNQUFNTSxPQUFPO0FBQ2IsTUFBTUMsU0FBUztBQUNmLE1BQU1DLFNBQVM7QUFDZixNQUFNbEIsVUFBVTtBQUNoQixNQUFNUCxTQUFTO0FBQ2YsTUFBTUUsMEJBQTBCO0FBQ2hDLE1BQU04QixRQUFRO0FBQ2QsTUFBTTdCLFNBQVM7QUFDZixNQUFNcEIsbUJBQW1CO0FBQ3pCLE1BQU1ELGFBQWE7QUFDbkIsTUFBTUcsZUFBZTtBQUNyQixNQUFNSSxRQUFRO0FBQ2QsTUFBTVUsVUFBVTtBQUNoQixNQUFNRSxPQUFPO0FBQ2IsTUFBTWdDLGNBQWM7QUFDcEIsTUFBTXBELE9BQU87QUFDYixNQUFNUyxrQkFBa0I7QUFDeEIsTUFBTUYsa0JBQWtCO0FBQ3hCLE1BQU1KLGdCQUFnQjtBQUN0QixNQUFNRyxXQUFXO0FBQ2pCLE1BQU1rQixxQkFBcUI7QUFDM0IsTUFBTWlCLFdBQVc7QUFDakIsTUFBTWQsU0FBUztBQUNmLE1BQU1FLGNBQWM7QUFDcEIsTUFBTU4sZUFBZTtBQUNyQixNQUFNSyxlQUFlO0FBQ3JCLE1BQU03QixnQkFBZ0I7QUFDdEIsTUFBTWtDLG1CQUFtQjtBQUN6QixNQUFNSCxpQkFBaUI7QUFDdkIsTUFBTUUsZUFBZTtBQUNyQixNQUFNRCxnQkFBZ0IifQ==
    
    }),
    70262: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ActionAppliesTo: function() {
            return ActionAppliesTo;
        },
        ActionTypeConsts: function() {
            return ActionTypeConsts;
        }
    });
    const ActionTypeConsts = {
        TRANSFORM_MOVE: 'TRANSFORM_MOVE',
        TRANSFORM_SCALE: 'TRANSFORM_SCALE',
        TRANSFORM_ROTATE: 'TRANSFORM_ROTATE',
        TRANSFORM_SKEW: 'TRANSFORM_SKEW',
        STYLE_OPACITY: 'STYLE_OPACITY',
        STYLE_SIZE: 'STYLE_SIZE',
        STYLE_FILTER: 'STYLE_FILTER',
        STYLE_FONT_VARIATION: 'STYLE_FONT_VARIATION',
        STYLE_BACKGROUND_COLOR: 'STYLE_BACKGROUND_COLOR',
        STYLE_BORDER: 'STYLE_BORDER',
        STYLE_TEXT_COLOR: 'STYLE_TEXT_COLOR',
        OBJECT_VALUE: 'OBJECT_VALUE',
        PLUGIN_LOTTIE: 'PLUGIN_LOTTIE',
        PLUGIN_SPLINE: 'PLUGIN_SPLINE',
        PLUGIN_RIVE: 'PLUGIN_RIVE',
        PLUGIN_VARIABLE: 'PLUGIN_VARIABLE',
        GENERAL_DISPLAY: 'GENERAL_DISPLAY',
        GENERAL_START_ACTION: 'GENERAL_START_ACTION',
        GENERAL_CONTINUOUS_ACTION: 'GENERAL_CONTINUOUS_ACTION',
        // TODO: Clean these up below because they're not used at this time
        GENERAL_COMBO_CLASS: 'GENERAL_COMBO_CLASS',
        GENERAL_STOP_ACTION: 'GENERAL_STOP_ACTION',
        GENERAL_LOOP: 'GENERAL_LOOP',
        STYLE_BOX_SHADOW: 'STYLE_BOX_SHADOW'
    };
    const ActionAppliesTo = {
        ELEMENT: 'ELEMENT',
        ELEMENT_CLASS: 'ELEMENT_CLASS',
        TRIGGER_ELEMENT: 'TRIGGER_ELEMENT'
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGlvbi1hY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBY3Rpb25UeXBlQ29uc3RzID0ge1xuICBUUkFOU0ZPUk1fTU9WRTogJ1RSQU5TRk9STV9NT1ZFJyBhcyBjb25zdCxcbiAgVFJBTlNGT1JNX1NDQUxFOiAnVFJBTlNGT1JNX1NDQUxFJyBhcyBjb25zdCxcbiAgVFJBTlNGT1JNX1JPVEFURTogJ1RSQU5TRk9STV9ST1RBVEUnIGFzIGNvbnN0LFxuICBUUkFOU0ZPUk1fU0tFVzogJ1RSQU5TRk9STV9TS0VXJyBhcyBjb25zdCxcbiAgU1RZTEVfT1BBQ0lUWTogJ1NUWUxFX09QQUNJVFknIGFzIGNvbnN0LFxuICBTVFlMRV9TSVpFOiAnU1RZTEVfU0laRScgYXMgY29uc3QsXG4gIFNUWUxFX0ZJTFRFUjogJ1NUWUxFX0ZJTFRFUicgYXMgY29uc3QsXG4gIFNUWUxFX0ZPTlRfVkFSSUFUSU9OOiAnU1RZTEVfRk9OVF9WQVJJQVRJT04nIGFzIGNvbnN0LFxuICBTVFlMRV9CQUNLR1JPVU5EX0NPTE9SOiAnU1RZTEVfQkFDS0dST1VORF9DT0xPUicgYXMgY29uc3QsXG4gIFNUWUxFX0JPUkRFUjogJ1NUWUxFX0JPUkRFUicgYXMgY29uc3QsXG4gIFNUWUxFX1RFWFRfQ09MT1I6ICdTVFlMRV9URVhUX0NPTE9SJyBhcyBjb25zdCxcbiAgT0JKRUNUX1ZBTFVFOiAnT0JKRUNUX1ZBTFVFJyBhcyBjb25zdCxcbiAgUExVR0lOX0xPVFRJRTogJ1BMVUdJTl9MT1RUSUUnIGFzIGNvbnN0LFxuICBQTFVHSU5fU1BMSU5FOiAnUExVR0lOX1NQTElORScgYXMgY29uc3QsXG4gIFBMVUdJTl9SSVZFOiAnUExVR0lOX1JJVkUnIGFzIGNvbnN0LFxuICBQTFVHSU5fVkFSSUFCTEU6ICdQTFVHSU5fVkFSSUFCTEUnIGFzIGNvbnN0LFxuICBHRU5FUkFMX0RJU1BMQVk6ICdHRU5FUkFMX0RJU1BMQVknIGFzIGNvbnN0LFxuICBHRU5FUkFMX1NUQVJUX0FDVElPTjogJ0dFTkVSQUxfU1RBUlRfQUNUSU9OJyBhcyBjb25zdCxcbiAgR0VORVJBTF9DT05USU5VT1VTX0FDVElPTjogJ0dFTkVSQUxfQ09OVElOVU9VU19BQ1RJT04nIGFzIGNvbnN0LFxuXG4gIC8vIFRPRE86IENsZWFuIHRoZXNlIHVwIGJlbG93IGJlY2F1c2UgdGhleSdyZSBub3QgdXNlZCBhdCB0aGlzIHRpbWVcbiAgR0VORVJBTF9DT01CT19DTEFTUzogJ0dFTkVSQUxfQ09NQk9fQ0xBU1MnIGFzIGNvbnN0LFxuICBHRU5FUkFMX1NUT1BfQUNUSU9OOiAnR0VORVJBTF9TVE9QX0FDVElPTicgYXMgY29uc3QsXG4gIEdFTkVSQUxfTE9PUDogJ0dFTkVSQUxfTE9PUCcgYXMgY29uc3QsXG4gIFNUWUxFX0JPWF9TSEFET1c6ICdTVFlMRV9CT1hfU0hBRE9XJyBhcyBjb25zdCxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIEFjdGlvblR5cGVJZFR5cGUgPSBrZXlvZiB0eXBlb2YgQWN0aW9uVHlwZUNvbnN0cztcblxuZXhwb3J0IGNvbnN0IEFjdGlvbkFwcGxpZXNUbyA9IHtcbiAgRUxFTUVOVDogJ0VMRU1FTlQnIGFzIGNvbnN0LFxuICBFTEVNRU5UX0NMQVNTOiAnRUxFTUVOVF9DTEFTUycgYXMgY29uc3QsXG4gIFRSSUdHRVJfRUxFTUVOVDogJ1RSSUdHRVJfRUxFTUVOVCcgYXMgY29uc3QsXG59IGFzIGNvbnN0O1xuIl0sIm5hbWVzIjpbIkFjdGlvbkFwcGxpZXNUbyIsIkFjdGlvblR5cGVDb25zdHMiLCJUUkFOU0ZPUk1fTU9WRSIsIlRSQU5TRk9STV9TQ0FMRSIsIlRSQU5TRk9STV9ST1RBVEUiLCJUUkFOU0ZPUk1fU0tFVyIsIlNUWUxFX09QQUNJVFkiLCJTVFlMRV9TSVpFIiwiU1RZTEVfRklMVEVSIiwiU1RZTEVfRk9OVF9WQVJJQVRJT04iLCJTVFlMRV9CQUNLR1JPVU5EX0NPTE9SIiwiU1RZTEVfQk9SREVSIiwiU1RZTEVfVEVYVF9DT0xPUiIsIk9CSkVDVF9WQUxVRSIsIlBMVUdJTl9MT1RUSUUiLCJQTFVHSU5fU1BMSU5FIiwiUExVR0lOX1JJVkUiLCJQTFVHSU5fVkFSSUFCTEUiLCJHRU5FUkFMX0RJU1BMQVkiLCJHRU5FUkFMX1NUQVJUX0FDVElPTiIsIkdFTkVSQUxfQ09OVElOVU9VU19BQ1RJT04iLCJHRU5FUkFMX0NPTUJPX0NMQVNTIiwiR0VORVJBTF9TVE9QX0FDVElPTiIsIkdFTkVSQUxfTE9PUCIsIlNUWUxFX0JPWF9TSEFET1ciLCJFTEVNRU5UIiwiRUxFTUVOVF9DTEFTUyIsIlRSSUdHRVJfRUxFTUVOVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUE4QmFBLGVBQWU7ZUFBZkE7O0lBOUJBQyxnQkFBZ0I7ZUFBaEJBOzs7QUFBTixNQUFNQSxtQkFBbUI7SUFDOUJDLGdCQUFnQjtJQUNoQkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7SUFDbEJDLGdCQUFnQjtJQUNoQkMsZUFBZTtJQUNmQyxZQUFZO0lBQ1pDLGNBQWM7SUFDZEMsc0JBQXNCO0lBQ3RCQyx3QkFBd0I7SUFDeEJDLGNBQWM7SUFDZEMsa0JBQWtCO0lBQ2xCQyxjQUFjO0lBQ2RDLGVBQWU7SUFDZkMsZUFBZTtJQUNmQyxhQUFhO0lBQ2JDLGlCQUFpQjtJQUNqQkMsaUJBQWlCO0lBQ2pCQyxzQkFBc0I7SUFDdEJDLDJCQUEyQjtJQUUzQixtRUFBbUU7SUFDbkVDLHFCQUFxQjtJQUNyQkMscUJBQXFCO0lBQ3JCQyxjQUFjO0lBQ2RDLGtCQUFrQjtBQUNwQjtBQUlPLE1BQU14QixrQkFBa0I7SUFDN0J5QixTQUFTO0lBQ1RDLGVBQWU7SUFDZkMsaUJBQWlCO0FBQ25CIn0=
    
    }),
    7087: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ActionTypeConsts: function() {
            return _animationactions.ActionTypeConsts;
        },
        IX2EngineActionTypes: function() {
            return _IX2EngineActionTypes;
        },
        IX2EngineConstants: function() {
            return _IX2EngineConstants;
        },
        QuickEffectIds: function() {
            return _triggerevents.QuickEffectIds;
        }
    });
    const _triggerevents = _export_star(__webpack_require__(61833), exports);
    const _animationactions = _export_star(__webpack_require__(70262), exports);
    _export_star(__webpack_require__(28704), exports);
    _export_star(__webpack_require__(83213), exports);
    const _IX2EngineActionTypes = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(48023));
    const _IX2EngineConstants = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(52686));
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdHJpZ2dlci1ldmVudHMnO1xuZXhwb3J0ICogZnJvbSAnLi9hbmltYXRpb24tYWN0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL3RyaWdnZXItaW50ZXJhY3Rpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vcmVkdWNlZC1tb3Rpb24nO1xuXG5pbXBvcnQgKiBhcyBJWDJFbmdpbmVBY3Rpb25UeXBlcyBmcm9tICcuL0lYMkVuZ2luZUFjdGlvblR5cGVzJztcbmltcG9ydCAqIGFzIElYMkVuZ2luZUNvbnN0YW50cyBmcm9tICcuL0lYMkVuZ2luZUNvbnN0YW50cyc7XG5leHBvcnQge0lYMkVuZ2luZUFjdGlvblR5cGVzLCBJWDJFbmdpbmVDb25zdGFudHN9O1xuXG5leHBvcnQge0FjdGlvblR5cGVDb25zdHN9IGZyb20gJy4vYW5pbWF0aW9uLWFjdGlvbnMnO1xuZXhwb3J0IHtRdWlja0VmZmVjdElkc30gZnJvbSAnLi90cmlnZ2VyLWV2ZW50cyc7XG4iXSwibmFtZXMiOlsiQWN0aW9uVHlwZUNvbnN0cyIsIklYMkVuZ2luZUFjdGlvblR5cGVzIiwiSVgyRW5naW5lQ29uc3RhbnRzIiwiUXVpY2tFZmZlY3RJZHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBU1FBLGdCQUFnQjtlQUFoQkEsa0NBQWdCOztJQUZoQkMsb0JBQW9CO2VBQXBCQTs7SUFBc0JDLGtCQUFrQjtlQUFsQkE7O0lBR3RCQyxjQUFjO2VBQWRBLDZCQUFjOzs7NENBVlI7K0NBQ0E7cUJBQ0E7cUJBQ0E7OEVBRXdCOzRFQUNGIn0=
    
    }),
    83213: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "ReducedMotionTypes", ({
        enumerable: true,
        get: function() {
            return ReducedMotionTypes;
        }
    }));
    const _animationactions = __webpack_require__(70262);
    const { TRANSFORM_MOVE, TRANSFORM_SCALE, TRANSFORM_ROTATE, TRANSFORM_SKEW, STYLE_SIZE, STYLE_FILTER, STYLE_FONT_VARIATION } = _animationactions.ActionTypeConsts;
    const ReducedMotionTypes = {
        [TRANSFORM_MOVE]: true,
        [TRANSFORM_SCALE]: true,
        [TRANSFORM_ROTATE]: true,
        [TRANSFORM_SKEW]: true,
        [STYLE_SIZE]: true,
        [STYLE_FILTER]: true,
        [STYLE_FONT_VARIATION]: true
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZWQtbW90aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWN0aW9uVHlwZUNvbnN0c30gZnJvbSAnLi9hbmltYXRpb24tYWN0aW9ucyc7XG5cbmNvbnN0IHtcbiAgVFJBTlNGT1JNX01PVkUsXG4gIFRSQU5TRk9STV9TQ0FMRSxcbiAgVFJBTlNGT1JNX1JPVEFURSxcbiAgVFJBTlNGT1JNX1NLRVcsXG4gIFNUWUxFX1NJWkUsXG4gIFNUWUxFX0ZJTFRFUixcbiAgU1RZTEVfRk9OVF9WQVJJQVRJT04sXG59ID0gQWN0aW9uVHlwZUNvbnN0cztcblxuLyoqXG4gKiBSZWR1Y2VkIE1vdGlvbjogQWN0aW9uIHR5cGVzIHRvIGJ5cGFzcyBkdXJpbmcgYHByZWZlcnMtcmVkdWNlZC1tb3Rpb25gXG4gKi9cblxuZXhwb3J0IGNvbnN0IFJlZHVjZWRNb3Rpb25UeXBlcyA9IHtcbiAgW1RSQU5TRk9STV9NT1ZFXTogdHJ1ZSxcbiAgW1RSQU5TRk9STV9TQ0FMRV06IHRydWUsXG4gIFtUUkFOU0ZPUk1fUk9UQVRFXTogdHJ1ZSxcbiAgW1RSQU5TRk9STV9TS0VXXTogdHJ1ZSxcbiAgW1NUWUxFX1NJWkVdOiB0cnVlLFxuICBbU1RZTEVfRklMVEVSXTogdHJ1ZSxcbiAgW1NUWUxFX0ZPTlRfVkFSSUFUSU9OXTogdHJ1ZSxcbn0gYXMgY29uc3Q7XG4iXSwibmFtZXMiOlsiUmVkdWNlZE1vdGlvblR5cGVzIiwiVFJBTlNGT1JNX01PVkUiLCJUUkFOU0ZPUk1fU0NBTEUiLCJUUkFOU0ZPUk1fUk9UQVRFIiwiVFJBTlNGT1JNX1NLRVciLCJTVFlMRV9TSVpFIiwiU1RZTEVfRklMVEVSIiwiU1RZTEVfRk9OVF9WQVJJQVRJT04iLCJBY3Rpb25UeXBlQ29uc3RzIl0sIm1hcHBpbmdzIjoiOzs7OytCQWdCYUE7OztlQUFBQTs7O2tDQWhCa0I7QUFFL0IsTUFBTSxFQUNKQyxjQUFjLEVBQ2RDLGVBQWUsRUFDZkMsZ0JBQWdCLEVBQ2hCQyxjQUFjLEVBQ2RDLFVBQVUsRUFDVkMsWUFBWSxFQUNaQyxvQkFBb0IsRUFDckIsR0FBR0Msa0NBQWdCO0FBTWIsTUFBTVIscUJBQXFCO0lBQ2hDLENBQUNDLGVBQWUsRUFBRTtJQUNsQixDQUFDQyxnQkFBZ0IsRUFBRTtJQUNuQixDQUFDQyxpQkFBaUIsRUFBRTtJQUNwQixDQUFDQyxlQUFlLEVBQUU7SUFDbEIsQ0FBQ0MsV0FBVyxFQUFFO0lBQ2QsQ0FBQ0MsYUFBYSxFQUFFO0lBQ2hCLENBQUNDLHFCQUFxQixFQUFFO0FBQzFCIn0=
    
    }),
    61833: (function (__unused_webpack_module, exports) {
    "use strict";
    /**
     * Event Type IDs
     */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        EventAppliesTo: function() {
            return EventAppliesTo;
        },
        EventBasedOn: function() {
            return EventBasedOn;
        },
        EventContinuousMouseAxes: function() {
            return EventContinuousMouseAxes;
        },
        EventLimitAffectedElements: function() {
            return EventLimitAffectedElements;
        },
        EventTypeConsts: function() {
            return EventTypeConsts;
        },
        QuickEffectDirectionConsts: function() {
            return QuickEffectDirectionConsts;
        },
        QuickEffectIds: function() {
            return QuickEffectIds;
        }
    });
    const EventTypeConsts = {
        NAVBAR_OPEN: 'NAVBAR_OPEN',
        NAVBAR_CLOSE: 'NAVBAR_CLOSE',
        TAB_ACTIVE: 'TAB_ACTIVE',
        TAB_INACTIVE: 'TAB_INACTIVE',
        SLIDER_ACTIVE: 'SLIDER_ACTIVE',
        SLIDER_INACTIVE: 'SLIDER_INACTIVE',
        DROPDOWN_OPEN: 'DROPDOWN_OPEN',
        DROPDOWN_CLOSE: 'DROPDOWN_CLOSE',
        MOUSE_CLICK: 'MOUSE_CLICK',
        MOUSE_SECOND_CLICK: 'MOUSE_SECOND_CLICK',
        MOUSE_DOWN: 'MOUSE_DOWN',
        MOUSE_UP: 'MOUSE_UP',
        MOUSE_OVER: 'MOUSE_OVER',
        MOUSE_OUT: 'MOUSE_OUT',
        MOUSE_MOVE: 'MOUSE_MOVE',
        MOUSE_MOVE_IN_VIEWPORT: 'MOUSE_MOVE_IN_VIEWPORT',
        SCROLL_INTO_VIEW: 'SCROLL_INTO_VIEW',
        SCROLL_OUT_OF_VIEW: 'SCROLL_OUT_OF_VIEW',
        SCROLLING_IN_VIEW: 'SCROLLING_IN_VIEW',
        ECOMMERCE_CART_OPEN: 'ECOMMERCE_CART_OPEN',
        ECOMMERCE_CART_CLOSE: 'ECOMMERCE_CART_CLOSE',
        PAGE_START: 'PAGE_START',
        PAGE_FINISH: 'PAGE_FINISH',
        PAGE_SCROLL_UP: 'PAGE_SCROLL_UP',
        PAGE_SCROLL_DOWN: 'PAGE_SCROLL_DOWN',
        PAGE_SCROLL: 'PAGE_SCROLL'
    };
    const EventAppliesTo = {
        ELEMENT: 'ELEMENT',
        CLASS: 'CLASS',
        PAGE: 'PAGE'
    };
    const EventBasedOn = {
        ELEMENT: 'ELEMENT',
        VIEWPORT: 'VIEWPORT'
    };
    const EventContinuousMouseAxes = {
        X_AXIS: 'X_AXIS',
        Y_AXIS: 'Y_AXIS'
    };
    const EventLimitAffectedElements = {
        CHILDREN: 'CHILDREN',
        SIBLINGS: 'SIBLINGS',
        IMMEDIATE_CHILDREN: 'IMMEDIATE_CHILDREN'
    };
    const QuickEffectIds = {
        FADE_EFFECT: 'FADE_EFFECT',
        SLIDE_EFFECT: 'SLIDE_EFFECT',
        GROW_EFFECT: 'GROW_EFFECT',
        SHRINK_EFFECT: 'SHRINK_EFFECT',
        SPIN_EFFECT: 'SPIN_EFFECT',
        FLY_EFFECT: 'FLY_EFFECT',
        POP_EFFECT: 'POP_EFFECT',
        FLIP_EFFECT: 'FLIP_EFFECT',
        JIGGLE_EFFECT: 'JIGGLE_EFFECT',
        PULSE_EFFECT: 'PULSE_EFFECT',
        DROP_EFFECT: 'DROP_EFFECT',
        BLINK_EFFECT: 'BLINK_EFFECT',
        BOUNCE_EFFECT: 'BOUNCE_EFFECT',
        FLIP_LEFT_TO_RIGHT_EFFECT: 'FLIP_LEFT_TO_RIGHT_EFFECT',
        FLIP_RIGHT_TO_LEFT_EFFECT: 'FLIP_RIGHT_TO_LEFT_EFFECT',
        RUBBER_BAND_EFFECT: 'RUBBER_BAND_EFFECT',
        JELLO_EFFECT: 'JELLO_EFFECT',
        GROW_BIG_EFFECT: 'GROW_BIG_EFFECT',
        SHRINK_BIG_EFFECT: 'SHRINK_BIG_EFFECT',
        PLUGIN_LOTTIE_EFFECT: 'PLUGIN_LOTTIE_EFFECT'
    };
    const QuickEffectDirectionConsts = {
        LEFT: 'LEFT',
        RIGHT: 'RIGHT',
        BOTTOM: 'BOTTOM',
        TOP: 'TOP',
        BOTTOM_LEFT: 'BOTTOM_LEFT',
        BOTTOM_RIGHT: 'BOTTOM_RIGHT',
        TOP_RIGHT: 'TOP_RIGHT',
        TOP_LEFT: 'TOP_LEFT',
        CLOCKWISE: 'CLOCKWISE',
        COUNTER_CLOCKWISE: 'COUNTER_CLOCKWISE'
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXItZXZlbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXZlbnQgVHlwZSBJRHNcbiAqL1xuXG5leHBvcnQgY29uc3QgRXZlbnRUeXBlQ29uc3RzID0ge1xuICBOQVZCQVJfT1BFTjogJ05BVkJBUl9PUEVOJyBhcyBjb25zdCxcbiAgTkFWQkFSX0NMT1NFOiAnTkFWQkFSX0NMT1NFJyBhcyBjb25zdCxcbiAgVEFCX0FDVElWRTogJ1RBQl9BQ1RJVkUnIGFzIGNvbnN0LFxuICBUQUJfSU5BQ1RJVkU6ICdUQUJfSU5BQ1RJVkUnIGFzIGNvbnN0LFxuICBTTElERVJfQUNUSVZFOiAnU0xJREVSX0FDVElWRScgYXMgY29uc3QsXG4gIFNMSURFUl9JTkFDVElWRTogJ1NMSURFUl9JTkFDVElWRScgYXMgY29uc3QsXG4gIERST1BET1dOX09QRU46ICdEUk9QRE9XTl9PUEVOJyBhcyBjb25zdCxcbiAgRFJPUERPV05fQ0xPU0U6ICdEUk9QRE9XTl9DTE9TRScgYXMgY29uc3QsXG4gIE1PVVNFX0NMSUNLOiAnTU9VU0VfQ0xJQ0snIGFzIGNvbnN0LFxuICBNT1VTRV9TRUNPTkRfQ0xJQ0s6ICdNT1VTRV9TRUNPTkRfQ0xJQ0snIGFzIGNvbnN0LFxuICBNT1VTRV9ET1dOOiAnTU9VU0VfRE9XTicgYXMgY29uc3QsXG4gIE1PVVNFX1VQOiAnTU9VU0VfVVAnIGFzIGNvbnN0LFxuICBNT1VTRV9PVkVSOiAnTU9VU0VfT1ZFUicgYXMgY29uc3QsXG4gIE1PVVNFX09VVDogJ01PVVNFX09VVCcgYXMgY29uc3QsXG4gIE1PVVNFX01PVkU6ICdNT1VTRV9NT1ZFJyBhcyBjb25zdCxcbiAgTU9VU0VfTU9WRV9JTl9WSUVXUE9SVDogJ01PVVNFX01PVkVfSU5fVklFV1BPUlQnIGFzIGNvbnN0LFxuICBTQ1JPTExfSU5UT19WSUVXOiAnU0NST0xMX0lOVE9fVklFVycgYXMgY29uc3QsXG4gIFNDUk9MTF9PVVRfT0ZfVklFVzogJ1NDUk9MTF9PVVRfT0ZfVklFVycgYXMgY29uc3QsXG4gIFNDUk9MTElOR19JTl9WSUVXOiAnU0NST0xMSU5HX0lOX1ZJRVcnIGFzIGNvbnN0LFxuICBFQ09NTUVSQ0VfQ0FSVF9PUEVOOiAnRUNPTU1FUkNFX0NBUlRfT1BFTicgYXMgY29uc3QsXG4gIEVDT01NRVJDRV9DQVJUX0NMT1NFOiAnRUNPTU1FUkNFX0NBUlRfQ0xPU0UnIGFzIGNvbnN0LFxuICBQQUdFX1NUQVJUOiAnUEFHRV9TVEFSVCcgYXMgY29uc3QsXG4gIFBBR0VfRklOSVNIOiAnUEFHRV9GSU5JU0gnIGFzIGNvbnN0LFxuICBQQUdFX1NDUk9MTF9VUDogJ1BBR0VfU0NST0xMX1VQJyBhcyBjb25zdCxcbiAgUEFHRV9TQ1JPTExfRE9XTjogJ1BBR0VfU0NST0xMX0RPV04nIGFzIGNvbnN0LFxuICBQQUdFX1NDUk9MTDogJ1BBR0VfU0NST0xMJyBhcyBjb25zdCxcbn0gYXMgY29uc3Q7XG5cbi8qKlxuICogRXZlbnQgQ29uZmlnIEVudW1zXG4gKi9cblxuZXhwb3J0IGNvbnN0IEV2ZW50QXBwbGllc1RvID0ge1xuICBFTEVNRU5UOiAnRUxFTUVOVCcgYXMgY29uc3QsXG4gIENMQVNTOiAnQ0xBU1MnIGFzIGNvbnN0LFxuICBQQUdFOiAnUEFHRScgYXMgY29uc3QsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgRXZlbnRCYXNlZE9uID0ge1xuICBFTEVNRU5UOiAnRUxFTUVOVCcgYXMgY29uc3QsXG4gIFZJRVdQT1JUOiAnVklFV1BPUlQnIGFzIGNvbnN0LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IEV2ZW50Q29udGludW91c01vdXNlQXhlcyA9IHtcbiAgWF9BWElTOiAnWF9BWElTJyBhcyBjb25zdCxcbiAgWV9BWElTOiAnWV9BWElTJyBhcyBjb25zdCxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBFdmVudExpbWl0QWZmZWN0ZWRFbGVtZW50cyA9IHtcbiAgQ0hJTERSRU46ICdDSElMRFJFTicgYXMgY29uc3QsXG4gIFNJQkxJTkdTOiAnU0lCTElOR1MnIGFzIGNvbnN0LFxuICBJTU1FRElBVEVfQ0hJTERSRU46ICdJTU1FRElBVEVfQ0hJTERSRU4nIGFzIGNvbnN0LFxufSBhcyBjb25zdDtcblxuLyoqXG4gKiBRdWljayBFZmZlY3QgRW51bXNcbiAqL1xuZXhwb3J0IGNvbnN0IFF1aWNrRWZmZWN0SWRzID0ge1xuICBGQURFX0VGRkVDVDogJ0ZBREVfRUZGRUNUJyBhcyBjb25zdCxcbiAgU0xJREVfRUZGRUNUOiAnU0xJREVfRUZGRUNUJyBhcyBjb25zdCxcbiAgR1JPV19FRkZFQ1Q6ICdHUk9XX0VGRkVDVCcgYXMgY29uc3QsXG4gIFNIUklOS19FRkZFQ1Q6ICdTSFJJTktfRUZGRUNUJyBhcyBjb25zdCxcbiAgU1BJTl9FRkZFQ1Q6ICdTUElOX0VGRkVDVCcgYXMgY29uc3QsXG4gIEZMWV9FRkZFQ1Q6ICdGTFlfRUZGRUNUJyBhcyBjb25zdCxcbiAgUE9QX0VGRkVDVDogJ1BPUF9FRkZFQ1QnIGFzIGNvbnN0LFxuICBGTElQX0VGRkVDVDogJ0ZMSVBfRUZGRUNUJyBhcyBjb25zdCxcbiAgSklHR0xFX0VGRkVDVDogJ0pJR0dMRV9FRkZFQ1QnIGFzIGNvbnN0LFxuICBQVUxTRV9FRkZFQ1Q6ICdQVUxTRV9FRkZFQ1QnIGFzIGNvbnN0LFxuICBEUk9QX0VGRkVDVDogJ0RST1BfRUZGRUNUJyBhcyBjb25zdCxcbiAgQkxJTktfRUZGRUNUOiAnQkxJTktfRUZGRUNUJyBhcyBjb25zdCxcbiAgQk9VTkNFX0VGRkVDVDogJ0JPVU5DRV9FRkZFQ1QnIGFzIGNvbnN0LFxuICBGTElQX0xFRlRfVE9fUklHSFRfRUZGRUNUOiAnRkxJUF9MRUZUX1RPX1JJR0hUX0VGRkVDVCcgYXMgY29uc3QsXG4gIEZMSVBfUklHSFRfVE9fTEVGVF9FRkZFQ1Q6ICdGTElQX1JJR0hUX1RPX0xFRlRfRUZGRUNUJyBhcyBjb25zdCxcbiAgUlVCQkVSX0JBTkRfRUZGRUNUOiAnUlVCQkVSX0JBTkRfRUZGRUNUJyBhcyBjb25zdCxcbiAgSkVMTE9fRUZGRUNUOiAnSkVMTE9fRUZGRUNUJyBhcyBjb25zdCxcbiAgR1JPV19CSUdfRUZGRUNUOiAnR1JPV19CSUdfRUZGRUNUJyBhcyBjb25zdCxcbiAgU0hSSU5LX0JJR19FRkZFQ1Q6ICdTSFJJTktfQklHX0VGRkVDVCcgYXMgY29uc3QsXG4gIFBMVUdJTl9MT1RUSUVfRUZGRUNUOiAnUExVR0lOX0xPVFRJRV9FRkZFQ1QnIGFzIGNvbnN0LFxufSBhcyBjb25zdDtcblxuLyoqXG4gKiBRdWljayBFZmZlY3QgRGlyZWN0aW9uIEVudW1zXG4gKi9cbmV4cG9ydCBjb25zdCBRdWlja0VmZmVjdERpcmVjdGlvbkNvbnN0cyA9IHtcbiAgTEVGVDogJ0xFRlQnIGFzIGNvbnN0LFxuICBSSUdIVDogJ1JJR0hUJyBhcyBjb25zdCxcbiAgQk9UVE9NOiAnQk9UVE9NJyBhcyBjb25zdCxcbiAgVE9QOiAnVE9QJyBhcyBjb25zdCxcbiAgQk9UVE9NX0xFRlQ6ICdCT1RUT01fTEVGVCcgYXMgY29uc3QsXG4gIEJPVFRPTV9SSUdIVDogJ0JPVFRPTV9SSUdIVCcgYXMgY29uc3QsXG4gIFRPUF9SSUdIVDogJ1RPUF9SSUdIVCcgYXMgY29uc3QsXG4gIFRPUF9MRUZUOiAnVE9QX0xFRlQnIGFzIGNvbnN0LFxuICBDTE9DS1dJU0U6ICdDTE9DS1dJU0UnIGFzIGNvbnN0LFxuICBDT1VOVEVSX0NMT0NLV0lTRTogJ0NPVU5URVJfQ0xPQ0tXSVNFJyBhcyBjb25zdCxcbn0gYXMgY29uc3Q7XG4iXSwibmFtZXMiOlsiRXZlbnRBcHBsaWVzVG8iLCJFdmVudEJhc2VkT24iLCJFdmVudENvbnRpbnVvdXNNb3VzZUF4ZXMiLCJFdmVudExpbWl0QWZmZWN0ZWRFbGVtZW50cyIsIkV2ZW50VHlwZUNvbnN0cyIsIlF1aWNrRWZmZWN0RGlyZWN0aW9uQ29uc3RzIiwiUXVpY2tFZmZlY3RJZHMiLCJOQVZCQVJfT1BFTiIsIk5BVkJBUl9DTE9TRSIsIlRBQl9BQ1RJVkUiLCJUQUJfSU5BQ1RJVkUiLCJTTElERVJfQUNUSVZFIiwiU0xJREVSX0lOQUNUSVZFIiwiRFJPUERPV05fT1BFTiIsIkRST1BET1dOX0NMT1NFIiwiTU9VU0VfQ0xJQ0siLCJNT1VTRV9TRUNPTkRfQ0xJQ0siLCJNT1VTRV9ET1dOIiwiTU9VU0VfVVAiLCJNT1VTRV9PVkVSIiwiTU9VU0VfT1VUIiwiTU9VU0VfTU9WRSIsIk1PVVNFX01PVkVfSU5fVklFV1BPUlQiLCJTQ1JPTExfSU5UT19WSUVXIiwiU0NST0xMX09VVF9PRl9WSUVXIiwiU0NST0xMSU5HX0lOX1ZJRVciLCJFQ09NTUVSQ0VfQ0FSVF9PUEVOIiwiRUNPTU1FUkNFX0NBUlRfQ0xPU0UiLCJQQUdFX1NUQVJUIiwiUEFHRV9GSU5JU0giLCJQQUdFX1NDUk9MTF9VUCIsIlBBR0VfU0NST0xMX0RPV04iLCJQQUdFX1NDUk9MTCIsIkVMRU1FTlQiLCJDTEFTUyIsIlBBR0UiLCJWSUVXUE9SVCIsIlhfQVhJUyIsIllfQVhJUyIsIkNISUxEUkVOIiwiU0lCTElOR1MiLCJJTU1FRElBVEVfQ0hJTERSRU4iLCJGQURFX0VGRkVDVCIsIlNMSURFX0VGRkVDVCIsIkdST1dfRUZGRUNUIiwiU0hSSU5LX0VGRkVDVCIsIlNQSU5fRUZGRUNUIiwiRkxZX0VGRkVDVCIsIlBPUF9FRkZFQ1QiLCJGTElQX0VGRkVDVCIsIkpJR0dMRV9FRkZFQ1QiLCJQVUxTRV9FRkZFQ1QiLCJEUk9QX0VGRkVDVCIsIkJMSU5LX0VGRkVDVCIsIkJPVU5DRV9FRkZFQ1QiLCJGTElQX0xFRlRfVE9fUklHSFRfRUZGRUNUIiwiRkxJUF9SSUdIVF9UT19MRUZUX0VGRkVDVCIsIlJVQkJFUl9CQU5EX0VGRkVDVCIsIkpFTExPX0VGRkVDVCIsIkdST1dfQklHX0VGRkVDVCIsIlNIUklOS19CSUdfRUZGRUNUIiwiUExVR0lOX0xPVFRJRV9FRkZFQ1QiLCJMRUZUIiwiUklHSFQiLCJCT1RUT00iLCJUT1AiLCJCT1RUT01fTEVGVCIsIkJPVFRPTV9SSUdIVCIsIlRPUF9SSUdIVCIsIlRPUF9MRUZUIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUl9DTE9DS1dJU0UiXSwibWFwcGluZ3MiOiJBQUFBOztDQUVDOzs7Ozs7Ozs7OztJQW1DWUEsY0FBYztlQUFkQTs7SUFNQUMsWUFBWTtlQUFaQTs7SUFLQUMsd0JBQXdCO2VBQXhCQTs7SUFLQUMsMEJBQTBCO2VBQTFCQTs7SUFqREFDLGVBQWU7ZUFBZkE7O0lBb0ZBQywwQkFBMEI7ZUFBMUJBOztJQTFCQUMsY0FBYztlQUFkQTs7O0FBMUROLE1BQU1GLGtCQUFrQjtJQUM3QkcsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkMsY0FBYztJQUNkQyxlQUFlO0lBQ2ZDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxnQkFBZ0I7SUFDaEJDLGFBQWE7SUFDYkMsb0JBQW9CO0lBQ3BCQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsWUFBWTtJQUNaQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsd0JBQXdCO0lBQ3hCQyxrQkFBa0I7SUFDbEJDLG9CQUFvQjtJQUNwQkMsbUJBQW1CO0lBQ25CQyxxQkFBcUI7SUFDckJDLHNCQUFzQjtJQUN0QkMsWUFBWTtJQUNaQyxhQUFhO0lBQ2JDLGdCQUFnQjtJQUNoQkMsa0JBQWtCO0lBQ2xCQyxhQUFhO0FBQ2Y7QUFNTyxNQUFNaEMsaUJBQWlCO0lBQzVCaUMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLE1BQU07QUFDUjtBQUVPLE1BQU1sQyxlQUFlO0lBQzFCZ0MsU0FBUztJQUNURyxVQUFVO0FBQ1o7QUFFTyxNQUFNbEMsMkJBQTJCO0lBQ3RDbUMsUUFBUTtJQUNSQyxRQUFRO0FBQ1Y7QUFFTyxNQUFNbkMsNkJBQTZCO0lBQ3hDb0MsVUFBVTtJQUNWQyxVQUFVO0lBQ1ZDLG9CQUFvQjtBQUN0QjtBQUtPLE1BQU1uQyxpQkFBaUI7SUFDNUJvQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsYUFBYTtJQUNiQyxlQUFlO0lBQ2ZDLGFBQWE7SUFDYkMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsZUFBZTtJQUNmQyxjQUFjO0lBQ2RDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxlQUFlO0lBQ2ZDLDJCQUEyQjtJQUMzQkMsMkJBQTJCO0lBQzNCQyxvQkFBb0I7SUFDcEJDLGNBQWM7SUFDZEMsaUJBQWlCO0lBQ2pCQyxtQkFBbUI7SUFDbkJDLHNCQUFzQjtBQUN4QjtBQUtPLE1BQU14RCw2QkFBNkI7SUFDeEN5RCxNQUFNO0lBQ05DLE9BQU87SUFDUEMsUUFBUTtJQUNSQyxLQUFLO0lBQ0xDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxtQkFBbUI7QUFDckIifQ==
    
    }),
    28704: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "InteractionTypeConsts", ({
        enumerable: true,
        get: function() {
            return InteractionTypeConsts;
        }
    }));
    const InteractionTypeConsts = {
        MOUSE_CLICK_INTERACTION: 'MOUSE_CLICK_INTERACTION',
        MOUSE_HOVER_INTERACTION: 'MOUSE_HOVER_INTERACTION',
        MOUSE_MOVE_INTERACTION: 'MOUSE_MOVE_INTERACTION',
        SCROLL_INTO_VIEW_INTERACTION: 'SCROLL_INTO_VIEW_INTERACTION',
        SCROLLING_IN_VIEW_INTERACTION: 'SCROLLING_IN_VIEW_INTERACTION',
        MOUSE_MOVE_IN_VIEWPORT_INTERACTION: 'MOUSE_MOVE_IN_VIEWPORT_INTERACTION',
        PAGE_IS_SCROLLING_INTERACTION: 'PAGE_IS_SCROLLING_INTERACTION',
        PAGE_LOAD_INTERACTION: 'PAGE_LOAD_INTERACTION',
        PAGE_SCROLLED_INTERACTION: 'PAGE_SCROLLED_INTERACTION',
        NAVBAR_INTERACTION: 'NAVBAR_INTERACTION',
        DROPDOWN_INTERACTION: 'DROPDOWN_INTERACTION',
        ECOMMERCE_CART_INTERACTION: 'ECOMMERCE_CART_INTERACTION',
        TAB_INTERACTION: 'TAB_INTERACTION',
        SLIDER_INTERACTION: 'SLIDER_INTERACTION'
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXItaW50ZXJhY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBJbnRlcmFjdGlvblR5cGVDb25zdHMgPSB7XG4gIE1PVVNFX0NMSUNLX0lOVEVSQUNUSU9OOiAnTU9VU0VfQ0xJQ0tfSU5URVJBQ1RJT04nIGFzIGNvbnN0LFxuICBNT1VTRV9IT1ZFUl9JTlRFUkFDVElPTjogJ01PVVNFX0hPVkVSX0lOVEVSQUNUSU9OJyBhcyBjb25zdCxcbiAgTU9VU0VfTU9WRV9JTlRFUkFDVElPTjogJ01PVVNFX01PVkVfSU5URVJBQ1RJT04nIGFzIGNvbnN0LFxuICBTQ1JPTExfSU5UT19WSUVXX0lOVEVSQUNUSU9OOiAnU0NST0xMX0lOVE9fVklFV19JTlRFUkFDVElPTicgYXMgY29uc3QsXG4gIFNDUk9MTElOR19JTl9WSUVXX0lOVEVSQUNUSU9OOiAnU0NST0xMSU5HX0lOX1ZJRVdfSU5URVJBQ1RJT04nIGFzIGNvbnN0LFxuICBNT1VTRV9NT1ZFX0lOX1ZJRVdQT1JUX0lOVEVSQUNUSU9OOlxuICAgICdNT1VTRV9NT1ZFX0lOX1ZJRVdQT1JUX0lOVEVSQUNUSU9OJyBhcyBjb25zdCxcbiAgUEFHRV9JU19TQ1JPTExJTkdfSU5URVJBQ1RJT046ICdQQUdFX0lTX1NDUk9MTElOR19JTlRFUkFDVElPTicgYXMgY29uc3QsXG4gIFBBR0VfTE9BRF9JTlRFUkFDVElPTjogJ1BBR0VfTE9BRF9JTlRFUkFDVElPTicgYXMgY29uc3QsXG4gIFBBR0VfU0NST0xMRURfSU5URVJBQ1RJT046ICdQQUdFX1NDUk9MTEVEX0lOVEVSQUNUSU9OJyBhcyBjb25zdCxcbiAgTkFWQkFSX0lOVEVSQUNUSU9OOiAnTkFWQkFSX0lOVEVSQUNUSU9OJyBhcyBjb25zdCxcbiAgRFJPUERPV05fSU5URVJBQ1RJT046ICdEUk9QRE9XTl9JTlRFUkFDVElPTicgYXMgY29uc3QsXG4gIEVDT01NRVJDRV9DQVJUX0lOVEVSQUNUSU9OOiAnRUNPTU1FUkNFX0NBUlRfSU5URVJBQ1RJT04nIGFzIGNvbnN0LFxuICBUQUJfSU5URVJBQ1RJT046ICdUQUJfSU5URVJBQ1RJT04nIGFzIGNvbnN0LFxuICBTTElERVJfSU5URVJBQ1RJT046ICdTTElERVJfSU5URVJBQ1RJT04nIGFzIGNvbnN0LFxufSBhcyBjb25zdDtcbiJdLCJuYW1lcyI6WyJJbnRlcmFjdGlvblR5cGVDb25zdHMiLCJNT1VTRV9DTElDS19JTlRFUkFDVElPTiIsIk1PVVNFX0hPVkVSX0lOVEVSQUNUSU9OIiwiTU9VU0VfTU9WRV9JTlRFUkFDVElPTiIsIlNDUk9MTF9JTlRPX1ZJRVdfSU5URVJBQ1RJT04iLCJTQ1JPTExJTkdfSU5fVklFV19JTlRFUkFDVElPTiIsIk1PVVNFX01PVkVfSU5fVklFV1BPUlRfSU5URVJBQ1RJT04iLCJQQUdFX0lTX1NDUk9MTElOR19JTlRFUkFDVElPTiIsIlBBR0VfTE9BRF9JTlRFUkFDVElPTiIsIlBBR0VfU0NST0xMRURfSU5URVJBQ1RJT04iLCJOQVZCQVJfSU5URVJBQ1RJT04iLCJEUk9QRE9XTl9JTlRFUkFDVElPTiIsIkVDT01NRVJDRV9DQVJUX0lOVEVSQUNUSU9OIiwiVEFCX0lOVEVSQUNUSU9OIiwiU0xJREVSX0lOVEVSQUNUSU9OIl0sIm1hcHBpbmdzIjoiOzs7OytCQUFhQTs7O2VBQUFBOzs7QUFBTixNQUFNQSx3QkFBd0I7SUFDbkNDLHlCQUF5QjtJQUN6QkMseUJBQXlCO0lBQ3pCQyx3QkFBd0I7SUFDeEJDLDhCQUE4QjtJQUM5QkMsK0JBQStCO0lBQy9CQyxvQ0FDRTtJQUNGQywrQkFBK0I7SUFDL0JDLHVCQUF1QjtJQUN2QkMsMkJBQTJCO0lBQzNCQyxvQkFBb0I7SUFDcEJDLHNCQUFzQjtJQUN0QkMsNEJBQTRCO0lBQzVCQyxpQkFBaUI7SUFDakJDLG9CQUFvQjtBQUN0QiJ9
    
    }),
    40380: (function (__unused_webpack_module, exports) {
    "use strict";
    // Big List of Colors
    // ------------------
    // <https://www.w3.org/TR/css-color-4/#named-colors>
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "normalizeColor", ({
        enumerable: true,
        get: function() {
            return normalizeColor;
        }
    }));
    const colorNamesObj = {
        aliceblue: '#F0F8FF',
        antiquewhite: '#FAEBD7',
        aqua: '#00FFFF',
        aquamarine: '#7FFFD4',
        azure: '#F0FFFF',
        beige: '#F5F5DC',
        bisque: '#FFE4C4',
        black: '#000000',
        blanchedalmond: '#FFEBCD',
        blue: '#0000FF',
        blueviolet: '#8A2BE2',
        brown: '#A52A2A',
        burlywood: '#DEB887',
        cadetblue: '#5F9EA0',
        chartreuse: '#7FFF00',
        chocolate: '#D2691E',
        coral: '#FF7F50',
        cornflowerblue: '#6495ED',
        cornsilk: '#FFF8DC',
        crimson: '#DC143C',
        cyan: '#00FFFF',
        darkblue: '#00008B',
        darkcyan: '#008B8B',
        darkgoldenrod: '#B8860B',
        darkgray: '#A9A9A9',
        darkgreen: '#006400',
        darkgrey: '#A9A9A9',
        darkkhaki: '#BDB76B',
        darkmagenta: '#8B008B',
        darkolivegreen: '#556B2F',
        darkorange: '#FF8C00',
        darkorchid: '#9932CC',
        darkred: '#8B0000',
        darksalmon: '#E9967A',
        darkseagreen: '#8FBC8F',
        darkslateblue: '#483D8B',
        darkslategray: '#2F4F4F',
        darkslategrey: '#2F4F4F',
        darkturquoise: '#00CED1',
        darkviolet: '#9400D3',
        deeppink: '#FF1493',
        deepskyblue: '#00BFFF',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1E90FF',
        firebrick: '#B22222',
        floralwhite: '#FFFAF0',
        forestgreen: '#228B22',
        fuchsia: '#FF00FF',
        gainsboro: '#DCDCDC',
        ghostwhite: '#F8F8FF',
        gold: '#FFD700',
        goldenrod: '#DAA520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#ADFF2F',
        grey: '#808080',
        honeydew: '#F0FFF0',
        hotpink: '#FF69B4',
        indianred: '#CD5C5C',
        indigo: '#4B0082',
        ivory: '#FFFFF0',
        khaki: '#F0E68C',
        lavender: '#E6E6FA',
        lavenderblush: '#FFF0F5',
        lawngreen: '#7CFC00',
        lemonchiffon: '#FFFACD',
        lightblue: '#ADD8E6',
        lightcoral: '#F08080',
        lightcyan: '#E0FFFF',
        lightgoldenrodyellow: '#FAFAD2',
        lightgray: '#D3D3D3',
        lightgreen: '#90EE90',
        lightgrey: '#D3D3D3',
        lightpink: '#FFB6C1',
        lightsalmon: '#FFA07A',
        lightseagreen: '#20B2AA',
        lightskyblue: '#87CEFA',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#B0C4DE',
        lightyellow: '#FFFFE0',
        lime: '#00FF00',
        limegreen: '#32CD32',
        linen: '#FAF0E6',
        magenta: '#FF00FF',
        maroon: '#800000',
        mediumaquamarine: '#66CDAA',
        mediumblue: '#0000CD',
        mediumorchid: '#BA55D3',
        mediumpurple: '#9370DB',
        mediumseagreen: '#3CB371',
        mediumslateblue: '#7B68EE',
        mediumspringgreen: '#00FA9A',
        mediumturquoise: '#48D1CC',
        mediumvioletred: '#C71585',
        midnightblue: '#191970',
        mintcream: '#F5FFFA',
        mistyrose: '#FFE4E1',
        moccasin: '#FFE4B5',
        navajowhite: '#FFDEAD',
        navy: '#000080',
        oldlace: '#FDF5E6',
        olive: '#808000',
        olivedrab: '#6B8E23',
        orange: '#FFA500',
        orangered: '#FF4500',
        orchid: '#DA70D6',
        palegoldenrod: '#EEE8AA',
        palegreen: '#98FB98',
        paleturquoise: '#AFEEEE',
        palevioletred: '#DB7093',
        papayawhip: '#FFEFD5',
        peachpuff: '#FFDAB9',
        peru: '#CD853F',
        pink: '#FFC0CB',
        plum: '#DDA0DD',
        powderblue: '#B0E0E6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#FF0000',
        rosybrown: '#BC8F8F',
        royalblue: '#4169E1',
        saddlebrown: '#8B4513',
        salmon: '#FA8072',
        sandybrown: '#F4A460',
        seagreen: '#2E8B57',
        seashell: '#FFF5EE',
        sienna: '#A0522D',
        silver: '#C0C0C0',
        skyblue: '#87CEEB',
        slateblue: '#6A5ACD',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#FFFAFA',
        springgreen: '#00FF7F',
        steelblue: '#4682B4',
        tan: '#D2B48C',
        teal: '#008080',
        thistle: '#D8BFD8',
        tomato: '#FF6347',
        turquoise: '#40E0D0',
        violet: '#EE82EE',
        wheat: '#F5DEB3',
        white: '#FFFFFF',
        whitesmoke: '#F5F5F5',
        yellow: '#FFFF00',
        yellowgreen: '#9ACD32'
    };
    function normalizeColor(inputColor) {
        let red;
        let green;
        let blue;
        let alpha = 1; // Default alpha to 1
        const rawColor = inputColor.replace(/\s/g, '').toLowerCase();
        const namedColor = typeof colorNamesObj[rawColor] === 'string' ? colorNamesObj[rawColor].toLowerCase() : null;
        const cleanColor = namedColor || rawColor;
        if (cleanColor.startsWith('#')) {
            const hex = cleanColor.substring(1);
            if (hex.length === 3 || hex.length === 4) {
                red = parseInt(hex[0] + hex[0], 16);
                green = parseInt(hex[1] + hex[1], 16);
                blue = parseInt(hex[2] + hex[2], 16);
                if (hex.length === 4) {
                    alpha = parseInt(hex[3] + hex[3], 16) / 255;
                }
            } else if (hex.length === 6 || hex.length === 8) {
                red = parseInt(hex.substring(0, 2), 16);
                green = parseInt(hex.substring(2, 4), 16);
                blue = parseInt(hex.substring(4, 6), 16);
                if (hex.length === 8) {
                    alpha = parseInt(hex.substring(6, 8), 16) / 255;
                }
            }
        } else if (cleanColor.startsWith('rgba')) {
            const rgbaValues = cleanColor.match(/rgba\(([^)]+)\)/)[1].split(',');
            red = parseInt(rgbaValues[0], 10);
            green = parseInt(rgbaValues[1], 10);
            blue = parseInt(rgbaValues[2], 10);
            alpha = parseFloat(rgbaValues[3]);
        } else if (cleanColor.startsWith('rgb')) {
            const rgbValues = cleanColor.match(/rgb\(([^)]+)\)/)[1].split(',');
            red = parseInt(rgbValues[0], 10);
            green = parseInt(rgbValues[1], 10);
            blue = parseInt(rgbValues[2], 10);
        } else if (cleanColor.startsWith('hsla')) {
            const hslaValues = cleanColor.match(/hsla\(([^)]+)\)/)[1].split(',');
            const h = parseFloat(hslaValues[0]);
            const s = parseFloat(hslaValues[1].replace('%', '')) / 100;
            const l = parseFloat(hslaValues[2].replace('%', '')) / 100;
            alpha = parseFloat(hslaValues[3]);
            // Convert HSL to RGB
            const C = (1 - Math.abs(2 * l - 1)) * s;
            const X = C * (1 - Math.abs(h / 60 % 2 - 1));
            const m = l - C / 2;
            let R;
            let G;
            let B;
            if (h >= 0 && h < 60) {
                R = C;
                G = X;
                B = 0;
            } else if (h >= 60 && h < 120) {
                R = X;
                G = C;
                B = 0;
            } else if (h >= 120 && h < 180) {
                R = 0;
                G = C;
                B = X;
            } else if (h >= 180 && h < 240) {
                R = 0;
                G = X;
                B = C;
            } else if (h >= 240 && h < 300) {
                R = X;
                G = 0;
                B = C;
            } else {
                R = C;
                G = 0;
                B = X;
            }
            red = Math.round((R + m) * 255);
            green = Math.round((G + m) * 255);
            blue = Math.round((B + m) * 255);
        } else if (cleanColor.startsWith('hsl')) {
            const hslValues = cleanColor.match(/hsl\(([^)]+)\)/)[1].split(',');
            const h = parseFloat(hslValues[0]);
            const s = parseFloat(hslValues[1].replace('%', '')) / 100;
            const l = parseFloat(hslValues[2].replace('%', '')) / 100;
            // Convert HSL to RGB (without alpha)
            const C = (1 - Math.abs(2 * l - 1)) * s;
            const X = C * (1 - Math.abs(h / 60 % 2 - 1));
            const m = l - C / 2;
            let R;
            let G;
            let B;
            if (h >= 0 && h < 60) {
                R = C;
                G = X;
                B = 0;
            } else if (h >= 60 && h < 120) {
                R = X;
                G = C;
                B = 0;
            } else if (h >= 120 && h < 180) {
                R = 0;
                G = C;
                B = X;
            } else if (h >= 180 && h < 240) {
                R = 0;
                G = X;
                B = C;
            } else if (h >= 240 && h < 300) {
                R = X;
                G = 0;
                B = C;
            } else {
                R = C;
                G = 0;
                B = X;
            }
            red = Math.round((R + m) * 255);
            green = Math.round((G + m) * 255);
            blue = Math.round((B + m) * 255);
        }
        if (Number.isNaN(red) || Number.isNaN(green) || Number.isNaN(blue)) {
            throw new Error(`Invalid color in [ix2/shared/utils/normalizeColor.js] '${inputColor}'`);
        }
        return {
            red,
            green,
            blue,
            alpha
        };
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    9468: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        // IX2Actions,
        IX2BrowserSupport: function() {
            return _IX2BrowserSupport;
        },
        IX2EasingUtils: function() {
            return _IX2EasingUtils;
        },
        IX2Easings: function() {
            return _IX2Easings;
        },
        IX2ElementsReducer: function() {
            return _IX2ElementsReducer;
        },
        IX2VanillaPlugins: function() {
            return _IX2VanillaPlugins;
        },
        IX2VanillaUtils: function() {
            return _IX2VanillaUtils;
        }
    });
    const _IX2BrowserSupport = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(12662));
    const _IX2Easings = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(78686));
    const _IX2EasingUtils = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(73767));
    const _IX2ElementsReducer = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(85861));
    const _IX2VanillaPlugins = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(31799));
    const _IX2VanillaUtils = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(4124));
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIElYMkJyb3dzZXJTdXBwb3J0IGZyb20gJy4vbG9naWMvSVgyQnJvd3NlclN1cHBvcnQnO1xuaW1wb3J0ICogYXMgSVgyRWFzaW5ncyBmcm9tICcuL2xvZ2ljL0lYMkVhc2luZ3MnO1xuaW1wb3J0ICogYXMgSVgyRWFzaW5nVXRpbHMgZnJvbSAnLi9sb2dpYy9JWDJFYXNpbmdVdGlscyc7XG5pbXBvcnQgKiBhcyBJWDJFbGVtZW50c1JlZHVjZXIgZnJvbSAnLi9yZWR1Y2Vycy9JWDJFbGVtZW50c1JlZHVjZXInO1xuaW1wb3J0ICogYXMgSVgyVmFuaWxsYVBsdWdpbnMgZnJvbSAnLi9sb2dpYy9JWDJWYW5pbGxhUGx1Z2lucyc7XG5pbXBvcnQgKiBhcyBJWDJWYW5pbGxhVXRpbHMgZnJvbSAnLi9sb2dpYy9JWDJWYW5pbGxhVXRpbHMnO1xuZXhwb3J0IHtcbiAgLy8gSVgyQWN0aW9ucyxcbiAgSVgyQnJvd3NlclN1cHBvcnQsXG4gIElYMkVhc2luZ3MsXG4gIElYMkVhc2luZ1V0aWxzLFxuICBJWDJFbGVtZW50c1JlZHVjZXIsXG4gIElYMlZhbmlsbGFQbHVnaW5zLFxuICBJWDJWYW5pbGxhVXRpbHMsXG59O1xuIl0sIm5hbWVzIjpbIklYMkJyb3dzZXJTdXBwb3J0IiwiSVgyRWFzaW5nVXRpbHMiLCJJWDJFYXNpbmdzIiwiSVgyRWxlbWVudHNSZWR1Y2VyIiwiSVgyVmFuaWxsYVBsdWdpbnMiLCJJWDJWYW5pbGxhVXRpbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBT0UsY0FBYztJQUNkQSxpQkFBaUI7ZUFBakJBOztJQUVBQyxjQUFjO2VBQWRBOztJQURBQyxVQUFVO2VBQVZBOztJQUVBQyxrQkFBa0I7ZUFBbEJBOztJQUNBQyxpQkFBaUI7ZUFBakJBOztJQUNBQyxlQUFlO2VBQWZBOzs7MkVBYmlDO29FQUNQO3dFQUNJOzRFQUNJOzJFQUNEO3lFQUNGIn0=
    
    }),
    12662: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ELEMENT_MATCHES: function() {
            return ELEMENT_MATCHES;
        },
        FLEX_PREFIXED: function() {
            return FLEX_PREFIXED;
        },
        IS_BROWSER_ENV: function() {
            return IS_BROWSER_ENV;
        },
        TRANSFORM_PREFIXED: function() {
            return TRANSFORM_PREFIXED;
        },
        TRANSFORM_STYLE_PREFIXED: function() {
            return TRANSFORM_STYLE_PREFIXED;
        },
        withBrowser: function() {
            return withBrowser;
        }
    });
    const _find = /*#__PURE__*/ _interop_require_default(__webpack_require__(19777));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const IS_BROWSER_ENV = typeof window !== 'undefined';
    const withBrowser = (fn, fallback)=>{
        if (IS_BROWSER_ENV) {
            return fn();
        }
        return fallback;
    };
    const ELEMENT_MATCHES = withBrowser(()=>{
        return (0, _find.default)([
            'matches',
            'matchesSelector',
            'mozMatchesSelector',
            'msMatchesSelector',
            'oMatchesSelector',
            'webkitMatchesSelector'
        ], (key)=>key in Element.prototype);
    });
    const FLEX_PREFIXED = withBrowser(()=>{
        const el = document.createElement('i');
        const values = [
            'flex',
            '-webkit-flex',
            '-ms-flexbox',
            '-moz-box',
            '-webkit-box'
        ];
        const none = '';
        try {
            const { length } = values;
            for(let i = 0; i < length; i++){
                const value = values[i];
                // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
                el.style.display = value;
                if (el.style.display === value) {
                    return value;
                }
            }
            return none;
        } catch (err) {
            return none;
        }
    }, 'flex');
    const TRANSFORM_PREFIXED = withBrowser(()=>{
        const el = document.createElement('i');
        if (el.style.transform == null) {
            const prefixes = [
                'Webkit',
                'Moz',
                'ms'
            ];
            const suffix = 'Transform';
            const { length } = prefixes;
            for(let i = 0; i < length; i++){
                const prop = prefixes[i] + suffix;
                // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
                if (el.style[prop] !== undefined) {
                    return prop;
                }
            }
        }
        return 'transform';
    }, 'transform');
    const TRANSFORM_PREFIX = TRANSFORM_PREFIXED.split('transform')[0];
    const TRANSFORM_STYLE_PREFIXED = TRANSFORM_PREFIX ? TRANSFORM_PREFIX + 'TransformStyle' : 'transformStyle';
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkJyb3dzZXJTdXBwb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuaW1wb3J0IGZpbmQgZnJvbSAnbG9kYXNoL2ZpbmQnO1xuXG5leHBvcnQgY29uc3QgSVNfQlJPV1NFUl9FTlYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGNvbnN0IHdpdGhCcm93c2VyID0gKGZuOiBhbnksIGZhbGxiYWNrOiBhbnkpID0+IHtcbiAgaWYgKElTX0JST1dTRVJfRU5WKSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufTtcblxuLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjU1NCAtIEV4cGVjdGVkIDIgYXJndW1lbnRzLCBidXQgZ290IDEuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9NQVRDSEVTID0gd2l0aEJyb3dzZXIoKCkgPT4ge1xuICByZXR1cm4gZmluZChcbiAgICBbXG4gICAgICAnbWF0Y2hlcycsXG4gICAgICAnbWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAgICdtb3pNYXRjaGVzU2VsZWN0b3InLFxuICAgICAgJ21zTWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAgICdvTWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAgICd3ZWJraXRNYXRjaGVzU2VsZWN0b3InLFxuICAgIF0sXG4gICAgKGtleSkgPT4ga2V5IGluIEVsZW1lbnQucHJvdG90eXBlXG4gICk7XG59KTtcblxuZXhwb3J0IGNvbnN0IEZMRVhfUFJFRklYRUQgPSB3aXRoQnJvd3NlcigoKSA9PiB7XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICBjb25zdCB2YWx1ZXMgPSBbXG4gICAgJ2ZsZXgnLFxuICAgICctd2Via2l0LWZsZXgnLFxuICAgICctbXMtZmxleGJveCcsXG4gICAgJy1tb3otYm94JyxcbiAgICAnLXdlYmtpdC1ib3gnLFxuICBdO1xuICBjb25zdCBub25lID0gJyc7XG4gIHRyeSB7XG4gICAgY29uc3Qge2xlbmd0aH0gPSB2YWx1ZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzIyIC0gVHlwZSAnc3RyaW5nIHwgdW5kZWZpbmVkJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdzdHJpbmcnLlxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlO1xuICAgICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vbmU7XG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgcmV0dXJuIG5vbmU7XG4gIH1cbn0sICdmbGV4Jyk7XG5cbmV4cG9ydCBjb25zdCBUUkFOU0ZPUk1fUFJFRklYRUQgPSB3aXRoQnJvd3NlcigoKSA9PiB7XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICBpZiAoZWwuc3R5bGUudHJhbnNmb3JtID09IG51bGwpIHtcbiAgICBjb25zdCBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuICAgIGNvbnN0IHN1ZmZpeCA9ICdUcmFuc2Zvcm0nO1xuICAgIGNvbnN0IHtsZW5ndGh9ID0gcHJlZml4ZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJvcCA9IHByZWZpeGVzW2ldICsgc3VmZml4O1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzAxNSAtIEVsZW1lbnQgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZSBiZWNhdXNlIGluZGV4IGV4cHJlc3Npb24gaXMgbm90IG9mIHR5cGUgJ251bWJlcicuXG4gICAgICBpZiAoZWwuc3R5bGVbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuICd0cmFuc2Zvcm0nO1xufSwgJ3RyYW5zZm9ybScpO1xuXG5jb25zdCBUUkFOU0ZPUk1fUFJFRklYID0gVFJBTlNGT1JNX1BSRUZJWEVELnNwbGl0KCd0cmFuc2Zvcm0nKVswXTtcblxuZXhwb3J0IGNvbnN0IFRSQU5TRk9STV9TVFlMRV9QUkVGSVhFRCA9IFRSQU5TRk9STV9QUkVGSVhcbiAgPyBUUkFOU0ZPUk1fUFJFRklYICsgJ1RyYW5zZm9ybVN0eWxlJ1xuICA6ICd0cmFuc2Zvcm1TdHlsZSc7XG4iXSwibmFtZXMiOlsiRUxFTUVOVF9NQVRDSEVTIiwiRkxFWF9QUkVGSVhFRCIsIklTX0JST1dTRVJfRU5WIiwiVFJBTlNGT1JNX1BSRUZJWEVEIiwiVFJBTlNGT1JNX1NUWUxFX1BSRUZJWEVEIiwid2l0aEJyb3dzZXIiLCJ3aW5kb3ciLCJmbiIsImZhbGxiYWNrIiwiZmluZCIsImtleSIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInZhbHVlcyIsIm5vbmUiLCJsZW5ndGgiLCJpIiwidmFsdWUiLCJzdHlsZSIsImRpc3BsYXkiLCJlcnIiLCJ0cmFuc2Zvcm0iLCJwcmVmaXhlcyIsInN1ZmZpeCIsInByb3AiLCJ1bmRlZmluZWQiLCJUUkFOU0ZPUk1fUFJFRklYIiwic3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQjs7Ozs7Ozs7Ozs7SUFhVEEsZUFBZTtlQUFmQTs7SUFjQUMsYUFBYTtlQUFiQTs7SUF4QkFDLGNBQWM7ZUFBZEE7O0lBa0RBQyxrQkFBa0I7ZUFBbEJBOztJQW1CQUMsd0JBQXdCO2VBQXhCQTs7SUFuRUFDLFdBQVc7ZUFBWEE7Ozs2REFKSTs7Ozs7O0FBRVYsTUFBTUgsaUJBQWlCLE9BQU9JLFdBQVc7QUFFekMsTUFBTUQsY0FBYyxDQUFDRSxJQUFTQztJQUNuQyxJQUFJTixnQkFBZ0I7UUFDbEIsT0FBT0s7SUFDVDtJQUNBLE9BQU9DO0FBQ1Q7QUFHTyxNQUFNUixrQkFBa0JLLFlBQVk7SUFDekMsT0FBT0ksSUFBQUEsYUFBSSxFQUNUO1FBQ0U7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0QsRUFDRCxDQUFDQyxNQUFRQSxPQUFPQyxRQUFRQyxTQUFTO0FBRXJDO0FBRU8sTUFBTVgsZ0JBQWdCSSxZQUFZO0lBQ3ZDLE1BQU1RLEtBQUtDLFNBQVNDLGFBQWEsQ0FBQztJQUNsQyxNQUFNQyxTQUFTO1FBQ2I7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTUMsT0FBTztJQUNiLElBQUk7UUFDRixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHRjtRQUNqQixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztZQUMvQixNQUFNQyxRQUFRSixNQUFNLENBQUNHLEVBQUU7WUFDdkIsNEZBQTRGO1lBQzVGTixHQUFHUSxLQUFLLENBQUNDLE9BQU8sR0FBR0Y7WUFDbkIsSUFBSVAsR0FBR1EsS0FBSyxDQUFDQyxPQUFPLEtBQUtGLE9BQU87Z0JBQzlCLE9BQU9BO1lBQ1Q7UUFDRjtRQUNBLE9BQU9IO0lBQ1QsRUFBRSxPQUFPTSxLQUFVO1FBQ2pCLE9BQU9OO0lBQ1Q7QUFDRixHQUFHO0FBRUksTUFBTWQscUJBQXFCRSxZQUFZO0lBQzVDLE1BQU1RLEtBQUtDLFNBQVNDLGFBQWEsQ0FBQztJQUNsQyxJQUFJRixHQUFHUSxLQUFLLENBQUNHLFNBQVMsSUFBSSxNQUFNO1FBQzlCLE1BQU1DLFdBQVc7WUFBQztZQUFVO1lBQU87U0FBSztRQUN4QyxNQUFNQyxTQUFTO1FBQ2YsTUFBTSxFQUFDUixNQUFNLEVBQUMsR0FBR087UUFDakIsSUFBSyxJQUFJTixJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQUs7WUFDL0IsTUFBTVEsT0FBT0YsUUFBUSxDQUFDTixFQUFFLEdBQUdPO1lBQzNCLHFIQUFxSDtZQUNySCxJQUFJYixHQUFHUSxLQUFLLENBQUNNLEtBQUssS0FBS0MsV0FBVztnQkFDaEMsT0FBT0Q7WUFDVDtRQUNGO0lBQ0Y7SUFDQSxPQUFPO0FBQ1QsR0FBRztBQUVILE1BQU1FLG1CQUFtQjFCLG1CQUFtQjJCLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUUxRCxNQUFNMUIsMkJBQTJCeUIsbUJBQ3BDQSxtQkFBbUIsbUJBQ25CIn0=
    
    }),
    73767: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        applyEasing: function() {
            return applyEasing;
        },
        createBezierEasing: function() {
            return createBezierEasing;
        },
        optimizeFloat: function() {
            return optimizeFloat;
        }
    });
    const _IX2Easings = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(78686));
    const _beziereasing = /*#__PURE__*/ _interop_require_default(__webpack_require__(1361));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function") return null;
        var cacheBabelInterop = new WeakMap();
        var cacheNodeInterop = new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
            return {
                default: obj
            };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {
            __proto__: null
        };
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj.default = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    function optimizeFloat(value, digits = 5, base = 10) {
        const pow = Math.pow(base, digits);
        const float = Number(Math.round(value * pow) / pow);
        return Math.abs(float) > 0.0001 ? float : 0;
    }
    function createBezierEasing(easing) {
        return (0, _beziereasing.default)(...easing);
    }
    function applyEasing(easing, position, customEasingFn) {
        if (position === 0) {
            return 0;
        }
        if (position === 1) {
            return 1;
        }
        if (customEasingFn) {
            return optimizeFloat(position > 0 ? customEasingFn(position) : position);
        }
        return optimizeFloat(position > 0 && easing && _IX2Easings[easing] ? _IX2Easings[easing](position) : position);
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMkVhc2luZ1V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtcbiAgSVgyRWFzaW5nRW51bVR5cGUsXG4gIElYMkVhc2luZ0N1c3RvbVR5cGUsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi90eXBlcy1jb3JlJztcbmltcG9ydCAqIGFzIGVhc2luZ3MgZnJvbSAnLi9JWDJFYXNpbmdzJztcbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMTYgLSBDb3VsZCBub3QgZmluZCBhIGRlY2xhcmF0aW9uIGZpbGUgZm9yIG1vZHVsZSAnYmV6aWVyLWVhc2luZycuICcvaG9tZS9ydW5uZXIvd29yay9mbG93LXRvLXR5cGVzY3JpcHQtY29kZW1vZC9mbG93LXRvLXR5cGVzY3JpcHQtY29kZW1vZC93ZWJmbG93L25vZGVfbW9kdWxlcy9iZXppZXItZWFzaW5nL3NyYy9pbmRleC5qcycgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZS5cbmltcG9ydCBCZXppZXJFYXNpbmcgZnJvbSAnYmV6aWVyLWVhc2luZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcHRpbWl6ZUZsb2F0KFxuICB2YWx1ZTogbnVtYmVyLFxuICBkaWdpdHM6IG51bWJlciA9IDUsXG4gIGJhc2U6IG51bWJlciA9IDEwXG4pOiBudW1iZXIge1xuICBjb25zdCBwb3cgPSBNYXRoLnBvdyhiYXNlLCBkaWdpdHMpO1xuICBjb25zdCBmbG9hdCA9IE51bWJlcihNYXRoLnJvdW5kKHZhbHVlICogcG93KSAvIHBvdyk7XG4gIHJldHVybiBNYXRoLmFicyhmbG9hdCkgPiAwLjAwMDEgPyBmbG9hdCA6IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCZXppZXJFYXNpbmcoXG4gIGVhc2luZzogSVgyRWFzaW5nQ3VzdG9tVHlwZVxuKTogKGFyZzE6IG51bWJlcikgPT4gbnVtYmVyIHtcbiAgcmV0dXJuIEJlemllckVhc2luZyguLi5lYXNpbmcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlFYXNpbmcoXG4gIGVhc2luZzogSVgyRWFzaW5nRW51bVR5cGUsXG4gIHBvc2l0aW9uOiBudW1iZXIsXG4gIGN1c3RvbUVhc2luZ0ZuPzogKGFyZzE6IG51bWJlcikgPT4gbnVtYmVyXG4pIHtcbiAgaWYgKHBvc2l0aW9uID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHBvc2l0aW9uID09PSAxKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoY3VzdG9tRWFzaW5nRm4pIHtcbiAgICByZXR1cm4gb3B0aW1pemVGbG9hdChwb3NpdGlvbiA+IDAgPyBjdXN0b21FYXNpbmdGbihwb3NpdGlvbikgOiBwb3NpdGlvbik7XG4gIH1cblxuICByZXR1cm4gb3B0aW1pemVGbG9hdChcbiAgICBwb3NpdGlvbiA+IDAgJiYgZWFzaW5nICYmIGVhc2luZ3NbZWFzaW5nXVxuICAgICAgPyBlYXNpbmdzW2Vhc2luZ10ocG9zaXRpb24pXG4gICAgICA6IHBvc2l0aW9uXG4gICk7XG59XG4iXSwibmFtZXMiOlsiYXBwbHlFYXNpbmciLCJjcmVhdGVCZXppZXJFYXNpbmciLCJvcHRpbWl6ZUZsb2F0IiwidmFsdWUiLCJkaWdpdHMiLCJiYXNlIiwicG93IiwiTWF0aCIsImZsb2F0IiwiTnVtYmVyIiwicm91bmQiLCJhYnMiLCJlYXNpbmciLCJCZXppZXJFYXNpbmciLCJwb3NpdGlvbiIsImN1c3RvbUVhc2luZ0ZuIiwiZWFzaW5ncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUF3QmdCQSxXQUFXO2VBQVhBOztJQU5BQyxrQkFBa0I7ZUFBbEJBOztJQVZBQyxhQUFhO2VBQWJBOzs7b0VBSlM7cUVBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWxCLFNBQVNBLGNBQ2RDLEtBQWEsRUFDYkMsU0FBaUIsQ0FBQyxFQUNsQkMsT0FBZSxFQUFFO0lBRWpCLE1BQU1DLE1BQU1DLEtBQUtELEdBQUcsQ0FBQ0QsTUFBTUQ7SUFDM0IsTUFBTUksUUFBUUMsT0FBT0YsS0FBS0csS0FBSyxDQUFDUCxRQUFRRyxPQUFPQTtJQUMvQyxPQUFPQyxLQUFLSSxHQUFHLENBQUNILFNBQVMsU0FBU0EsUUFBUTtBQUM1QztBQUVPLFNBQVNQLG1CQUNkVyxNQUEyQjtJQUUzQixPQUFPQyxJQUFBQSxxQkFBWSxLQUFJRDtBQUN6QjtBQUVPLFNBQVNaLFlBQ2RZLE1BQXlCLEVBQ3pCRSxRQUFnQixFQUNoQkMsY0FBeUM7SUFFekMsSUFBSUQsYUFBYSxHQUFHO1FBQ2xCLE9BQU87SUFDVDtJQUNBLElBQUlBLGFBQWEsR0FBRztRQUNsQixPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxnQkFBZ0I7UUFDbEIsT0FBT2IsY0FBY1ksV0FBVyxJQUFJQyxlQUFlRCxZQUFZQTtJQUNqRTtJQUVBLE9BQU9aLGNBQ0xZLFdBQVcsS0FBS0YsVUFBVUksV0FBTyxDQUFDSixPQUFPLEdBQ3JDSSxXQUFPLENBQUNKLE9BQU8sQ0FBQ0UsWUFDaEJBO0FBRVIifQ==
    
    }),
    78686: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    // @ts-expect-error - TS7016 - Could not find a declaration file for module 'bezier-easing'. '/home/runner/work/flow-to-typescript-codemod/flow-to-typescript-codemod/webflow/node_modules/bezier-easing/src/index.js' implicitly has an 'any' type.
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        bounce: function() {
            return bounce;
        },
        bouncePast: function() {
            return bouncePast;
        },
        ease: function() {
            return ease;
        },
        easeIn: function() {
            return easeIn;
        },
        easeInOut: function() {
            return easeInOut;
        },
        easeOut: function() {
            return easeOut;
        },
        inBack: function() {
            return inBack;
        },
        inCirc: function() {
            return inCirc;
        },
        inCubic: function() {
            return inCubic;
        },
        inElastic: function() {
            return inElastic;
        },
        inExpo: function() {
            return inExpo;
        },
        inOutBack: function() {
            return inOutBack;
        },
        inOutCirc: function() {
            return inOutCirc;
        },
        inOutCubic: function() {
            return inOutCubic;
        },
        inOutElastic: function() {
            return inOutElastic;
        },
        inOutExpo: function() {
            return inOutExpo;
        },
        inOutQuad: function() {
            return inOutQuad;
        },
        inOutQuart: function() {
            return inOutQuart;
        },
        inOutQuint: function() {
            return inOutQuint;
        },
        inOutSine: function() {
            return inOutSine;
        },
        inQuad: function() {
            return inQuad;
        },
        inQuart: function() {
            return inQuart;
        },
        inQuint: function() {
            return inQuint;
        },
        inSine: function() {
            return inSine;
        },
        outBack: function() {
            return outBack;
        },
        outBounce: function() {
            return outBounce;
        },
        outCirc: function() {
            return outCirc;
        },
        outCubic: function() {
            return outCubic;
        },
        outElastic: function() {
            return outElastic;
        },
        outExpo: function() {
            return outExpo;
        },
        outQuad: function() {
            return outQuad;
        },
        outQuart: function() {
            return outQuart;
        },
        outQuint: function() {
            return outQuint;
        },
        outSine: function() {
            return outSine;
        },
        swingFrom: function() {
            return swingFrom;
        },
        swingFromTo: function() {
            return swingFromTo;
        },
        swingTo: function() {
            return swingTo;
        }
    });
    const _beziereasing = /*#__PURE__*/ _interop_require_default(__webpack_require__(1361));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // Easing functions adapted from Thomas Fuchs & Jeremy Kahn
    // Easing Equations (c) 2003 Robert Penner, BSD license
    // https://raw.github.com/danro/easing-js/master/LICENSE
    const magicSwing = 1.70158;
    const ease = (0, _beziereasing.default)(0.25, 0.1, 0.25, 1.0);
    const easeIn = (0, _beziereasing.default)(0.42, 0.0, 1.0, 1.0);
    const easeOut = (0, _beziereasing.default)(0.0, 0.0, 0.58, 1.0);
    const easeInOut = (0, _beziereasing.default)(0.42, 0.0, 0.58, 1.0);
    function inQuad(pos) {
        return Math.pow(pos, 2);
    }
    function outQuad(pos) {
        return -(Math.pow(pos - 1, 2) - 1);
    }
    function inOutQuad(pos) {
        if ((pos /= 0.5) < 1) {
            return 0.5 * Math.pow(pos, 2);
        }
        return -0.5 * ((pos -= 2) * pos - 2);
    }
    function inCubic(pos) {
        return Math.pow(pos, 3);
    }
    function outCubic(pos) {
        return Math.pow(pos - 1, 3) + 1;
    }
    function inOutCubic(pos) {
        if ((pos /= 0.5) < 1) {
            return 0.5 * Math.pow(pos, 3);
        }
        return 0.5 * (Math.pow(pos - 2, 3) + 2);
    }
    function inQuart(pos) {
        return Math.pow(pos, 4);
    }
    function outQuart(pos) {
        return -(Math.pow(pos - 1, 4) - 1);
    }
    function inOutQuart(pos) {
        if ((pos /= 0.5) < 1) {
            return 0.5 * Math.pow(pos, 4);
        }
        return -0.5 * ((pos -= 2) * Math.pow(pos, 3) - 2);
    }
    function inQuint(pos) {
        return Math.pow(pos, 5);
    }
    function outQuint(pos) {
        return Math.pow(pos - 1, 5) + 1;
    }
    function inOutQuint(pos) {
        if ((pos /= 0.5) < 1) {
            return 0.5 * Math.pow(pos, 5);
        }
        return 0.5 * (Math.pow(pos - 2, 5) + 2);
    }
    function inSine(pos) {
        return -Math.cos(pos * (Math.PI / 2)) + 1;
    }
    function outSine(pos) {
        return Math.sin(pos * (Math.PI / 2));
    }
    function inOutSine(pos) {
        return -0.5 * (Math.cos(Math.PI * pos) - 1);
    }
    function inExpo(pos) {
        return pos === 0 ? 0 : Math.pow(2, 10 * (pos - 1));
    }
    function outExpo(pos) {
        return pos === 1 ? 1 : -Math.pow(2, -10 * pos) + 1;
    }
    function inOutExpo(pos) {
        if (pos === 0) {
            return 0;
        }
        if (pos === 1) {
            return 1;
        }
        if ((pos /= 0.5) < 1) {
            return 0.5 * Math.pow(2, 10 * (pos - 1));
        }
        return 0.5 * (-Math.pow(2, -10 * --pos) + 2);
    }
    function inCirc(pos) {
        return -(Math.sqrt(1 - pos * pos) - 1);
    }
    function outCirc(pos) {
        return Math.sqrt(1 - Math.pow(pos - 1, 2));
    }
    function inOutCirc(pos) {
        if ((pos /= 0.5) < 1) {
            return -0.5 * (Math.sqrt(1 - pos * pos) - 1);
        }
        return 0.5 * (Math.sqrt(1 - (pos -= 2) * pos) + 1);
    }
    function outBounce(pos) {
        if (pos < 1 / 2.75) {
            return 7.5625 * pos * pos;
        } else if (pos < 2 / 2.75) {
            return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;
        } else if (pos < 2.5 / 2.75) {
            return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;
        } else {
            return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;
        }
    }
    function inBack(pos) {
        const s = magicSwing;
        return pos * pos * ((s + 1) * pos - s);
    }
    function outBack(pos) {
        const s = magicSwing;
        return (pos -= 1) * pos * ((s + 1) * pos + s) + 1;
    }
    function inOutBack(pos) {
        let s = magicSwing;
        if ((pos /= 0.5) < 1) {
            return 0.5 * (pos * pos * (((s *= 1.525) + 1) * pos - s));
        }
        return 0.5 * ((pos -= 2) * pos * (((s *= 1.525) + 1) * pos + s) + 2);
    }
    function inElastic(pos) {
        let s = magicSwing;
        let p = 0;
        let a = 1;
        if (pos === 0) {
            return 0;
        }
        if (pos === 1) {
            return 1;
        }
        if (!p) {
            p = 0.3;
        }
        if (a < 1) {
            a = 1;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        return -(a * Math.pow(2, 10 * (pos -= 1)) * Math.sin((pos - s) * (2 * Math.PI) / p));
    }
    function outElastic(pos) {
        let s = magicSwing;
        let p = 0;
        let a = 1;
        if (pos === 0) {
            return 0;
        }
        if (pos === 1) {
            return 1;
        }
        if (!p) {
            p = 0.3;
        }
        if (a < 1) {
            a = 1;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        return a * Math.pow(2, -10 * pos) * Math.sin((pos - s) * (2 * Math.PI) / p) + 1;
    }
    function inOutElastic(pos) {
        let s = magicSwing;
        let p = 0;
        let a = 1;
        if (pos === 0) {
            return 0;
        }
        if ((pos /= 1 / 2) === 2) {
            return 1;
        }
        if (!p) {
            p = 0.3 * 1.5;
        }
        if (a < 1) {
            a = 1;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        if (pos < 1) {
            return -0.5 * (a * Math.pow(2, 10 * (pos -= 1)) * Math.sin((pos - s) * (2 * Math.PI) / p));
        }
        return a * Math.pow(2, -10 * (pos -= 1)) * Math.sin((pos - s) * (2 * Math.PI) / p) * 0.5 + 1;
    }
    function swingFromTo(pos) {
        let s = magicSwing;
        return (pos /= 0.5) < 1 ? 0.5 * (pos * pos * (((s *= 1.525) + 1) * pos - s)) : 0.5 * ((pos -= 2) * pos * (((s *= 1.525) + 1) * pos + s) + 2);
    }
    function swingFrom(pos) {
        const s = magicSwing;
        return pos * pos * ((s + 1) * pos - s);
    }
    function swingTo(pos) {
        const s = magicSwing;
        return (pos -= 1) * pos * ((s + 1) * pos + s) + 1;
    }
    function bounce(pos) {
        if (pos < 1 / 2.75) {
            return 7.5625 * pos * pos;
        } else if (pos < 2 / 2.75) {
            return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;
        } else if (pos < 2.5 / 2.75) {
            return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;
        } else {
            return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;
        }
    }
    function bouncePast(pos) {
        if (pos < 1 / 2.75) {
            return 7.5625 * pos * pos;
        } else if (pos < 2 / 2.75) {
            return 2 - (7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75);
        } else if (pos < 2.5 / 2.75) {
            return 2 - (7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375);
        } else {
            return 2 - (7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375);
        }
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    31799: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        clearPlugin: function() {
            return clearPlugin;
        },
        createPluginInstance: function() {
            return createPluginInstance;
        },
        getPluginConfig: function() {
            return getPluginConfig;
        },
        getPluginDestination: function() {
            return getPluginDestination;
        },
        getPluginDuration: function() {
            return getPluginDuration;
        },
        getPluginOrigin: function() {
            return getPluginOrigin;
        },
        isPluginType: function() {
            return isPluginType;
        },
        renderPlugin: function() {
            return renderPlugin;
        }
    });
    const _IX2BrowserSupport = __webpack_require__(12662);
    const _plugins = __webpack_require__(63690);
    function isPluginType(actionTypeId) {
        // @ts-expect-error - TS2345 - Argument of type '"TRANSFORM_MOVE" | "TRANSFORM_SCALE" | "TRANSFORM_ROTATE" | "TRANSFORM_SKEW" | "STYLE_OPACITY" | "STYLE_SIZE" | "STYLE_FILTER" | "STYLE_FONT_VARIATION" | "STYLE_BACKGROUND_COLOR" | ... 12 more ... | "STYLE_BOX_SHADOW"' is not assignable to parameter of type '"PLUGIN_LOTTIE" | "PLUGIN_SPLINE" | "PLUGIN_VARIABLE"'.
        return _plugins.pluginMethodMap.has(actionTypeId);
    }
    const pluginMethod = (methodName)=>(actionTypeId)=>{
            if (!_IX2BrowserSupport.IS_BROWSER_ENV) {
                // IX2 plugins require browser libs for now
                return ()=>null;
            }
            const plugin = _plugins.pluginMethodMap.get(actionTypeId);
            if (!plugin) {
                throw new Error(`IX2 no plugin configured for: ${actionTypeId}`);
            }
            const method = plugin[methodName];
            if (!method) {
                throw new Error(`IX2 invalid plugin method: ${methodName}`);
            }
            return method;
        };
    const getPluginConfig = pluginMethod('getPluginConfig');
    const getPluginOrigin = pluginMethod('getPluginOrigin');
    const getPluginDuration = pluginMethod('getPluginDuration');
    const getPluginDestination = pluginMethod('getPluginDestination');
    const createPluginInstance = pluginMethod('createPluginInstance');
    const renderPlugin = pluginMethod('renderPlugin');
    const clearPlugin = pluginMethod('clearPlugin');
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklYMlZhbmlsbGFQbHVnaW5zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVNfQlJPV1NFUl9FTlZ9IGZyb20gJy4vSVgyQnJvd3NlclN1cHBvcnQnO1xuaW1wb3J0IHtwbHVnaW5NZXRob2RNYXB9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi9wbHVnaW5zJztcblxuaW1wb3J0IHR5cGUge0FjdGlvblR5cGVJZFR5cGV9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2l4Mi90eXBlcy1jb3JlJztcbmltcG9ydCB0eXBlIHtQbHVnaW5UeXBlfSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9peDIvcGx1Z2lucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsdWdpblR5cGUoYWN0aW9uVHlwZUlkOiBBY3Rpb25UeXBlSWRUeXBlKTogYm9vbGVhbiB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzNDUgLSBBcmd1bWVudCBvZiB0eXBlICdcIlRSQU5TRk9STV9NT1ZFXCIgfCBcIlRSQU5TRk9STV9TQ0FMRVwiIHwgXCJUUkFOU0ZPUk1fUk9UQVRFXCIgfCBcIlRSQU5TRk9STV9TS0VXXCIgfCBcIlNUWUxFX09QQUNJVFlcIiB8IFwiU1RZTEVfU0laRVwiIHwgXCJTVFlMRV9GSUxURVJcIiB8IFwiU1RZTEVfRk9OVF9WQVJJQVRJT05cIiB8IFwiU1RZTEVfQkFDS0dST1VORF9DT0xPUlwiIHwgLi4uIDEyIG1vcmUgLi4uIHwgXCJTVFlMRV9CT1hfU0hBRE9XXCInIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHBhcmFtZXRlciBvZiB0eXBlICdcIlBMVUdJTl9MT1RUSUVcIiB8IFwiUExVR0lOX1NQTElORVwiIHwgXCJQTFVHSU5fVkFSSUFCTEVcIicuXG4gIHJldHVybiBwbHVnaW5NZXRob2RNYXAuaGFzKGFjdGlvblR5cGVJZCk7XG59XG5cbnR5cGUgUGx1Z2luTWV0aG9kTmFtZSA9XG4gIHwgJ2dldFBsdWdpbkNvbmZpZydcbiAgfCAnZ2V0UGx1Z2luT3JpZ2luJ1xuICB8ICdnZXRQbHVnaW5EdXJhdGlvbidcbiAgfCAnZ2V0UGx1Z2luRGVzdGluYXRpb24nXG4gIHwgJ2NyZWF0ZVBsdWdpbkluc3RhbmNlJ1xuICB8ICdyZW5kZXJQbHVnaW4nXG4gIHwgJ2NsZWFyUGx1Z2luJztcblxuY29uc3QgcGx1Z2luTWV0aG9kID1cbiAgKG1ldGhvZE5hbWU6IFBsdWdpbk1ldGhvZE5hbWUpID0+IChhY3Rpb25UeXBlSWQ6IFBsdWdpblR5cGUpID0+IHtcbiAgICBpZiAoIUlTX0JST1dTRVJfRU5WKSB7XG4gICAgICAvLyBJWDIgcGx1Z2lucyByZXF1aXJlIGJyb3dzZXIgbGlicyBmb3Igbm93XG4gICAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcGx1Z2luID0gcGx1Z2luTWV0aG9kTWFwLmdldChhY3Rpb25UeXBlSWQpO1xuICAgIGlmICghcGx1Z2luKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYElYMiBubyBwbHVnaW4gY29uZmlndXJlZCBmb3I6ICR7YWN0aW9uVHlwZUlkfWApO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5bbWV0aG9kTmFtZV07XG4gICAgaWYgKCFtZXRob2QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSVgyIGludmFsaWQgcGx1Z2luIG1ldGhvZDogJHttZXRob2ROYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9O1xuXG5leHBvcnQgY29uc3QgZ2V0UGx1Z2luQ29uZmlnID0gcGx1Z2luTWV0aG9kKCdnZXRQbHVnaW5Db25maWcnKTtcbmV4cG9ydCBjb25zdCBnZXRQbHVnaW5PcmlnaW4gPSBwbHVnaW5NZXRob2QoJ2dldFBsdWdpbk9yaWdpbicpO1xuZXhwb3J0IGNvbnN0IGdldFBsdWdpbkR1cmF0aW9uID0gcGx1Z2luTWV0aG9kKCdnZXRQbHVnaW5EdXJhdGlvbicpO1xuZXhwb3J0IGNvbnN0IGdldFBsdWdpbkRlc3RpbmF0aW9uID0gcGx1Z2luTWV0aG9kKCdnZXRQbHVnaW5EZXN0aW5hdGlvbicpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVBsdWdpbkluc3RhbmNlID0gcGx1Z2luTWV0aG9kKCdjcmVhdGVQbHVnaW5JbnN0YW5jZScpO1xuZXhwb3J0IGNvbnN0IHJlbmRlclBsdWdpbiA9IHBsdWdpbk1ldGhvZCgncmVuZGVyUGx1Z2luJyk7XG5leHBvcnQgY29uc3QgY2xlYXJQbHVnaW4gPSBwbHVnaW5NZXRob2QoJ2NsZWFyUGx1Z2luJyk7XG4iXSwibmFtZXMiOlsiY2xlYXJQbHVnaW4iLCJjcmVhdGVQbHVnaW5JbnN0YW5jZSIsImdldFBsdWdpbkNvbmZpZyIsImdldFBsdWdpbkRlc3RpbmF0aW9uIiwiZ2V0UGx1Z2luRHVyYXRpb24iLCJnZXRQbHVnaW5PcmlnaW4iLCJpc1BsdWdpblR5cGUiLCJyZW5kZXJQbHVnaW4iLCJhY3Rpb25UeXBlSWQiLCJwbHVnaW5NZXRob2RNYXAiLCJoYXMiLCJwbHVnaW5NZXRob2QiLCJtZXRob2ROYW1lIiwiSVNfQlJPV1NFUl9FTlYiLCJwbHVnaW4iLCJnZXQiLCJFcnJvciIsIm1ldGhvZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUEyQ2FBLFdBQVc7ZUFBWEE7O0lBRkFDLG9CQUFvQjtlQUFwQkE7O0lBSkFDLGVBQWU7ZUFBZkE7O0lBR0FDLG9CQUFvQjtlQUFwQkE7O0lBREFDLGlCQUFpQjtlQUFqQkE7O0lBREFDLGVBQWU7ZUFBZkE7O0lBaENHQyxZQUFZO2VBQVpBOztJQW9DSEMsWUFBWTtlQUFaQTs7O21DQTFDZ0I7eUJBQ0M7QUFLdkIsU0FBU0QsYUFBYUUsWUFBOEI7SUFDekQsMldBQTJXO0lBQzNXLE9BQU9DLHdCQUFlLENBQUNDLEdBQUcsQ0FBQ0Y7QUFDN0I7QUFXQSxNQUFNRyxlQUNKLENBQUNDLGFBQWlDLENBQUNKO1FBQ2pDLElBQUksQ0FBQ0ssaUNBQWMsRUFBRTtZQUNuQiwyQ0FBMkM7WUFDM0MsT0FBTyxJQUFNO1FBQ2Y7UUFDQSxNQUFNQyxTQUFTTCx3QkFBZSxDQUFDTSxHQUFHLENBQUNQO1FBQ25DLElBQUksQ0FBQ00sUUFBUTtZQUNYLE1BQU0sSUFBSUUsTUFBTSxDQUFDLDhCQUE4QixFQUFFUixhQUFhLENBQUM7UUFDakU7UUFDQSxNQUFNUyxTQUFTSCxNQUFNLENBQUNGLFdBQVc7UUFDakMsSUFBSSxDQUFDSyxRQUFRO1lBQ1gsTUFBTSxJQUFJRCxNQUFNLENBQUMsMkJBQTJCLEVBQUVKLFdBQVcsQ0FBQztRQUM1RDtRQUNBLE9BQU9LO0lBQ1Q7QUFFSyxNQUFNZixrQkFBa0JTLGFBQWE7QUFDckMsTUFBTU4sa0JBQWtCTSxhQUFhO0FBQ3JDLE1BQU1QLG9CQUFvQk8sYUFBYTtBQUN2QyxNQUFNUix1QkFBdUJRLGFBQWE7QUFDMUMsTUFBTVYsdUJBQXVCVSxhQUFhO0FBQzFDLE1BQU1KLGVBQWVJLGFBQWE7QUFDbEMsTUFBTVgsY0FBY1csYUFBYSJ9
    
    }),
    4124: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-env browser */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        cleanupHTMLElement: function() {
            return cleanupHTMLElement;
        },
        clearAllStyles: function() {
            return clearAllStyles;
        },
        clearObjectCache: function() {
            return clearObjectCache;
        },
        getActionListProgress: function() {
            return getActionListProgress;
        },
        getAffectedElements: function() {
            return getAffectedElements;
        },
        getComputedStyle: function() {
            return getComputedStyle;
        },
        getDestinationValues: function() {
            return getDestinationValues;
        },
        getElementId: function() {
            return getElementId;
        },
        getInstanceId: function() {
            return getInstanceId;
        },
        getInstanceOrigin: function() {
            return getInstanceOrigin;
        },
        getItemConfigByKey: function() {
            return getItemConfigByKey;
        },
        getMaxDurationItemIndex: function() {
            return getMaxDurationItemIndex;
        },
        getNamespacedParameterId: function() {
            return getNamespacedParameterId;
        },
        getRenderType: function() {
            return getRenderType;
        },
        getStyleProp: function() {
            return getStyleProp;
        },
        mediaQueriesEqual: function() {
            return mediaQueriesEqual;
        },
        observeStore: function() {
            return observeStore;
        },
        reduceListToGroup: function() {
            return reduceListToGroup;
        },
        reifyState: function() {
            return reifyState;
        },
        renderHTMLElement: function() {
            return renderHTMLElement;
        },
        shallowEqual: function() {
            return _shallowEqual.default;
        },
        shouldAllowMediaQuery: function() {
            return shouldAllowMediaQuery;
        },
        shouldNamespaceEventParameter: function() {
            return shouldNamespaceEventParameter;
        },
        stringifyTarget: function() {
            return stringifyTarget;
        }
    });
    const _defaultTo = /*#__PURE__*/ _interop_require_default(__webpack_require__(34075));
    const _reduce = /*#__PURE__*/ _interop_require_default(__webpack_require__(51455));
    const _findLast = /*#__PURE__*/ _interop_require_default(__webpack_require__(45720));
    const _timm = __webpack_require__(81185);
    const _sharedconstants = __webpack_require__(7087);
    const _shallowEqual = /*#__PURE__*/ _interop_require_default(__webpack_require__(57164));
    const _IX2EasingUtils = __webpack_require__(73767);
    const _normalizeColor = __webpack_require__(40380);
    const _IX2VanillaPlugins = __webpack_require__(31799);
    const _IX2BrowserSupport = __webpack_require__(12662);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const { BACKGROUND, TRANSFORM, TRANSLATE_3D, SCALE_3D, ROTATE_X, ROTATE_Y, ROTATE_Z, SKEW, PRESERVE_3D, FLEX, OPACITY, FILTER, FONT_VARIATION_SETTINGS, WIDTH, HEIGHT, BACKGROUND_COLOR, BORDER_COLOR, COLOR, CHILDREN, IMMEDIATE_CHILDREN, SIBLINGS, PARENT, DISPLAY, WILL_CHANGE, AUTO, COMMA_DELIMITER, COLON_DELIMITER, BAR_DELIMITER, RENDER_TRANSFORM, RENDER_GENERAL, RENDER_STYLE, RENDER_PLUGIN } = _sharedconstants.IX2EngineConstants;
    const { TRANSFORM_MOVE, TRANSFORM_SCALE, TRANSFORM_ROTATE, TRANSFORM_SKEW, STYLE_OPACITY, STYLE_FILTER, STYLE_FONT_VARIATION, STYLE_SIZE, STYLE_BACKGROUND_COLOR, STYLE_BORDER, STYLE_TEXT_COLOR, GENERAL_DISPLAY, OBJECT_VALUE } = _sharedconstants.ActionTypeConsts;
    // @ts-expect-error - TS7006 - Parameter 'v' implicitly has an 'any' type.
    const trim = (v)=>v.trim();
    const colorStyleProps = Object.freeze({
        [STYLE_BACKGROUND_COLOR]: BACKGROUND_COLOR,
        [STYLE_BORDER]: BORDER_COLOR,
        [STYLE_TEXT_COLOR]: COLOR
    });
    const willChangeProps = Object.freeze({
        [_IX2BrowserSupport.TRANSFORM_PREFIXED]: TRANSFORM,
        [BACKGROUND_COLOR]: BACKGROUND,
        [OPACITY]: OPACITY,
        [FILTER]: FILTER,
        [WIDTH]: WIDTH,
        [HEIGHT]: HEIGHT,
        [FONT_VARIATION_SETTINGS]: FONT_VARIATION_SETTINGS
    });
    const objectCache = new Map();
    function clearObjectCache() {
        objectCache.clear();
    }
    let instanceCount = 1;
    function getInstanceId() {
        return 'i' + instanceCount++;
    }
    let elementCount = 1;
    function getElementId(ixElements, ref) {
        // TODO: optimize element lookup
        for(const key in ixElements){
            const ixEl = ixElements[key];
            if (ixEl && ixEl.ref === ref) {
                return ixEl.id;
            }
        }
        return 'e' + elementCount++;
    }
    function reifyState({ events, actionLists, site } = {}) {
        const eventTypeMap = (0, _reduce.default)(events, (result, event)=>{
            const { eventTypeId } = event;
            if (!result[eventTypeId]) {
                result[eventTypeId] = {};
            }
            result[eventTypeId][event.id] = event;
            return result;
        }, {});
        let mediaQueries = site && site.mediaQueries;
        let mediaQueryKeys = [];
        if (mediaQueries) {
            mediaQueryKeys = mediaQueries.map((mq)=>mq.key);
        } else {
            mediaQueries = [];
            console.warn(`IX2 missing mediaQueries in site data`);
        }
        return {
            ixData: {
                events,
                actionLists,
                eventTypeMap,
                mediaQueries,
                mediaQueryKeys
            }
        };
    }
    const strictEqual = (a, b)=>a === b;
    function observeStore({ // @ts-expect-error - TS7031 - Binding element 'store' implicitly has an 'any' type.
    store, // @ts-expect-error - TS7031 - Binding element 'select' implicitly has an 'any' type.
    select, // @ts-expect-error - TS7031 - Binding element 'onChange' implicitly has an 'any' type.
    onChange, comparator = strictEqual }) {
        const { getState, subscribe } = store;
        const unsubscribe = subscribe(handleChange);
        let currentState = select(getState());
        function handleChange() {
            const nextState = select(getState());
            if (nextState == null) {
                unsubscribe();
                return;
            }
            if (!comparator(nextState, currentState)) {
                currentState = nextState;
                onChange(currentState, store);
            }
        }
        return unsubscribe;
    }
    // @ts-expect-error - TS7006 - Parameter 'target' implicitly has an 'any' type.
    function normalizeTarget(target) {
        const type = typeof target;
        if (type === 'string') {
            return {
                id: target
            };
        } else if (target != null && type === 'object') {
            const { id, objectId, selector, selectorGuids, appliesTo, useEventTarget } = target;
            return {
                id,
                objectId,
                selector,
                selectorGuids,
                appliesTo,
                useEventTarget
            };
        }
        return {};
    }
    function getAffectedElements({ config, event, eventTarget, elementRoot, elementApi }) {
        if (!elementApi) {
            throw new Error('IX2 missing elementApi');
        }
        const { targets } = config;
        if (Array.isArray(targets) && targets.length > 0) {
            return targets.reduce((accumulator, target)=>accumulator.concat(getAffectedElements({
                    config: {
                        target
                    },
                    event,
                    eventTarget,
                    elementRoot,
                    elementApi
                })), []);
        }
        const { getValidDocument, getQuerySelector, queryDocument, getChildElements, getSiblingElements, matchSelector, elementContains, isSiblingNode } = elementApi;
        const { target } = config;
        if (!target) {
            return [];
        }
        const { id, objectId, selector, selectorGuids, appliesTo, useEventTarget } = normalizeTarget(target);
        if (objectId) {
            const ref = objectCache.has(objectId) ? objectCache.get(objectId) : objectCache.set(objectId, {}).get(objectId);
            return [
                ref
            ];
        }
        if (appliesTo === _sharedconstants.EventAppliesTo.PAGE) {
            const doc = getValidDocument(id);
            return doc ? [
                doc
            ] : [];
        }
        const overrides = event?.action?.config?.affectedElements ?? {};
        const override = overrides[id || selector] || {};
        const validOverride = Boolean(override.id || override.selector);
        let limitAffectedElements;
        let baseSelector;
        let finalSelector;
        const eventTargetSelector = event && getQuerySelector(normalizeTarget(event.target));
        if (validOverride) {
            limitAffectedElements = override.limitAffectedElements;
            baseSelector = eventTargetSelector;
            finalSelector = getQuerySelector(override);
        } else {
            // pass in selectorGuids as well for server-side rendering.
            baseSelector = finalSelector = getQuerySelector({
                id,
                selector,
                selectorGuids
            });
        }
        if (event && useEventTarget) {
            // eventTarget is not defined when this function is called in a clear request, so find
            // all target elements associated with the event data, and return affected elements.
            const eventTargets = eventTarget && (finalSelector || useEventTarget === true) ? [
                eventTarget
            ] : queryDocument(eventTargetSelector);
            if (finalSelector) {
                if (useEventTarget === PARENT) {
                    return queryDocument(finalSelector).filter((parentElement)=>eventTargets.some((targetElement)=>elementContains(parentElement, targetElement)));
                }
                if (useEventTarget === CHILDREN) {
                    return queryDocument(finalSelector).filter((childElement)=>eventTargets.some((targetElement)=>elementContains(targetElement, childElement)));
                }
                if (useEventTarget === SIBLINGS) {
                    return queryDocument(finalSelector).filter((siblingElement)=>eventTargets.some((targetElement)=>isSiblingNode(targetElement, siblingElement)));
                }
            }
            return eventTargets;
        }
        if (baseSelector == null || finalSelector == null) {
            return [];
        }
        if (_IX2BrowserSupport.IS_BROWSER_ENV && elementRoot) {
            return queryDocument(finalSelector).filter((element)=>elementRoot.contains(element));
        }
        if (limitAffectedElements === CHILDREN) {
            return queryDocument(baseSelector, finalSelector);
        } else if (limitAffectedElements === IMMEDIATE_CHILDREN) {
            return getChildElements(queryDocument(baseSelector)).filter(matchSelector(finalSelector));
        } else if (limitAffectedElements === SIBLINGS) {
            return getSiblingElements(queryDocument(baseSelector)).filter(matchSelector(finalSelector));
        } else {
            return queryDocument(finalSelector);
        }
    }
    function getComputedStyle({ element, actionItem }) {
        if (!_IX2BrowserSupport.IS_BROWSER_ENV) {
            return {};
        }
        const { actionTypeId } = actionItem;
        switch(actionTypeId){
            case STYLE_SIZE:
            case STYLE_BACKGROUND_COLOR:
            case STYLE_BORDER:
            case STYLE_TEXT_COLOR:
            case GENERAL_DISPLAY:
                return window.getComputedStyle(element);
            default:
                return {};
        }
    }
    const pxValueRegex = /px/;
    // @ts-expect-error - TS7006 - Parameter 'filters' implicitly has an 'any' type.
    const getFilterDefaults = (actionState, filters)=>// @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type. | TS7006 - Parameter 'filter' implicitly has an 'any' type.
        filters.reduce((result, filter)=>{
            if (result[filter.type] == null) {
                result[filter.type] = // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'Readonly<{ blur: 0; 'hue-rotate': 0; invert: 0; grayscale: 0; saturate: 100; sepia: 0; contrast: 100; brightness: 100; }>'.
                filterDefaults[filter.type];
            }
            return result;
        }, actionState || {});
    const getFontVariationDefaults = (actionState, fontVariations)=>fontVariations.reduce((result, fontVariation)=>{
            if (result[fontVariation.type] == null) {
                result[fontVariation.type] = // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Readonly<{ wght: 0; opsz: 0; wdth: 0; slnt: 0; }>'.
                fontVariationDefaults[fontVariation.type] || // @ts-expect-error - TS2339 - Property 'defaultValue' does not exist on type 'FontVariationItemConfigType'.
                fontVariation.defaultValue || 0;
            }
            return result;
        }, actionState || {});
    function getInstanceOrigin(element, refState = {}, computedStyle = {}, actionItem, elementApi) {
        const { getStyle } = elementApi;
        // Flow Hack: Passing actionTypeId to isPluginType and then trying
        // to do type refinement using the same variable via a switch statement
        // breaks down. This is is a workaround to ensure we can use type refinement.
        const { actionTypeId } = actionItem;
        if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) {
            // @ts-expect-error - TS2345 - Argument of type '"TRANSFORM_MOVE" | "TRANSFORM_SCALE" | "TRANSFORM_ROTATE" | "TRANSFORM_SKEW" | "STYLE_OPACITY" | "STYLE_SIZE" | "STYLE_FILTER" | "STYLE_FONT_VARIATION" | "STYLE_BACKGROUND_COLOR" | "STYLE_BORDER" | "STYLE_TEXT_COLOR" | "PLUGIN_LOTTIE" | "GENERAL_DISPLAY"' is not assignable to parameter of type 'PluginType'. | TS7053 - Element implicitly has an 'any' type because expression of type '"TRANSFORM_MOVE" | "TRANSFORM_SCALE" | "TRANSFORM_ROTATE" | "TRANSFORM_SKEW" | "STYLE_OPACITY" | "STYLE_SIZE" | "STYLE_FILTER" | "STYLE_FONT_VARIATION" | "STYLE_BACKGROUND_COLOR" | "STYLE_BORDER" | "STYLE_TEXT_COLOR" | "PLUGIN_LOTTIE" | "GENERAL_DISPLAY"' can't be used to index type '{}'.
            return (0, _IX2VanillaPlugins.getPluginOrigin)(actionTypeId)(refState[actionTypeId], actionItem);
        }
        switch(actionItem.actionTypeId){
            case TRANSFORM_MOVE:
            case TRANSFORM_SCALE:
            case TRANSFORM_ROTATE:
            case TRANSFORM_SKEW:
                {
                    return(// @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type '"TRANSFORM_MOVE" | "TRANSFORM_SCALE" | "TRANSFORM_ROTATE" | "TRANSFORM_SKEW"' can't be used to index type '{}'.
                    refState[actionItem.actionTypeId] || transformDefaults[actionItem.actionTypeId]);
                }
            case STYLE_FILTER:
                return getFilterDefaults(// @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type '"STYLE_FILTER"' can't be used to index type '{}'.
                refState[actionItem.actionTypeId], actionItem.config.filters);
            case STYLE_FONT_VARIATION:
                return getFontVariationDefaults(// @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type '"STYLE_FONT_VARIATION"' can't be used to index type '{}'.
                refState[actionItem.actionTypeId], actionItem.config.fontVariations);
            case STYLE_OPACITY:
                return {
                    value: (0, _defaultTo.default)(parseFloat(getStyle(element, OPACITY)), 1.0)
                };
            case STYLE_SIZE:
                {
                    const inlineWidth = getStyle(element, WIDTH);
                    const inlineHeight = getStyle(element, HEIGHT);
                    let widthValue;
                    let heightValue;
                    // When destination unit is 'AUTO', ensure origin values are in px
                    if (actionItem.config.widthUnit === AUTO) {
                        widthValue = pxValueRegex.test(inlineWidth) ? parseFloat(inlineWidth) : parseFloat(computedStyle.width);
                    } else {
                        widthValue = (0, _defaultTo.default)(parseFloat(inlineWidth), // @ts-expect-error - TS18047 - 'computedStyle' is possibly 'null'.
                        parseFloat(computedStyle.width));
                    }
                    if (actionItem.config.heightUnit === AUTO) {
                        heightValue = pxValueRegex.test(inlineHeight) ? parseFloat(inlineHeight) : parseFloat(computedStyle.height);
                    } else {
                        heightValue = (0, _defaultTo.default)(parseFloat(inlineHeight), // @ts-expect-error - TS18047 - 'computedStyle' is possibly 'null'.
                        parseFloat(computedStyle.height));
                    }
                    return {
                        widthValue,
                        heightValue
                    };
                }
            case STYLE_BACKGROUND_COLOR:
            case STYLE_BORDER:
            case STYLE_TEXT_COLOR:
                return parseColor({
                    element,
                    actionTypeId: actionItem.actionTypeId,
                    computedStyle,
                    getStyle
                });
            case GENERAL_DISPLAY:
                return {
                    // @ts-expect-error - TS18047 - 'computedStyle' is possibly 'null'.
                    value: (0, _defaultTo.default)(getStyle(element, DISPLAY), computedStyle.display)
                };
            // @ts-expect-error - `OBJECT_VALUE` is not an expected `actionTypeId`
            case OBJECT_VALUE:
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{}'. | TS2339 - Property 'actionTypeId' does not exist on type 'never'.
                return refState[actionItem.actionTypeId] || {
                    value: 0
                };
            default:
                {
                    // As far as the type system can tell, we're missing a handler for
                    // PLUGIN_LOTTIE.
                    //
                    // This is actually handled by `isPluginType` above.
                    //
                    /*:: (actionItem: empty); */ return;
                }
        }
    }
    // @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type. | TS7006 - Parameter 'filter' implicitly has an 'any' type.
    const reduceFilters = (result, filter)=>{
        if (filter) {
            result[filter.type] = filter.value || 0;
        }
        return result;
    };
    const reduceFontVariations = (result, fontVariation)=>{
        if (fontVariation) {
            result[fontVariation.type] = fontVariation.value || 0;
        }
        return result;
    };
    const getItemConfigByKey = (actionTypeId, key, config)=>{
        if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) {
            return (0, _IX2VanillaPlugins.getPluginConfig)(actionTypeId)(config, key);
        }
        switch(actionTypeId){
            case STYLE_FILTER:
                {
                    const filter = (0, _findLast.default)(config.filters, ({ type })=>type === key);
                    return filter ? filter.value : 0;
                }
            case STYLE_FONT_VARIATION:
                {
                    const fontVariation = (0, _findLast.default)(config.fontVariations, ({ type })=>type === key);
                    return fontVariation ? fontVariation.value : 0;
                }
            default:
                return config[key];
        }
    };
    function getDestinationValues({ element, actionItem, elementApi }) {
        if ((0, _IX2VanillaPlugins.isPluginType)(actionItem.actionTypeId)) {
            // @ts-expect-error - TS2345 - Argument of type '"TRANSFORM_MOVE" | "TRANSFORM_SCALE" | "TRANSFORM_ROTATE" | "TRANSFORM_SKEW" | "STYLE_OPACITY" | "STYLE_SIZE" | "STYLE_FILTER" | "STYLE_FONT_VARIATION" | "STYLE_BACKGROUND_COLOR" | "STYLE_BORDER" | "STYLE_TEXT_COLOR" | "PLUGIN_LOTTIE" | "GENERAL_DISPLAY"' is not assignable to parameter of type 'PluginType'.
            return (0, _IX2VanillaPlugins.getPluginDestination)(actionItem.actionTypeId)(actionItem.config);
        }
        switch(actionItem.actionTypeId){
            case TRANSFORM_MOVE:
            case TRANSFORM_SCALE:
            case TRANSFORM_ROTATE:
            case TRANSFORM_SKEW:
                {
                    const { xValue, yValue, zValue } = actionItem.config;
                    return {
                        xValue,
                        yValue,
                        zValue
                    };
                }
            case STYLE_SIZE:
                {
                    const { getStyle, setStyle, getProperty } = elementApi;
                    const { widthUnit, heightUnit } = actionItem.config;
                    let { widthValue, heightValue } = actionItem.config;
                    if (!_IX2BrowserSupport.IS_BROWSER_ENV) {
                        return {
                            widthValue,
                            heightValue
                        };
                    }
                    if (widthUnit === AUTO) {
                        const temp = getStyle(element, WIDTH);
                        setStyle(element, WIDTH, '');
                        // @ts-expect-error - TS2322 - Type 'string | null' is not assignable to type 'number | undefined'.
                        widthValue = getProperty(element, 'offsetWidth');
                        setStyle(element, WIDTH, temp);
                    }
                    if (heightUnit === AUTO) {
                        const temp = getStyle(element, HEIGHT);
                        setStyle(element, HEIGHT, '');
                        // @ts-expect-error - TS2322 - Type 'string | null' is not assignable to type 'number | undefined'.
                        heightValue = getProperty(element, 'offsetHeight');
                        setStyle(element, HEIGHT, temp);
                    }
                    return {
                        widthValue,
                        heightValue
                    };
                }
            case STYLE_BACKGROUND_COLOR:
            case STYLE_BORDER:
            case STYLE_TEXT_COLOR:
                {
                    const { rValue, gValue, bValue, aValue, globalSwatchId } = actionItem.config;
                    if (globalSwatchId && globalSwatchId.startsWith('--')) {
                        const { getStyle } = elementApi;
                        const value = getStyle(element, globalSwatchId);
                        const normalizedValue = (0, _normalizeColor.normalizeColor)(value);
                        return {
                            rValue: normalizedValue.red,
                            gValue: normalizedValue.green,
                            bValue: normalizedValue.blue,
                            aValue: normalizedValue.alpha
                        };
                    }
                    return {
                        rValue,
                        gValue,
                        bValue,
                        aValue
                    };
                }
            case STYLE_FILTER:
                {
                    return actionItem.config.filters.reduce(reduceFilters, {});
                }
            case STYLE_FONT_VARIATION:
                {
                    return actionItem.config.fontVariations.reduce(reduceFontVariations, {});
                }
            default:
                {
                    const { value } = actionItem.config;
                    return {
                        value
                    };
                }
        }
    }
    function getRenderType(actionTypeId) {
        if (/^TRANSFORM_/.test(actionTypeId)) {
            return RENDER_TRANSFORM;
        }
        if (/^STYLE_/.test(actionTypeId)) {
            return RENDER_STYLE;
        }
        if (/^GENERAL_/.test(actionTypeId)) {
            return RENDER_GENERAL;
        }
        if (/^PLUGIN_/.test(actionTypeId)) {
            return RENDER_PLUGIN;
        }
    }
    function getStyleProp(renderType, actionTypeId) {
        return renderType === RENDER_STYLE ? actionTypeId.replace('STYLE_', '').toLowerCase() : null;
    }
    function renderHTMLElement(element, refState, actionState, eventId, actionItem, styleProp, elementApi, renderType, pluginInstance) {
        switch(renderType){
            case RENDER_TRANSFORM:
                {
                    return renderTransform(element, refState, actionState, actionItem, elementApi);
                }
            case RENDER_STYLE:
                {
                    return renderStyle(element, refState, actionState, actionItem, styleProp, elementApi);
                }
            case RENDER_GENERAL:
                {
                    return renderGeneral(element, actionItem, elementApi);
                }
            case RENDER_PLUGIN:
                {
                    const { actionTypeId } = actionItem;
                    if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) {
                        return (0, _IX2VanillaPlugins.renderPlugin)(actionTypeId)(pluginInstance, refState, actionItem);
                    }
                }
        }
    }
    const transformDefaults = {
        [TRANSFORM_MOVE]: Object.freeze({
            xValue: 0,
            yValue: 0,
            zValue: 0
        }),
        [TRANSFORM_SCALE]: Object.freeze({
            xValue: 1,
            yValue: 1,
            zValue: 1
        }),
        [TRANSFORM_ROTATE]: Object.freeze({
            xValue: 0,
            yValue: 0,
            zValue: 0
        }),
        [TRANSFORM_SKEW]: Object.freeze({
            xValue: 0,
            yValue: 0
        })
    };
    const filterDefaults = Object.freeze({
        blur: 0,
        'hue-rotate': 0,
        invert: 0,
        grayscale: 0,
        saturate: 100,
        sepia: 0,
        contrast: 100,
        brightness: 100
    });
    const fontVariationDefaults = Object.freeze({
        wght: 0,
        opsz: 0,
        wdth: 0,
        slnt: 0
    });
    // @ts-expect-error - TS7006 - Parameter 'filterType' implicitly has an 'any' type. | TS7006 - Parameter 'actionItemConfig' implicitly has an 'any' type.
    const getFilterUnit = (filterType, actionItemConfig)=>{
        const filter = (0, _findLast.default)(actionItemConfig.filters, ({ type })=>type === filterType);
        if (filter && filter.unit) {
            return filter.unit;
        }
        switch(filterType){
            case 'blur':
                return 'px';
            case 'hue-rotate':
                return 'deg';
            default:
                return '%';
        }
    };
    const transformKeys = Object.keys(transformDefaults);
    function renderTransform(element, refState, actionState, actionItem, elementApi) {
        const newTransform = transformKeys.map((actionTypeId)=>{
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly TRANSFORM_MOVE: Readonly<{ xValue: 0; yValue: 0; zValue: 0; }>; readonly TRANSFORM_SCALE: Readonly<{ xValue: 1; yValue: 1; zValue: 1; }>; readonly TRANSFORM_ROTATE: Readonly<{ xValue: 0; yValue: 0; zValue: 0; }>; readonly TRANSFORM_SKEW: Readonly<...>; }'.
            const defaults = transformDefaults[actionTypeId];
            const { xValue = defaults.xValue, yValue = defaults.yValue, zValue = defaults.zValue, xUnit = '', yUnit = '', zUnit = '' } = refState[actionTypeId] || {};
            switch(actionTypeId){
                case TRANSFORM_MOVE:
                    return `${TRANSLATE_3D}(${xValue}${xUnit}, ${yValue}${yUnit}, ${zValue}${zUnit})`;
                case TRANSFORM_SCALE:
                    return `${SCALE_3D}(${xValue}${xUnit}, ${yValue}${yUnit}, ${zValue}${zUnit})`;
                case TRANSFORM_ROTATE:
                    return `${ROTATE_X}(${xValue}${xUnit}) ${ROTATE_Y}(${yValue}${yUnit}) ${ROTATE_Z}(${zValue}${zUnit})`;
                case TRANSFORM_SKEW:
                    return `${SKEW}(${xValue}${xUnit}, ${yValue}${yUnit})`;
                default:
                    return '';
            }
        }).join(' ');
        const { setStyle } = elementApi;
        addWillChange(element, _IX2BrowserSupport.TRANSFORM_PREFIXED, elementApi);
        setStyle(element, _IX2BrowserSupport.TRANSFORM_PREFIXED, newTransform);
        // Set transform-style: preserve-3d
        if (hasDefined3dTransform(actionItem, actionState)) {
            setStyle(element, _IX2BrowserSupport.TRANSFORM_STYLE_PREFIXED, PRESERVE_3D);
        }
    }
    function renderFilter(element, actionState, // @ts-expect-error - TS7006 - Parameter 'actionItemConfig' implicitly has an 'any' type.
    actionItemConfig, elementApi) {
        const filterValue = (0, _reduce.default)(actionState, (result, value, type)=>`${result} ${type}(${value}${getFilterUnit(type, actionItemConfig)})`, '');
        const { setStyle } = elementApi;
        addWillChange(element, FILTER, elementApi);
        setStyle(element, FILTER, filterValue);
    }
    function renderFontVariation(element, actionState, actionItemConfig, elementApi) {
        const fontVariationValue = (0, _reduce.default)(actionState, (result, value, type)=>{
            // @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type 'never'.
            result.push(`"${type}" ${value}`);
            return result;
        }, []).join(', ');
        const { setStyle } = elementApi;
        addWillChange(element, FONT_VARIATION_SETTINGS, elementApi);
        setStyle(element, FONT_VARIATION_SETTINGS, fontVariationValue);
    }
    // @ts-expect-error - TS7031 - Binding element 'actionTypeId' implicitly has an 'any' type. | TS7031 - Binding element 'xValue' implicitly has an 'any' type. | TS7031 - Binding element 'yValue' implicitly has an 'any' type. | TS7031 - Binding element 'zValue' implicitly has an 'any' type.
    function hasDefined3dTransform({ actionTypeId }, { xValue, yValue, zValue }) {
        // TRANSLATE_Z
        return actionTypeId === TRANSFORM_MOVE && zValue !== undefined || // SCALE_Z
        actionTypeId === TRANSFORM_SCALE && zValue !== undefined || // ROTATE_X or ROTATE_Y
        actionTypeId === TRANSFORM_ROTATE && (xValue !== undefined || yValue !== undefined);
    }
    const paramCapture = '\\(([^)]+)\\)';
    const rgbValidRegex = /^rgb/;
    const rgbMatchRegex = RegExp(`rgba?${paramCapture}`);
    function getFirstMatch(regex, value) {
        const match = regex.exec(value);
        return match ? match[1] : '';
    }
    // @ts-expect-error - TS7031 - Binding element 'element' implicitly has an 'any' type. | TS7031 - Binding element 'actionTypeId' implicitly has an 'any' type. | TS7031 - Binding element 'computedStyle' implicitly has an 'any' type. | TS7031 - Binding element 'getStyle' implicitly has an 'any' type.
    function parseColor({ element, actionTypeId, computedStyle, getStyle }) {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'Readonly<{ STYLE_BACKGROUND_COLOR: "backgroundColor"; STYLE_BORDER: "borderColor"; STYLE_TEXT_COLOR: "color"; }>'.
        const prop = colorStyleProps[actionTypeId];
        const inlineValue = getStyle(element, prop);
        const value = rgbValidRegex.test(inlineValue) ? inlineValue : computedStyle[prop];
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        const matches = getFirstMatch(rgbMatchRegex, value).split(COMMA_DELIMITER);
        return {
            // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            rValue: (0, _defaultTo.default)(parseInt(matches[0], 10), 255),
            // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            gValue: (0, _defaultTo.default)(parseInt(matches[1], 10), 255),
            // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            bValue: (0, _defaultTo.default)(parseInt(matches[2], 10), 255),
            // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            aValue: (0, _defaultTo.default)(parseFloat(matches[3]), 1)
        };
    }
    function renderStyle(element, refState, actionState, actionItem, styleProp, elementApi) {
        const { setStyle } = elementApi;
        switch(actionItem.actionTypeId){
            case STYLE_SIZE:
                {
                    let { widthUnit = '', heightUnit = '' } = actionItem.config;
                    const { widthValue, heightValue } = actionState;
                    if (widthValue !== undefined) {
                        if (widthUnit === AUTO) {
                            widthUnit = 'px';
                        }
                        addWillChange(element, WIDTH, elementApi);
                        setStyle(element, WIDTH, widthValue + widthUnit);
                    }
                    if (heightValue !== undefined) {
                        if (heightUnit === AUTO) {
                            heightUnit = 'px';
                        }
                        addWillChange(element, HEIGHT, elementApi);
                        setStyle(element, HEIGHT, heightValue + heightUnit);
                    }
                    break;
                }
            case STYLE_FILTER:
                {
                    renderFilter(element, actionState, actionItem.config, elementApi);
                    break;
                }
            case STYLE_FONT_VARIATION:
                {
                    renderFontVariation(element, actionState, actionItem.config, elementApi);
                    break;
                }
            case STYLE_BACKGROUND_COLOR:
            case STYLE_BORDER:
            case STYLE_TEXT_COLOR:
                {
                    const prop = colorStyleProps[actionItem.actionTypeId];
                    const rValue = Math.round(actionState.rValue);
                    const gValue = Math.round(actionState.gValue);
                    const bValue = Math.round(actionState.bValue);
                    const aValue = actionState.aValue;
                    addWillChange(element, prop, elementApi);
                    setStyle(element, prop, aValue >= 1 ? `rgb(${rValue},${gValue},${bValue})` : `rgba(${rValue},${gValue},${bValue},${aValue})`);
                    break;
                }
            default:
                {
                    // @ts-expect-error - TS2339 - Property 'unit' does not exist on type '{ delay: number; easing: IX2EasingType; duration: number; target: ActionItemTargetType; xValue: number | undefined; yValue: number | undefined; zValue: number | undefined; xUnit: "%" | ... 4 more ... | "VW"; yUnit: "%" | ... 4 more ... | "VW"; zUnit: "%" | ... 4 more ... | "VW"; } | ... 5 more ... | { ...; }'.
                    const { unit = '' } = actionItem.config;
                    addWillChange(element, styleProp, elementApi);
                    setStyle(element, styleProp, actionState.value + unit);
                    break;
                }
        }
    }
    function renderGeneral(element, actionItem, elementApi) {
        const { setStyle } = elementApi;
        switch(actionItem.actionTypeId){
            case GENERAL_DISPLAY:
                {
                    const { value } = actionItem.config;
                    if (value === FLEX && _IX2BrowserSupport.IS_BROWSER_ENV) {
                        setStyle(element, DISPLAY, _IX2BrowserSupport.FLEX_PREFIXED);
                    } else {
                        setStyle(element, DISPLAY, value);
                    }
                    return;
                }
        }
    }
    // @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type. | TS7006 - Parameter 'prop' implicitly has an 'any' type.
    function addWillChange(element, prop, elementApi) {
        if (!_IX2BrowserSupport.IS_BROWSER_ENV) {
            return;
        }
        const validProp = willChangeProps[prop];
        if (!validProp) {
            return;
        }
        const { getStyle, setStyle } = elementApi;
        const value = getStyle(element, WILL_CHANGE);
        if (!value) {
            setStyle(element, WILL_CHANGE, validProp);
            return;
        }
        const values = value.split(COMMA_DELIMITER).map(trim);
        if (values.indexOf(validProp) === -1) {
            setStyle(element, WILL_CHANGE, values.concat(validProp).join(COMMA_DELIMITER));
        }
    }
    // @ts-expect-error - TS7006 - Parameter 'prop' implicitly has an 'any' type.
    function removeWillChange(element, prop, elementApi) {
        if (!_IX2BrowserSupport.IS_BROWSER_ENV) {
            return;
        }
        const validProp = willChangeProps[prop];
        if (!validProp) {
            return;
        }
        const { getStyle, setStyle } = elementApi;
        const value = getStyle(element, WILL_CHANGE);
        if (!value || value.indexOf(validProp) === -1) {
            return;
        }
        setStyle(element, WILL_CHANGE, value.split(COMMA_DELIMITER).map(trim)// @ts-expect-error - TS7006 - Parameter 'v' implicitly has an 'any' type.
        .filter((v)=>v !== validProp).join(COMMA_DELIMITER));
    }
    function clearAllStyles({ store, elementApi }) {
        const { ixData } = store.getState();
        const { events = {}, actionLists = {} } = ixData;
        Object.keys(events).forEach((eventId)=>{
            const event = events[eventId];
            const { config } = event.action;
            const { actionListId } = config;
            const actionList = actionLists[actionListId];
            if (actionList) {
                clearActionListStyles({
                    actionList,
                    event,
                    elementApi
                });
            }
        });
        Object.keys(actionLists).forEach((actionListId)=>{
            // @ts-expect-error - TS2345 - Argument of type '{ actionList: any; elementApi: any; }' is not assignable to parameter of type '{ actionList?: {} | undefined; event: any; elementApi: any; }'.
            clearActionListStyles({
                actionList: actionLists[actionListId],
                elementApi
            });
        });
    }
    // @ts-expect-error - TS7031 - Binding element 'event' implicitly has an 'any' type. | TS7031 - Binding element 'elementApi' implicitly has an 'any' type.
    function clearActionListStyles({ actionList = {}, event, elementApi }) {
        // @ts-expect-error - TS2339 - Property 'actionItemGroups' does not exist on type '{}'. | TS2339 - Property 'continuousParameterGroups' does not exist on type '{}'.
        const { actionItemGroups, continuousParameterGroups } = actionList;
        actionItemGroups && // @ts-expect-error - TS7006 - Parameter 'actionGroup' implicitly has an 'any' type.
        actionItemGroups.forEach((actionGroup)=>{
            clearActionGroupStyles({
                actionGroup,
                event,
                elementApi
            });
        });
        continuousParameterGroups && // @ts-expect-error - TS7006 - Parameter 'paramGroup' implicitly has an 'any' type.
        continuousParameterGroups.forEach((paramGroup)=>{
            const { continuousActionGroups } = paramGroup;
            // @ts-expect-error - TS7006 - Parameter 'actionGroup' implicitly has an 'any' type.
            continuousActionGroups.forEach((actionGroup)=>{
                clearActionGroupStyles({
                    actionGroup,
                    event,
                    elementApi
                });
            });
        });
    }
    // @ts-expect-error - TS7031 - Binding element 'actionGroup' implicitly has an 'any' type. | TS7031 - Binding element 'event' implicitly has an 'any' type. | TS7031 - Binding element 'elementApi' implicitly has an 'any' type.
    function clearActionGroupStyles({ actionGroup, event, elementApi }) {
        const { actionItems } = actionGroup;
        // @ts-expect-error - TS7006 - Parameter 'actionItem' implicitly has an 'any' type.
        actionItems.forEach((actionItem)=>{
            const { actionTypeId, config } = actionItem;
            let clearElement;
            if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) {
                // @ts-expect-error - TS7006 - Parameter 'ref' implicitly has an 'any' type.
                clearElement = (ref)=>(0, _IX2VanillaPlugins.clearPlugin)(actionTypeId)(ref, actionItem);
            } else {
                clearElement = processElementByType({
                    effect: clearStyleProp,
                    actionTypeId,
                    elementApi
                });
            }
            getAffectedElements({
                config,
                event,
                elementApi
            }).forEach(clearElement);
        });
    }
    function cleanupHTMLElement(element, actionItem, elementApi) {
        const { setStyle, getStyle } = elementApi;
        const { actionTypeId } = actionItem;
        if (actionTypeId === STYLE_SIZE) {
            const { config } = actionItem;
            if (config.widthUnit === AUTO) {
                setStyle(element, WIDTH, '');
            }
            if (config.heightUnit === AUTO) {
                setStyle(element, HEIGHT, '');
            }
        }
        if (getStyle(element, WILL_CHANGE)) {
            processElementByType({
                effect: removeWillChange,
                actionTypeId,
                elementApi
            })(element);
        }
    }
    const processElementByType = ({ effect, actionTypeId, elementApi })=>// @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type.
        (element)=>{
            switch(actionTypeId){
                case TRANSFORM_MOVE:
                case TRANSFORM_SCALE:
                case TRANSFORM_ROTATE:
                case TRANSFORM_SKEW:
                    effect(element, _IX2BrowserSupport.TRANSFORM_PREFIXED, elementApi);
                    break;
                case STYLE_FILTER:
                    effect(element, FILTER, elementApi);
                    break;
                case STYLE_FONT_VARIATION:
                    effect(element, FONT_VARIATION_SETTINGS, elementApi);
                    break;
                case STYLE_OPACITY:
                    effect(element, OPACITY, elementApi);
                    break;
                case STYLE_SIZE:
                    effect(element, WIDTH, elementApi);
                    effect(element, HEIGHT, elementApi);
                    break;
                case STYLE_BACKGROUND_COLOR:
                case STYLE_BORDER:
                case STYLE_TEXT_COLOR:
                    effect(element, colorStyleProps[actionTypeId], elementApi);
                    break;
                case GENERAL_DISPLAY:
                    effect(element, DISPLAY, elementApi);
                    break;
            }
        };
    // @ts-expect-error - TS7006 - Parameter 'prop' implicitly has an 'any' type.
    function clearStyleProp(element, prop, elementApi) {
        const { setStyle } = elementApi;
        removeWillChange(element, prop, elementApi);
        setStyle(element, prop, '');
        // Clear transform-style: preserve-3d
        if (prop === _IX2BrowserSupport.TRANSFORM_PREFIXED) {
            setStyle(element, _IX2BrowserSupport.TRANSFORM_STYLE_PREFIXED, '');
        }
    }
    function getMaxDurationItemIndex(actionItems) {
        let maxDuration = 0;
        let resultIndex = 0;
        // @ts-expect-error - TS7006 - Parameter 'actionItem' implicitly has an 'any' type. | TS7006 - Parameter 'index' implicitly has an 'any' type.
        actionItems.forEach((actionItem, index)=>{
            const { config } = actionItem;
            const total = config.delay + config.duration;
            if (total >= maxDuration) {
                maxDuration = total;
                resultIndex = index;
            }
        });
        return resultIndex;
    }
    function getActionListProgress(actionList, instance) {
        const { actionItemGroups, useFirstGroupAsInitialState } = actionList;
        const { actionItem: instanceItem, verboseTimeElapsed = 0 } = instance;
        let totalDuration = 0;
        let elapsedDuration = 0;
        // @ts-expect-error - TS7006 - Parameter 'group' implicitly has an 'any' type. | TS7006 - Parameter 'index' implicitly has an 'any' type.
        actionItemGroups.forEach((group, index)=>{
            if (useFirstGroupAsInitialState && index === 0) {
                return;
            }
            const { actionItems } = group;
            const carrierItem = actionItems[getMaxDurationItemIndex(actionItems)];
            const { config, actionTypeId } = carrierItem;
            if (instanceItem.id === carrierItem.id) {
                elapsedDuration = totalDuration + verboseTimeElapsed;
            }
            const duration = getRenderType(actionTypeId) === RENDER_GENERAL ? 0 : config.duration;
            totalDuration += config.delay + duration;
        });
        return totalDuration > 0 ? (0, _IX2EasingUtils.optimizeFloat)(elapsedDuration / totalDuration) : 0;
    }
    function reduceListToGroup({ actionList, actionItemId, rawData }) {
        // @ts-expect-error - FIXME - TS2339 - Property 'actionItemGroups' does not exist on type 'ActionListType'.
        const { actionItemGroups, continuousParameterGroups } = actionList;
        const newActionItems = [];
        const takeItemUntilMatch = (actionItem)=>{
            newActionItems.push((0, _timm.mergeIn)(actionItem, [
                'config'
            ], {
                delay: 0,
                duration: 0
            }));
            return actionItem.id === actionItemId;
        };
        actionItemGroups && actionItemGroups.some(({ actionItems })=>{
            return actionItems.some(takeItemUntilMatch);
        });
        continuousParameterGroups && continuousParameterGroups.some((paramGroup)=>{
            const { continuousActionGroups } = paramGroup;
            return continuousActionGroups.some(({ actionItems })=>{
                return actionItems.some(takeItemUntilMatch);
            });
        });
        return (0, _timm.setIn)(rawData, [
            'actionLists'
        ], {
            [actionList.id]: {
                id: actionList.id,
                actionItemGroups: [
                    {
                        actionItems: newActionItems
                    }
                ]
            }
        });
    }
    function shouldNamespaceEventParameter(eventTypeId, { basedOn }) {
        return eventTypeId === _sharedconstants.EventTypeConsts.SCROLLING_IN_VIEW && (basedOn === _sharedconstants.EventBasedOn.ELEMENT || basedOn == null) || eventTypeId === _sharedconstants.EventTypeConsts.MOUSE_MOVE && basedOn === _sharedconstants.EventBasedOn.ELEMENT;
    }
    function getNamespacedParameterId(eventStateKey, continuousParameterGroupId) {
        const namespacedParameterId = eventStateKey + COLON_DELIMITER + continuousParameterGroupId;
        return namespacedParameterId;
    }
    function shouldAllowMediaQuery(mediaQueries, mediaQueryKey) {
        // During design mode, current media query key does not exist
        if (mediaQueryKey == null) {
            return true;
        }
        return mediaQueries.indexOf(mediaQueryKey) !== -1;
    }
    function mediaQueriesEqual(listA, listB) {
        return (0, _shallowEqual.default)(listA && listA.sort(), listB && listB.sort());
    }
    function stringifyTarget(target) {
        if (typeof target === 'string') {
            return target;
        }
        if (target.pluginElement && target.objectId) {
            return target.pluginElement + BAR_DELIMITER + target.objectId;
        }
        if (target.objectId) {
            return target.objectId;
        }
        const { id = '', selector = '', useEventTarget = '' } = target;
        return id + BAR_DELIMITER + selector + BAR_DELIMITER + useEventTarget;
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    57164: (function (__unused_webpack_module, exports) {
    "use strict";
    // from https://github.com/acdlite/recompose/blob/master/src/packages/recompose/shallowEqual.js
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @providesModule shallowEqual
     * @typechecks
     */ /* eslint-disable no-self-compare */ /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "default", ({
        enumerable: true,
        get: function() {
            return _default;
        }
    }));
    function is(x, y) {
        // SameValue algorithm
        if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            // Added the nonzero y check to make Flow happy, but it is redundant
            return x !== 0 || y !== 0 || 1 / x === 1 / y;
        }
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */ function shallowEqual(objA, objB) {
        if (is(objA, objB)) {
            return true;
        }
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
        }
        const keysA = Object.keys(objA);
        const keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
            return false;
        }
        // Test for A's keys different from B.
        for(let i = 0; i < keysA.length; i++){
            if (!Object.hasOwn(objB, // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'PropertyKey'.
            keysA[i]) || // @ts-expect-error - TS2538 - Type 'undefined' cannot be used as an index type. | TS2538 - Type 'undefined' cannot be used as an index type.
            !is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }
        return true;
    }
    const _default = shallowEqual;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYWxsb3dFcXVhbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hY2RsaXRlL3JlY29tcG9zZS9ibG9iL21hc3Rlci9zcmMvcGFja2FnZXMvcmVjb21wb3NlL3NoYWxsb3dFcXVhbC5qc1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHg6IG51bWJlciB8IFJlY29yZDxhbnksIGFueT4sIHk6IG51bWJlciB8IFJlY29yZDxhbnksIGFueT4pIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfVxuICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBOiBSZWNvcmQ8YW55LCBhbnk+LCBvYmpCOiBSZWNvcmQ8YW55LCBhbnk+KTogYm9vbGVhbiB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fFxuICAgIG9iakEgPT09IG51bGwgfHxcbiAgICB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHxcbiAgICBvYmpCID09PSBudWxsXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChcbiAgICAgICFPYmplY3QuaGFzT3duKFxuICAgICAgICBvYmpCLFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzQ1IC0gQXJndW1lbnQgb2YgdHlwZSAnc3RyaW5nIHwgdW5kZWZpbmVkJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnUHJvcGVydHlLZXknLlxuICAgICAgICBrZXlzQVtpXVxuICAgICAgKSB8fFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjUzOCAtIFR5cGUgJ3VuZGVmaW5lZCcgY2Fubm90IGJlIHVzZWQgYXMgYW4gaW5kZXggdHlwZS4gfCBUUzI1MzggLSBUeXBlICd1bmRlZmluZWQnIGNhbm5vdCBiZSB1c2VkIGFzIGFuIGluZGV4IHR5cGUuXG4gICAgICAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaGFsbG93RXF1YWw7XG4iXSwibmFtZXMiOlsiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJPYmplY3QiLCJrZXlzIiwia2V5c0IiLCJsZW5ndGgiLCJpIiwiaGFzT3duIl0sIm1hcHBpbmdzIjoiQUFBQSwrRkFBK0Y7QUFFL0Y7Ozs7Ozs7O0NBUUMsR0FFRCxrQ0FBa0MsR0FFbEM7OztDQUdDOzs7OytCQXlERDs7O2VBQUE7OztBQXhEQSxTQUFTQSxHQUFHQyxDQUE0QixFQUFFQyxDQUE0QjtJQUNwRSxzQkFBc0I7SUFDdEIsSUFBSUQsTUFBTUMsR0FBRztRQUNYLGtCQUFrQjtRQUNsQiwwQkFBMEI7UUFDMUIsb0VBQW9FO1FBQ3BFLE9BQU9ELE1BQU0sS0FBS0MsTUFBTSxLQUFLLElBQUlELE1BQU0sSUFBSUM7SUFDN0M7SUFDQSx1QkFBdUI7SUFDdkIsT0FBT0QsTUFBTUEsS0FBS0MsTUFBTUE7QUFDMUI7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0MsYUFBYUMsSUFBc0IsRUFBRUMsSUFBc0I7SUFDbEUsSUFBSUwsR0FBR0ksTUFBTUMsT0FBTztRQUNsQixPQUFPO0lBQ1Q7SUFFQSxJQUNFLE9BQU9ELFNBQVMsWUFDaEJBLFNBQVMsUUFDVCxPQUFPQyxTQUFTLFlBQ2hCQSxTQUFTLE1BQ1Q7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxNQUFNQyxRQUFRQyxPQUFPQyxJQUFJLENBQUNKO0lBQzFCLE1BQU1LLFFBQVFGLE9BQU9DLElBQUksQ0FBQ0g7SUFFMUIsSUFBSUMsTUFBTUksTUFBTSxLQUFLRCxNQUFNQyxNQUFNLEVBQUU7UUFDakMsT0FBTztJQUNUO0lBRUEsc0NBQXNDO0lBQ3RDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxNQUFNSSxNQUFNLEVBQUVDLElBQUs7UUFDckMsSUFDRSxDQUFDSixPQUFPSyxNQUFNLENBQ1pQLE1BQ0EsMEhBQTBIO1FBQzFIQyxLQUFLLENBQUNLLEVBQUUsS0FFViw2SUFBNkk7UUFDN0ksQ0FBQ1gsR0FBR0ksSUFBSSxDQUFDRSxLQUFLLENBQUNLLEVBQUUsQ0FBQyxFQUFFTixJQUFJLENBQUNDLEtBQUssQ0FBQ0ssRUFBRSxDQUFDLEdBQ2xDO1lBQ0EsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1Q7TUFFQSxXQUFlUiJ9
    
    }),
    85861: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        createElementState: function() {
            return createElementState;
        },
        ixElements: function() {
            return ixElements;
        },
        mergeActionState: function() {
            return mergeActionState;
        }
    });
    const _timm = __webpack_require__(81185);
    const _sharedconstants = __webpack_require__(7087);
    const { HTML_ELEMENT, PLAIN_OBJECT, ABSTRACT_NODE, CONFIG_X_VALUE, CONFIG_Y_VALUE, CONFIG_Z_VALUE, CONFIG_VALUE, CONFIG_X_UNIT, CONFIG_Y_UNIT, CONFIG_Z_UNIT, CONFIG_UNIT } = _sharedconstants.IX2EngineConstants;
    const { IX2_SESSION_STOPPED, IX2_INSTANCE_ADDED, IX2_ELEMENT_STATE_CHANGED } = _sharedconstants.IX2EngineActionTypes;
    const initialState = {};
    const refState = 'refState';
    const ixElements = (state = initialState, action = {})=>{
        switch(action.type){
            case IX2_SESSION_STOPPED:
                {
                    return initialState;
                }
            case IX2_INSTANCE_ADDED:
                {
                    const { elementId, element: ref, origin, actionItem, refType } = action.payload;
                    const { actionTypeId } = actionItem;
                    let newState = state;
                    // Create new ref entry if it doesn't exist
                    if ((0, _timm.getIn)(newState, [
                        elementId,
                        ref
                    ]) !== ref) {
                        newState = createElementState(newState, ref, refType, elementId, actionItem);
                    }
                    // Merge origin values into ref state
                    return mergeActionState(newState, elementId, actionTypeId, origin, actionItem);
                }
            case IX2_ELEMENT_STATE_CHANGED:
                {
                    const { elementId, actionTypeId, current, actionItem } = action.payload;
                    return mergeActionState(state, elementId, actionTypeId, current, actionItem);
                }
            default:
                {
                    return state;
                }
        }
    };
    function createElementState(state, ref, refType, elementId, actionItem) {
        const refId = refType === PLAIN_OBJECT ? (0, _timm.getIn)(actionItem, [
            'config',
            'target',
            'objectId'
        ]) : null;
        return (0, _timm.mergeIn)(state, [
            elementId
        ], {
            id: elementId,
            ref,
            refId,
            refType
        });
    }
    function mergeActionState(state, elementId, actionTypeId, actionState, actionItem) {
        const units = pickUnits(actionItem);
        const mergePath = [
            elementId,
            refState,
            actionTypeId
        ];
        return (0, _timm.mergeIn)(state, mergePath, actionState, units);
    }
    const valueUnitPairs = [
        [
            CONFIG_X_VALUE,
            CONFIG_X_UNIT
        ],
        [
            CONFIG_Y_VALUE,
            CONFIG_Y_UNIT
        ],
        [
            CONFIG_Z_VALUE,
            CONFIG_Z_UNIT
        ],
        [
            CONFIG_VALUE,
            CONFIG_UNIT
        ]
    ];
    function pickUnits(actionItem) {
        const { config } = actionItem;
        return valueUnitPairs.reduce((result, pair)=>{
            const valueKey = pair[0];
            const unitKey = pair[1];
            // @ts-expect-error - TS2538 - Type 'undefined' cannot be used as an index type.
            const configValue = config[valueKey];
            // @ts-expect-error - TS2538 - Type 'undefined' cannot be used as an index type.
            const configUnit = config[unitKey];
            if (configValue != null && configUnit != null) {
                // @ts-expect-error - TS2538 - Type 'undefined' cannot be used as an index type.
                result[unitKey] = configUnit;
            }
            return result;
        }, {});
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    82216: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        BREAKPOINT_ID_LARGE: function() {
            return BREAKPOINT_ID_LARGE;
        },
        BREAKPOINT_ID_MAIN: function() {
            return BREAKPOINT_ID_MAIN;
        },
        BREAKPOINT_ID_MEDIUM: function() {
            return BREAKPOINT_ID_MEDIUM;
        },
        BREAKPOINT_ID_SMALL: function() {
            return BREAKPOINT_ID_SMALL;
        },
        BREAKPOINT_ID_TINY: function() {
            return BREAKPOINT_ID_TINY;
        },
        BREAKPOINT_ID_XL: function() {
            return BREAKPOINT_ID_XL;
        },
        BREAKPOINT_ID_XXL: function() {
            return BREAKPOINT_ID_XXL;
        },
        DEFAULT_BREAKPOINT_IDS: function() {
            return DEFAULT_BREAKPOINT_IDS;
        },
        LARGER_BREAKPOINT_IDS: function() {
            return LARGER_BREAKPOINT_IDS;
        }
    });
    const BREAKPOINT_ID_XXL = 'xxl';
    const BREAKPOINT_ID_XL = 'xl';
    const BREAKPOINT_ID_LARGE = 'large';
    const BREAKPOINT_ID_MAIN = 'main';
    const BREAKPOINT_ID_MEDIUM = 'medium';
    const BREAKPOINT_ID_SMALL = 'small';
    const BREAKPOINT_ID_TINY = 'tiny';
    const DEFAULT_BREAKPOINT_IDS = [
        BREAKPOINT_ID_MAIN,
        BREAKPOINT_ID_MEDIUM,
        BREAKPOINT_ID_SMALL,
        BREAKPOINT_ID_TINY
    ];
    const LARGER_BREAKPOINT_IDS = [
        BREAKPOINT_ID_LARGE,
        BREAKPOINT_ID_XL,
        BREAKPOINT_ID_XXL
    ];
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtCcmVha3BvaW50SUR9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3N0eWxlL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IEJSRUFLUE9JTlRfSURfWFhMID0gJ3h4bCcgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9YTCA9ICd4bCcgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9MQVJHRSA9ICdsYXJnZScgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9NQUlOID0gJ21haW4nIGFzIGNvbnN0O1xuZXhwb3J0IGNvbnN0IEJSRUFLUE9JTlRfSURfTUVESVVNID0gJ21lZGl1bScgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9TTUFMTCA9ICdzbWFsbCcgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9USU5ZID0gJ3RpbnknIGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9CUkVBS1BPSU5UX0lEUyA9IFtcbiAgQlJFQUtQT0lOVF9JRF9NQUlOLFxuICBCUkVBS1BPSU5UX0lEX01FRElVTSxcbiAgQlJFQUtQT0lOVF9JRF9TTUFMTCxcbiAgQlJFQUtQT0lOVF9JRF9USU5ZLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IExBUkdFUl9CUkVBS1BPSU5UX0lEUzogQnJlYWtwb2ludElEW10gPSBbXG4gIEJSRUFLUE9JTlRfSURfTEFSR0UsXG4gIEJSRUFLUE9JTlRfSURfWEwsXG4gIEJSRUFLUE9JTlRfSURfWFhMLFxuXTtcbiJdLCJuYW1lcyI6WyJCUkVBS1BPSU5UX0lEX0xBUkdFIiwiQlJFQUtQT0lOVF9JRF9NQUlOIiwiQlJFQUtQT0lOVF9JRF9NRURJVU0iLCJCUkVBS1BPSU5UX0lEX1NNQUxMIiwiQlJFQUtQT0lOVF9JRF9USU5ZIiwiQlJFQUtQT0lOVF9JRF9YTCIsIkJSRUFLUE9JTlRfSURfWFhMIiwiREVGQVVMVF9CUkVBS1BPSU5UX0lEUyIsIkxBUkdFUl9CUkVBS1BPSU5UX0lEUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFJYUEsbUJBQW1CO2VBQW5CQTs7SUFDQUMsa0JBQWtCO2VBQWxCQTs7SUFDQUMsb0JBQW9CO2VBQXBCQTs7SUFDQUMsbUJBQW1CO2VBQW5CQTs7SUFDQUMsa0JBQWtCO2VBQWxCQTs7SUFMQUMsZ0JBQWdCO2VBQWhCQTs7SUFEQUMsaUJBQWlCO2VBQWpCQTs7SUFRQUMsc0JBQXNCO2VBQXRCQTs7SUFPQUMscUJBQXFCO2VBQXJCQTs7O0FBZk4sTUFBTUYsb0JBQW9CO0FBQzFCLE1BQU1ELG1CQUFtQjtBQUN6QixNQUFNTCxzQkFBc0I7QUFDNUIsTUFBTUMscUJBQXFCO0FBQzNCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMscUJBQXFCO0FBRTNCLE1BQU1HLHlCQUF5QjtJQUNwQ047SUFDQUM7SUFDQUM7SUFDQUM7Q0FDRDtBQUVNLE1BQU1JLHdCQUF3QztJQUNuRFI7SUFDQUs7SUFDQUM7Q0FDRCJ9
    
    }),
    66725: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        DEFAULT_BREAKPOINTS_CONFIG: function() {
            return DEFAULT_BREAKPOINTS_CONFIG;
        },
        LARGER_BREAKPOINTS_CONFIG: function() {
            return LARGER_BREAKPOINTS_CONFIG;
        }
    });
    const _breakpointids = __webpack_require__(82216);
    const DEFAULT_BREAKPOINTS_CONFIG = {
        [_breakpointids.BREAKPOINT_ID_MAIN]: {
            maxWidth: 10000
        },
        [_breakpointids.BREAKPOINT_ID_MEDIUM]: {
            maxWidth: 991
        },
        [_breakpointids.BREAKPOINT_ID_SMALL]: {
            maxWidth: 767
        },
        [_breakpointids.BREAKPOINT_ID_TINY]: {
            maxWidth: 479
        }
    };
    const LARGER_BREAKPOINTS_CONFIG = {
        [_breakpointids.BREAKPOINT_ID_MAIN]: {
            maxWidth: 10000
        },
        [_breakpointids.BREAKPOINT_ID_XXL]: {
            minWidth: 1920
        },
        [_breakpointids.BREAKPOINT_ID_XL]: {
            minWidth: 1440
        },
        [_breakpointids.BREAKPOINT_ID_LARGE]: {
            minWidth: 1280
        },
        [_breakpointids.BREAKPOINT_ID_MEDIUM]: {
            maxWidth: 991
        },
        [_breakpointids.BREAKPOINT_ID_SMALL]: {
            maxWidth: 767
        },
        [_breakpointids.BREAKPOINT_ID_TINY]: {
            maxWidth: 479
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJSRUFLUE9JTlRfSURfWFhMLFxuICBCUkVBS1BPSU5UX0lEX1hMLFxuICBCUkVBS1BPSU5UX0lEX0xBUkdFLFxuICBCUkVBS1BPSU5UX0lEX01BSU4sXG4gIEJSRUFLUE9JTlRfSURfTUVESVVNLFxuICBCUkVBS1BPSU5UX0lEX1NNQUxMLFxuICBCUkVBS1BPSU5UX0lEX1RJTlksXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3N0eWxlL2JyZWFrcG9pbnQtaWRzJztcbmltcG9ydCB0eXBlIHtCcmVha3BvaW50c0NvbmZpZ30gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvc3R5bGUvdHlwZXMnO1xuXG4vKlxuICogRGF0YSB1c2VkIHRvIHN0b3JlIGJyZWFrcG9pbnRzIGluIHRoZSBiYWNrZW5kLlxuICovXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0JSRUFLUE9JTlRTX0NPTkZJRzogQnJlYWtwb2ludHNDb25maWcgPSB7XG4gIFtCUkVBS1BPSU5UX0lEX01BSU5dOiB7XG4gICAgbWF4V2lkdGg6IDEwMDAwLFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9NRURJVU1dOiB7XG4gICAgbWF4V2lkdGg6IDk5MSxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfU01BTExdOiB7XG4gICAgbWF4V2lkdGg6IDc2NyxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfVElOWV06IHtcbiAgICBtYXhXaWR0aDogNDc5LFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IExBUkdFUl9CUkVBS1BPSU5UU19DT05GSUc6IEJyZWFrcG9pbnRzQ29uZmlnID0ge1xuICBbQlJFQUtQT0lOVF9JRF9NQUlOXToge1xuICAgIG1heFdpZHRoOiAxMDAwMCxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfWFhMXToge1xuICAgIG1pbldpZHRoOiAxOTIwLFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9YTF06IHtcbiAgICBtaW5XaWR0aDogMTQ0MCxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfTEFSR0VdOiB7XG4gICAgbWluV2lkdGg6IDEyODAsXG4gIH0sXG4gIFtCUkVBS1BPSU5UX0lEX01FRElVTV06IHtcbiAgICBtYXhXaWR0aDogOTkxLFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9TTUFMTF06IHtcbiAgICBtYXhXaWR0aDogNzY3LFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9USU5ZXToge1xuICAgIG1heFdpZHRoOiA0NzksXG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbIkRFRkFVTFRfQlJFQUtQT0lOVFNfQ09ORklHIiwiTEFSR0VSX0JSRUFLUE9JTlRTX0NPTkZJRyIsIkJSRUFLUE9JTlRfSURfTUFJTiIsIm1heFdpZHRoIiwiQlJFQUtQT0lOVF9JRF9NRURJVU0iLCJCUkVBS1BPSU5UX0lEX1NNQUxMIiwiQlJFQUtQT0lOVF9JRF9USU5ZIiwiQlJFQUtQT0lOVF9JRF9YWEwiLCJtaW5XaWR0aCIsIkJSRUFLUE9JTlRfSURfWEwiLCJCUkVBS1BPSU5UX0lEX0xBUkdFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWVhQSwwQkFBMEI7ZUFBMUJBOztJQWVBQyx5QkFBeUI7ZUFBekJBOzs7K0JBdEJOO0FBT0EsTUFBTUQsNkJBQWdEO0lBQzNELENBQUNFLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJDLFVBQVU7SUFDWjtJQUNBLENBQUNDLG1DQUFvQixDQUFDLEVBQUU7UUFDdEJELFVBQVU7SUFDWjtJQUNBLENBQUNFLGtDQUFtQixDQUFDLEVBQUU7UUFDckJGLFVBQVU7SUFDWjtJQUNBLENBQUNHLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJILFVBQVU7SUFDWjtBQUNGO0FBRU8sTUFBTUYsNEJBQStDO0lBQzFELENBQUNDLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJDLFVBQVU7SUFDWjtJQUNBLENBQUNJLGdDQUFpQixDQUFDLEVBQUU7UUFDbkJDLFVBQVU7SUFDWjtJQUNBLENBQUNDLCtCQUFnQixDQUFDLEVBQUU7UUFDbEJELFVBQVU7SUFDWjtJQUNBLENBQUNFLGtDQUFtQixDQUFDLEVBQUU7UUFDckJGLFVBQVU7SUFDWjtJQUNBLENBQUNKLG1DQUFvQixDQUFDLEVBQUU7UUFDdEJELFVBQVU7SUFDWjtJQUNBLENBQUNFLGtDQUFtQixDQUFDLEVBQUU7UUFDckJGLFVBQVU7SUFDWjtJQUNBLENBQUNHLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJILFVBQVU7SUFDWjtBQUNGIn0=
    
    }),
    33001: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ERROR_ATTRIBUTE_PREFIX: function() {
            return ERROR_ATTRIBUTE_PREFIX;
        },
        ERROR_MSG_CLASS: function() {
            return ERROR_MSG_CLASS;
        },
        ERROR_STATE: function() {
            return ERROR_STATE;
        },
        ErrorStateToCopy: function() {
            return ErrorStateToCopy;
        },
        FORM_GENERIC_ERROR_PATH: function() {
            return FORM_GENERIC_ERROR_PATH;
        },
        FORM_REQUIRED_ERROR_PATH: function() {
            return FORM_REQUIRED_ERROR_PATH;
        },
        FORM_TOO_LARGE_ERROR_PATH: function() {
            return FORM_TOO_LARGE_ERROR_PATH;
        },
        FORM_TOO_SMALL_ERROR_PATH: function() {
            return FORM_TOO_SMALL_ERROR_PATH;
        },
        FORM_TYPE_ERROR_PATH: function() {
            return FORM_TYPE_ERROR_PATH;
        },
        LOGIN_UI_ERROR_CODES: function() {
            return LOGIN_UI_ERROR_CODES;
        },
        RESET_PASSWORD_UI_ERROR_CODES: function() {
            return RESET_PASSWORD_UI_ERROR_CODES;
        },
        SERVER_DATA_VALIDATION_ERRORS: function() {
            return SERVER_DATA_VALIDATION_ERRORS;
        },
        SIGNUP_ERROR_CATEGORY: function() {
            return SIGNUP_ERROR_CATEGORY;
        },
        SIGNUP_UI_ERROR_CODES: function() {
            return SIGNUP_UI_ERROR_CODES;
        },
        UPDATE_ACCOUNT_ERROR_CODES: function() {
            return UPDATE_ACCOUNT_ERROR_CODES;
        },
        UPDATE_PASSWORD_UI_ERROR_CODES: function() {
            return UPDATE_PASSWORD_UI_ERROR_CODES;
        },
        USER_FILE_UPLOAD_ERRORS: function() {
            return USER_FILE_UPLOAD_ERRORS;
        },
        __DEPRECATED__logInErrorStates: function() {
            return __DEPRECATED__logInErrorStates;
        },
        logInErrorStates: function() {
            return logInErrorStates;
        },
        resetPasswordErrorStates: function() {
            return resetPasswordErrorStates;
        },
        signUpErrorStates: function() {
            return signUpErrorStates;
        },
        updateAccountErrorStates: function() {
            return updateAccountErrorStates;
        },
        updatePasswordErrorStates: function() {
            return updatePasswordErrorStates;
        }
    });
    const ERROR_MSG_CLASS = 'user-form-error-msg';
    const ERROR_STATE = {
        SIGNUP: 'signup-error-state',
        LOGIN: 'login-error-state',
        UPDATE_PASSWORD: 'update-password-error-state',
        RESET_PASSWORD: 'reset-password-error-state',
        ACCOUNT_UPDATE: 'account-update-error-state'
    };
    const ErrorStateToCopy = (errorStateType, id)=>{
        if (errorStateType === 'signup-error-state') {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR" | "NOT_ALLOWED" | "NOT_VERIFIED" | "EMAIL_ALREADY_EXIST" | "USE_INVITE_EMAIL" | "INVALID_EMAIL" | "INVALID_PASSWORD" | "EXPIRED_TOKEN" | "VALIDATION_FAILED" | "REQUIRED", ErrorStateType>>'.
            return signUpErrorStates[id]?.copy ?? null;
        }
        if (errorStateType === 'login-error-state') {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR" | "INVALID_EMAIL_OR_PASSWORD", ErrorStateType>>'.
            return logInErrorStates[id]?.copy ?? null;
        }
        if (errorStateType === 'update-password-error-state') {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR" | "WEAK_PASSWORD", ErrorStateType>>'.
            return updatePasswordErrorStates[id]?.copy ?? null;
        }
        if (errorStateType === 'reset-password-error-state') {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR", ErrorStateType>>'.
            return resetPasswordErrorStates[id]?.copy ?? null;
        }
        if (errorStateType === 'account-update-error-state') {
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR", ErrorStateType>>'.
            return updateAccountErrorStates[id]?.copy ?? null;
        }
        console.error(`copy for ${errorStateType} not found`);
        return null;
    };
    const SERVER_DATA_VALIDATION_ERRORS = {
        RequiredError: 'EmptyValue',
        MinSizeError: 'MinSizeError',
        MaxSizeError: 'MaxSizeError',
        ExtensionsError: 'ExtensionsError',
        DefaultError: 'DefaultError'
    };
    const LOGIN_UI_ERROR_CODES = {
        GENERAL_ERROR: 'GENERAL_ERROR',
        INVALID_EMAIL_OR_PASSWORD: 'INVALID_EMAIL_OR_PASSWORD'
    };
    const SIGNUP_UI_ERROR_CODES = {
        GENERAL_ERROR: 'GENERAL_ERROR',
        NOT_ALLOWED: 'NOT_ALLOWED',
        NOT_VERIFIED: 'NOT_VERIFIED',
        EMAIL_ALREADY_EXIST: 'EMAIL_ALREADY_EXIST',
        USE_INVITE_EMAIL: 'USE_INVITE_EMAIL',
        INVALID_EMAIL: 'INVALID_EMAIL',
        INVALID_PASSWORD: 'INVALID_PASSWORD',
        EXPIRED_TOKEN: 'EXPIRED_TOKEN',
        VALIDATION_FAILED: 'VALIDATION_FAILED',
        REQUIRED: 'REQUIRED'
    };
    const ERROR_ATTRIBUTE_PREFIX = {
        SIGNUP: 'wf-signup-form',
        LOGIN: 'wf-login-form',
        RESET_PASSWORD: 'wf-reset-pw-form',
        UPDATE_PASSWORD: 'wf-update-pw-form',
        ACCOUNT_UPDATE: 'wf-account-update-form'
    };
    const UPDATE_PASSWORD_UI_ERROR_CODES = {
        GENERAL_ERROR: 'GENERAL_ERROR',
        WEAK_PASSWORD: 'WEAK_PASSWORD'
    };
    const RESET_PASSWORD_UI_ERROR_CODES = {
        GENERAL_ERROR: 'GENERAL_ERROR'
    };
    const TOO_LARGE_ERR = 'TOO_LARGE_ERROR';
    const TOO_SMALL_ERR = 'TOO_SMALL_ERROR';
    const TYPE_ERR = 'TYPE_ERROR';
    const GENERIC_ERR = 'GENERIC_ERROR';
    const REQUIRED_ERR = 'REQUIRED_ERROR';
    const USER_FILE_UPLOAD_ERRORS = {
        GENERIC: {
            id: GENERIC_ERR,
            msg: 'Upload failed. Something went wrong. Please retry.',
            path: [
                'data',
                'form',
                GENERIC_ERR
            ]
        },
        TOO_LARGE: {
            id: TOO_LARGE_ERR,
            msg: 'Upload failed. File too large.',
            path: [
                'data',
                'form',
                TOO_LARGE_ERR
            ]
        },
        TOO_SMALL: {
            id: TOO_SMALL_ERR,
            msg: 'Upload failed. File too small.',
            path: [
                'data',
                'form',
                TOO_SMALL_ERR
            ]
        },
        TYPE: {
            id: TYPE_ERR,
            msg: 'Upload failed. Invalid file type.',
            path: [
                'data',
                'form',
                TYPE_ERR
            ]
        },
        REQUIRED: {
            id: REQUIRED_ERR,
            msg: 'Please upload a file.',
            path: [
                'data',
                'form',
                REQUIRED_ERR
            ]
        }
    };
    const FORM_PATH = [
        {
            in: 'Record',
            at: 'form'
        }
    ];
    const FORM_TOO_LARGE_ERROR_PATH = [
        ...FORM_PATH,
        {
            in: 'Record',
            at: TOO_LARGE_ERR
        }
    ];
    const FORM_TOO_SMALL_ERROR_PATH = [
        ...FORM_PATH,
        {
            in: 'Record',
            at: TOO_SMALL_ERR
        }
    ];
    const FORM_TYPE_ERROR_PATH = [
        ...FORM_PATH,
        {
            in: 'Record',
            at: TYPE_ERR
        }
    ];
    const FORM_GENERIC_ERROR_PATH = [
        ...FORM_PATH,
        {
            in: 'Record',
            at: GENERIC_ERR
        }
    ];
    const FORM_REQUIRED_ERROR_PATH = [
        ...FORM_PATH,
        {
            in: 'Record',
            at: REQUIRED_ERR
        }
    ];
    const __DEPRECATED__logInErrorStates = {
        [LOGIN_UI_ERROR_CODES.GENERAL_ERROR]: {
            id: LOGIN_UI_ERROR_CODES.GENERAL_ERROR,
            name: 'General error',
            copy: "We're having trouble logging you in. Please try again, or contact us if you continue to have problems.",
            path: [
                'data',
                'users',
                LOGIN_UI_ERROR_CODES.GENERAL_ERROR
            ]
        }
    };
    const logInErrorStates = {
        [LOGIN_UI_ERROR_CODES.GENERAL_ERROR]: {
            id: LOGIN_UI_ERROR_CODES.GENERAL_ERROR,
            name: 'General error',
            copy: "We're having trouble logging you in. Please try again, or contact us if you continue to have problems.",
            path: [
                'data',
                'users',
                LOGIN_UI_ERROR_CODES.GENERAL_ERROR
            ]
        },
        [LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD]: {
            id: LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD,
            name: 'Wrong email or password',
            copy: 'Invalid email or password. Please try again.',
            path: [
                'data',
                'users',
                LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD
            ]
        }
    };
    const SIGNUP_ERROR_CATEGORY = {
        GENERAL: {
            id: 'GENERAL',
            label: 'General Errors'
        },
        EMAIL: {
            id: 'EMAIL',
            label: 'Email Errors'
        },
        PASSWORD: {
            id: 'PASSWORD',
            label: 'Password Errors'
        },
        INVITE: {
            id: 'INVITE',
            label: 'Invitation Errors'
        },
        VERFIICATION: {
            id: 'VERIFCATION',
            label: 'Verification Errors'
        },
        VALIDATION: {
            id: 'VALIDATION',
            label: 'Validation Errors'
        }
    };
    const signUpErrorStates = {
        [SIGNUP_UI_ERROR_CODES.GENERAL_ERROR]: {
            id: SIGNUP_UI_ERROR_CODES.GENERAL_ERROR,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "GENERAL_ERROR"; category: { readonly id: "GENERAL"; readonly label: "General Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.GENERAL,
            name: 'General error',
            copy: 'There was an error signing you up. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.GENERAL_ERROR
            ]
        },
        [SIGNUP_UI_ERROR_CODES.NOT_ALLOWED]: {
            id: SIGNUP_UI_ERROR_CODES.NOT_ALLOWED,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "NOT_ALLOWED"; category: { readonly id: "EMAIL"; readonly label: "Email Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.EMAIL,
            name: 'Email not allowed',
            copy: "You're not allowed to access this site, please contact the admin for support.",
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.NOT_ALLOWED
            ]
        },
        // email errors
        [SIGNUP_UI_ERROR_CODES.INVALID_EMAIL]: {
            id: SIGNUP_UI_ERROR_CODES.INVALID_EMAIL,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "INVALID_EMAIL"; category: { readonly id: "EMAIL"; readonly label: "Email Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.EMAIL,
            name: 'Invalid email',
            copy: 'Make sure your email exists and is properly formatted (e.g., user@domain.com).',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.INVALID_EMAIL
            ]
        },
        [SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST]: {
            id: SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "EMAIL_ALREADY_EXIST"; category: { readonly id: "EMAIL"; readonly label: "Email Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.EMAIL,
            name: 'Email already exists',
            copy: 'An account with this email address already exists. Log in or reset your password.',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST
            ]
        },
        // invitation errors
        [SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL]: {
            id: SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "USE_INVITE_EMAIL"; category: { readonly id: "INVITE"; readonly label: "Invitation Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.INVITE,
            name: 'Must use invite email',
            copy: 'Use the same email address your invitation was sent to.',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL
            ]
        },
        // password errors
        [SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD]: {
            id: SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "INVALID_PASSWORD"; category: { readonly id: "PASSWORD"; readonly label: "Password Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.PASSWORD,
            name: 'Invalid password',
            copy: 'Your password must be at least 8 characters.',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD
            ]
        },
        // verification errors
        [SIGNUP_UI_ERROR_CODES.NOT_VERIFIED]: {
            id: SIGNUP_UI_ERROR_CODES.NOT_VERIFIED,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "NOT_VERIFIED"; category: { readonly id: "VERIFCATION"; readonly label: "Verification Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.VERFIICATION,
            name: 'Verification failed',
            copy: "We couldn't verify your account. Please try again, or contact us if you continue to have problems.",
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.NOT_VERIFIED
            ]
        },
        [SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN]: {
            id: SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "EXPIRED_TOKEN"; category: { readonly id: "VERIFCATION"; readonly label: "Verification Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.VERFIICATION,
            name: 'Verification expired',
            copy: 'This link has expired. A new link has been sent to your email. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN
            ]
        },
        [SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED]: {
            id: SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "VALIDATION_FAILED"; category: { readonly id: "VALIDATION"; readonly label: "Validation Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.VALIDATION,
            name: 'Validation error',
            copy: 'There was an error in some of the information provided.',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED
            ]
        },
        [SIGNUP_UI_ERROR_CODES.REQUIRED]: {
            id: SIGNUP_UI_ERROR_CODES.REQUIRED,
            // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "REQUIRED"; category: { readonly id: "VALIDATION"; readonly label: "Validation Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
            category: SIGNUP_ERROR_CATEGORY.VALIDATION,
            name: 'Missing information',
            copy: 'Fill out all required fields',
            path: [
                'data',
                'users',
                SIGNUP_UI_ERROR_CODES.REQUIRED
            ]
        }
    };
    const updatePasswordErrorStates = {
        [UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR]: {
            id: UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR,
            name: 'General error',
            copy: 'There was an error updating your password. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'users',
                UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR
            ]
        },
        [UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD]: {
            id: UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD,
            name: 'Weak password',
            copy: 'Your password must be at least 8 characters.',
            path: [
                'data',
                'users',
                UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD
            ]
        }
    };
    const resetPasswordErrorStates = {
        [RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR]: {
            id: RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR,
            name: 'General error',
            copy: 'There was an error resetting your password. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'users',
                RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR
            ]
        }
    };
    const UPDATE_ACCOUNT_ERROR_CODES = {
        GENERAL_ERROR: 'GENERAL_ERROR'
    };
    const updateAccountErrorStates = {
        [UPDATE_ACCOUNT_ERROR_CODES.GENERAL_ERROR]: {
            id: UPDATE_ACCOUNT_ERROR_CODES.GENERAL_ERROR,
            name: 'General error',
            copy: 'There was an error updating your account. Please try again, or contact us if you continue to have problems.',
            path: [
                'data',
                'users',
                UPDATE_ACCOUNT_ERROR_CODES.GENERAL_ERROR
            ]
        }
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    7462: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        ACCESS_GROUP_ADMISSION_TYPE: function() {
            return ACCESS_GROUP_ADMISSION_TYPE;
        },
        ACCESS_GROUP_FREE_TYPE: function() {
            return ACCESS_GROUP_FREE_TYPE;
        },
        ACCESS_GROUP_INLINE_PRODUCT_FIELD_SLUG: function() {
            return ACCESS_GROUP_INLINE_PRODUCT_FIELD_SLUG;
        },
        BASIC_MAX_NUM_USERS: function() {
            return BASIC_MAX_NUM_USERS;
        },
        BUSINESS_MAX_NUM_USERS: function() {
            return BUSINESS_MAX_NUM_USERS;
        },
        CONFIRM_UNSAVED_CHANGES_COPY: function() {
            return CONFIRM_UNSAVED_CHANGES_COPY;
        },
        DEFAULT_SESSION_DURATION_IN_MS: function() {
            return DEFAULT_SESSION_DURATION_IN_MS;
        },
        DEFAULT_SESSION_TOKEN_DURATION_IN_MS: function() {
            return DEFAULT_SESSION_TOKEN_DURATION_IN_MS;
        },
        DEFAULT_STYLES: function() {
            return DEFAULT_STYLES;
        },
        DEFAULT_TOKEN_AGE_MS: function() {
            return DEFAULT_TOKEN_AGE_MS;
        },
        DEFAULT_USER_FIELDS: function() {
            return DEFAULT_USER_FIELDS;
        },
        ECOMM_PLUS_MAX_NUM_USERS: function() {
            return ECOMM_PLUS_MAX_NUM_USERS;
        },
        ECOMM_STANDARD_MAX_NUM_USERS: function() {
            return ECOMM_STANDARD_MAX_NUM_USERS;
        },
        EMAIL_TEMPLATE_TYPES: function() {
            return EMAIL_TEMPLATE_TYPES;
        },
        EXCEEDS_MAX_FILE_SIZE_ERROR: function() {
            return EXCEEDS_MAX_FILE_SIZE_ERROR;
        },
        EXCEEDS_MAX_IMAGE_SIZE_ERROR: function() {
            return EXCEEDS_MAX_IMAGE_SIZE_ERROR;
        },
        HARD_LIMIT_MAX_NUM_USERS: function() {
            return HARD_LIMIT_MAX_NUM_USERS;
        },
        KEY_FROM_RESERVED_USER_FIELD: function() {
            return KEY_FROM_RESERVED_USER_FIELD;
        },
        LOGGEDIN_COOKIE_NAME: function() {
            return LOGGEDIN_COOKIE_NAME;
        },
        MAX_GROUP_ID_LENGTH: function() {
            return MAX_GROUP_ID_LENGTH;
        },
        MAX_NUM_GROUPS: function() {
            return MAX_NUM_GROUPS;
        },
        MAX_UPDATE_USER_DATA_FIELDS: function() {
            return MAX_UPDATE_USER_DATA_FIELDS;
        },
        MAX_USER_DATA_FIELDS: function() {
            return MAX_USER_DATA_FIELDS;
        },
        MEMBERSHIPS_EMAIL_KEYS: function() {
            return MEMBERSHIPS_EMAIL_KEYS;
        },
        MIN_GROUP_ID_LENGTH: function() {
            return MIN_GROUP_ID_LENGTH;
        },
        NAMES_FROM_USER_FIELDS: function() {
            return NAMES_FROM_USER_FIELDS;
        },
        NEW_USER_FIELD_ID: function() {
            return NEW_USER_FIELD_ID;
        },
        NO_REQUIRED_ATTRIBUTE: function() {
            return NO_REQUIRED_ATTRIBUTE;
        },
        PASSWORD_MAX_LENGTH: function() {
            return PASSWORD_MAX_LENGTH;
        },
        PASSWORD_MIN_LENGTH: function() {
            return PASSWORD_MIN_LENGTH;
        },
        RESERVED_USER_FIELDS: function() {
            return RESERVED_USER_FIELDS;
        },
        RESERVED_USER_PREFIX: function() {
            return RESERVED_USER_PREFIX;
        },
        SESSION_COOKIE_NAME: function() {
            return SESSION_COOKIE_NAME;
        },
        SETUP_GUIDE_ALL_KEYS: function() {
            return SETUP_GUIDE_ALL_KEYS;
        },
        SETUP_GUIDE_KEYS: function() {
            return SETUP_GUIDE_KEYS;
        },
        STARTER_MAX_NUM_USERS: function() {
            return STARTER_MAX_NUM_USERS;
        },
        SUBSCRIPTION_EMAIL_TYPES: function() {
            return SUBSCRIPTION_EMAIL_TYPES;
        },
        SUBSCRIPTION_USER_LIMITS: function() {
            return SUBSCRIPTION_USER_LIMITS;
        },
        TEMP_STATE_PATH: function() {
            return TEMP_STATE_PATH;
        },
        TEXT_INPUT_TYPE_TO_FIELD_TYPE: function() {
            return TEXT_INPUT_TYPE_TO_FIELD_TYPE;
        },
        USER_ACCESS_META_OPTIONS: function() {
            return USER_ACCESS_META_OPTIONS;
        },
        USER_CSV_IMPORT_STATUS_MAX_TRIES: function() {
            return USER_CSV_IMPORT_STATUS_MAX_TRIES;
        },
        USER_CSV_IMPORT_STATUS_POLLING_INTERVAL: function() {
            return USER_CSV_IMPORT_STATUS_POLLING_INTERVAL;
        },
        USER_FIELD_DEFAULTS: function() {
            return USER_FIELD_DEFAULTS;
        },
        USER_FIELD_FORM_ID: function() {
            return USER_FIELD_FORM_ID;
        },
        USER_PAGE_SIZE: function() {
            return USER_PAGE_SIZE;
        },
        USER_STATUSES: function() {
            return USER_STATUSES;
        },
        USYS_CONTEXT_PATH: function() {
            return USYS_CONTEXT_PATH;
        },
        USYS_DATA_ATTRS: function() {
            return USYS_DATA_ATTRS;
        },
        USYS_DOM_CLASS_NAMES: function() {
            return USYS_DOM_CLASS_NAMES;
        },
        USYS_FIELD_PATH: function() {
            return USYS_FIELD_PATH;
        },
        USYS_FORM_TYPES: function() {
            return USYS_FORM_TYPES;
        },
        USYS_INPUT_SIGN_UP_IDS: function() {
            return USYS_INPUT_SIGN_UP_IDS;
        },
        USYS_INPUT_TYPES: function() {
            return USYS_INPUT_TYPES;
        },
        USYS_PAGE_SETTINGS: function() {
            return USYS_PAGE_SETTINGS;
        },
        USYS_PAGE_UTIL_KEYS: function() {
            return USYS_PAGE_UTIL_KEYS;
        },
        USYS_RESERVED_SLUGS: function() {
            return USYS_RESERVED_SLUGS;
        },
        USYS_TOKEN_TYPES: function() {
            return USYS_TOKEN_TYPES;
        },
        USYS_USER_STATES: function() {
            return USYS_USER_STATES;
        },
        USYS_UTILITY_KEYS: function() {
            return USYS_UTILITY_KEYS;
        }
    });
    const _utils = __webpack_require__(1242);
    const _types = _export_star(__webpack_require__(29089), exports);
    _export_star(__webpack_require__(33001), exports);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    const RESERVED_USER_PREFIX = 'wf-user-field-';
    const RESERVED_USER_FIELDS = {
        name: RESERVED_USER_PREFIX + 'name',
        acceptPrivacy: RESERVED_USER_PREFIX + 'accept-privacy',
        acceptCommunications: RESERVED_USER_PREFIX + 'accept-communications'
    };
    const KEY_FROM_RESERVED_USER_FIELD = {
        [RESERVED_USER_PREFIX + 'name']: 'name',
        [RESERVED_USER_PREFIX + 'accept-privacy']: 'acceptPrivacy',
        [RESERVED_USER_PREFIX + 'accept-communications']: 'acceptCommunications'
    };
    const NAMES_FROM_USER_FIELDS = {
        [RESERVED_USER_PREFIX + 'name']: 'Name',
        [RESERVED_USER_PREFIX + 'accept-privacy']: 'Accept privacy policy',
        [RESERVED_USER_PREFIX + 'accept-communications']: 'Accept communications',
        PRIVACY_POLICY: 'Accept privacy policy',
        PASSWORD: 'Password',
        EMAIL: 'Email'
    };
    const TEXT_INPUT_TYPE_TO_FIELD_TYPE = {
        text: 'PlainText',
        password: 'Password',
        email: 'Email',
        number: 'PlainText',
        tel: 'PlainText'
    };
    const USYS_UTILITY_KEYS = {
        'usys-log-in': 'usys-log-in',
        'usys-sign-up': 'usys-sign-up',
        'usys-reset-password': 'usys-reset-password',
        'usys-update-password': 'usys-update-password',
        'usys-access-denied': 'usys-access-denied',
        'usys-user-account': 'usys-user-account'
    };
    const USYS_DATA_ATTRS = {
        formType: 'data-wf-user-form-type',
        inputType: 'data-wf-user-form-input-type',
        logout: 'data-wf-user-logout',
        login: 'data-wf-user-login',
        formError: 'data-wf-user-form-error',
        redirectUrl: 'data-wf-user-form-redirect',
        formVerification: 'data-wf-user-form-verification',
        userSubscriptions: 'data-wf-user-subscriptions-list',
        userSubscriptionsEmptyState: 'data-wf-user-subscriptions-empty',
        userAccount: 'data-wf-user-account',
        subscriptionCancel: 'data-wf-user-subscription-cancel',
        userId: 'data-wf-user-id',
        field: 'data-wf-user-field',
        fieldType: 'data-wf-user-field-type',
        fileUploadKey: 'data-wf-user-file-upload-key',
        unsavedFileUploadKey: 'data-wf-unsaved-user-file-upload-key'
    };
    const USYS_DOM_CLASS_NAMES = {
        formSuccess: 'w-form-success',
        formVerfication: 'w-form-verification',
        formError: 'w-form-fail'
    };
    const USYS_FORM_TYPES = {
        login: 'login',
        signup: 'signup',
        updatePassword: 'updatePassword',
        resetPassword: 'resetPassword',
        account: 'userAccount'
    };
    const USYS_INPUT_TYPES = {
        email: 'email',
        name: 'name',
        password: 'password',
        acceptPrivacy: 'accept-privacy'
    };
    const USYS_INPUT_SIGN_UP_IDS = {
        email: 'wf-sign-up-email',
        name: 'wf-sign-up-name',
        password: 'wf-sign-up-password',
        acceptPrivacy: 'wf-sign-up-accept-privacy',
        acceptCommunications: 'wf-sign-up-accept-communications'
    };
    const USYS_USER_STATES = {
        loggedIn: 'loggedIn',
        loggedOut: 'loggedOut'
    };
    const USYS_PAGE_SETTINGS = {
        login: {
            parent: null,
            sortPos: 0,
            utilKey: 'usys-log-in',
            slug: 'log-in',
            title: 'Log In'
        },
        signup: {
            parent: null,
            sortPos: 1,
            utilKey: 'usys-sign-up',
            slug: 'sign-up',
            title: 'Sign Up'
        },
        resetPassword: {
            parent: null,
            sortPos: 2,
            utilKey: 'usys-reset-password',
            slug: 'reset-password',
            title: 'Reset Password'
        },
        updatePassword: {
            parent: null,
            sortPos: 3,
            utilKey: 'usys-update-password',
            slug: 'update-password',
            title: 'Update Password'
        },
        accessDenied: {
            parent: null,
            sortPos: 4,
            utilKey: 'usys-access-denied',
            slug: 'access-denied',
            title: 'Access Denied'
        },
        userAccount: {
            parent: null,
            sortPos: 5,
            utilKey: 'usys-user-account',
            slug: 'user-account',
            title: 'User Account'
        }
    };
    const USYS_RESERVED_SLUGS = (0, _utils.values)(USYS_PAGE_SETTINGS).map((pageSettings)=>pageSettings.slug);
    const USYS_PAGE_UTIL_KEYS = (0, _utils.values)(USYS_PAGE_SETTINGS).map((pageSettings)=>pageSettings.utilKey);
    const DEFAULT_STYLES = {
        accentColor: '#468EE5',
        bgColor: '#F5F6F7',
        includeWfBrand: true
    };
    const PASSWORD_MIN_LENGTH = 8;
    const PASSWORD_MAX_LENGTH = 72;
    // Helper constants.
    const SECOND = 1000;
    const MINUTE = 60 * SECOND;
    const HOUR = 60 * MINUTE;
    const DAY = 24 * HOUR;
    const SESSION_COOKIE_NAME = 'wf_sid';
    const LOGGEDIN_COOKIE_NAME = 'wf_loggedin';
    const DEFAULT_SESSION_DURATION_IN_MS = 7 * DAY;
    const DEFAULT_SESSION_TOKEN_DURATION_IN_MS = 4 * HOUR;
    const DEFAULT_TOKEN_AGE_MS = HOUR;
    const STARTER_MAX_NUM_USERS = 100;
    const BASIC_MAX_NUM_USERS = 20000;
    const BUSINESS_MAX_NUM_USERS = 20000;
    const ECOMM_STANDARD_MAX_NUM_USERS = 20000;
    const ECOMM_PLUS_MAX_NUM_USERS = 20000;
    const HARD_LIMIT_MAX_NUM_USERS = 100 * 1000;
    const SUBSCRIPTION_USER_LIMITS = {
        free: STARTER_MAX_NUM_USERS,
        static: BASIC_MAX_NUM_USERS,
        cms: BUSINESS_MAX_NUM_USERS,
        business: BUSINESS_MAX_NUM_USERS,
        ecommerce_standard: ECOMM_STANDARD_MAX_NUM_USERS,
        ecommerce_plus: ECOMM_PLUS_MAX_NUM_USERS,
        ecommerce_advanced: BUSINESS_MAX_NUM_USERS,
        enterprise: BUSINESS_MAX_NUM_USERS,
        enterprise_lite: BUSINESS_MAX_NUM_USERS
    };
    const MAX_NUM_GROUPS = 20;
    const MIN_GROUP_ID_LENGTH = 2;
    const MAX_GROUP_ID_LENGTH = 2;
    const USYS_TOKEN_TYPES = {
        inviteUser: 'inviteUser',
        resetPassword: 'resetPassword',
        verifyEmail: 'verifyEmail'
    };
    const ACCESS_GROUP_INLINE_PRODUCT_FIELD_SLUG = 'access-group-membership-product';
    const ACCESS_GROUP_ADMISSION_TYPE = {
        free: 'free',
        paid: 'paid'
    };
    const ACCESS_GROUP_FREE_TYPE = {
        all: 'all',
        admin: 'admin'
    };
    const SUBSCRIPTION_EMAIL_TYPES = {
        PAYMENT_FAILED: 'paymentFailed',
        PAYMENT_SUCCESSFUL: 'paymentSuccessful',
        SUBSCRIPTION_CANCELED: 'subscriptionCanceled',
        VERIFY_PAYMENT: 'verifyPayment'
    };
    const MEMBERSHIPS_EMAIL_KEYS = {
        invite: 'invite',
        resetPassword: 'resetPassword',
        updatedPassword: 'updatedPassword',
        welcome: 'welcome',
        verify: 'verify'
    };
    const EMAIL_TEMPLATE_TYPES = {
        invite: 'MEMBERSHIPS_INVITE',
        resetPassword: 'MEMBERSHIPS_RESET_PASSWORD',
        updatedPassword: 'MEMBERSHIPS_UPDATED_PASSWORD',
        verify: 'MEMBERSHIPS_VERIFY',
        welcome: 'MEMBERSHIPS_WELCOME'
    };
    const CONFIRM_UNSAVED_CHANGES_COPY = {
        title: 'Continue without saving?',
        content: 'Your changes will be lost.',
        iconType: 'warning',
        submit: {
            label: 'Continue',
            intent: 'danger'
        },
        cancel: {
            label: 'Cancel',
            intent: 'default'
        }
    };
    const USER_FIELD_FORM_ID = 'UserFieldForm';
    const NEW_USER_FIELD_ID = 'mint-user-field';
    const USER_FIELD_DEFAULTS = {
        PlainText: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'PlainText',
            validations: {}
        },
        Email: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'Email',
            validations: {}
        },
        Bool: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'Bool',
            validations: {}
        },
        FileRef: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'FileRef',
            validations: {}
        },
        Option: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'Option',
            validations: {
                options: []
            }
        },
        Password: {
            id: NEW_USER_FIELD_ID,
            name: 'Password',
            slug: '',
            required: true,
            type: 'Password',
            validations: {}
        },
        Number: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'Number',
            validations: {
                min: 0,
                step: 1
            }
        },
        Link: {
            id: NEW_USER_FIELD_ID,
            name: '',
            slug: '',
            required: false,
            type: 'Link',
            validations: {}
        }
    };
    const DEFAULT_USER_FIELDS = [
        {
            id: 'name',
            name: 'Name',
            required: false,
            slug: 'name',
            type: 'PlainText',
            validations: {}
        },
        {
            id: 'email',
            name: 'Email',
            required: true,
            slug: 'email',
            type: 'Email',
            validations: {}
        },
        {
            id: 'password',
            name: 'Password',
            required: true,
            slug: 'password',
            type: 'Password',
            validations: {}
        },
        {
            id: 'acceptPrivacy',
            name: 'Accept privacy',
            required: false,
            slug: 'accept-privacy',
            type: 'Bool',
            validations: {}
        },
        {
            id: 'acceptCommunications',
            name: 'Accept communications',
            required: false,
            slug: 'accept-communications',
            type: 'Bool',
            validations: {}
        }
    ];
    const SETUP_GUIDE_KEYS = {
        hasVisitedAccessDeniedPage: 'hasVisitedAccessDeniedPage',
        hasVisitedLoginPage: 'hasVisitedLoginPage',
        hasVisitedSignUpPage: 'hasVisitedSignUpPage',
        hasVisitedUserAccountSettings: 'hasVisitedUserAccountSettings',
        hasVisitedUserAccountPage: 'hasVisitedUserAccountPage'
    };
    const SETUP_GUIDE_ALL_KEYS = {
        ...SETUP_GUIDE_KEYS,
        hasHostingPlan: 'hasHostingPlan',
        hasEcommerce: 'hasEcommerce',
        hasEnabledSSL: 'hasEnabledSSL',
        hasUsers: 'hasUsers',
        hasAccessGroups: 'hasAccessGroups',
        hasRestrictedContent: 'hasRestrictedContent',
        hasRestrictedProducts: 'hasRestrictedProducts'
    };
    const MAX_USER_DATA_FIELDS = 20;
    const MAX_UPDATE_USER_DATA_FIELDS = MAX_USER_DATA_FIELDS + 2;
    const USYS_FIELD_PATH = [
        {
            in: 'Record',
            at: 'users'
        },
        {
            in: 'Record',
            at: 'field'
        }
    ];
    const USYS_CONTEXT_PATH = [
        {
            in: 'Record',
            at: 'users'
        },
        {
            in: 'Record',
            at: 'context'
        }
    ];
    const TEMP_PATH = [
        {
            in: 'Record',
            at: 'temp'
        }
    ];
    const TEMP_STATE_PATH = [
        ...TEMP_PATH,
        {
            in: 'Record',
            at: 'state'
        }
    ];
    const USER_ACCESS_META_OPTIONS = [
        _types.USYS_ACCESS_TYPES.LOGGED_IN
    ];
    const EXCEEDS_MAX_FILE_SIZE_ERROR = 'Maximum size allowed for a file upload is 10000kb / 10mb.';
    const EXCEEDS_MAX_IMAGE_SIZE_ERROR = 'Maximum size allowed for a image upload is 4000kb / 4mb.';
    const NO_REQUIRED_ATTRIBUTE = [
        'FileRef',
        'Bool'
    ];
    const USER_STATUSES = {
        invited: 'Invited',
        verified: 'Verified',
        unverified: 'Unverified'
    };
    const USER_PAGE_SIZE = 100;
    // User CSV Import constants
    const USER_CSV_IMPORT_STATUS_POLLING_TIMEOUT = 20 * 60 * 1000;
    const USER_CSV_IMPORT_STATUS_POLLING_INTERVAL = 5000;
    const USER_CSV_IMPORT_STATUS_MAX_TRIES = Math.floor(USER_CSV_IMPORT_STATUS_POLLING_TIMEOUT / USER_CSV_IMPORT_STATUS_POLLING_INTERVAL);
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    29089: (function (__unused_webpack_module, exports) {
    "use strict";
    // Server email configuration
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "USYS_ACCESS_TYPES", ({
        enumerable: true,
        get: function() {
            return USYS_ACCESS_TYPES;
        }
    }));
    const USYS_ACCESS_TYPES = {
        LOGGED_IN: 'LOGGED_IN',
        ADMIN_ALWAYS_VISIBLE: 'ADMIN_ALWAYS_VISIBLE'
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNlcnZlciBlbWFpbCBjb25maWd1cmF0aW9uXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0RlZmF1bHRFbWFpbEZpZWxkc1R5cGUgPSB7XG4gIHN1YmplY3Q6IHN0cmluZztcbiAgaGVhZGluZzogc3RyaW5nO1xuICBtYWluOiBzdHJpbmc7XG4gIGZpbmVwcmludDogc3RyaW5nO1xuICBhbHRlcm5hdGVFeHBsYWluZXI/OiBzdHJpbmc7XG4gIGNyZWF0ZUFjY291bnRCdXR0b24/OiBzdHJpbmc7XG4gIHJlc2V0QnV0dG9uPzogc3RyaW5nO1xuICBzaXRlUmVkaXJlY3RCdXR0b24/OiBzdHJpbmc7XG4gIHZlcmlmeUJ1dHRvbj86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzUmVzZXRQYXNzd29yZEVtYWlsRmllbGRzVHlwZSA9XG4gIE1lbWJlcnNoaXBzRGVmYXVsdEVtYWlsRmllbGRzVHlwZSAmIHtcbiAgICBhbHRlcm5hdGVFeHBsYWluZXI6IHN0cmluZztcbiAgICByZXNldEJ1dHRvbjogc3RyaW5nO1xuICB9O1xuXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc1dlbGNvbWVFbWFpbEZpZWxkc1R5cGUgPVxuICBNZW1iZXJzaGlwc0RlZmF1bHRFbWFpbEZpZWxkc1R5cGUgJiB7XG4gICAgYWx0ZXJuYXRlRXhwbGFpbmVyOiBzdHJpbmc7XG4gICAgc2l0ZVJlZGlyZWN0QnV0dG9uOiBzdHJpbmc7XG4gIH07XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzVmVyaWZ5RW1haWxGaWVsZHNUeXBlID1cbiAgTWVtYmVyc2hpcHNEZWZhdWx0RW1haWxGaWVsZHNUeXBlICYge1xuICAgIGFsdGVybmF0ZUV4cGxhaW5lcjogc3RyaW5nO1xuICAgIHZlcmlmeUJ1dHRvbjogc3RyaW5nO1xuICB9O1xuXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0ludml0ZUVtYWlsRmllbGRzVHlwZSA9XG4gIE1lbWJlcnNoaXBzRGVmYXVsdEVtYWlsRmllbGRzVHlwZSAmIHtcbiAgICBhbHRlcm5hdGVFeHBsYWluZXI6IHN0cmluZztcbiAgICBjcmVhdGVBY2NvdW50QnV0dG9uOiBzdHJpbmc7XG4gIH07XG5cbmV4cG9ydCB0eXBlIFVzeXNFbWFpbFR5cGUgPSB7XG4gIHJlc2V0UGFzc3dvcmQ6IE1lbWJlcnNoaXBzUmVzZXRQYXNzd29yZEVtYWlsRmllbGRzVHlwZTtcbiAgd2VsY29tZTogTWVtYmVyc2hpcHNXZWxjb21lRW1haWxGaWVsZHNUeXBlO1xuICBpbnZpdGU6IE1lbWJlcnNoaXBzSW52aXRlRW1haWxGaWVsZHNUeXBlO1xuICB1cGRhdGVkUGFzc3dvcmQ6IE1lbWJlcnNoaXBzRGVmYXVsdEVtYWlsRmllbGRzVHlwZTtcbiAgdmVyaWZ5OiBNZW1iZXJzaGlwc1ZlcmlmeUVtYWlsRmllbGRzVHlwZTtcbn07XG5cbi8vIFRlbXBsYXRlIGZpZWxkcyBjb25maWd1cmF0aW9uXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0RlZmF1bHRUZW1wbGF0ZUZpZWxkc1R5cGUgPSB7XG4gIGN1cnJlbnRGaWVsZDogc3RyaW5nO1xuICBzaXRlTmFtZTogc3RyaW5nO1xuICB1c2VyRW1haWw6IHN0cmluZztcbiAgYmdDb2xvcjogc3RyaW5nO1xuICBhY2NlbnRDb2xvcjogc3RyaW5nO1xuICBsaW5rQ29udHJhc3Q6IHN0cmluZztcbiAgYmFja2dyb3VuZENvbnRyYXN0OiBzdHJpbmc7XG4gIGluY2x1ZGVXZkJyYW5kOiBib29sZWFuO1xuICBsb2dvPzogUmVjb3JkPGFueSwgYW55Pjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzRXh0cmFUZW1wbGF0ZUZpZWxkc1R5cGUgPSB7XG4gIHJlc2V0UGFzc3dvcmRMaW5rPzogc3RyaW5nO1xuICBjcmVhdGVBY2NvdW50TGluaz86IHN0cmluZztcbiAgdmVyaWZ5TGluaz86IHN0cmluZztcbiAgc2l0ZVJlZGlyZWN0TGluaz86IHN0cmluZztcbiAgdXNlck5hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0VtYWlsVGVtcGxhdGVGaWVsZHNUeXBlID1cbiAgTWVtYmVyc2hpcHNEZWZhdWx0VGVtcGxhdGVGaWVsZHNUeXBlICZcbiAgICBNZW1iZXJzaGlwc0RlZmF1bHRFbWFpbEZpZWxkc1R5cGUgJlxuICAgIE1lbWJlcnNoaXBzRXh0cmFUZW1wbGF0ZUZpZWxkc1R5cGU7XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzQnJhbmRpbmdUeXBlID0ge1xuICBsb2dvOiBzdHJpbmc7XG4gIGFjY2VudENvbG9yOiBzdHJpbmc7XG4gIGJnQ29sb3I6IHN0cmluZztcbiAgaW5jbHVkZVdmQnJhbmQ6IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgVXNlcnNTZXR1cEd1aWRlVHlwZSA9IHtcbiAgaGFzVmlzaXRlZEFjY2Vzc0RlbmllZFBhZ2U6IGJvb2xlYW47XG4gIGhhc1Zpc2l0ZWRMb2dpblBhZ2U6IGJvb2xlYW47XG4gIGhhc1Zpc2l0ZWRTaWduVXBQYWdlOiBib29sZWFuO1xuICBoYXNWaXNpdGVkVXNlckFjY291bnRTZXR0aW5nczogYm9vbGVhbjtcbiAgaGFzVmlzaXRlZFVzZXJBY2NvdW50UGFnZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIE1vY2tVc3lzVXNlciA9IHtcbiAgY29tbW9uRmllbGRzOiB7XG4gICAgZW1haWw6IHN0cmluZztcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBVU1lTX0FDQ0VTU19UWVBFUyA9IHtcbiAgTE9HR0VEX0lOOiAnTE9HR0VEX0lOJyxcbiAgQURNSU5fQUxXQVlTX1ZJU0lCTEU6ICdBRE1JTl9BTFdBWVNfVklTSUJMRScsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBVc2VyQWNlc3NNZXRhT3B0aW9uID0ga2V5b2YgdHlwZW9mIFVTWVNfQUNDRVNTX1RZUEVTO1xuZXhwb3J0IHR5cGUgVXNlckFjY2Vzc01ldGEgPSBVc2VyQWNlc3NNZXRhT3B0aW9uW107XG5leHBvcnQgdHlwZSBVc3lzQ2FwdGNoYSA9IHtzaXRlS2V5OiBzdHJpbmc7IG1vZGU6IHN0cmluZ30gfCB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOlsiVVNZU19BQ0NFU1NfVFlQRVMiLCJMT0dHRURfSU4iLCJBRE1JTl9BTFdBWVNfVklTSUJMRSJdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCOzs7OzsrQkEyRmhCQTs7O2VBQUFBOzs7QUFBTixNQUFNQSxvQkFBb0I7SUFDL0JDLFdBQVc7SUFDWEMsc0JBQXNCO0FBQ3hCIn0=
    
    }),
    30916: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      document
      window
      HTMLFormElement
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        handleUserAccount: function() {
            return handleUserAccount;
        },
        handleUserSubscriptionLists: function() {
            return handleUserSubscriptionLists;
        }
    });
    const _constants = __webpack_require__(7462);
    const _constants1 = __webpack_require__(10873);
    const _RenderingUtils = __webpack_require__(86078);
    const _utils = __webpack_require__(56897);
    const _queries = __webpack_require__(3671);
    const _mutations = __webpack_require__(13197);
    const _rendering = __webpack_require__(85513);
    const _fields = __webpack_require__(18457);
    function asyncGetUserSubscriptions() {
        return _utils.userSystemsRequestClient.query({
            query: _queries.getUserSubscriptions
        });
    }
    function asyncGetUser(dataFields) {
        return _utils.userSystemsRequestClient.query({
            query: (0, _queries.buildGetLoggedInUserQuery)(dataFields)
        });
    }
    function asyncSubmitUserData(dataFields) {
        // get variables in correct shape
        const data = (0, _fields.getFieldsAsTypeKeys)(dataFields);
        return _utils.userSystemsRequestClient.mutate({
            mutation: (0, _mutations.buildUpdateUsysUserDataMutation)(dataFields),
            variables: {
                data
            }
        });
    }
    const subscriptionListSelector = `[${_constants.USYS_DATA_ATTRS.userSubscriptions}]`;
    const EmptyStateSelector = `[${_constants.USYS_DATA_ATTRS.userSubscriptionsEmptyState}]`;
    const templateSelector = `script[type='${_constants1.WF_TEMPLATE_TYPE}']`;
    function getUserSubscriptionLists() {
        const subscriptionLists = document.querySelectorAll(subscriptionListSelector);
        return Array.from(subscriptionLists);
    }
    const userAccountFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.account}"]`;
    function getUserAccountForms() {
        const accountForms = document.querySelectorAll(userAccountFormQuerySelector);
        return Array.prototype.slice.call(accountForms).filter((accountForm)=>accountForm instanceof HTMLFormElement);
    }
    function handleUserSubscriptionLists(domParser) {
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            // The usys Apollo client does not work in the Designer and will error out.
            // We are using mocked data in the Designer and Preview mode instead.
            return;
        }
        const subscriptionLists = getUserSubscriptionLists();
        // If we have a list to render, query for the data
        if (subscriptionLists.length > 0) {
            asyncGetUserSubscriptions().then((response)=>{
                const userSubscriptions = response?.data?.database?.userSubscriptions;
                const noUserSubscriptions = userSubscriptions.length === 0;
                if (noUserSubscriptions) return renderEmptySubscriptionList(subscriptionLists);
                renderUserSubscriptionLists(subscriptionLists, domParser, userSubscriptions);
            }).catch((error)=>{
                const graphQLErrors = error?.graphQLErrors || [];
                const errorsHandled = graphQLErrors.reduce(// @ts-expect-error - TS7006 - Parameter 'hasUnhandledError' implicitly has an 'any' type. | TS7006 - Parameter 'graphQLError' implicitly has an 'any' type.
                (hasUnhandledError, graphQLError)=>{
                    if (graphQLError?.code === 'NoCommerceCustomerFound') {
                        renderEmptySubscriptionList(subscriptionLists);
                        return hasUnhandledError;
                    }
                    return false;
                }, graphQLErrors.length > 0);
                if (!errorsHandled) throw error;
            });
        }
    }
    function renderEmptySubscriptionList(subscriptionListElements) {
        subscriptionListElements.forEach((subscriptionListElement)=>{
            const EmptyStateElement = subscriptionListElement.querySelector(EmptyStateSelector);
            (0, _utils.showElement)(EmptyStateElement);
        });
    }
    function renderUserSubscriptionLists(subscriptionListElements, domParser, userSubscriptions = []) {
        subscriptionListElements.forEach((subscriptionListElement)=>{
            const EmptyStateElement = subscriptionListElement.querySelector(EmptyStateSelector);
            (0, _utils.hideElement)(EmptyStateElement);
            const templateScript = subscriptionListElement.querySelector(templateSelector);
            if (!templateScript) {
                return;
            }
            const templateId = templateScript.getAttribute('id');
            if (!templateId) {
                return;
            }
            const listWrapperElement = document.querySelector(`[${_constants1.WF_TEMPLATE_ID_DATA_KEY}='${templateId}']`);
            if (!(listWrapperElement instanceof Element)) {
                // If we don't have a wrapper to append items to, return
                return;
            }
            const templateElement = domParser.getHtmlFromString(templateScript.innerHTML);
            if (!(templateElement instanceof Element)) {
                // If there is no template content present, return
                return;
            }
            userSubscriptions.forEach((subscription)=>{
                const templateClone = templateElement.cloneNode(true);
                listWrapperElement.appendChild(templateClone);
                // @ts-expect-error - TS2345 - Argument of type 'Node' is not assignable to parameter of type 'Element'.
                (0, _RenderingUtils.walkDOM)(templateClone, (node)=>{
                    (0, _rendering.applyBindingsAndConditionalVisibility)(node, subscription);
                    // Add handler for cancel subscription button. Done here since we have access to subscription id.
                    if (node.hasAttribute(_constants.USYS_DATA_ATTRS.subscriptionCancel)) {
                        // @ts-expect-error - TS2339 - Property '_id' does not exist on type 'never'.
                        addCancelButtonEventListener(node, subscription._id);
                    }
                });
            });
        });
    }
    function addCancelButtonEventListener(node, subscriptionId) {
        node.addEventListener('click', function() {
            _utils.userSystemsRequestClient.mutate({
                mutation: _mutations.cancelSubscriptionMutation,
                variables: {
                    subscriptionId
                }
            }).then(()=>{
                // Refresh so can refetch and rerender with updated status of subscription after cancelation
                // Ultimately we should probably do a re fetch adn re render render, but will require replacing existing nodes
                window.location.reload();
            });
        });
    }
    function handleUserAccount() {
        // UserAccountWrapper
        const userAccount = document.querySelector(`[${_constants.USYS_DATA_ATTRS.userAccount}]`);
        if (!userAccount || window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        const successMessage = userAccount.querySelector('.' + _constants.USYS_DOM_CLASS_NAMES.formSuccess);
        const errorMessage = userAccount.querySelector('.' + _constants.USYS_DOM_CLASS_NAMES.formError);
        const userAccountForms = getUserAccountForms();
        if (userAccountForms.length > 0) {
            const fields = (0, _fields.getFieldsForFetch)(userAccountForms);
            asyncGetUser(fields).then((response)=>{
                const siteUser = response?.data?.site?.siteUser;
                if (!siteUser) return;
                const userData = siteUser.data;
                userAccountForms.forEach((accountForm)=>{
                    (0, _RenderingUtils.walkDOM)(userAccount, (node)=>{
                        (0, _rendering.applyUserAccountData)(node, userData);
                    });
                    if (!(accountForm instanceof HTMLFormElement)) return;
                    const submit = accountForm.querySelector('input[type="submit"]');
                    accountForm.addEventListener('submit', (event)=>{
                        event.preventDefault();
                        const form = event.currentTarget;
                        if (!(form instanceof HTMLFormElement)) {
                            return;
                        }
                        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                        (0, _utils.hideElement)(successMessage);
                        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                        (0, _utils.hideElement)(errorMessage);
                        const submitText = (0, _utils.disableSubmit)(submit);
                        const commonFields = (0, _fields.getCommonFields)(form, [
                            'name',
                            'accept-communications'
                        ]);
                        const customFields = (0, _fields.getCustomFields)(form);
                        asyncSubmitUserData([
                            ...commonFields,
                            ...customFields
                        ]).then((res)=>{
                            const newUserData = res && res.data && res.data.usysUpdateUserData && res.data.usysUpdateUserData.data;
                            if (newUserData) {
                                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                                addResetEventListener(accountForm, userAccount, newUserData);
                            }
                            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                            successMessage && (0, _utils.showAndFocusElement)(successMessage);
                        })// @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                        .catch((0, _utils.userFormError)(form, errorMessage, 'ACCOUNT_UPDATE')).finally(()=>{
                            (0, _utils.resetSubmit)(submit, submitText);
                        });
                    });
                    accountForm.querySelectorAll('input').forEach((input)=>input.addEventListener('input', ()=>{
                            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                            (0, _utils.hideElement)(successMessage);
                            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                            (0, _utils.hideElement)(errorMessage);
                        }));
                    // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    addResetEventListener(accountForm, userAccount, userData);
                });
            });
        }
    }
    const addResetEventListener = (accountForm, userAccount, userData)=>{
        accountForm.addEventListener('reset', (event)=>{
            event.preventDefault();
            const form = event.currentTarget;
            if (!(form instanceof HTMLFormElement)) return;
            if (userData) {
                // apply saved user account data
                (0, _RenderingUtils.walkDOM)(userAccount, (node)=>{
                    (0, _rendering.applyUserAccountData)(node, userData);
                });
            }
        });
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    18457: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      HTMLInputElement
      HTMLSelectElement
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        commonFields: function() {
            return commonFields;
        },
        getCommonFields: function() {
            return getCommonFields;
        },
        getCustomFields: function() {
            return getCustomFields;
        },
        getFieldValueById: function() {
            return getFieldValueById;
        },
        getFieldsAsTypeKeys: function() {
            return getFieldsAsTypeKeys;
        },
        getFieldsForFetch: function() {
            return getFieldsForFetch;
        }
    });
    const _constants = __webpack_require__(7462);
    const _universalUtils = __webpack_require__(62467);
    const getTextInput = (element)=>element instanceof HTMLInputElement ? element.value : '';
    const typeGetter = {
        PlainText: getTextInput,
        Email: getTextInput,
        Bool: (element)=>element instanceof HTMLInputElement ? element.checked : false,
        Number: getTextInput,
        Option: (element)=>element instanceof HTMLSelectElement ? element.value : '',
        Link: getTextInput,
        FileRef: (element)=>{
            const fileKey = (0, _universalUtils.getUserFileKey)(element);
            const tempFileKey = (0, _universalUtils.getTempUserFileKey)(element);
            if (tempFileKey) {
                // change file
                return {
                    key: tempFileKey
                };
            }
            if (fileKey === 'DELETE') {
                // delete file
                return null;
            }
            if (fileKey) {
                // preserve existing file
                return {
                    _id: fileKey
                };
            }
        }
    };
    const customFieldTypes = [
        'PlainText',
        'Bool',
        'Email',
        'Number',
        'Option',
        'Link',
        'FileRef'
    ];
    const commonFields = [
        {
            type: 'Email',
            slug: 'email',
            selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`)
        },
        {
            type: 'PlainText',
            slug: 'name',
            selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.field}="${_constants.RESERVED_USER_FIELDS.name}"]`) || container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.name}"]`)
        },
        {
            type: 'PlainText',
            slug: 'password',
            selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.password}"]`)
        },
        {
            type: 'Bool',
            slug: 'accept-privacy',
            selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.field}="${_constants.RESERVED_USER_FIELDS.acceptPrivacy}"]`) || container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.acceptPrivacy}"]`)
        },
        {
            type: 'Bool',
            slug: 'accept-communications',
            selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.field}="${_constants.RESERVED_USER_FIELDS.acceptCommunications}"]`)
        }
    ];
    const toCamelCase = (str)=>{
        // Handle kebab-case to PascalCase
        const pascalCase = str.split('-').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join('');
        // return camelCase
        return pascalCase.charAt(0).toLowerCase() + pascalCase.slice(1);
    };
    const getCommonFields = (form, requestedFields)=>{
        const payload = [];
        commonFields.forEach((field)=>{
            if (requestedFields && !requestedFields.includes(field.slug)) return;
            const ele = field.selector(form);
            if (!ele || !typeGetter[field.type]) return;
            payload.push({
                key: toCamelCase(field.slug),
                type: toCamelCase(field.type),
                id: field.slug,
                value: typeGetter[field.type](ele, field.id)
            });
        });
        return payload;
    };
    const getCustomFields = (form, includeValue = true)=>{
        const payload = [];
        customFieldTypes.forEach((fieldType)=>{
            const camelFieldType = toCamelCase(fieldType);
            const inputEles = form.querySelectorAll(`input[${_constants.USYS_DATA_ATTRS.fieldType}="${fieldType}"], select[${_constants.USYS_DATA_ATTRS.fieldType}="${fieldType}"]`);
            if (inputEles.length === 0 || !typeGetter[fieldType]) return;
            inputEles.forEach((ele)=>{
                const id = ele.getAttribute(_constants.USYS_DATA_ATTRS.field);
                if (!id) return;
                const elementData = {
                    key: `f_${id}`,
                    type: camelFieldType,
                    id
                };
                if (includeValue) {
                    const value = typeGetter[fieldType](ele, id);
                    if (value === '') {
                        elementData.value = null;
                    } else {
                        elementData.value = value;
                    }
                }
                payload.push(elementData);
            });
        });
        return payload;
    };
    const getFieldsForFetch = (forms)=>{
        const custom = [];
        const nested = [];
        const alreadyFound = (customField)=>{
            return custom.find((item)=>item.id === customField.id);
        };
        forms.forEach((form)=>{
            nested.push([
                ...getCommonFields(form),
                ...getCustomFields(form, false)
            ]);
        });
        nested.forEach((getCustomFieldRes)=>{
            getCustomFieldRes.forEach((customField)=>{
                if (!alreadyFound(customField)) {
                    custom.push(customField);
                }
            });
        });
        return custom;
    };
    function getFieldValueById(id, fieldsArray) {
        const match = fieldsArray.find((field)=>field.id === id);
        if (!match) return null;
        return match.value;
    }
    function getFieldsAsTypeKeys(fieldsArray) {
        const memo = {};
        fieldsArray.forEach((field)=>{
            const { key, type, value } = field;
            if (!memo[type]) memo[type] = [];
            memo[type].push({
                id: key.replace('f_', ''),
                value
            });
        });
        return memo;
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    66551: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        usysFormBundle: function() {
            return usysFormBundle;
        },
        usysSiteBundle: function() {
            return usysSiteBundle;
        }
    });
    __webpack_require__(52897);
    __webpack_require__(233);
    __webpack_require__(49754);
    __webpack_require__(30971);
    __webpack_require__(62374);
    __webpack_require__(55152);
    __webpack_require__(35273);
    __webpack_require__(30172);
    __webpack_require__(67304);
    __webpack_require__(14362);
    const _login = __webpack_require__(69263);
    const _signup = __webpack_require__(54284);
    const _logout = __webpack_require__(87021);
    const _resetPassword = __webpack_require__(63245);
    const _updatePassword = __webpack_require__(10104);
    const _account = __webpack_require__(30916);
    const _utils = _export_star(__webpack_require__(56897), exports);
    const _usysForm = __webpack_require__(65438);
    function _export_star(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
                Object.defineProperty(to, k, {
                    enumerable: true,
                    get: function() {
                        return from[k];
                    }
                });
            }
        });
        return from;
    }
    const usysSiteBundle = ()=>{
        function init() {
            const domParser = (0, _utils.getDomParser)();
            (0, _login.handleLogInForms)();
            (0, _login.handleLoginRedirects)();
            (0, _signup.handleSignUpForms)();
            (0, _logout.handleLogInLogOutButton)();
            (0, _resetPassword.handleResetPasswordForms)();
            (0, _updatePassword.handleUpdatePasswordForms)();
            (0, _account.handleUserAccount)();
            (0, _account.handleUserSubscriptionLists)(domParser);
        }
        const ready = init;
        const design = init;
        const preview = init;
        return {
            init,
            ready,
            design,
            preview
        };
    };
    const usysFormBundle = function(env) {
        function init() {
            if (env('design')) return;
            (0, _usysForm.handleFields)();
        }
        return {
            init,
            ready: init,
            preview: init
        };
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncHJvbWlzZS1wb2x5ZmlsbC9zcmMvcG9seWZpbGwnO1xuaW1wb3J0ICd1bmZldGNoL3BvbHlmaWxsJztcbi8vIElFMTEgY3Jhc2hlcyB3aGVtIFVSTFNlYXJjaFBhcmFtcyBpcyB1c2VkXG5pbXBvcnQgJ2NvcmUtanMvd2ViL3VybC1zZWFyY2gtcGFyYW1zJztcbi8vIEF0IGEgbWluaW11bSwgd2UgbmVlZCBgQXJyYXkuZnJvbWAgc3VwcG9ydCBpbiBJRTExXG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvYXJyYXknO1xuXG5pbXBvcnQge2hhbmRsZUxvZ0luRm9ybXMsIGhhbmRsZUxvZ2luUmVkaXJlY3RzfSBmcm9tICcuL2xvZ2luJztcbmltcG9ydCB7aGFuZGxlU2lnblVwRm9ybXN9IGZyb20gJy4vc2lnbnVwJztcbmltcG9ydCB7aGFuZGxlTG9nSW5Mb2dPdXRCdXR0b259IGZyb20gJy4vbG9nb3V0JztcbmltcG9ydCB7aGFuZGxlUmVzZXRQYXNzd29yZEZvcm1zfSBmcm9tICcuL3Jlc2V0UGFzc3dvcmQnO1xuaW1wb3J0IHtoYW5kbGVVcGRhdGVQYXNzd29yZEZvcm1zfSBmcm9tICcuL3VwZGF0ZVBhc3N3b3JkJztcbmltcG9ydCB7aGFuZGxlVXNlckFjY291bnQsIGhhbmRsZVVzZXJTdWJzY3JpcHRpb25MaXN0c30gZnJvbSAnLi9hY2NvdW50JztcbmltcG9ydCB7Z2V0RG9tUGFyc2VyfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7aGFuZGxlRmllbGRzfSBmcm9tICcuL3VzeXNGb3JtJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgdXN5c1NpdGVCdW5kbGUgPSAoKSA9PiB7XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgZG9tUGFyc2VyID0gZ2V0RG9tUGFyc2VyKCk7XG4gICAgaGFuZGxlTG9nSW5Gb3JtcygpO1xuICAgIGhhbmRsZUxvZ2luUmVkaXJlY3RzKCk7XG4gICAgaGFuZGxlU2lnblVwRm9ybXMoKTtcbiAgICBoYW5kbGVMb2dJbkxvZ091dEJ1dHRvbigpO1xuICAgIGhhbmRsZVJlc2V0UGFzc3dvcmRGb3JtcygpO1xuICAgIGhhbmRsZVVwZGF0ZVBhc3N3b3JkRm9ybXMoKTtcbiAgICBoYW5kbGVVc2VyQWNjb3VudCgpO1xuICAgIGhhbmRsZVVzZXJTdWJzY3JpcHRpb25MaXN0cyhkb21QYXJzZXIpO1xuICB9XG5cbiAgY29uc3QgcmVhZHkgPSBpbml0O1xuICBjb25zdCBkZXNpZ24gPSBpbml0O1xuICBjb25zdCBwcmV2aWV3ID0gaW5pdDtcblxuICByZXR1cm4ge1xuICAgIGluaXQsXG4gICAgcmVhZHksXG4gICAgZGVzaWduLFxuICAgIHByZXZpZXcsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgdXN5c0Zvcm1CdW5kbGUgPSBmdW5jdGlvbiAoZW52KSB7XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaWYgKGVudignZGVzaWduJykpIHJldHVybjtcbiAgICBoYW5kbGVGaWVsZHMoKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGluaXQsXG4gICAgcmVhZHk6IGluaXQsXG4gICAgcHJldmlldzogaW5pdCxcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsidXN5c0Zvcm1CdW5kbGUiLCJ1c3lzU2l0ZUJ1bmRsZSIsImluaXQiLCJkb21QYXJzZXIiLCJnZXREb21QYXJzZXIiLCJoYW5kbGVMb2dJbkZvcm1zIiwiaGFuZGxlTG9naW5SZWRpcmVjdHMiLCJoYW5kbGVTaWduVXBGb3JtcyIsImhhbmRsZUxvZ0luTG9nT3V0QnV0dG9uIiwiaGFuZGxlUmVzZXRQYXNzd29yZEZvcm1zIiwiaGFuZGxlVXBkYXRlUGFzc3dvcmRGb3JtcyIsImhhbmRsZVVzZXJBY2NvdW50IiwiaGFuZGxlVXNlclN1YnNjcmlwdGlvbkxpc3RzIiwicmVhZHkiLCJkZXNpZ24iLCJwcmV2aWV3IiwiZW52IiwiaGFuZGxlRmllbGRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQTBDYUEsY0FBYztlQUFkQTs7SUF6QkFDLGNBQWM7ZUFBZEE7Ozs7Ozs7Ozs7O1FBakJOO1FBQ0E7dUJBTThDO3dCQUNyQjt3QkFDTTsrQkFDQztnQ0FDQzt5QkFDcUI7b0NBQ2xDOzBCQUNBOzs7Ozs7Ozs7Ozs7OztBQUdwQixNQUFNQSxpQkFBaUI7SUFDNUIsU0FBU0M7UUFDUCxNQUFNQyxZQUFZQyxJQUFBQSxtQkFBWTtRQUM5QkMsSUFBQUEsdUJBQWdCO1FBQ2hCQyxJQUFBQSwyQkFBb0I7UUFDcEJDLElBQUFBLHlCQUFpQjtRQUNqQkMsSUFBQUEsK0JBQXVCO1FBQ3ZCQyxJQUFBQSx1Q0FBd0I7UUFDeEJDLElBQUFBLHlDQUF5QjtRQUN6QkMsSUFBQUEsMEJBQWlCO1FBQ2pCQyxJQUFBQSxvQ0FBMkIsRUFBQ1Q7SUFDOUI7SUFFQSxNQUFNVSxRQUFRWDtJQUNkLE1BQU1ZLFNBQVNaO0lBQ2YsTUFBTWEsVUFBVWI7SUFFaEIsT0FBTztRQUNMQTtRQUNBVztRQUNBQztRQUNBQztJQUNGO0FBQ0Y7QUFFTyxNQUFNZixpQkFBaUIsU0FBVWdCLEdBQUc7SUFDekMsU0FBU2Q7UUFDUCxJQUFJYyxJQUFJLFdBQVc7UUFDbkJDLElBQUFBLHNCQUFZO0lBQ2Q7SUFDQSxPQUFPO1FBQ0xmO1FBQ0FXLE9BQU9YO1FBQ1BhLFNBQVNiO0lBQ1g7QUFDRiJ9
    
    }),
    69263: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      document,
      window,
      HTMLFormElement,
      HTMLInputElement
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        asyncLogInUser: function() {
            return asyncLogInUser;
        },
        handleLogInForms: function() {
            return handleLogInForms;
        },
        handleLoginRedirects: function() {
            return handleLoginRedirects;
        }
    });
    const _utils = __webpack_require__(56897);
    const _constants = __webpack_require__(7462);
    const _mutations = __webpack_require__(13197);
    function getLoginLinks() {
        return Array.prototype.slice.call(document.links).filter((link)=>link.getAttribute('href') === '/log-in');
    }
    function handleLoginRedirects() {
        getLoginLinks().forEach((link)=>{
            const queryString = window.location.search;
            const redirectParam = queryString.match(/\?usredir=([^&]+)/g);
            if (redirectParam) {
                link.href = link.href.concat(redirectParam[0]);
            }
        });
    }
    const loginFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.login}"]`;
    // error handling
    const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
    const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
    _constants.logInErrorStates[_constants.LOGIN_UI_ERROR_CODES.GENERAL_ERROR].copy;
    const errorMsgNode = document.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
    const getLogInErrorCode = (error)=>{
        let errorCode;
        switch(error){
            case 'UsysInvalidCredentials':
                errorCode = _constants.LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD;
                break;
            default:
                errorCode = _constants.LOGIN_UI_ERROR_CODES.GENERAL_ERROR;
        }
        return errorCode;
    };
    function getLoginForms() {
        const loginForms = document.querySelectorAll(loginFormQuerySelector);
        return Array.prototype.slice.call(loginForms).filter((loginForm)=>loginForm instanceof HTMLFormElement);
    }
    function handleLogInForms() {
        getLoginForms().forEach((loginForm)=>{
            loginForm.addEventListener('submit', (event)=>{
                event.preventDefault();
                const form = event.currentTarget;
                if (!(form instanceof HTMLFormElement)) {
                    return;
                }
                const submit = form.querySelector('input[type="submit"]');
                const submitText = (0, _utils.disableSubmit)(submit);
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                (0, _utils.hideElement)(errorState);
                const emailInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`);
                const passwordInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.password}"]`);
                if (!(emailInput instanceof HTMLInputElement) || !(passwordInput instanceof HTMLInputElement)) {
                    return;
                }
                const onSuccessRedirectUrl = form.getAttribute(_constants.USYS_DATA_ATTRS.redirectUrl);
                asyncLogInUser(emailInput.value, passwordInput.value).then(()=>{
                    // If there is a redirect param, redirect to that href after log-in.
                    (0, _utils.handleRedirect)(onSuccessRedirectUrl);
                }).catch((error)=>{
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                    (0, _utils.resetSubmit)(submit, submitText);
                    if (errorState) {
                        // if there isn't an error code, send an empty string so a generic error message appears
                        const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
                        const errorCode = getLogInErrorCode(elementErrorCode);
                        (0, _utils.handleErrorNode)(errorMsgNode, // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                        errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX.LOGIN, defaultErrorCopy);
                    }
                });
            });
        });
    }
    function asyncLogInUser(email, password) {
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.loginMutation,
            variables: {
                email,
                authPassword: password
            }
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    87021: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      window,
      document,
      HTMLButtonElement
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        asyncLogOutUser: function() {
            return asyncLogOutUser;
        },
        handleLogInLogOutButton: function() {
            return handleLogInLogOutButton;
        }
    });
    const _utils = __webpack_require__(56897);
    const _constants = __webpack_require__(7462);
    const _mutations = __webpack_require__(13197);
    const logoutButtonQuerySelector = `[${_constants.USYS_DATA_ATTRS.logout}]`;
    function getLogoutButtons() {
        const logoutButtons = document.querySelectorAll(logoutButtonQuerySelector);
        return Array.prototype.slice.call(logoutButtons).filter((logoutButton)=>logoutButton instanceof HTMLButtonElement);
    }
    function handleGoToLoginClick() {
        if (window.Webflow.env('preview')) {
            return;
        }
        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
        window.location = '/log-in';
    }
    function handleLogOutButtonClick(event) {
        event.preventDefault();
        asyncLogOutUser().then(()=>{
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.location('/');
        });
    }
    function handleLogInLogOutButton() {
        getLogoutButtons().forEach((logoutButton)=>{
            if (document.cookie.split(';').some((cookie)=>cookie.indexOf(_constants.LOGGEDIN_COOKIE_NAME) > -1)) {
                logoutButton.innerHTML = logoutButton.getAttribute(_constants.USYS_DATA_ATTRS.logout) || 'Log out';
                logoutButton.removeEventListener('click', handleGoToLoginClick);
                logoutButton.addEventListener('click', handleLogOutButtonClick);
            } else if (!window.Webflow.env('design')) {
                logoutButton.innerHTML = logoutButton.getAttribute(_constants.USYS_DATA_ATTRS.login) || 'Log in';
                logoutButton.removeEventListener('click', handleLogOutButtonClick);
                logoutButton.addEventListener('click', handleGoToLoginClick);
            }
        });
    }
    function asyncLogOutUser() {
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.logoutMutation
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ291dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBnbG9iYWxzXG4gIHdpbmRvdyxcbiAgZG9jdW1lbnQsXG4gIEhUTUxCdXR0b25FbGVtZW50XG4qL1xuXG5pbXBvcnQge3VzZXJTeXN0ZW1zUmVxdWVzdENsaWVudH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1xuICBVU1lTX0RBVEFfQVRUUlMsXG4gIExPR0dFRElOX0NPT0tJRV9OQU1FLFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy91c2Vycy9jb25zdGFudHMnO1xuaW1wb3J0IHtsb2dvdXRNdXRhdGlvbn0gZnJvbSAnLi9tdXRhdGlvbnMnO1xuXG5jb25zdCBsb2dvdXRCdXR0b25RdWVyeVNlbGVjdG9yID0gYFske1VTWVNfREFUQV9BVFRSUy5sb2dvdXR9XWA7XG5cbmZ1bmN0aW9uIGdldExvZ291dEJ1dHRvbnMoKSB7XG4gIGNvbnN0IGxvZ291dEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGxvZ291dEJ1dHRvblF1ZXJ5U2VsZWN0b3IpO1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlXG4gICAgLmNhbGwobG9nb3V0QnV0dG9ucylcbiAgICAuZmlsdGVyKChsb2dvdXRCdXR0b24pID0+IGxvZ291dEJ1dHRvbiBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlR29Ub0xvZ2luQ2xpY2soKSB7XG4gIGlmICh3aW5kb3cuV2ViZmxvdy5lbnYoJ3ByZXZpZXcnKSkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzIyIC0gVHlwZSAnc3RyaW5nJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdMb2NhdGlvbiB8IChzdHJpbmcgJiBMb2NhdGlvbiknLlxuICB3aW5kb3cubG9jYXRpb24gPSAnL2xvZy1pbic7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUxvZ091dEJ1dHRvbkNsaWNrKGV2ZW50OiBFdmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGFzeW5jTG9nT3V0VXNlcigpLnRoZW4oKCkgPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMzkgLSBQcm9wZXJ0eSAnV2ViZmxvdycgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAnV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMnLlxuICAgIHdpbmRvdy5XZWJmbG93LmxvY2F0aW9uKCcvJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlTG9nSW5Mb2dPdXRCdXR0b24oKSB7XG4gIGdldExvZ291dEJ1dHRvbnMoKS5mb3JFYWNoKChsb2dvdXRCdXR0b24pID0+IHtcbiAgICBpZiAoXG4gICAgICBkb2N1bWVudC5jb29raWVcbiAgICAgICAgLnNwbGl0KCc7JylcbiAgICAgICAgLnNvbWUoKGNvb2tpZSkgPT4gY29va2llLmluZGV4T2YoTE9HR0VESU5fQ09PS0lFX05BTUUpID4gLTEpXG4gICAgKSB7XG4gICAgICBsb2dvdXRCdXR0b24uaW5uZXJIVE1MID1cbiAgICAgICAgbG9nb3V0QnV0dG9uLmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMubG9nb3V0KSB8fCAnTG9nIG91dCc7XG4gICAgICBsb2dvdXRCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVHb1RvTG9naW5DbGljayk7XG4gICAgICBsb2dvdXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVMb2dPdXRCdXR0b25DbGljayk7XG4gICAgfSBlbHNlIGlmICghd2luZG93LldlYmZsb3cuZW52KCdkZXNpZ24nKSkge1xuICAgICAgbG9nb3V0QnV0dG9uLmlubmVySFRNTCA9XG4gICAgICAgIGxvZ291dEJ1dHRvbi5nZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLmxvZ2luKSB8fCAnTG9nIGluJztcbiAgICAgIGxvZ291dEJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUxvZ091dEJ1dHRvbkNsaWNrKTtcbiAgICAgIGxvZ291dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUdvVG9Mb2dpbkNsaWNrKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNMb2dPdXRVc2VyKCkge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50Lm11dGF0ZSh7XG4gICAgbXV0YXRpb246IGxvZ291dE11dGF0aW9uLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJhc3luY0xvZ091dFVzZXIiLCJoYW5kbGVMb2dJbkxvZ091dEJ1dHRvbiIsImxvZ291dEJ1dHRvblF1ZXJ5U2VsZWN0b3IiLCJVU1lTX0RBVEFfQVRUUlMiLCJsb2dvdXQiLCJnZXRMb2dvdXRCdXR0b25zIiwibG9nb3V0QnV0dG9ucyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiZmlsdGVyIiwibG9nb3V0QnV0dG9uIiwiSFRNTEJ1dHRvbkVsZW1lbnQiLCJoYW5kbGVHb1RvTG9naW5DbGljayIsIndpbmRvdyIsIldlYmZsb3ciLCJlbnYiLCJsb2NhdGlvbiIsImhhbmRsZUxvZ091dEJ1dHRvbkNsaWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInRoZW4iLCJmb3JFYWNoIiwiY29va2llIiwic3BsaXQiLCJzb21lIiwiaW5kZXhPZiIsIkxPR0dFRElOX0NPT0tJRV9OQU1FIiwiaW5uZXJIVE1MIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2dpbiIsInVzZXJTeXN0ZW1zUmVxdWVzdENsaWVudCIsIm11dGF0ZSIsIm11dGF0aW9uIiwibG9nb3V0TXV0YXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7Ozs7OztJQXVEZ0JBLGVBQWU7ZUFBZkE7O0lBcEJBQyx1QkFBdUI7ZUFBdkJBOzs7dUJBakN1QjsyQkFJaEM7MkJBQ3NCO0FBRTdCLE1BQU1DLDRCQUE0QixDQUFDLENBQUMsRUFBRUMsMEJBQWUsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUUvRCxTQUFTQztJQUNQLE1BQU1DLGdCQUFnQkMsU0FBU0MsZ0JBQWdCLENBQUNOO0lBQ2hELE9BQU9PLE1BQU1DLFNBQVMsQ0FBQ0MsS0FBSyxDQUN6QkMsSUFBSSxDQUFDTixlQUNMTyxNQUFNLENBQUMsQ0FBQ0MsZUFBaUJBLHdCQUF3QkM7QUFDdEQ7QUFFQSxTQUFTQztJQUNQLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFlBQVk7UUFDakM7SUFDRjtJQUNBLHdHQUF3RztJQUN4R0YsT0FBT0csUUFBUSxHQUFHO0FBQ3BCO0FBRUEsU0FBU0Msd0JBQXdCQyxLQUFZO0lBQzNDQSxNQUFNQyxjQUFjO0lBRXBCdkIsa0JBQWtCd0IsSUFBSSxDQUFDO1FBQ3JCLHNHQUFzRztRQUN0R1AsT0FBT0MsT0FBTyxDQUFDRSxRQUFRLENBQUM7SUFDMUI7QUFDRjtBQUVPLFNBQVNuQjtJQUNkSSxtQkFBbUJvQixPQUFPLENBQUMsQ0FBQ1g7UUFDMUIsSUFDRVAsU0FBU21CLE1BQU0sQ0FDWkMsS0FBSyxDQUFDLEtBQ05DLElBQUksQ0FBQyxDQUFDRixTQUFXQSxPQUFPRyxPQUFPLENBQUNDLCtCQUFvQixJQUFJLENBQUMsSUFDNUQ7WUFDQWhCLGFBQWFpQixTQUFTLEdBQ3BCakIsYUFBYWtCLFlBQVksQ0FBQzdCLDBCQUFlLENBQUNDLE1BQU0sS0FBSztZQUN2RFUsYUFBYW1CLG1CQUFtQixDQUFDLFNBQVNqQjtZQUMxQ0YsYUFBYW9CLGdCQUFnQixDQUFDLFNBQVNiO1FBQ3pDLE9BQU8sSUFBSSxDQUFDSixPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXO1lBQ3hDTCxhQUFhaUIsU0FBUyxHQUNwQmpCLGFBQWFrQixZQUFZLENBQUM3QiwwQkFBZSxDQUFDZ0MsS0FBSyxLQUFLO1lBQ3REckIsYUFBYW1CLG1CQUFtQixDQUFDLFNBQVNaO1lBQzFDUCxhQUFhb0IsZ0JBQWdCLENBQUMsU0FBU2xCO1FBQ3pDO0lBQ0Y7QUFDRjtBQUVPLFNBQVNoQjtJQUNkLE9BQU9vQywrQkFBd0IsQ0FBQ0MsTUFBTSxDQUFDO1FBQ3JDQyxVQUFVQyx5QkFBYztJQUMxQjtBQUNGIn0=
    
    }),
    13197: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        buildUpdateUsysUserDataMutation: function() {
            return buildUpdateUsysUserDataMutation;
        },
        cancelSubscriptionMutation: function() {
            return cancelSubscriptionMutation;
        },
        getUploadURLMutation: function() {
            return getUploadURLMutation;
        },
        loginMutation: function() {
            return loginMutation;
        },
        logoutMutation: function() {
            return logoutMutation;
        },
        resetPasswordMutation: function() {
            return resetPasswordMutation;
        },
        signupMutation: function() {
            return signupMutation;
        },
        updatePasswordMutation: function() {
            return updatePasswordMutation;
        },
        verifyEmailMutation: function() {
            return verifyEmailMutation;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const loginMutation = (0, _graphqltag.default)`
      mutation UserLoginRequest($email: String!, $authPassword: String!) {
        usysCreateSession(email: $email, authPassword: $authPassword) {
          user {
            id
            email
            createdOn
            emailVerified
          }
        }
      }
    `;
    function buildUpdateUsysUserDataMutation(dataFields) {
        return (0, _graphqltag.default)`
        mutation UpdateUsysUserData(
          $data: usys_update_user_data!
        ) {
          usysUpdateUserData(
            data: $data
        ) {
          data {
          ${dataFields.map((field)=>{
            const base = `${field.key}: ${field.type}(id: "${field.id}")`;
            if (field.type === 'option') {
                return base + '{\n slug \n}';
            }
            if (field.type === 'fileRef') {
                return base + '{\n id \n}';
            }
            return base;
        }).join('\n')}
            }
          }
        }
      `;
    }
    const signupMutation = (0, _graphqltag.default)`
      mutation UserSignupRequest(
        $email: String!
        $name: String!
        $acceptPrivacy: Boolean
        $acceptCommunications: Boolean
        $authPassword: String!
        $inviteToken: String
        $captchaToken: String
        $redirectPath: String
        $data: usys_update_user_data
      ) {
        usysCreateUser(
          email: $email
          name: $name
          acceptPrivacy: $acceptPrivacy
          acceptCommunications: $acceptCommunications
          authPassword: $authPassword
          inviteToken: $inviteToken
          captchaToken: $captchaToken
          redirectPath: $redirectPath
          data: $data
        ) {
          user {
            id
            email
            name
            createdOn
            emailVerified
          }
        }
      }
    `;
    const logoutMutation = (0, _graphqltag.default)`
      mutation UserLogoutRequest {
        usysDestroySession {
          ok
        }
      }
    `;
    const resetPasswordMutation = (0, _graphqltag.default)`
      mutation UserResetPasswordRequest($email: String!) {
        usysResetPassword(email: $email) {
          ok
        }
      }
    `;
    const updatePasswordMutation = (0, _graphqltag.default)`
      mutation UserUpdatePasswordRequest($authPassword: String!, $token: String!) {
        usysUpdatePassword(authPassword: $authPassword, token: $token) {
          ok
        }
      }
    `;
    const verifyEmailMutation = (0, _graphqltag.default)`
      mutation UserVerifyEmail($verifyToken: String!, $redirectPath: String) {
        usysVerifyEmail(verifyToken: $verifyToken, redirectPath: $redirectPath) {
          ok
        }
      }
    `;
    const cancelSubscriptionMutation = (0, _graphqltag.default)`
      mutation CancelSiteUserSubscription($subscriptionId: String!) {
        ecommerceCancelSubscriptionForSiteUser(subscriptionId: $subscriptionId) {
          ok
        }
      }
    `;
    const getUploadURLMutation = (0, _graphqltag.default)`
      mutation getUploadURL($fieldId: String!, $filename: String!) {
        usysGetUploadURL(fieldId: $fieldId, filename: $filename) {
          presignedPOST {
            url
            fields {
              key
              value
            }
          }
          key
        }
      }
    `;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm11dGF0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJztcblxuZXhwb3J0IGNvbnN0IGxvZ2luTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIFVzZXJMb2dpblJlcXVlc3QoJGVtYWlsOiBTdHJpbmchLCAkYXV0aFBhc3N3b3JkOiBTdHJpbmchKSB7XG4gICAgdXN5c0NyZWF0ZVNlc3Npb24oZW1haWw6ICRlbWFpbCwgYXV0aFBhc3N3b3JkOiAkYXV0aFBhc3N3b3JkKSB7XG4gICAgICB1c2VyIHtcbiAgICAgICAgaWRcbiAgICAgICAgZW1haWxcbiAgICAgICAgY3JlYXRlZE9uXG4gICAgICAgIGVtYWlsVmVyaWZpZWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFVwZGF0ZVVzeXNVc2VyRGF0YU11dGF0aW9uKFxuICBkYXRhRmllbGRzOiBBcnJheTx7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gIH0+XG4pIHtcbiAgcmV0dXJuIGdxbGBcbiAgICBtdXRhdGlvbiBVcGRhdGVVc3lzVXNlckRhdGEoXG4gICAgICAkZGF0YTogdXN5c191cGRhdGVfdXNlcl9kYXRhIVxuICAgICkge1xuICAgICAgdXN5c1VwZGF0ZVVzZXJEYXRhKFxuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICkge1xuICAgICAgZGF0YSB7XG4gICAgICAke2RhdGFGaWVsZHNcbiAgICAgICAgLm1hcCgoZmllbGQpID0+IHtcbiAgICAgICAgICBjb25zdCBiYXNlID0gYCR7ZmllbGQua2V5fTogJHtmaWVsZC50eXBlfShpZDogXCIke2ZpZWxkLmlkfVwiKWA7XG4gICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdvcHRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZSArICd7XFxuIHNsdWcgXFxufSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnZmlsZVJlZicpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlICsgJ3tcXG4gaWQgXFxufSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignXFxuJyl9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGA7XG59XG5cbmV4cG9ydCBjb25zdCBzaWdudXBNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gVXNlclNpZ251cFJlcXVlc3QoXG4gICAgJGVtYWlsOiBTdHJpbmchXG4gICAgJG5hbWU6IFN0cmluZyFcbiAgICAkYWNjZXB0UHJpdmFjeTogQm9vbGVhblxuICAgICRhY2NlcHRDb21tdW5pY2F0aW9uczogQm9vbGVhblxuICAgICRhdXRoUGFzc3dvcmQ6IFN0cmluZyFcbiAgICAkaW52aXRlVG9rZW46IFN0cmluZ1xuICAgICRjYXB0Y2hhVG9rZW46IFN0cmluZ1xuICAgICRyZWRpcmVjdFBhdGg6IFN0cmluZ1xuICAgICRkYXRhOiB1c3lzX3VwZGF0ZV91c2VyX2RhdGFcbiAgKSB7XG4gICAgdXN5c0NyZWF0ZVVzZXIoXG4gICAgICBlbWFpbDogJGVtYWlsXG4gICAgICBuYW1lOiAkbmFtZVxuICAgICAgYWNjZXB0UHJpdmFjeTogJGFjY2VwdFByaXZhY3lcbiAgICAgIGFjY2VwdENvbW11bmljYXRpb25zOiAkYWNjZXB0Q29tbXVuaWNhdGlvbnNcbiAgICAgIGF1dGhQYXNzd29yZDogJGF1dGhQYXNzd29yZFxuICAgICAgaW52aXRlVG9rZW46ICRpbnZpdGVUb2tlblxuICAgICAgY2FwdGNoYVRva2VuOiAkY2FwdGNoYVRva2VuXG4gICAgICByZWRpcmVjdFBhdGg6ICRyZWRpcmVjdFBhdGhcbiAgICAgIGRhdGE6ICRkYXRhXG4gICAgKSB7XG4gICAgICB1c2VyIHtcbiAgICAgICAgaWRcbiAgICAgICAgZW1haWxcbiAgICAgICAgbmFtZVxuICAgICAgICBjcmVhdGVkT25cbiAgICAgICAgZW1haWxWZXJpZmllZFxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGxvZ291dE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBVc2VyTG9nb3V0UmVxdWVzdCB7XG4gICAgdXN5c0Rlc3Ryb3lTZXNzaW9uIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgcmVzZXRQYXNzd29yZE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBVc2VyUmVzZXRQYXNzd29yZFJlcXVlc3QoJGVtYWlsOiBTdHJpbmchKSB7XG4gICAgdXN5c1Jlc2V0UGFzc3dvcmQoZW1haWw6ICRlbWFpbCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVQYXNzd29yZE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBVc2VyVXBkYXRlUGFzc3dvcmRSZXF1ZXN0KCRhdXRoUGFzc3dvcmQ6IFN0cmluZyEsICR0b2tlbjogU3RyaW5nISkge1xuICAgIHVzeXNVcGRhdGVQYXNzd29yZChhdXRoUGFzc3dvcmQ6ICRhdXRoUGFzc3dvcmQsIHRva2VuOiAkdG9rZW4pIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgdmVyaWZ5RW1haWxNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gVXNlclZlcmlmeUVtYWlsKCR2ZXJpZnlUb2tlbjogU3RyaW5nISwgJHJlZGlyZWN0UGF0aDogU3RyaW5nKSB7XG4gICAgdXN5c1ZlcmlmeUVtYWlsKHZlcmlmeVRva2VuOiAkdmVyaWZ5VG9rZW4sIHJlZGlyZWN0UGF0aDogJHJlZGlyZWN0UGF0aCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjYW5jZWxTdWJzY3JpcHRpb25NdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gQ2FuY2VsU2l0ZVVzZXJTdWJzY3JpcHRpb24oJHN1YnNjcmlwdGlvbklkOiBTdHJpbmchKSB7XG4gICAgZWNvbW1lcmNlQ2FuY2VsU3Vic2NyaXB0aW9uRm9yU2l0ZVVzZXIoc3Vic2NyaXB0aW9uSWQ6ICRzdWJzY3JpcHRpb25JZCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBnZXRVcGxvYWRVUkxNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gZ2V0VXBsb2FkVVJMKCRmaWVsZElkOiBTdHJpbmchLCAkZmlsZW5hbWU6IFN0cmluZyEpIHtcbiAgICB1c3lzR2V0VXBsb2FkVVJMKGZpZWxkSWQ6ICRmaWVsZElkLCBmaWxlbmFtZTogJGZpbGVuYW1lKSB7XG4gICAgICBwcmVzaWduZWRQT1NUIHtcbiAgICAgICAgdXJsXG4gICAgICAgIGZpZWxkcyB7XG4gICAgICAgICAga2V5XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAga2V5XG4gICAgfVxuICB9XG5gO1xuIl0sIm5hbWVzIjpbImJ1aWxkVXBkYXRlVXN5c1VzZXJEYXRhTXV0YXRpb24iLCJjYW5jZWxTdWJzY3JpcHRpb25NdXRhdGlvbiIsImdldFVwbG9hZFVSTE11dGF0aW9uIiwibG9naW5NdXRhdGlvbiIsImxvZ291dE11dGF0aW9uIiwicmVzZXRQYXNzd29yZE11dGF0aW9uIiwic2lnbnVwTXV0YXRpb24iLCJ1cGRhdGVQYXNzd29yZE11dGF0aW9uIiwidmVyaWZ5RW1haWxNdXRhdGlvbiIsImdxbCIsImRhdGFGaWVsZHMiLCJtYXAiLCJmaWVsZCIsImJhc2UiLCJrZXkiLCJ0eXBlIiwiaWQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWVnQkEsK0JBQStCO2VBQS9CQTs7SUFtR0hDLDBCQUEwQjtlQUExQkE7O0lBUUFDLG9CQUFvQjtlQUFwQkE7O0lBeEhBQyxhQUFhO2VBQWJBOztJQWdGQUMsY0FBYztlQUFkQTs7SUFRQUMscUJBQXFCO2VBQXJCQTs7SUExQ0FDLGNBQWM7ZUFBZEE7O0lBa0RBQyxzQkFBc0I7ZUFBdEJBOztJQVFBQyxtQkFBbUI7ZUFBbkJBOzs7bUVBMUdHOzs7Ozs7QUFFVCxNQUFNTCxnQkFBZ0JNLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7QUFXakMsQ0FBQztBQUVNLFNBQVNULGdDQUNkVSxVQUlFO0lBRUYsT0FBT0QsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7OztNQVFQLEVBQUVDLFdBQ0NDLEdBQUcsQ0FBQyxDQUFDQztRQUNKLE1BQU1DLE9BQU8sQ0FBQyxFQUFFRCxNQUFNRSxHQUFHLENBQUMsRUFBRSxFQUFFRixNQUFNRyxJQUFJLENBQUMsTUFBTSxFQUFFSCxNQUFNSSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzdELElBQUlKLE1BQU1HLElBQUksS0FBSyxVQUFVO1lBQzNCLE9BQU9GLE9BQU87UUFDaEI7UUFDQSxJQUFJRCxNQUFNRyxJQUFJLEtBQUssV0FBVztZQUM1QixPQUFPRixPQUFPO1FBQ2hCO1FBQ0EsT0FBT0E7SUFDVCxHQUNDSSxJQUFJLENBQUMsTUFBTTs7OztFQUlsQixDQUFDO0FBQ0g7QUFFTyxNQUFNWCxpQkFBaUJHLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ2xDLENBQUM7QUFFTSxNQUFNTCxpQkFBaUJLLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTWxDLENBQUM7QUFFTSxNQUFNSix3QkFBd0JJLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTXpDLENBQUM7QUFFTSxNQUFNRix5QkFBeUJFLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTTFDLENBQUM7QUFFTSxNQUFNRCxzQkFBc0JDLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTXZDLENBQUM7QUFFTSxNQUFNUiw2QkFBNkJRLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTTlDLENBQUM7QUFFTSxNQUFNUCx1QkFBdUJPLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWF4QyxDQUFDIn0=
    
    }),
    3671: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        buildGetLoggedInUserQuery: function() {
            return buildGetLoggedInUserQuery;
        },
        getFieldValidations: function() {
            return getFieldValidations;
        },
        getUserSubscriptions: function() {
            return getUserSubscriptions;
        }
    });
    const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const getUserSubscriptions = (0, _graphqltag.default)`
      query FetchSubscriptions {
        database {
          id
          userSubscriptions {
            _id
            productName
            variantPrice {
              string
              unit
              value
            }
            variantImage {
              url
              alt
            }
            status
            lastInvoiced
            periodEnd
            subCreatedOn
            canceledOn
            billingAddressAddressee
            billingAddressLine1
            billingAddressLine2
            billingAddressCity
            billingAddressState
            billingAddressPostalCode
            billingAddressCountry
            cardLast4
            cardExpiresMonth
            cardExpiresYear
          }
        }
      }
    `;
    function buildGetLoggedInUserQuery(dataFields = []) {
        return (0, _graphqltag.default)`
        query FetchUser {
            site {
              id
              siteUser {
                id
                createdOn
                ${dataFields.length > 0 ? `
                data {
                  ${dataFields.map((field)=>{
            const base = `${field.key}: ${field.type}(id: "${field.id}")`;
            if (field.type === 'option') {
                return base + '{\n slug \n}';
            }
            if (field.type === 'fileRef') {
                return base + '{\n url \n \n id \n}';
            }
            return base;
        }).join('\n')}
                }` : ''}
            }
          }
        }
      `;
    }
    const getFieldValidations = (0, _graphqltag.default)`
      query GetFieldValidations {
        site {
          id
          usysFieldSchema {
            id
            required
            validations {
              minLength
              maxLength
              min
              max
              step
              extensions
              options {
                slug
                name
              }
            }
          }
        }
      }
    `;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyU3Vic2NyaXB0aW9ucyA9IGdxbGBcbiAgcXVlcnkgRmV0Y2hTdWJzY3JpcHRpb25zIHtcbiAgICBkYXRhYmFzZSB7XG4gICAgICBpZFxuICAgICAgdXNlclN1YnNjcmlwdGlvbnMge1xuICAgICAgICBfaWRcbiAgICAgICAgcHJvZHVjdE5hbWVcbiAgICAgICAgdmFyaWFudFByaWNlIHtcbiAgICAgICAgICBzdHJpbmdcbiAgICAgICAgICB1bml0XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICB2YXJpYW50SW1hZ2Uge1xuICAgICAgICAgIHVybFxuICAgICAgICAgIGFsdFxuICAgICAgICB9XG4gICAgICAgIHN0YXR1c1xuICAgICAgICBsYXN0SW52b2ljZWRcbiAgICAgICAgcGVyaW9kRW5kXG4gICAgICAgIHN1YkNyZWF0ZWRPblxuICAgICAgICBjYW5jZWxlZE9uXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzQWRkcmVzc2VlXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzTGluZTFcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NMaW5lMlxuICAgICAgICBiaWxsaW5nQWRkcmVzc0NpdHlcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NTdGF0ZVxuICAgICAgICBiaWxsaW5nQWRkcmVzc1Bvc3RhbENvZGVcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NDb3VudHJ5XG4gICAgICAgIGNhcmRMYXN0NFxuICAgICAgICBjYXJkRXhwaXJlc01vbnRoXG4gICAgICAgIGNhcmRFeHBpcmVzWWVhclxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkR2V0TG9nZ2VkSW5Vc2VyUXVlcnkoXG4gIGRhdGFGaWVsZHM6IEFycmF5PHtcbiAgICBrZXk6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgfT4gPSBbXVxuKSB7XG4gIHJldHVybiBncWxgXG4gICAgcXVlcnkgRmV0Y2hVc2VyIHtcbiAgICAgICAgc2l0ZSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBzaXRlVXNlciB7XG4gICAgICAgICAgICBpZFxuICAgICAgICAgICAgY3JlYXRlZE9uXG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICBkYXRhRmllbGRzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IGBcbiAgICAgICAgICAgIGRhdGEge1xuICAgICAgICAgICAgICAke2RhdGFGaWVsZHNcbiAgICAgICAgICAgICAgICAubWFwKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IGAke2ZpZWxkLmtleX06ICR7ZmllbGQudHlwZX0oaWQ6IFwiJHtmaWVsZC5pZH1cIilgO1xuICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdvcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlICsgJ3tcXG4gc2x1ZyBcXG59JztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnZmlsZVJlZicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2UgKyAne1xcbiB1cmwgXFxuIFxcbiBpZCBcXG59JztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpfVxuICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGA7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRGaWVsZFZhbGlkYXRpb25zID0gZ3FsYFxuICBxdWVyeSBHZXRGaWVsZFZhbGlkYXRpb25zIHtcbiAgICBzaXRlIHtcbiAgICAgIGlkXG4gICAgICB1c3lzRmllbGRTY2hlbWEge1xuICAgICAgICBpZFxuICAgICAgICByZXF1aXJlZFxuICAgICAgICB2YWxpZGF0aW9ucyB7XG4gICAgICAgICAgbWluTGVuZ3RoXG4gICAgICAgICAgbWF4TGVuZ3RoXG4gICAgICAgICAgbWluXG4gICAgICAgICAgbWF4XG4gICAgICAgICAgc3RlcFxuICAgICAgICAgIGV4dGVuc2lvbnNcbiAgICAgICAgICBvcHRpb25zIHtcbiAgICAgICAgICAgIHNsdWdcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG4iXSwibmFtZXMiOlsiYnVpbGRHZXRMb2dnZWRJblVzZXJRdWVyeSIsImdldEZpZWxkVmFsaWRhdGlvbnMiLCJnZXRVc2VyU3Vic2NyaXB0aW9ucyIsImdxbCIsImRhdGFGaWVsZHMiLCJsZW5ndGgiLCJtYXAiLCJmaWVsZCIsImJhc2UiLCJrZXkiLCJ0eXBlIiwiaWQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXNDZ0JBLHlCQUF5QjtlQUF6QkE7O0lBdUNIQyxtQkFBbUI7ZUFBbkJBOztJQTNFQUMsb0JBQW9CO2VBQXBCQTs7O21FQUZHOzs7Ozs7QUFFVCxNQUFNQSx1QkFBdUJDLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDeEMsQ0FBQztBQUVNLFNBQVNILDBCQUNkSSxhQUlLLEVBQUU7SUFFUCxPQUFPRCxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7Ozs7WUFPRCxFQUNFQyxXQUFXQyxNQUFNLEdBQUcsSUFDaEIsQ0FBQzs7Y0FFTCxFQUFFRCxXQUNDRSxHQUFHLENBQUMsQ0FBQ0M7UUFDSixNQUFNQyxPQUFPLENBQUMsRUFBRUQsTUFBTUUsR0FBRyxDQUFDLEVBQUUsRUFBRUYsTUFBTUcsSUFBSSxDQUFDLE1BQU0sRUFBRUgsTUFBTUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM3RCxJQUFJSixNQUFNRyxJQUFJLEtBQUssVUFBVTtZQUMzQixPQUFPRixPQUFPO1FBQ2hCO1FBQ0EsSUFBSUQsTUFBTUcsSUFBSSxLQUFLLFdBQVc7WUFDNUIsT0FBT0YsT0FBTztRQUNoQjtRQUNBLE9BQU9BO0lBQ1QsR0FDQ0ksSUFBSSxDQUFDLE1BQU07YUFDZixDQUFDLEdBQ0ksR0FDTDs7OztFQUlYLENBQUM7QUFDSDtBQUVPLE1BQU1YLHNCQUFzQkUsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0J2QyxDQUFDIn0=
    
    }),
    85513: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals
     window
     */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        applyBindingsAndConditionalVisibility: function() {
            return applyBindingsAndConditionalVisibility;
        },
        applyUserAccountData: function() {
            return applyUserAccountData;
        }
    });
    const _escape = /*#__PURE__*/ _interop_require_default(__webpack_require__(28929));
    const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
    const _Transformers = __webpack_require__(61649);
    const _RenderingUtils = __webpack_require__(86078);
    const _constants = __webpack_require__(29197);
    const _constants1 = __webpack_require__(10873);
    const _constants2 = __webpack_require__(7462);
    const _universalUtils = __webpack_require__(62467);
    const _utils = __webpack_require__(56897);
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const getPropertyMutator = (bindingProperty)=>{
        if (typeof mutators[bindingProperty] === 'function') {
            return mutators[bindingProperty];
        }
        return null;
    };
    const mutators = {
        innerHTML: (node, type, value)=>{
            const valueString = value != null ? String(value) : '';
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
            if (_constants.SHARED_ALLOWED_FIELD_TYPES.innerHTML[type] === 'innerHTML') {
                node.innerHTML = valueString;
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
            } else if (_constants.SHARED_ALLOWED_FIELD_TYPES.innerHTML[type] === 'innerText') {
                node.innerHTML = (0, _escape.default)(valueString);
            }
            if (node.innerHTML) {
                node.classList.remove('w-dyn-bind-empty');
            }
        },
        src: (node, type, value)=>{
            if (value && value.url) {
                node.setAttribute('src', value.url);
            }
            node.classList.remove('w-dyn-bind-empty');
        }
    };
    const bindDataToNode = (node, data, bindings)=>{
        bindings.forEach((binding)=>{
            Object.keys(binding).forEach((bindingProperty)=>{
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"innerHTML" | "src", Binding>>'.
                const bindingValue = binding[bindingProperty];
                const { dataPath, filter, timezone, type } = bindingValue;
                const rawValue = (0, _get.default)(data, dataPath);
                const transformedValue = (0, _Transformers.transformers)(rawValue, filter, {
                    timezone,
                    collectionSlugMap: {},
                    // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
                    currencySettings: window.__WEBFLOW_CURRENCY_SETTINGS
                });
                // @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type '"innerHTML" | "src"'.
                const propertyMutator = getPropertyMutator(bindingProperty);
                if (propertyMutator) {
                    propertyMutator(node, type, transformedValue);
                }
            });
        });
    };
    function applyBindingsAndConditionalVisibility(node, data) {
        // Apply bindings
        if (node.hasAttribute(_constants1.WF_BINDING_DATA_KEY)) {
            const bindingsStr = node.getAttribute(_constants1.WF_BINDING_DATA_KEY) || '';
            const bindings = JSON.parse(decodeURIComponent(bindingsStr));
            if (bindings) {
                bindDataToNode(node, data, bindings);
            }
        }
        // Apply conditional visibility
        if (node.hasAttribute(_constants1.WF_CONDITION_DATA_KEY)) {
            const conditionsStr = node.getAttribute(_constants1.WF_CONDITION_DATA_KEY) || '';
            const conditionData = JSON.parse(decodeURIComponent(conditionsStr));
            if (conditionData) {
                (0, _RenderingUtils.applyConditionToNode)(node, data, conditionData);
            }
        }
    }
    function getFirstAncestor(element, pred) {
        if (element.parentNode === null) {
            return null;
        }
        // @ts-expect-error - TS2345 - Argument of type 'ElementWithInputProperties' is not assignable to parameter of type 'never'.
        if (pred(element)) {
            return element;
        }
        // @ts-expect-error - TS2345 - Argument of type 'ParentNode' is not assignable to parameter of type 'ElementWithInputProperties'.
        return getFirstAncestor(element.parentNode, pred);
    }
    function hasFormFileUploadWrapperClass(element) {
        return element.classList.contains('w-file-upload');
    }
    function setFileUploadValue(node, fileId) {
        if (!fileId) return;
        (0, _universalUtils.setUserFileKey)(node, fileId);
        const formFileUploadWrapper = getFirstAncestor(node, // @ts-expect-error - TS2345 - Argument of type '(element: any) => any' is not assignable to parameter of type '(element: never) => never'.
        hasFormFileUploadWrapperClass);
        if (formFileUploadWrapper === null) return;
        const formFileDefault = formFileUploadWrapper.querySelector('.w-file-upload-default');
        const formFileSuccess = formFileUploadWrapper.querySelector('.w-file-upload-success');
        const formFileError = formFileUploadWrapper.querySelector('.w-file-upload-error');
        const formFileUploading = formFileUploadWrapper.querySelector('.w-file-upload-uploading');
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
        (0, _utils.addHiddenClass)(formFileDefault);
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
        (0, _utils.addHiddenClass)(formFileError);
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
        (0, _utils.addHiddenClass)(formFileUploading);
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
        (0, _utils.removeHiddenClass)(formFileSuccess);
    }
    function applyUserAccountData(node, userData) {
        // Apply user name, checkbox, and custom fields
        if (node.hasAttribute(_constants2.USYS_DATA_ATTRS.field)) {
            const field = node.getAttribute(_constants2.USYS_DATA_ATTRS.field) || '';
            const fieldType = node.getAttribute(_constants2.USYS_DATA_ATTRS.fieldType) || '';
            if (fieldType === 'Option') {
                node.value = (0, _get.default)(userData, [
                    `f_${field}`,
                    'slug'
                ], '');
                return;
            }
            if (fieldType === 'FileRef') {
                setFileUploadValue(node, (0, _get.default)(userData, [
                    `f_${field}`,
                    'id'
                ], ''));
                return;
            }
            const dataPath = field && field.includes(_constants2.RESERVED_USER_PREFIX) ? _constants2.KEY_FROM_RESERVED_USER_FIELD[field] : `f_${field}`;
            // @ts-expect-error - TS2769 - No overload matches this call.
            const value = (0, _get.default)(userData, [
                dataPath
            ], '');
            if (node.type === 'checkbox' && node.checked !== Boolean(value) && node.click) {
                // Set the checkbox to the right `checked` value, but also trigger the onChange event
                node.click();
                return;
            }
            node.value = value;
        }
        // Apply user email, if not empty
        if (node.hasAttribute(_constants2.USYS_DATA_ATTRS.inputType)) {
            const dataPath = node.getAttribute(_constants2.USYS_DATA_ATTRS.inputType) || '';
            const value = (0, _get.default)(userData, [
                dataPath
            ], '');
            if (value) {
                node.value = value;
            }
        }
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    63245: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      document,
      HTMLFormElement,
      HTMLInputElement
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        asyncRequestResetPassword: function() {
            return asyncRequestResetPassword;
        },
        handleResetPasswordForms: function() {
            return handleResetPasswordForms;
        }
    });
    const _utils = __webpack_require__(56897);
    const _constants = __webpack_require__(7462);
    const _mutations = __webpack_require__(13197);
    const resetPasswordFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.resetPassword}"]`;
    // error handling
    const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
    const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
    _constants.resetPasswordErrorStates[_constants.RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR].copy;
    const errorMsgNode = document.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
    const getResetPasswordErrorCode = (error)=>{
        // right now we only have one error, this is for when add more
        let errorCode;
        switch(error){
            default:
                errorCode = _constants.RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR;
        }
        return errorCode;
    };
    function getResetPasswordForms() {
        const resetPasswordForms = document.querySelectorAll(resetPasswordFormQuerySelector);
        return Array.prototype.slice.call(resetPasswordForms).filter((resetPasswordForm)=>resetPasswordForm instanceof HTMLFormElement);
    }
    function handleResetPasswordForms() {
        getResetPasswordForms().forEach((resetPasswordForm)=>{
            resetPasswordForm.addEventListener('submit', (event)=>{
                event.preventDefault();
                const form = event.currentTarget;
                const successMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formSuccess}`);
                if (!(form instanceof HTMLFormElement)) {
                    return;
                }
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                (0, _utils.hideElement)(errorState);
                const emailInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`);
                if (!(emailInput instanceof HTMLInputElement)) {
                    return;
                }
                asyncRequestResetPassword(emailInput.value).then(()=>{
                    (0, _utils.hideElement)(form);
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                    (0, _utils.showAndFocusElement)(successMessage);
                }).catch((error)=>{
                    if (errorState) {
                        // if there isn't an error code, send an empty string so a generic error message appears
                        const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
                        const errorCode = getResetPasswordErrorCode(elementErrorCode);
                        (0, _utils.handleErrorNode)(errorMsgNode, // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                        errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX.RESET_PASSWORD, defaultErrorCopy);
                    }
                });
            });
        });
    }
    function asyncRequestResetPassword(email) {
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.resetPasswordMutation,
            variables: {
                email
            }
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    54284: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      document,
      HTMLFormElement,
      HTMLInputElement,
      window
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        asyncSignUpUser: function() {
            return asyncSignUpUser;
        },
        handleSignUpForms: function() {
            return handleSignUpForms;
        }
    });
    const _utils = __webpack_require__(56897);
    const _constants = __webpack_require__(7462);
    const _mutations = __webpack_require__(13197);
    const _fields = __webpack_require__(18457);
    const _turnstileCaptcha = __webpack_require__(88432);
    const signupFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.signup}"]`;
    const verificationMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formVerfication}`);
    function getSignupForms() {
        const signupForms = document.querySelectorAll(signupFormQuerySelector);
        return Array.prototype.slice.call(signupForms).filter((signupForm)=>signupForm instanceof HTMLFormElement);
    }
    function handleUserInvite(email) {
        // email is for DISPLAY use ONLY for security reasons
        const form = document.querySelector(signupFormQuerySelector);
        if (!(form instanceof HTMLFormElement)) {
            return;
        }
        const emailInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`);
        if (!(emailInput instanceof HTMLInputElement)) {
            return;
        }
        // disable email input
        emailInput.disabled = true;
        emailInput.classList.add('w-input-disabled');
        // and set the value to the user's email
        emailInput.value = email;
    }
    // users are sent to the sign up page to complete verification
    function handleEmailVerification(token, errorState) {
        const form = document.querySelector(signupFormQuerySelector);
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
        (0, _utils.hideElement)(form);
        asyncVerifyEmailToken(token).then(()=>{
            const successMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formSuccess}`);
            const redirectAnchor = document.querySelector(`[${_constants.USYS_DATA_ATTRS.redirectUrl}] a`);
            const redirectPath = (0, _utils.getRedirectPath)();
            // If redirect param exists, use that path for the redirect anchor href
            if (redirectPath && redirectAnchor) {
                redirectAnchor.setAttribute('href', encodeURIComponent(redirectPath));
            }
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
            (0, _utils.showElement)(successMessage);
            // If redirect anchor exists, use that as default redirect path
            (0, _utils.handleRedirect)(redirectAnchor?.getAttribute('href') ?? '/', true);
        }).catch((error)=>{
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
            (0, _utils.showElement)(verificationMessage);
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
            (0, _utils.userFormError)(form, errorState, 'SIGNUP')(error);
        });
    }
    function handleSignUpForms() {
        // we will check to see if there is a token in the link to initiate the verification flow
        // otherwise, the regular sign-up form will be shown
        const params = new URLSearchParams(window.location.search);
        const inviteToken = params.get('inviteToken') || '';
        const verifyToken = params.get('verifyToken') || '';
        const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
        let turnstileScript = null;
        getSignupForms().forEach((signupForm)=>{
            const submitButton = signupForm.querySelector('input[type="submit"]');
            const sendSubmitData = (captchaToken)=>{
                const submitText = (0, _utils.disableSubmit)(submitButton);
                const commonFields = (0, _fields.getCommonFields)(signupForm);
                const customFields = (0, _fields.getCustomFields)(signupForm);
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                (0, _utils.hideElement)(errorState);
                asyncSignUpUser((0, _fields.getFieldValueById)('email', commonFields) || '', (0, _fields.getFieldValueById)('name', commonFields) || '', (0, _fields.getFieldValueById)('password', commonFields) || '', (0, _fields.getFieldValueById)('accept-privacy', commonFields) || false, (0, _fields.getFieldValueById)('accept-communications', commonFields) || false, customFields, inviteToken, captchaToken).then(()=>{
                    if (inviteToken) {
                        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
                        window.location = '/log-in';
                    } else {
                        (0, _utils.hideElement)(signupForm);
                        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                        (0, _utils.showAndFocusElement)(verificationMessage);
                    }
                })// @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                .catch((0, _utils.userFormError)(signupForm, errorState, 'SIGNUP')).finally(()=>{
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                    (0, _utils.resetSubmit)(submitButton, submitText);
                });
            };
            const captchaSiteKey = signupForm.getAttribute('wf-captcha-site-key');
            const captchaMode = signupForm.getAttribute('wf-captcha-mode');
            if (captchaSiteKey && captchaMode && !turnstileScript) {
                // @ts-expect-error - TS18047 - 'submitButton' is possibly 'null'.
                submitButton.setAttribute('disabled', 'true');
                turnstileScript = document.createElement('script');
                turnstileScript.src = 'https://challenges.cloudflare.com/turnstile/v0/api.js';
                document.head.appendChild(turnstileScript);
                turnstileScript.onload = ()=>{
                    signupForm.addEventListener('submit', (e)=>{
                        e.preventDefault();
                        (0, _turnstileCaptcha.renderTurnstileCaptcha)(captchaSiteKey, captchaMode, sendSubmitData);
                    });
                    // @ts-expect-error - TS18047 - 'submitButton' is possibly 'null'.
                    submitButton.removeAttribute('disabled');
                };
            } else {
                signupForm.addEventListener('submit', (e)=>{
                    e.preventDefault();
                    sendSubmitData(null);
                });
            }
            if (inviteToken) {
                const email = params.get('email') || '';
                handleUserInvite(email);
            }
            if (verifyToken) {
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                handleEmailVerification(verifyToken, errorState);
            }
        });
    }
    function asyncSignUpUser(email, name = '', password, acceptPrivacy, acceptCommunications, customFields, inviteToken, captchaToken) {
        const variables = {
            email,
            name,
            acceptPrivacy,
            acceptCommunications,
            authPassword: password,
            data: (0, _fields.getFieldsAsTypeKeys)(customFields),
            inviteToken: inviteToken || undefined,
            captchaToken: captchaToken || undefined,
            redirectPath: (0, _utils.getRedirectPath)()
        };
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.signupMutation,
            variables
        });
    }
    function asyncVerifyEmailToken(verifyToken) {
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.verifyEmailMutation,
            variables: {
                verifyToken,
                redirectPath: (0, _utils.getRedirectPath)()
            }
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    88432: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "renderTurnstileCaptcha", ({
        enumerable: true,
        get: function() {
            return renderTurnstileCaptcha;
        }
    }));
    function setSplashScreenStyles(element) {
        element.style.display = 'flex';
        element.style.position = 'fixed';
        element.style.top = '0';
        element.style.left = '0';
        element.style.width = '100%';
        element.style.height = '100%';
        element.style.background = 'rgba(255, 255, 255, 0.8)';
        element.style.justifyContent = 'center';
        element.style.alignItems = 'center';
        element.style.textAlign = 'center';
        element.style.zIndex = '1000';
        element.style.opacity = '0';
        element.style.transition = 'opacity 1s ease-in-out';
    }
    const addSplashScreen = ()=>{
        const splashScreen = document.createElement('div');
        setSplashScreenStyles(splashScreen);
        const captchaContainer = document.createElement('div');
        splashScreen.appendChild(captchaContainer);
        document.body.appendChild(splashScreen);
        setTimeout(()=>{
            splashScreen.style.opacity = '1';
        }, 10);
        return splashScreen;
    };
    const renderTurnstileCaptcha = (captchaSiteKey, captchaMode, cb)=>{
        let splashScreen;
        if (captchaMode !== 'invisible') {
            splashScreen = addSplashScreen();
        }
        const captchaContainer = document.createElement('div');
        if (splashScreen) {
            splashScreen.appendChild(captchaContainer);
        } else {
            document.body.appendChild(captchaContainer);
        }
        // Render the captcha
        // @ts-expect-error - TS2304: Cannot find name 'turnstile'.
        turnstile.render(captchaContainer, {
            sitekey: captchaSiteKey,
            callback: function(token) {
                setTimeout(function() {
                    if (splashScreen) {
                        splashScreen.remove();
                    }
                }, 1000);
                return cb(token);
            }
        });
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR1cm5zdGlsZUNhcHRjaGEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2V0U3BsYXNoU2NyZWVuU3R5bGVzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICBlbGVtZW50LnN0eWxlLmxlZnQgPSAnMCc7XG4gIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJztcbiAgZWxlbWVudC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xuICBlbGVtZW50LnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJztcbiAgZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgZWxlbWVudC5zdHlsZS56SW5kZXggPSAnMTAwMCc7XG4gIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gJ29wYWNpdHkgMXMgZWFzZS1pbi1vdXQnO1xufVxuXG5jb25zdCBhZGRTcGxhc2hTY3JlZW4gPSAoKSA9PiB7XG4gIGNvbnN0IHNwbGFzaFNjcmVlbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZXRTcGxhc2hTY3JlZW5TdHlsZXMoc3BsYXNoU2NyZWVuKTtcblxuICBjb25zdCBjYXB0Y2hhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNwbGFzaFNjcmVlbi5hcHBlbmRDaGlsZChjYXB0Y2hhQ29udGFpbmVyKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcGxhc2hTY3JlZW4pO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHNwbGFzaFNjcmVlbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICB9LCAxMCk7XG4gIHJldHVybiBzcGxhc2hTY3JlZW47XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyVHVybnN0aWxlQ2FwdGNoYSA9IChcbiAgY2FwdGNoYVNpdGVLZXk6IHN0cmluZyxcbiAgY2FwdGNoYU1vZGU6IHN0cmluZyxcbiAgY2I6IGFueVxuKSA9PiB7XG4gIGxldCBzcGxhc2hTY3JlZW46IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBpZiAoY2FwdGNoYU1vZGUgIT09ICdpbnZpc2libGUnKSB7XG4gICAgc3BsYXNoU2NyZWVuID0gYWRkU3BsYXNoU2NyZWVuKCk7XG4gIH1cblxuICBjb25zdCBjYXB0Y2hhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGlmIChzcGxhc2hTY3JlZW4pIHtcbiAgICBzcGxhc2hTY3JlZW4uYXBwZW5kQ2hpbGQoY2FwdGNoYUNvbnRhaW5lcik7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYXB0Y2hhQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIFJlbmRlciB0aGUgY2FwdGNoYVxuICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzA0OiBDYW5ub3QgZmluZCBuYW1lICd0dXJuc3RpbGUnLlxuICB0dXJuc3RpbGUucmVuZGVyKGNhcHRjaGFDb250YWluZXIsIHtcbiAgICBzaXRla2V5OiBjYXB0Y2hhU2l0ZUtleSxcbiAgICBjYWxsYmFjazogZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc3BsYXNoU2NyZWVuKSB7XG4gICAgICAgICAgc3BsYXNoU2NyZWVuLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICAgIHJldHVybiBjYih0b2tlbik7XG4gICAgfSxcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInJlbmRlclR1cm5zdGlsZUNhcHRjaGEiLCJzZXRTcGxhc2hTY3JlZW5TdHlsZXMiLCJlbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwidGV4dEFsaWduIiwiekluZGV4Iiwib3BhY2l0eSIsInRyYW5zaXRpb24iLCJhZGRTcGxhc2hTY3JlZW4iLCJzcGxhc2hTY3JlZW4iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjYXB0Y2hhQ29udGFpbmVyIiwiYXBwZW5kQ2hpbGQiLCJib2R5Iiwic2V0VGltZW91dCIsImNhcHRjaGFTaXRlS2V5IiwiY2FwdGNoYU1vZGUiLCJjYiIsInR1cm5zdGlsZSIsInJlbmRlciIsInNpdGVrZXkiLCJjYWxsYmFjayIsInRva2VuIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOzs7OytCQThCYUE7OztlQUFBQTs7O0FBOUJiLFNBQVNDLHNCQUFzQkMsT0FBb0I7SUFDakRBLFFBQVFDLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO0lBQ3hCRixRQUFRQyxLQUFLLENBQUNFLFFBQVEsR0FBRztJQUN6QkgsUUFBUUMsS0FBSyxDQUFDRyxHQUFHLEdBQUc7SUFDcEJKLFFBQVFDLEtBQUssQ0FBQ0ksSUFBSSxHQUFHO0lBQ3JCTCxRQUFRQyxLQUFLLENBQUNLLEtBQUssR0FBRztJQUN0Qk4sUUFBUUMsS0FBSyxDQUFDTSxNQUFNLEdBQUc7SUFDdkJQLFFBQVFDLEtBQUssQ0FBQ08sVUFBVSxHQUFHO0lBQzNCUixRQUFRQyxLQUFLLENBQUNRLGNBQWMsR0FBRztJQUMvQlQsUUFBUUMsS0FBSyxDQUFDUyxVQUFVLEdBQUc7SUFDM0JWLFFBQVFDLEtBQUssQ0FBQ1UsU0FBUyxHQUFHO0lBQzFCWCxRQUFRQyxLQUFLLENBQUNXLE1BQU0sR0FBRztJQUN2QlosUUFBUUMsS0FBSyxDQUFDWSxPQUFPLEdBQUc7SUFDeEJiLFFBQVFDLEtBQUssQ0FBQ2EsVUFBVSxHQUFHO0FBQzdCO0FBRUEsTUFBTUMsa0JBQWtCO0lBQ3RCLE1BQU1DLGVBQWVDLFNBQVNDLGFBQWEsQ0FBQztJQUM1Q25CLHNCQUFzQmlCO0lBRXRCLE1BQU1HLG1CQUFtQkYsU0FBU0MsYUFBYSxDQUFDO0lBQ2hERixhQUFhSSxXQUFXLENBQUNEO0lBQ3pCRixTQUFTSSxJQUFJLENBQUNELFdBQVcsQ0FBQ0o7SUFFMUJNLFdBQVc7UUFDVE4sYUFBYWYsS0FBSyxDQUFDWSxPQUFPLEdBQUc7SUFDL0IsR0FBRztJQUNILE9BQU9HO0FBQ1Q7QUFFTyxNQUFNbEIseUJBQXlCLENBQ3BDeUIsZ0JBQ0FDLGFBQ0FDO0lBRUEsSUFBSVQ7SUFDSixJQUFJUSxnQkFBZ0IsYUFBYTtRQUMvQlIsZUFBZUQ7SUFDakI7SUFFQSxNQUFNSSxtQkFBbUJGLFNBQVNDLGFBQWEsQ0FBQztJQUNoRCxJQUFJRixjQUFjO1FBQ2hCQSxhQUFhSSxXQUFXLENBQUNEO0lBQzNCLE9BQU87UUFDTEYsU0FBU0ksSUFBSSxDQUFDRCxXQUFXLENBQUNEO0lBQzVCO0lBRUEscUJBQXFCO0lBQ3JCLDJEQUEyRDtJQUMzRE8sVUFBVUMsTUFBTSxDQUFDUixrQkFBa0I7UUFDakNTLFNBQVNMO1FBQ1RNLFVBQVUsU0FBVUMsS0FBYTtZQUMvQlIsV0FBVztnQkFDVCxJQUFJTixjQUFjO29CQUNoQkEsYUFBYWUsTUFBTTtnQkFDckI7WUFDRixHQUFHO1lBQ0gsT0FBT04sR0FBR0s7UUFDWjtJQUNGO0FBQ0YifQ==
    
    }),
    10104: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /*
      globals
      document,
      HTMLFormElement,
      HTMLInputElement,
      window
    */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        asyncRequestUpdatePassword: function() {
            return asyncRequestUpdatePassword;
        },
        handleUpdatePasswordForms: function() {
            return handleUpdatePasswordForms;
        }
    });
    const _utils = __webpack_require__(56897);
    const _constants = __webpack_require__(7462);
    const _mutations = __webpack_require__(13197);
    const updatePasswordFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.updatePassword}"]`;
    // error handling
    const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
    const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
    _constants.updatePasswordErrorStates[_constants.UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR].copy;
    const errorMsgNode = document.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
    const getUpdatePasswordErrorCode = (error)=>{
        let errorCode;
        switch(error){
            case 'UsysInvalidPassword':
                errorCode = _constants.UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD;
                break;
            default:
                errorCode = _constants.UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR;
        }
        return errorCode;
    };
    function getUpdatePasswordForms() {
        const updatePasswordForms = document.querySelectorAll(updatePasswordFormQuerySelector);
        return Array.prototype.slice.call(updatePasswordForms).filter((updatePasswordForm)=>updatePasswordForm instanceof HTMLFormElement);
    }
    function handleUpdatePasswordForms() {
        getUpdatePasswordForms().forEach((updatePasswordForm)=>{
            updatePasswordForm.addEventListener('submit', (event)=>{
                event.preventDefault();
                const form = event.currentTarget;
                const successMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formSuccess}`);
                if (!(form instanceof HTMLFormElement)) {
                    return;
                }
                const errorElement = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                (0, _utils.hideElement)(errorElement);
                const passwordInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.password}"]`);
                if (!(passwordInput instanceof HTMLInputElement)) {
                    return;
                }
                const params = new URLSearchParams(window.location.search);
                const token = params.get('token') || '';
                asyncRequestUpdatePassword(passwordInput.value, token).then(()=>{
                    (0, _utils.hideElement)(form);
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                    (0, _utils.showAndFocusElement)(successMessage);
                }).catch((error)=>{
                    if (errorState) {
                        // if there isn't an error code, send an empty string so a generic error message appears
                        const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
                        const errorCode = getUpdatePasswordErrorCode(elementErrorCode);
                        (0, _utils.handleErrorNode)(errorMsgNode, // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                        errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX.UPDATE_PASSWORD, defaultErrorCopy);
                    }
                });
            });
        });
    }
    function asyncRequestUpdatePassword(authPassword, token) {
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.updatePasswordMutation,
            variables: {
                authPassword,
                token
            }
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    65438: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    Object.defineProperty(exports, "handleFields", ({
        enumerable: true,
        get: function() {
            return handleFields;
        }
    }));
    const _utils = __webpack_require__(56897);
    const _queries = __webpack_require__(3671);
    const _constants = __webpack_require__(7462);
    const _universalUtils = __webpack_require__(62467);
    const _mutations = __webpack_require__(13197);
    /* global window, HTMLInputElement, HTMLSelectElement, document */ function asyncGetFieldValidations() {
        return _utils.userSystemsRequestClient.query({
            query: _queries.getFieldValidations
        });
    }
    function signFile(file, { fieldId }) {
        return _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.getUploadURLMutation,
            variables: {
                fieldId,
                filename: file.name
            }
        });
    }
    function setRequired(input, userField) {
        if (userField.required == null) return;
        input.required = userField.required;
    }
    const inputAttributeMap = {
        minLength: 'minlength',
        maxLength: 'maxlength',
        min: 'min',
        max: 'max',
        step: 'step',
        extensions: 'accept'
    };
    const formatValueMap = {
        extensions: function accept(value) {
            return value.join(',');
        }
    };
    function convertToStr(value) {
        return String(value);
    }
    function setValidations(input, userField) {
        if (userField.validations == null) return;
        Object.keys(userField.validations).map((attr)=>{
            const val = userField.validations[attr];
            if (attr === 'options' && Array.isArray(val) && input instanceof HTMLSelectElement) {
                val.forEach((option)=>{
                    if (option.slug && option.name) {
                        const opt = document.createElement('option');
                        opt.value = option.slug;
                        opt.innerHTML = option.name;
                        input.appendChild(opt);
                    }
                });
            }
            if (val !== null && inputAttributeMap[attr]) {
                let formatValue;
                if (formatValueMap[attr]) {
                    formatValue = formatValueMap[attr];
                } else {
                    formatValue = convertToStr;
                }
                input.setAttribute(inputAttributeMap[attr], formatValue(val));
            }
            if (attr === 'maxLength' && val === null) {
                input.removeAttribute('maxlength');
            }
        });
    }
    function setUserFieldValidationAttr(input, userField) {
        const fieldType = input.getAttribute(_constants.USYS_DATA_ATTRS.fieldType);
        if (!_constants.NO_REQUIRED_ATTRIBUTE.includes(fieldType)) {
            setRequired(input, userField);
        }
        setValidations(input, userField);
    }
    function matchInputToData(input, userFieldData) {
        const fieldId = input.getAttribute(_constants.USYS_DATA_ATTRS.field);
        if (!fieldId) {
            return null;
        }
        for(let i = 0; i < userFieldData.length; i++){
            if (userFieldData[i].id === fieldId) {
                return userFieldData[i];
            }
        }
        return null;
    }
    function setFieldValidation(customFieldInputs) {
        asyncGetFieldValidations().then((response)=>{
            const userFieldData = response.data.site.usysFieldSchema;
            if (!userFieldData) return;
            for(let i = 0; i < customFieldInputs.length; i++){
                const input = customFieldInputs[i];
                if (!input || !(input instanceof HTMLInputElement || input instanceof HTMLSelectElement) || input.getAttribute(_constants.USYS_DATA_ATTRS.fieldType) === 'Bool') {
                    continue;
                }
                const userField = matchInputToData(input, userFieldData);
                if (!userField) continue;
                setUserFieldValidationAttr(input, userField);
            }
        }).catch((err)=>{
            console.error(err);
        });
    }
    function getMatchingSiblings(e, pred) {
        const siblings = [];
        if (e.target.parentNode === null) {
            return siblings;
        }
        [].slice.call(e.target.parentNode.children).forEach((element)=>{
            if (pred(element)) {
                siblings.push(element);
            }
        });
        return siblings;
    }
    function isFormFileUploadWrapper(element) {
        return element.classList.contains('w-file-upload');
    }
    function getFirstAncestor(element, pred) {
        if (element.parentNode === null) {
            return null;
        }
        if (pred(element)) {
            return element;
        }
        return getFirstAncestor(element.parentNode, pred);
    }
    function handleFileRemoveLink(cancelRemoveLinkElement, inputElement, props) {
        const { deleteFile, cancelFile } = props;
        cancelRemoveLinkElement.addEventListener('click', function(e) {
            if (e.type === 'keydown') {
                if (e.which !== 13 && e.which !== 32) {
                    return;
                }
                e.preventDefault();
            }
            if ((0, _universalUtils.getUserFileKey)(inputElement)) {
                deleteFile();
                return;
            }
            cancelFile();
        });
    }
    function handleFileUploadInput(element, props) {
        const { showUploading, successUpload, errorUpload, changeFileNameText, disableSubmitButton, filesState } = props;
        const fieldId = element.getAttribute(_constants.USYS_DATA_ATTRS.field);
        element.addEventListener('change', function(e) {
            if (filesState.isUploading) return;
            const file = e.target && e.target.files && e.target.files[0];
            if (!file) {
                return;
            }
            showUploading();
            changeFileNameText(file.name);
            filesState.isUploading = true;
            if (!filesState.isUploading) {
                disableSubmitButton();
            }
            let key = '';
            signFile(file, {
                fieldId
            }).then((res)=>{
                if (!res.data || !res.data.usysGetUploadURL || !res.data.usysGetUploadURL.presignedPOST) {
                    throw Error(res);
                }
                const presignedPOST = res.data.usysGetUploadURL.presignedPOST;
                key = res.data.usysGetUploadURL.key;
                const AWSFields = {};
                presignedPOST.fields.forEach((field)=>{
                    const _key = field.key;
                    const value = field.value;
                    AWSFields[_key] = value;
                });
                return (0, _universalUtils.uploadFileToS3)(presignedPOST.url, AWSFields, file);
            }).then(()=>{
                successUpload(key);
            }).catch((err)=>{
                let code = _constants.SERVER_DATA_VALIDATION_ERRORS.DefaultError;
                if (typeof err === 'string') {
                    const content = new window.DOMParser().parseFromString(err, 'text/xml');
                    const codeElements = content.getElementsByTagName('Code');
                    if (codeElements) {
                        code = codeElements[0].innerHTML;
                    }
                }
                if (typeof err === 'object' && err.hasOwnProperty('graphQLErrors')) {
                    if (err.graphQLErrors[0].code === 'UsysForbiddenFileExtension') {
                        code = _constants.SERVER_DATA_VALIDATION_ERRORS.ExtensionsError;
                    }
                }
                errorUpload(code);
            }).finally(()=>{
                filesState.isUploading = false;
            });
        });
    }
    const WF_SUBMIT_BUTTON_VALUE = 'wf-submit-button-value';
    const adaptAWSErrors = (code)=>{
        if (code === 'EntityTooLarge') return _constants.SERVER_DATA_VALIDATION_ERRORS.MinSizeError;
        if (code === 'EntityTooSmall') return _constants.SERVER_DATA_VALIDATION_ERRORS.MaxSizeError;
        return code;
    };
    function handleFileUploadInputs(customFieldInputs, props) {
        const { disableSubmitButton, enableSubmitButton } = props;
        const filesState = {
            isUploading: false
        };
        customFieldInputs.forEach((el)=>{
            if (el.getAttribute('type') === 'file') {
                const formFileUploadWrapper = getFirstAncestor(el, isFormFileUploadWrapper);
                const formFileDefault = formFileUploadWrapper.querySelector('.w-file-upload-default');
                const formFileSuccess = formFileUploadWrapper.querySelector('.w-file-upload-success');
                const formFileError = formFileUploadWrapper.querySelector('.w-file-upload-error');
                const formFileErrorMsg = formFileError.querySelector('.w-file-upload-error-msg');
                const formFileUploading = formFileUploadWrapper.querySelector('.w-file-upload-uploading');
                const fileUploadFileName = formFileUploadWrapper.querySelector('.w-file-upload-file-name');
                const fileRemoveLink = formFileUploadWrapper.querySelector('.w-file-remove-link');
                const fileUploadLabel = formFileUploadWrapper.querySelector('.w-file-upload-label');
                // eslint-disable-next-line no-inner-declarations
                function showUploading() {
                    (0, _utils.addHiddenClass)(formFileDefault);
                    (0, _utils.addHiddenClass)(formFileError);
                    (0, _utils.addHiddenClass)(formFileSuccess);
                    (0, _utils.removeHiddenClass)(formFileUploading);
                    formFileUploading.focus();
                    disableSubmitButton();
                }
                // eslint-disable-next-line no-inner-declarations
                function successUpload(fileUrl) {
                    (0, _utils.addHiddenClass)(formFileDefault);
                    (0, _utils.addHiddenClass)(formFileError);
                    (0, _utils.addHiddenClass)(formFileUploading);
                    (0, _utils.removeHiddenClass)(formFileSuccess);
                    formFileSuccess.focus();
                    enableSubmitButton();
                    (0, _universalUtils.setTempUserFileKey)(el, fileUrl);
                }
                // eslint-disable-next-line no-inner-declarations
                function errorUpload(code = _constants.SERVER_DATA_VALIDATION_ERRORS.DefaultError) {
                    const errorText = formFileErrorMsg.getAttribute(adaptAWSErrors(code).toLowerCase());
                    (0, _utils.addHiddenClass)(formFileSuccess);
                    (0, _utils.addHiddenClass)(formFileUploading);
                    (0, _utils.removeHiddenClass)(formFileDefault);
                    (0, _utils.removeHiddenClass)(formFileError);
                    if (errorText) {
                        formFileErrorMsg.innerHTML = errorText;
                    }
                    formFileError.focus();
                    enableSubmitButton();
                }
                // eslint-disable-next-line no-inner-declarations
                function showDefault() {
                    (0, _utils.addHiddenClass)(formFileSuccess);
                    (0, _utils.addHiddenClass)(formFileUploading);
                    (0, _utils.addHiddenClass)(formFileError);
                    (0, _utils.removeHiddenClass)(formFileDefault);
                    fileUploadLabel.focus();
                }
                // eslint-disable-next-line no-inner-declarations
                function changeFileNameText(filename) {
                    fileUploadFileName.innerHTML = filename;
                }
                // eslint-disable-next-line no-inner-declarations
                function cancelFile() {
                    changeFileNameText('');
                    (0, _universalUtils.removeTempUserFileKey)(el);
                    showDefault();
                }
                // eslint-disable-next-line no-inner-declarations
                function deleteFile() {
                    (0, _universalUtils.setUserFileKey)(el, 'DELETE');
                    cancelFile();
                }
                handleFileRemoveLink(fileRemoveLink, el, {
                    deleteFile,
                    cancelFile
                });
                handleFileUploadInput(el, {
                    showUploading,
                    successUpload,
                    errorUpload,
                    changeFileNameText,
                    fileRemoveLink,
                    filesState
                });
            }
        });
    }
    function handleFields() {
        const userForms = document.querySelectorAll(`form[${_constants.USYS_DATA_ATTRS.formType}]`);
        userForms.forEach((userForm)=>{
            const customFieldInputs = userForm.querySelectorAll(`input[${_constants.USYS_DATA_ATTRS.field}], select[${_constants.USYS_DATA_ATTRS.field}]`);
            const submitButton = userForm.querySelector('input[type="submit"]');
            submitButton.setAttribute(WF_SUBMIT_BUTTON_VALUE, submitButton.value);
            function disableSubmitButton() {
                if (submitButton) {
                    (0, _utils.disableSubmit)(submitButton);
                }
            }
            function enableSubmitButton() {
                if (submitButton) {
                    submitButton.removeAttribute('disabled');
                    submitButton.setAttribute('value', submitButton.getAttribute(WF_SUBMIT_BUTTON_VALUE) || 'Submit');
                }
            }
            if (customFieldInputs.length > 0) {
                setFieldValidation(customFieldInputs);
                handleFileUploadInputs(customFieldInputs, {
                    disableSubmitButton,
                    enableSubmitButton
                });
            }
            const CHECKBOX_CLASS_NAME = 'w-checkbox-input';
            const CHECKED_CLASS = 'w--redirected-checked';
            const customCheckboxes = document.querySelectorAll(`form[${_constants.USYS_DATA_ATTRS.formType}] input[type="checkbox"]:not(` + CHECKBOX_CLASS_NAME + ')');
            customCheckboxes.forEach((checkbox)=>{
                checkbox.addEventListener('change', function(e) {
                    getMatchingSiblings(e, (element)=>{
                        return element.classList.contains(CHECKBOX_CLASS_NAME);
                    }).forEach((sibling)=>{
                        sibling.classList.toggle(CHECKED_CLASS);
                    });
                });
            });
        });
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzeXNGb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGRpc2FibGVTdWJtaXQsXG4gIHVzZXJTeXN0ZW1zUmVxdWVzdENsaWVudCxcbiAgYWRkSGlkZGVuQ2xhc3MsXG4gIHJlbW92ZUhpZGRlbkNsYXNzLFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7Z2V0RmllbGRWYWxpZGF0aW9uc30gZnJvbSAnLi9xdWVyaWVzJztcbmltcG9ydCB7XG4gIE5PX1JFUVVJUkVEX0FUVFJJQlVURSxcbiAgU0VSVkVSX0RBVEFfVkFMSURBVElPTl9FUlJPUlMsXG4gIFVTWVNfREFUQV9BVFRSUyxcbn0gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvdXNlcnMvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIHVwbG9hZEZpbGVUb1MzLFxuICBnZXRVc2VyRmlsZUtleSxcbiAgc2V0VGVtcFVzZXJGaWxlS2V5LFxuICBzZXRVc2VyRmlsZUtleSxcbiAgcmVtb3ZlVGVtcFVzZXJGaWxlS2V5LFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy91c2Vycy91dGlscy91bml2ZXJzYWxVdGlscyc7XG5pbXBvcnQge2dldFVwbG9hZFVSTE11dGF0aW9ufSBmcm9tICcuL211dGF0aW9ucyc7XG4vKiBnbG9iYWwgd2luZG93LCBIVE1MSW5wdXRFbGVtZW50LCBIVE1MU2VsZWN0RWxlbWVudCwgZG9jdW1lbnQgKi9cblxuZnVuY3Rpb24gYXN5bmNHZXRGaWVsZFZhbGlkYXRpb25zKCkge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50LnF1ZXJ5KHtcbiAgICBxdWVyeTogZ2V0RmllbGRWYWxpZGF0aW9ucyxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNpZ25GaWxlKGZpbGUsIHtmaWVsZElkfSkge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50Lm11dGF0ZSh7XG4gICAgbXV0YXRpb246IGdldFVwbG9hZFVSTE11dGF0aW9uLFxuICAgIHZhcmlhYmxlczoge1xuICAgICAgZmllbGRJZCxcbiAgICAgIGZpbGVuYW1lOiBmaWxlLm5hbWUsXG4gICAgfSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFJlcXVpcmVkKGlucHV0LCB1c2VyRmllbGQpIHtcbiAgaWYgKHVzZXJGaWVsZC5yZXF1aXJlZCA9PSBudWxsKSByZXR1cm47XG4gIGlucHV0LnJlcXVpcmVkID0gdXNlckZpZWxkLnJlcXVpcmVkO1xufVxuXG5jb25zdCBpbnB1dEF0dHJpYnV0ZU1hcCA9IHtcbiAgbWluTGVuZ3RoOiAnbWlubGVuZ3RoJyxcbiAgbWF4TGVuZ3RoOiAnbWF4bGVuZ3RoJyxcbiAgbWluOiAnbWluJyxcbiAgbWF4OiAnbWF4JyxcbiAgc3RlcDogJ3N0ZXAnLFxuICBleHRlbnNpb25zOiAnYWNjZXB0Jyxcbn07XG5cbmNvbnN0IGZvcm1hdFZhbHVlTWFwID0ge1xuICBleHRlbnNpb25zOiBmdW5jdGlvbiBhY2NlcHQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuam9pbignLCcpO1xuICB9LFxufTtcblxuZnVuY3Rpb24gY29udmVydFRvU3RyKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZXRWYWxpZGF0aW9ucyhpbnB1dCwgdXNlckZpZWxkKSB7XG4gIGlmICh1c2VyRmllbGQudmFsaWRhdGlvbnMgPT0gbnVsbCkgcmV0dXJuO1xuXG4gIE9iamVjdC5rZXlzKHVzZXJGaWVsZC52YWxpZGF0aW9ucykubWFwKChhdHRyKSA9PiB7XG4gICAgY29uc3QgdmFsID0gdXNlckZpZWxkLnZhbGlkYXRpb25zW2F0dHJdO1xuXG4gICAgaWYgKFxuICAgICAgYXR0ciA9PT0gJ29wdGlvbnMnICYmXG4gICAgICBBcnJheS5pc0FycmF5KHZhbCkgJiZcbiAgICAgIGlucHV0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnRcbiAgICApIHtcbiAgICAgIHZhbC5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbi5zbHVnICYmIG9wdGlvbi5uYW1lKSB7XG4gICAgICAgICAgY29uc3Qgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgb3B0LnZhbHVlID0gb3B0aW9uLnNsdWc7XG4gICAgICAgICAgb3B0LmlubmVySFRNTCA9IG9wdGlvbi5uYW1lO1xuICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh2YWwgIT09IG51bGwgJiYgaW5wdXRBdHRyaWJ1dGVNYXBbYXR0cl0pIHtcbiAgICAgIGxldCBmb3JtYXRWYWx1ZTtcbiAgICAgIGlmIChmb3JtYXRWYWx1ZU1hcFthdHRyXSkge1xuICAgICAgICBmb3JtYXRWYWx1ZSA9IGZvcm1hdFZhbHVlTWFwW2F0dHJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0VmFsdWUgPSBjb252ZXJ0VG9TdHI7XG4gICAgICB9XG5cbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShpbnB1dEF0dHJpYnV0ZU1hcFthdHRyXSwgZm9ybWF0VmFsdWUodmFsKSk7XG4gICAgfVxuXG4gICAgaWYgKGF0dHIgPT09ICdtYXhMZW5ndGgnICYmIHZhbCA9PT0gbnVsbCkge1xuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKCdtYXhsZW5ndGgnKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRVc2VyRmllbGRWYWxpZGF0aW9uQXR0cihpbnB1dCwgdXNlckZpZWxkKSB7XG4gIGNvbnN0IGZpZWxkVHlwZSA9IGlucHV0LmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmllbGRUeXBlKTtcbiAgaWYgKCFOT19SRVFVSVJFRF9BVFRSSUJVVEUuaW5jbHVkZXMoZmllbGRUeXBlKSkge1xuICAgIHNldFJlcXVpcmVkKGlucHV0LCB1c2VyRmllbGQpO1xuICB9XG4gIHNldFZhbGlkYXRpb25zKGlucHV0LCB1c2VyRmllbGQpO1xufVxuXG5mdW5jdGlvbiBtYXRjaElucHV0VG9EYXRhKGlucHV0LCB1c2VyRmllbGREYXRhKSB7XG4gIGNvbnN0IGZpZWxkSWQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLmZpZWxkKTtcbiAgaWYgKCFmaWVsZElkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyRmllbGREYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHVzZXJGaWVsZERhdGFbaV0uaWQgPT09IGZpZWxkSWQpIHtcbiAgICAgIHJldHVybiB1c2VyRmllbGREYXRhW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0RmllbGRWYWxpZGF0aW9uKGN1c3RvbUZpZWxkSW5wdXRzKSB7XG4gIGFzeW5jR2V0RmllbGRWYWxpZGF0aW9ucygpXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCB1c2VyRmllbGREYXRhID0gcmVzcG9uc2UuZGF0YS5zaXRlLnVzeXNGaWVsZFNjaGVtYTtcbiAgICAgIGlmICghdXNlckZpZWxkRGF0YSkgcmV0dXJuO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1c3RvbUZpZWxkSW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gY3VzdG9tRmllbGRJbnB1dHNbaV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaW5wdXQgfHxcbiAgICAgICAgICAhKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50IHx8XG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50XG4gICAgICAgICAgKSB8fFxuICAgICAgICAgIGlucHV0LmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmllbGRUeXBlKSA9PT0gJ0Jvb2wnXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZXJGaWVsZCA9IG1hdGNoSW5wdXRUb0RhdGEoaW5wdXQsIHVzZXJGaWVsZERhdGEpO1xuICAgICAgICBpZiAoIXVzZXJGaWVsZCkgY29udGludWU7XG4gICAgICAgIHNldFVzZXJGaWVsZFZhbGlkYXRpb25BdHRyKGlucHV0LCB1c2VyRmllbGQpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hpbmdTaWJsaW5ncyhlLCBwcmVkKSB7XG4gIGNvbnN0IHNpYmxpbmdzID0gW107XG4gIGlmIChlLnRhcmdldC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHNpYmxpbmdzO1xuICB9XG4gIFtdLnNsaWNlLmNhbGwoZS50YXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlbikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIGlmIChwcmVkKGVsZW1lbnQpKSB7XG4gICAgICBzaWJsaW5ncy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzaWJsaW5ncztcbn1cblxuZnVuY3Rpb24gaXNGb3JtRmlsZVVwbG9hZFdyYXBwZXIoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3ctZmlsZS11cGxvYWQnKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RBbmNlc3RvcihlbGVtZW50LCBwcmVkKSB7XG4gIGlmIChlbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHJlZChlbGVtZW50KSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBnZXRGaXJzdEFuY2VzdG9yKGVsZW1lbnQucGFyZW50Tm9kZSwgcHJlZCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZpbGVSZW1vdmVMaW5rKGNhbmNlbFJlbW92ZUxpbmtFbGVtZW50LCBpbnB1dEVsZW1lbnQsIHByb3BzKSB7XG4gIGNvbnN0IHtkZWxldGVGaWxlLCBjYW5jZWxGaWxlfSA9IHByb3BzO1xuICBjYW5jZWxSZW1vdmVMaW5rRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nKSB7XG4gICAgICBpZiAoZS53aGljaCAhPT0gMTMgJiYgZS53aGljaCAhPT0gMzIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmIChnZXRVc2VyRmlsZUtleShpbnB1dEVsZW1lbnQpKSB7XG4gICAgICBkZWxldGVGaWxlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbmNlbEZpbGUoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZpbGVVcGxvYWRJbnB1dChlbGVtZW50LCBwcm9wcykge1xuICBjb25zdCB7XG4gICAgc2hvd1VwbG9hZGluZyxcbiAgICBzdWNjZXNzVXBsb2FkLFxuICAgIGVycm9yVXBsb2FkLFxuICAgIGNoYW5nZUZpbGVOYW1lVGV4dCxcbiAgICBkaXNhYmxlU3VibWl0QnV0dG9uLFxuICAgIGZpbGVzU3RhdGUsXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZmllbGRJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFVTWVNfREFUQV9BVFRSUy5maWVsZCk7XG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChmaWxlc1N0YXRlLmlzVXBsb2FkaW5nKSByZXR1cm47XG4gICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0ICYmIGUudGFyZ2V0LmZpbGVzICYmIGUudGFyZ2V0LmZpbGVzWzBdO1xuICAgIGlmICghZmlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNob3dVcGxvYWRpbmcoKTtcbiAgICBjaGFuZ2VGaWxlTmFtZVRleHQoZmlsZS5uYW1lKTtcblxuICAgIGZpbGVzU3RhdGUuaXNVcGxvYWRpbmcgPSB0cnVlO1xuXG4gICAgaWYgKCFmaWxlc1N0YXRlLmlzVXBsb2FkaW5nKSB7XG4gICAgICBkaXNhYmxlU3VibWl0QnV0dG9uKCk7XG4gICAgfVxuXG4gICAgbGV0IGtleSA9ICcnO1xuXG4gICAgc2lnbkZpbGUoZmlsZSwge2ZpZWxkSWR9KVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIXJlcy5kYXRhIHx8XG4gICAgICAgICAgIXJlcy5kYXRhLnVzeXNHZXRVcGxvYWRVUkwgfHxcbiAgICAgICAgICAhcmVzLmRhdGEudXN5c0dldFVwbG9hZFVSTC5wcmVzaWduZWRQT1NUXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IEVycm9yKHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlc2lnbmVkUE9TVCA9IHJlcy5kYXRhLnVzeXNHZXRVcGxvYWRVUkwucHJlc2lnbmVkUE9TVDtcbiAgICAgICAga2V5ID0gcmVzLmRhdGEudXN5c0dldFVwbG9hZFVSTC5rZXk7XG4gICAgICAgIGNvbnN0IEFXU0ZpZWxkcyA9IHt9O1xuICAgICAgICBwcmVzaWduZWRQT1NULmZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IF9rZXkgPSBmaWVsZC5rZXk7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZC52YWx1ZTtcbiAgICAgICAgICBBV1NGaWVsZHNbX2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1cGxvYWRGaWxlVG9TMyhwcmVzaWduZWRQT1NULnVybCwgQVdTRmllbGRzLCBmaWxlKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHN1Y2Nlc3NVcGxvYWQoa2V5KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBsZXQgY29kZSA9IFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLkRlZmF1bHRFcnJvcjtcbiAgICAgICAgaWYgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxuICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgJ3RleHQveG1sJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgY29kZUVsZW1lbnRzID0gY29udGVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnQ29kZScpO1xuICAgICAgICAgIGlmIChjb2RlRWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlRWxlbWVudHNbMF0uaW5uZXJIVE1MO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiYgZXJyLmhhc093blByb3BlcnR5KCdncmFwaFFMRXJyb3JzJykpIHtcbiAgICAgICAgICBpZiAoZXJyLmdyYXBoUUxFcnJvcnNbMF0uY29kZSA9PT0gJ1VzeXNGb3JiaWRkZW5GaWxlRXh0ZW5zaW9uJykge1xuICAgICAgICAgICAgY29kZSA9IFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLkV4dGVuc2lvbnNFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JVcGxvYWQoY29kZSk7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBmaWxlc1N0YXRlLmlzVXBsb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmNvbnN0IFdGX1NVQk1JVF9CVVRUT05fVkFMVUUgPSAnd2Ytc3VibWl0LWJ1dHRvbi12YWx1ZSc7XG5cbmNvbnN0IGFkYXB0QVdTRXJyb3JzID0gKGNvZGUpID0+IHtcbiAgaWYgKGNvZGUgPT09ICdFbnRpdHlUb29MYXJnZScpXG4gICAgcmV0dXJuIFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLk1pblNpemVFcnJvcjtcbiAgaWYgKGNvZGUgPT09ICdFbnRpdHlUb29TbWFsbCcpXG4gICAgcmV0dXJuIFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLk1heFNpemVFcnJvcjtcbiAgcmV0dXJuIGNvZGU7XG59O1xuXG5mdW5jdGlvbiBoYW5kbGVGaWxlVXBsb2FkSW5wdXRzKGN1c3RvbUZpZWxkSW5wdXRzLCBwcm9wcykge1xuICBjb25zdCB7ZGlzYWJsZVN1Ym1pdEJ1dHRvbiwgZW5hYmxlU3VibWl0QnV0dG9ufSA9IHByb3BzO1xuICBjb25zdCBmaWxlc1N0YXRlID0ge1xuICAgIGlzVXBsb2FkaW5nOiBmYWxzZSxcbiAgfTtcbiAgY3VzdG9tRmllbGRJbnB1dHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdmaWxlJykge1xuICAgICAgY29uc3QgZm9ybUZpbGVVcGxvYWRXcmFwcGVyID0gZ2V0Rmlyc3RBbmNlc3RvcihcbiAgICAgICAgZWwsXG4gICAgICAgIGlzRm9ybUZpbGVVcGxvYWRXcmFwcGVyXG4gICAgICApO1xuICAgICAgY29uc3QgZm9ybUZpbGVEZWZhdWx0ID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC1kZWZhdWx0J1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGZvcm1GaWxlU3VjY2VzcyA9IGZvcm1GaWxlVXBsb2FkV3JhcHBlci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS11cGxvYWQtc3VjY2VzcydcbiAgICAgICk7XG4gICAgICBjb25zdCBmb3JtRmlsZUVycm9yID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC1lcnJvcidcbiAgICAgICk7XG4gICAgICBjb25zdCBmb3JtRmlsZUVycm9yTXNnID0gZm9ybUZpbGVFcnJvci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS11cGxvYWQtZXJyb3ItbXNnJ1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGZvcm1GaWxlVXBsb2FkaW5nID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC11cGxvYWRpbmcnXG4gICAgICApO1xuICAgICAgY29uc3QgZmlsZVVwbG9hZEZpbGVOYW1lID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC1maWxlLW5hbWUnXG4gICAgICApO1xuXG4gICAgICBjb25zdCBmaWxlUmVtb3ZlTGluayA9IGZvcm1GaWxlVXBsb2FkV3JhcHBlci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS1yZW1vdmUtbGluaydcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVVcGxvYWRMYWJlbCA9IGZvcm1GaWxlVXBsb2FkV3JhcHBlci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS11cGxvYWQtbGFiZWwnXG4gICAgICApO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgICBmdW5jdGlvbiBzaG93VXBsb2FkaW5nKCkge1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZURlZmF1bHQpO1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZUVycm9yKTtcbiAgICAgICAgYWRkSGlkZGVuQ2xhc3MoZm9ybUZpbGVTdWNjZXNzKTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVVcGxvYWRpbmcpO1xuICAgICAgICBmb3JtRmlsZVVwbG9hZGluZy5mb2N1cygpO1xuXG4gICAgICAgIGRpc2FibGVTdWJtaXRCdXR0b24oKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWlubmVyLWRlY2xhcmF0aW9uc1xuICAgICAgZnVuY3Rpb24gc3VjY2Vzc1VwbG9hZChmaWxlVXJsKSB7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlRGVmYXVsdCk7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlRXJyb3IpO1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZVVwbG9hZGluZyk7XG4gICAgICAgIHJlbW92ZUhpZGRlbkNsYXNzKGZvcm1GaWxlU3VjY2Vzcyk7XG4gICAgICAgIGZvcm1GaWxlU3VjY2Vzcy5mb2N1cygpO1xuICAgICAgICBlbmFibGVTdWJtaXRCdXR0b24oKTtcbiAgICAgICAgc2V0VGVtcFVzZXJGaWxlS2V5KGVsLCBmaWxlVXJsKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWlubmVyLWRlY2xhcmF0aW9uc1xuICAgICAgZnVuY3Rpb24gZXJyb3JVcGxvYWQoY29kZSA9IFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLkRlZmF1bHRFcnJvcikge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBmb3JtRmlsZUVycm9yTXNnLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICBhZGFwdEFXU0Vycm9ycyhjb2RlKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlU3VjY2Vzcyk7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlVXBsb2FkaW5nKTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVEZWZhdWx0KTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVFcnJvcik7XG4gICAgICAgIGlmIChlcnJvclRleHQpIHtcbiAgICAgICAgICBmb3JtRmlsZUVycm9yTXNnLmlubmVySFRNTCA9IGVycm9yVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBmb3JtRmlsZUVycm9yLmZvY3VzKCk7XG4gICAgICAgIGVuYWJsZVN1Ym1pdEJ1dHRvbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgICBmdW5jdGlvbiBzaG93RGVmYXVsdCgpIHtcbiAgICAgICAgYWRkSGlkZGVuQ2xhc3MoZm9ybUZpbGVTdWNjZXNzKTtcbiAgICAgICAgYWRkSGlkZGVuQ2xhc3MoZm9ybUZpbGVVcGxvYWRpbmcpO1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZUVycm9yKTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVEZWZhdWx0KTtcbiAgICAgICAgZmlsZVVwbG9hZExhYmVsLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICAgIGZ1bmN0aW9uIGNoYW5nZUZpbGVOYW1lVGV4dChmaWxlbmFtZSkge1xuICAgICAgICBmaWxlVXBsb2FkRmlsZU5hbWUuaW5uZXJIVE1MID0gZmlsZW5hbWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICAgIGZ1bmN0aW9uIGNhbmNlbEZpbGUoKSB7XG4gICAgICAgIGNoYW5nZUZpbGVOYW1lVGV4dCgnJyk7XG4gICAgICAgIHJlbW92ZVRlbXBVc2VyRmlsZUtleShlbCk7XG4gICAgICAgIHNob3dEZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZUZpbGUoKSB7XG4gICAgICAgIHNldFVzZXJGaWxlS2V5KGVsLCAnREVMRVRFJyk7XG4gICAgICAgIGNhbmNlbEZpbGUoKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlRmlsZVJlbW92ZUxpbmsoZmlsZVJlbW92ZUxpbmssIGVsLCB7XG4gICAgICAgIGRlbGV0ZUZpbGUsXG4gICAgICAgIGNhbmNlbEZpbGUsXG4gICAgICB9KTtcblxuICAgICAgaGFuZGxlRmlsZVVwbG9hZElucHV0KGVsLCB7XG4gICAgICAgIHNob3dVcGxvYWRpbmcsXG4gICAgICAgIHN1Y2Nlc3NVcGxvYWQsXG4gICAgICAgIGVycm9yVXBsb2FkLFxuICAgICAgICBjaGFuZ2VGaWxlTmFtZVRleHQsXG4gICAgICAgIGZpbGVSZW1vdmVMaW5rLFxuICAgICAgICBmaWxlc1N0YXRlLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUZpZWxkcygpIHtcbiAgY29uc3QgdXNlckZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICBgZm9ybVske1VTWVNfREFUQV9BVFRSUy5mb3JtVHlwZX1dYFxuICApO1xuXG4gIHVzZXJGb3Jtcy5mb3JFYWNoKCh1c2VyRm9ybSkgPT4ge1xuICAgIGNvbnN0IGN1c3RvbUZpZWxkSW5wdXRzID0gdXNlckZvcm0ucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGBpbnB1dFske1VTWVNfREFUQV9BVFRSUy5maWVsZH1dLCBzZWxlY3RbJHtVU1lTX0RBVEFfQVRUUlMuZmllbGR9XWBcbiAgICApO1xuXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gdXNlckZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpO1xuICAgIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoV0ZfU1VCTUlUX0JVVFRPTl9WQUxVRSwgc3VibWl0QnV0dG9uLnZhbHVlKTtcblxuICAgIGZ1bmN0aW9uIGRpc2FibGVTdWJtaXRCdXR0b24oKSB7XG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGRpc2FibGVTdWJtaXQoc3VibWl0QnV0dG9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmFibGVTdWJtaXRCdXR0b24oKSB7XG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICBzdWJtaXRCdXR0b24uZ2V0QXR0cmlidXRlKFdGX1NVQk1JVF9CVVRUT05fVkFMVUUpIHx8ICdTdWJtaXQnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGN1c3RvbUZpZWxkSW5wdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldEZpZWxkVmFsaWRhdGlvbihjdXN0b21GaWVsZElucHV0cyk7XG4gICAgICBoYW5kbGVGaWxlVXBsb2FkSW5wdXRzKGN1c3RvbUZpZWxkSW5wdXRzLCB7XG4gICAgICAgIGRpc2FibGVTdWJtaXRCdXR0b24sXG4gICAgICAgIGVuYWJsZVN1Ym1pdEJ1dHRvbixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IENIRUNLQk9YX0NMQVNTX05BTUUgPSAndy1jaGVja2JveC1pbnB1dCc7XG4gICAgY29uc3QgQ0hFQ0tFRF9DTEFTUyA9ICd3LS1yZWRpcmVjdGVkLWNoZWNrZWQnO1xuXG4gICAgY29uc3QgY3VzdG9tQ2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBgZm9ybVske1VTWVNfREFUQV9BVFRSUy5mb3JtVHlwZX1dIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpub3QoYCArXG4gICAgICAgIENIRUNLQk9YX0NMQVNTX05BTUUgK1xuICAgICAgICAnKSdcbiAgICApO1xuXG4gICAgY3VzdG9tQ2hlY2tib3hlcy5mb3JFYWNoKChjaGVja2JveCkgPT4ge1xuICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZ2V0TWF0Y2hpbmdTaWJsaW5ncyhlLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDSEVDS0JPWF9DTEFTU19OQU1FKTtcbiAgICAgICAgfSkuZm9yRWFjaCgoc2libGluZykgPT4ge1xuICAgICAgICAgIHNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZShDSEVDS0VEX0NMQVNTKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiaGFuZGxlRmllbGRzIiwiYXN5bmNHZXRGaWVsZFZhbGlkYXRpb25zIiwidXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50IiwicXVlcnkiLCJnZXRGaWVsZFZhbGlkYXRpb25zIiwic2lnbkZpbGUiLCJmaWxlIiwiZmllbGRJZCIsIm11dGF0ZSIsIm11dGF0aW9uIiwiZ2V0VXBsb2FkVVJMTXV0YXRpb24iLCJ2YXJpYWJsZXMiLCJmaWxlbmFtZSIsIm5hbWUiLCJzZXRSZXF1aXJlZCIsImlucHV0IiwidXNlckZpZWxkIiwicmVxdWlyZWQiLCJpbnB1dEF0dHJpYnV0ZU1hcCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsInN0ZXAiLCJleHRlbnNpb25zIiwiZm9ybWF0VmFsdWVNYXAiLCJhY2NlcHQiLCJ2YWx1ZSIsImpvaW4iLCJjb252ZXJ0VG9TdHIiLCJTdHJpbmciLCJzZXRWYWxpZGF0aW9ucyIsInZhbGlkYXRpb25zIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImF0dHIiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJIVE1MU2VsZWN0RWxlbWVudCIsImZvckVhY2giLCJvcHRpb24iLCJzbHVnIiwib3B0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJmb3JtYXRWYWx1ZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldFVzZXJGaWVsZFZhbGlkYXRpb25BdHRyIiwiZmllbGRUeXBlIiwiZ2V0QXR0cmlidXRlIiwiVVNZU19EQVRBX0FUVFJTIiwiTk9fUkVRVUlSRURfQVRUUklCVVRFIiwiaW5jbHVkZXMiLCJtYXRjaElucHV0VG9EYXRhIiwidXNlckZpZWxkRGF0YSIsImZpZWxkIiwiaSIsImxlbmd0aCIsImlkIiwic2V0RmllbGRWYWxpZGF0aW9uIiwiY3VzdG9tRmllbGRJbnB1dHMiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwic2l0ZSIsInVzeXNGaWVsZFNjaGVtYSIsIkhUTUxJbnB1dEVsZW1lbnQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImdldE1hdGNoaW5nU2libGluZ3MiLCJlIiwicHJlZCIsInNpYmxpbmdzIiwidGFyZ2V0IiwicGFyZW50Tm9kZSIsInNsaWNlIiwiY2FsbCIsImNoaWxkcmVuIiwiZWxlbWVudCIsInB1c2giLCJpc0Zvcm1GaWxlVXBsb2FkV3JhcHBlciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZ2V0Rmlyc3RBbmNlc3RvciIsImhhbmRsZUZpbGVSZW1vdmVMaW5rIiwiY2FuY2VsUmVtb3ZlTGlua0VsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJwcm9wcyIsImRlbGV0ZUZpbGUiLCJjYW5jZWxGaWxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInR5cGUiLCJ3aGljaCIsInByZXZlbnREZWZhdWx0IiwiZ2V0VXNlckZpbGVLZXkiLCJoYW5kbGVGaWxlVXBsb2FkSW5wdXQiLCJzaG93VXBsb2FkaW5nIiwic3VjY2Vzc1VwbG9hZCIsImVycm9yVXBsb2FkIiwiY2hhbmdlRmlsZU5hbWVUZXh0IiwiZGlzYWJsZVN1Ym1pdEJ1dHRvbiIsImZpbGVzU3RhdGUiLCJpc1VwbG9hZGluZyIsImZpbGVzIiwia2V5IiwicmVzIiwidXN5c0dldFVwbG9hZFVSTCIsInByZXNpZ25lZFBPU1QiLCJFcnJvciIsIkFXU0ZpZWxkcyIsImZpZWxkcyIsIl9rZXkiLCJ1cGxvYWRGaWxlVG9TMyIsInVybCIsImNvZGUiLCJTRVJWRVJfREFUQV9WQUxJREFUSU9OX0VSUk9SUyIsIkRlZmF1bHRFcnJvciIsImNvbnRlbnQiLCJ3aW5kb3ciLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJjb2RlRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhhc093blByb3BlcnR5IiwiZ3JhcGhRTEVycm9ycyIsIkV4dGVuc2lvbnNFcnJvciIsImZpbmFsbHkiLCJXRl9TVUJNSVRfQlVUVE9OX1ZBTFVFIiwiYWRhcHRBV1NFcnJvcnMiLCJNaW5TaXplRXJyb3IiLCJNYXhTaXplRXJyb3IiLCJoYW5kbGVGaWxlVXBsb2FkSW5wdXRzIiwiZW5hYmxlU3VibWl0QnV0dG9uIiwiZWwiLCJmb3JtRmlsZVVwbG9hZFdyYXBwZXIiLCJmb3JtRmlsZURlZmF1bHQiLCJxdWVyeVNlbGVjdG9yIiwiZm9ybUZpbGVTdWNjZXNzIiwiZm9ybUZpbGVFcnJvciIsImZvcm1GaWxlRXJyb3JNc2ciLCJmb3JtRmlsZVVwbG9hZGluZyIsImZpbGVVcGxvYWRGaWxlTmFtZSIsImZpbGVSZW1vdmVMaW5rIiwiZmlsZVVwbG9hZExhYmVsIiwiYWRkSGlkZGVuQ2xhc3MiLCJyZW1vdmVIaWRkZW5DbGFzcyIsImZvY3VzIiwiZmlsZVVybCIsInNldFRlbXBVc2VyRmlsZUtleSIsImVycm9yVGV4dCIsInRvTG93ZXJDYXNlIiwic2hvd0RlZmF1bHQiLCJyZW1vdmVUZW1wVXNlckZpbGVLZXkiLCJzZXRVc2VyRmlsZUtleSIsInVzZXJGb3JtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtVHlwZSIsInVzZXJGb3JtIiwic3VibWl0QnV0dG9uIiwiZGlzYWJsZVN1Ym1pdCIsIkNIRUNLQk9YX0NMQVNTX05BTUUiLCJDSEVDS0VEX0NMQVNTIiwiY3VzdG9tQ2hlY2tib3hlcyIsImNoZWNrYm94Iiwic2libGluZyIsInRvZ2dsZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFnWmdCQTs7O2VBQUFBOzs7dUJBM1lUO3lCQUMyQjsyQkFLM0I7Z0NBT0E7MkJBQzRCO0FBQ25DLGdFQUFnRSxHQUVoRSxTQUFTQztJQUNQLE9BQU9DLCtCQUF3QixDQUFDQyxLQUFLLENBQUM7UUFDcENBLE9BQU9DLDRCQUFtQjtJQUM1QjtBQUNGO0FBRUEsU0FBU0MsU0FBU0MsSUFBSSxFQUFFLEVBQUNDLE9BQU8sRUFBQztJQUMvQixPQUFPTCwrQkFBd0IsQ0FBQ00sTUFBTSxDQUFDO1FBQ3JDQyxVQUFVQywrQkFBb0I7UUFDOUJDLFdBQVc7WUFDVEo7WUFDQUssVUFBVU4sS0FBS08sSUFBSTtRQUNyQjtJQUNGO0FBQ0Y7QUFFQSxTQUFTQyxZQUFZQyxLQUFLLEVBQUVDLFNBQVM7SUFDbkMsSUFBSUEsVUFBVUMsUUFBUSxJQUFJLE1BQU07SUFDaENGLE1BQU1FLFFBQVEsR0FBR0QsVUFBVUMsUUFBUTtBQUNyQztBQUVBLE1BQU1DLG9CQUFvQjtJQUN4QkMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLFlBQVk7QUFDZDtBQUVBLE1BQU1DLGlCQUFpQjtJQUNyQkQsWUFBWSxTQUFTRSxPQUFPQyxLQUFLO1FBQy9CLE9BQU9BLE1BQU1DLElBQUksQ0FBQztJQUNwQjtBQUNGO0FBRUEsU0FBU0MsYUFBYUYsS0FBSztJQUN6QixPQUFPRyxPQUFPSDtBQUNoQjtBQUVBLFNBQVNJLGVBQWVoQixLQUFLLEVBQUVDLFNBQVM7SUFDdEMsSUFBSUEsVUFBVWdCLFdBQVcsSUFBSSxNQUFNO0lBRW5DQyxPQUFPQyxJQUFJLENBQUNsQixVQUFVZ0IsV0FBVyxFQUFFRyxHQUFHLENBQUMsQ0FBQ0M7UUFDdEMsTUFBTUMsTUFBTXJCLFVBQVVnQixXQUFXLENBQUNJLEtBQUs7UUFFdkMsSUFDRUEsU0FBUyxhQUNURSxNQUFNQyxPQUFPLENBQUNGLFFBQ2R0QixpQkFBaUJ5QixtQkFDakI7WUFDQUgsSUFBSUksT0FBTyxDQUFDLENBQUNDO2dCQUNYLElBQUlBLE9BQU9DLElBQUksSUFBSUQsT0FBTzdCLElBQUksRUFBRTtvQkFDOUIsTUFBTStCLE1BQU1DLFNBQVNDLGFBQWEsQ0FBQztvQkFDbkNGLElBQUlqQixLQUFLLEdBQUdlLE9BQU9DLElBQUk7b0JBQ3ZCQyxJQUFJRyxTQUFTLEdBQUdMLE9BQU83QixJQUFJO29CQUMzQkUsTUFBTWlDLFdBQVcsQ0FBQ0o7Z0JBQ3BCO1lBQ0Y7UUFDRjtRQUVBLElBQUlQLFFBQVEsUUFBUW5CLGlCQUFpQixDQUFDa0IsS0FBSyxFQUFFO1lBQzNDLElBQUlhO1lBQ0osSUFBSXhCLGNBQWMsQ0FBQ1csS0FBSyxFQUFFO2dCQUN4QmEsY0FBY3hCLGNBQWMsQ0FBQ1csS0FBSztZQUNwQyxPQUFPO2dCQUNMYSxjQUFjcEI7WUFDaEI7WUFFQWQsTUFBTW1DLFlBQVksQ0FBQ2hDLGlCQUFpQixDQUFDa0IsS0FBSyxFQUFFYSxZQUFZWjtRQUMxRDtRQUVBLElBQUlELFNBQVMsZUFBZUMsUUFBUSxNQUFNO1lBQ3hDdEIsTUFBTW9DLGVBQWUsQ0FBQztRQUN4QjtJQUNGO0FBQ0Y7QUFFQSxTQUFTQywyQkFBMkJyQyxLQUFLLEVBQUVDLFNBQVM7SUFDbEQsTUFBTXFDLFlBQVl0QyxNQUFNdUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDRixTQUFTO0lBQzlELElBQUksQ0FBQ0csZ0NBQXFCLENBQUNDLFFBQVEsQ0FBQ0osWUFBWTtRQUM5Q3ZDLFlBQVlDLE9BQU9DO0lBQ3JCO0lBQ0FlLGVBQWVoQixPQUFPQztBQUN4QjtBQUVBLFNBQVMwQyxpQkFBaUIzQyxLQUFLLEVBQUU0QyxhQUFhO0lBQzVDLE1BQU1wRCxVQUFVUSxNQUFNdUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDSyxLQUFLO0lBQ3hELElBQUksQ0FBQ3JELFNBQVM7UUFDWixPQUFPO0lBQ1Q7SUFDQSxJQUFLLElBQUlzRCxJQUFJLEdBQUdBLElBQUlGLGNBQWNHLE1BQU0sRUFBRUQsSUFBSztRQUM3QyxJQUFJRixhQUFhLENBQUNFLEVBQUUsQ0FBQ0UsRUFBRSxLQUFLeEQsU0FBUztZQUNuQyxPQUFPb0QsYUFBYSxDQUFDRSxFQUFFO1FBQ3pCO0lBQ0Y7SUFDQSxPQUFPO0FBQ1Q7QUFFQSxTQUFTRyxtQkFBbUJDLGlCQUFpQjtJQUMzQ2hFLDJCQUNHaUUsSUFBSSxDQUFDLENBQUNDO1FBQ0wsTUFBTVIsZ0JBQWdCUSxTQUFTQyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsZUFBZTtRQUN4RCxJQUFJLENBQUNYLGVBQWU7UUFFcEIsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlJLGtCQUFrQkgsTUFBTSxFQUFFRCxJQUFLO1lBQ2pELE1BQU05QyxRQUFRa0QsaUJBQWlCLENBQUNKLEVBQUU7WUFDbEMsSUFDRSxDQUFDOUMsU0FDRCxDQUNFQSxDQUFBQSxpQkFBaUJ3RCxvQkFDakJ4RCxpQkFBaUJ5QixpQkFBZ0IsS0FFbkN6QixNQUFNdUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDRixTQUFTLE1BQU0sUUFDbEQ7Z0JBQ0E7WUFDRjtZQUNBLE1BQU1yQyxZQUFZMEMsaUJBQWlCM0MsT0FBTzRDO1lBQzFDLElBQUksQ0FBQzNDLFdBQVc7WUFDaEJvQywyQkFBMkJyQyxPQUFPQztRQUNwQztJQUNGLEdBQ0N3RCxLQUFLLENBQUMsQ0FBQ0M7UUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtJQUNoQjtBQUNKO0FBRUEsU0FBU0csb0JBQW9CQyxDQUFDLEVBQUVDLElBQUk7SUFDbEMsTUFBTUMsV0FBVyxFQUFFO0lBQ25CLElBQUlGLEVBQUVHLE1BQU0sQ0FBQ0MsVUFBVSxLQUFLLE1BQU07UUFDaEMsT0FBT0Y7SUFDVDtJQUNBLEVBQUUsQ0FBQ0csS0FBSyxDQUFDQyxJQUFJLENBQUNOLEVBQUVHLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDRyxRQUFRLEVBQUUzQyxPQUFPLENBQUMsQ0FBQzRDO1FBQ25ELElBQUlQLEtBQUtPLFVBQVU7WUFDakJOLFNBQVNPLElBQUksQ0FBQ0Q7UUFDaEI7SUFDRjtJQUNBLE9BQU9OO0FBQ1Q7QUFFQSxTQUFTUSx3QkFBd0JGLE9BQU87SUFDdEMsT0FBT0EsUUFBUUcsU0FBUyxDQUFDQyxRQUFRLENBQUM7QUFDcEM7QUFFQSxTQUFTQyxpQkFBaUJMLE9BQU8sRUFBRVAsSUFBSTtJQUNyQyxJQUFJTyxRQUFRSixVQUFVLEtBQUssTUFBTTtRQUMvQixPQUFPO0lBQ1Q7SUFDQSxJQUFJSCxLQUFLTyxVQUFVO1FBQ2pCLE9BQU9BO0lBQ1Q7SUFDQSxPQUFPSyxpQkFBaUJMLFFBQVFKLFVBQVUsRUFBRUg7QUFDOUM7QUFFQSxTQUFTYSxxQkFBcUJDLHVCQUF1QixFQUFFQyxZQUFZLEVBQUVDLEtBQUs7SUFDeEUsTUFBTSxFQUFDQyxVQUFVLEVBQUVDLFVBQVUsRUFBQyxHQUFHRjtJQUNqQ0Ysd0JBQXdCSyxnQkFBZ0IsQ0FBQyxTQUFTLFNBQVVwQixDQUFDO1FBQzNELElBQUlBLEVBQUVxQixJQUFJLEtBQUssV0FBVztZQUN4QixJQUFJckIsRUFBRXNCLEtBQUssS0FBSyxNQUFNdEIsRUFBRXNCLEtBQUssS0FBSyxJQUFJO2dCQUNwQztZQUNGO1lBRUF0QixFQUFFdUIsY0FBYztRQUNsQjtRQUNBLElBQUlDLElBQUFBLDhCQUFjLEVBQUNSLGVBQWU7WUFDaENFO1lBQ0E7UUFDRjtRQUNBQztJQUNGO0FBQ0Y7QUFFQSxTQUFTTSxzQkFBc0JqQixPQUFPLEVBQUVTLEtBQUs7SUFDM0MsTUFBTSxFQUNKUyxhQUFhLEVBQ2JDLGFBQWEsRUFDYkMsV0FBVyxFQUNYQyxrQkFBa0IsRUFDbEJDLG1CQUFtQixFQUNuQkMsVUFBVSxFQUNYLEdBQUdkO0lBQ0osTUFBTXZGLFVBQVU4RSxRQUFRL0IsWUFBWSxDQUFDQywwQkFBZSxDQUFDSyxLQUFLO0lBRTFEeUIsUUFBUVksZ0JBQWdCLENBQUMsVUFBVSxTQUFVcEIsQ0FBQztRQUM1QyxJQUFJK0IsV0FBV0MsV0FBVyxFQUFFO1FBQzVCLE1BQU12RyxPQUFPdUUsRUFBRUcsTUFBTSxJQUFJSCxFQUFFRyxNQUFNLENBQUM4QixLQUFLLElBQUlqQyxFQUFFRyxNQUFNLENBQUM4QixLQUFLLENBQUMsRUFBRTtRQUM1RCxJQUFJLENBQUN4RyxNQUFNO1lBQ1Q7UUFDRjtRQUVBaUc7UUFDQUcsbUJBQW1CcEcsS0FBS08sSUFBSTtRQUU1QitGLFdBQVdDLFdBQVcsR0FBRztRQUV6QixJQUFJLENBQUNELFdBQVdDLFdBQVcsRUFBRTtZQUMzQkY7UUFDRjtRQUVBLElBQUlJLE1BQU07UUFFVjFHLFNBQVNDLE1BQU07WUFBQ0M7UUFBTyxHQUNwQjJELElBQUksQ0FBQyxDQUFDOEM7WUFDTCxJQUNFLENBQUNBLElBQUk1QyxJQUFJLElBQ1QsQ0FBQzRDLElBQUk1QyxJQUFJLENBQUM2QyxnQkFBZ0IsSUFDMUIsQ0FBQ0QsSUFBSTVDLElBQUksQ0FBQzZDLGdCQUFnQixDQUFDQyxhQUFhLEVBQ3hDO2dCQUNBLE1BQU1DLE1BQU1IO1lBQ2Q7WUFDQSxNQUFNRSxnQkFBZ0JGLElBQUk1QyxJQUFJLENBQUM2QyxnQkFBZ0IsQ0FBQ0MsYUFBYTtZQUM3REgsTUFBTUMsSUFBSTVDLElBQUksQ0FBQzZDLGdCQUFnQixDQUFDRixHQUFHO1lBQ25DLE1BQU1LLFlBQVksQ0FBQztZQUNuQkYsY0FBY0csTUFBTSxDQUFDNUUsT0FBTyxDQUFDLENBQUNtQjtnQkFDNUIsTUFBTTBELE9BQU8xRCxNQUFNbUQsR0FBRztnQkFDdEIsTUFBTXBGLFFBQVFpQyxNQUFNakMsS0FBSztnQkFDekJ5RixTQUFTLENBQUNFLEtBQUssR0FBRzNGO1lBQ3BCO1lBQ0EsT0FBTzRGLElBQUFBLDhCQUFjLEVBQUNMLGNBQWNNLEdBQUcsRUFBRUosV0FBVzlHO1FBQ3RELEdBQ0M0RCxJQUFJLENBQUM7WUFDSnNDLGNBQWNPO1FBQ2hCLEdBQ0N2QyxLQUFLLENBQUMsQ0FBQ0M7WUFDTixJQUFJZ0QsT0FBT0Msd0NBQTZCLENBQUNDLFlBQVk7WUFDckQsSUFBSSxPQUFPbEQsUUFBUSxVQUFVO2dCQUMzQixNQUFNbUQsVUFBVSxJQUFJQyxPQUFPQyxTQUFTLEdBQUdDLGVBQWUsQ0FDcER0RCxLQUNBO2dCQUVGLE1BQU11RCxlQUFlSixRQUFRSyxvQkFBb0IsQ0FBQztnQkFDbEQsSUFBSUQsY0FBYztvQkFDaEJQLE9BQU9PLFlBQVksQ0FBQyxFQUFFLENBQUNqRixTQUFTO2dCQUNsQztZQUNGO1lBQ0EsSUFBSSxPQUFPMEIsUUFBUSxZQUFZQSxJQUFJeUQsY0FBYyxDQUFDLGtCQUFrQjtnQkFDbEUsSUFBSXpELElBQUkwRCxhQUFhLENBQUMsRUFBRSxDQUFDVixJQUFJLEtBQUssOEJBQThCO29CQUM5REEsT0FBT0Msd0NBQTZCLENBQUNVLGVBQWU7Z0JBQ3REO1lBQ0Y7WUFDQTNCLFlBQVlnQjtRQUNkLEdBQ0NZLE9BQU8sQ0FBQztZQUNQekIsV0FBV0MsV0FBVyxHQUFHO1FBQzNCO0lBQ0o7QUFDRjtBQUVBLE1BQU15Qix5QkFBeUI7QUFFL0IsTUFBTUMsaUJBQWlCLENBQUNkO0lBQ3RCLElBQUlBLFNBQVMsa0JBQ1gsT0FBT0Msd0NBQTZCLENBQUNjLFlBQVk7SUFDbkQsSUFBSWYsU0FBUyxrQkFDWCxPQUFPQyx3Q0FBNkIsQ0FBQ2UsWUFBWTtJQUNuRCxPQUFPaEI7QUFDVDtBQUVBLFNBQVNpQix1QkFBdUJ6RSxpQkFBaUIsRUFBRTZCLEtBQUs7SUFDdEQsTUFBTSxFQUFDYSxtQkFBbUIsRUFBRWdDLGtCQUFrQixFQUFDLEdBQUc3QztJQUNsRCxNQUFNYyxhQUFhO1FBQ2pCQyxhQUFhO0lBQ2Y7SUFDQTVDLGtCQUFrQnhCLE9BQU8sQ0FBQyxDQUFDbUc7UUFDekIsSUFBSUEsR0FBR3RGLFlBQVksQ0FBQyxZQUFZLFFBQVE7WUFDdEMsTUFBTXVGLHdCQUF3Qm5ELGlCQUM1QmtELElBQ0FyRDtZQUVGLE1BQU11RCxrQkFBa0JELHNCQUFzQkUsYUFBYSxDQUN6RDtZQUVGLE1BQU1DLGtCQUFrQkgsc0JBQXNCRSxhQUFhLENBQ3pEO1lBRUYsTUFBTUUsZ0JBQWdCSixzQkFBc0JFLGFBQWEsQ0FDdkQ7WUFFRixNQUFNRyxtQkFBbUJELGNBQWNGLGFBQWEsQ0FDbEQ7WUFFRixNQUFNSSxvQkFBb0JOLHNCQUFzQkUsYUFBYSxDQUMzRDtZQUVGLE1BQU1LLHFCQUFxQlAsc0JBQXNCRSxhQUFhLENBQzVEO1lBR0YsTUFBTU0saUJBQWlCUixzQkFBc0JFLGFBQWEsQ0FDeEQ7WUFHRixNQUFNTyxrQkFBa0JULHNCQUFzQkUsYUFBYSxDQUN6RDtZQUdGLGlEQUFpRDtZQUNqRCxTQUFTeEM7Z0JBQ1BnRCxJQUFBQSxxQkFBYyxFQUFDVDtnQkFDZlMsSUFBQUEscUJBQWMsRUFBQ047Z0JBQ2ZNLElBQUFBLHFCQUFjLEVBQUNQO2dCQUNmUSxJQUFBQSx3QkFBaUIsRUFBQ0w7Z0JBQ2xCQSxrQkFBa0JNLEtBQUs7Z0JBRXZCOUM7WUFDRjtZQUVBLGlEQUFpRDtZQUNqRCxTQUFTSCxjQUFja0QsT0FBTztnQkFDNUJILElBQUFBLHFCQUFjLEVBQUNUO2dCQUNmUyxJQUFBQSxxQkFBYyxFQUFDTjtnQkFDZk0sSUFBQUEscUJBQWMsRUFBQ0o7Z0JBQ2ZLLElBQUFBLHdCQUFpQixFQUFDUjtnQkFDbEJBLGdCQUFnQlMsS0FBSztnQkFDckJkO2dCQUNBZ0IsSUFBQUEsa0NBQWtCLEVBQUNmLElBQUljO1lBQ3pCO1lBRUEsaURBQWlEO1lBQ2pELFNBQVNqRCxZQUFZZ0IsT0FBT0Msd0NBQTZCLENBQUNDLFlBQVk7Z0JBQ3BFLE1BQU1pQyxZQUFZVixpQkFBaUI1RixZQUFZLENBQzdDaUYsZUFBZWQsTUFBTW9DLFdBQVc7Z0JBRWxDTixJQUFBQSxxQkFBYyxFQUFDUDtnQkFDZk8sSUFBQUEscUJBQWMsRUFBQ0o7Z0JBQ2ZLLElBQUFBLHdCQUFpQixFQUFDVjtnQkFDbEJVLElBQUFBLHdCQUFpQixFQUFDUDtnQkFDbEIsSUFBSVcsV0FBVztvQkFDYlYsaUJBQWlCbkcsU0FBUyxHQUFHNkc7Z0JBQy9CO2dCQUNBWCxjQUFjUSxLQUFLO2dCQUNuQmQ7WUFDRjtZQUVBLGlEQUFpRDtZQUNqRCxTQUFTbUI7Z0JBQ1BQLElBQUFBLHFCQUFjLEVBQUNQO2dCQUNmTyxJQUFBQSxxQkFBYyxFQUFDSjtnQkFDZkksSUFBQUEscUJBQWMsRUFBQ047Z0JBQ2ZPLElBQUFBLHdCQUFpQixFQUFDVjtnQkFDbEJRLGdCQUFnQkcsS0FBSztZQUN2QjtZQUVBLGlEQUFpRDtZQUNqRCxTQUFTL0MsbUJBQW1COUYsUUFBUTtnQkFDbEN3SSxtQkFBbUJyRyxTQUFTLEdBQUduQztZQUNqQztZQUVBLGlEQUFpRDtZQUNqRCxTQUFTb0Y7Z0JBQ1BVLG1CQUFtQjtnQkFDbkJxRCxJQUFBQSxxQ0FBcUIsRUFBQ25CO2dCQUN0QmtCO1lBQ0Y7WUFFQSxpREFBaUQ7WUFDakQsU0FBUy9EO2dCQUNQaUUsSUFBQUEsOEJBQWMsRUFBQ3BCLElBQUk7Z0JBQ25CNUM7WUFDRjtZQUVBTCxxQkFBcUIwRCxnQkFBZ0JULElBQUk7Z0JBQ3ZDN0M7Z0JBQ0FDO1lBQ0Y7WUFFQU0sc0JBQXNCc0MsSUFBSTtnQkFDeEJyQztnQkFDQUM7Z0JBQ0FDO2dCQUNBQztnQkFDQTJDO2dCQUNBekM7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVPLFNBQVM1RztJQUNkLE1BQU1pSyxZQUFZcEgsU0FBU3FILGdCQUFnQixDQUN6QyxDQUFDLEtBQUssRUFBRTNHLDBCQUFlLENBQUM0RyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBR3JDRixVQUFVeEgsT0FBTyxDQUFDLENBQUMySDtRQUNqQixNQUFNbkcsb0JBQW9CbUcsU0FBU0YsZ0JBQWdCLENBQ2pELENBQUMsTUFBTSxFQUFFM0csMEJBQWUsQ0FBQ0ssS0FBSyxDQUFDLFVBQVUsRUFBRUwsMEJBQWUsQ0FBQ0ssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUdyRSxNQUFNeUcsZUFBZUQsU0FBU3JCLGFBQWEsQ0FBQztRQUM1Q3NCLGFBQWFuSCxZQUFZLENBQUNvRix3QkFBd0IrQixhQUFhMUksS0FBSztRQUVwRSxTQUFTZ0Y7WUFDUCxJQUFJMEQsY0FBYztnQkFDaEJDLElBQUFBLG9CQUFhLEVBQUNEO1lBQ2hCO1FBQ0Y7UUFFQSxTQUFTMUI7WUFDUCxJQUFJMEIsY0FBYztnQkFDaEJBLGFBQWFsSCxlQUFlLENBQUM7Z0JBQzdCa0gsYUFBYW5ILFlBQVksQ0FDdkIsU0FDQW1ILGFBQWEvRyxZQUFZLENBQUNnRiwyQkFBMkI7WUFFekQ7UUFDRjtRQUVBLElBQUlyRSxrQkFBa0JILE1BQU0sR0FBRyxHQUFHO1lBQ2hDRSxtQkFBbUJDO1lBQ25CeUUsdUJBQXVCekUsbUJBQW1CO2dCQUN4QzBDO2dCQUNBZ0M7WUFDRjtRQUNGO1FBRUEsTUFBTTRCLHNCQUFzQjtRQUM1QixNQUFNQyxnQkFBZ0I7UUFFdEIsTUFBTUMsbUJBQW1CNUgsU0FBU3FILGdCQUFnQixDQUNoRCxDQUFDLEtBQUssRUFBRTNHLDBCQUFlLENBQUM0RyxRQUFRLENBQUMsNkJBQTZCLENBQUMsR0FDN0RJLHNCQUNBO1FBR0pFLGlCQUFpQmhJLE9BQU8sQ0FBQyxDQUFDaUk7WUFDeEJBLFNBQVN6RSxnQkFBZ0IsQ0FBQyxVQUFVLFNBQVVwQixDQUFDO2dCQUM3Q0Qsb0JBQW9CQyxHQUFHLENBQUNRO29CQUN0QixPQUFPQSxRQUFRRyxTQUFTLENBQUNDLFFBQVEsQ0FBQzhFO2dCQUNwQyxHQUFHOUgsT0FBTyxDQUFDLENBQUNrSTtvQkFDVkEsUUFBUW5GLFNBQVMsQ0FBQ29GLE1BQU0sQ0FBQ0o7Z0JBQzNCO1lBQ0Y7UUFDRjtJQUNGO0FBQ0YifQ==
    
    }),
    56897: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* globals
     window,
     HTMLElement,
     */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        addHiddenClass: function() {
            return addHiddenClass;
        },
        disableSubmit: function() {
            return disableSubmit;
        },
        getDomParser: function() {
            return getDomParser;
        },
        getErrorAttrName: function() {
            return getErrorAttrName;
        },
        getRedirectPath: function() {
            return getRedirectPath;
        },
        getSignupErrorCode: function() {
            return getSignupErrorCode;
        },
        handleErrorNode: function() {
            return handleErrorNode;
        },
        handleRedirect: function() {
            return handleRedirect;
        },
        hideElement: function() {
            return hideElement;
        },
        redirectWithUsrdir: function() {
            return redirectWithUsrdir;
        },
        removeHiddenClass: function() {
            return removeHiddenClass;
        },
        resetSubmit: function() {
            return resetSubmit;
        },
        showAndFocusElement: function() {
            return showAndFocusElement;
        },
        showElement: function() {
            return showElement;
        },
        userFormError: function() {
            return userFormError;
        },
        userSystemsRequestClient: function() {
            return userSystemsRequestClient;
        }
    });
    const _apolloClient = __webpack_require__(25195);
    const _constants = __webpack_require__(7462);
    /**
     * SECURITY NOTE:
     * This route is under anti-bot protection via rate limiting and/or PerimeterX. If you deprecate or
     * migrate this route, or modify the path name for this route, notify the #security channel. Also update
     * the file https://github.com/webflow/webflow-proxy/blob/dev/etc/perimeterx-enabled-routes.txt
     * Failing to do the above can result in a security incident
     */ const GQL_QUERY_PATH = '/.wf_graphql/usys/apollo';
    const userSystemsRequestClient = (0, _apolloClient.createApolloClient)({
        path: GQL_QUERY_PATH,
        useCsrf: true,
        retryConfig: {
            maxAttempts: 5
        }
    });
    function addHiddenClass(el) {
        if (el) {
            el.classList.add('w-hidden');
        }
    }
    function removeHiddenClass(el) {
        if (el) {
            el.classList.remove('w-hidden');
        }
    }
    function showElement(el) {
        if (el) {
            el.style.display = 'block';
        }
    }
    function showAndFocusElement(el) {
        if (el) {
            el.style.display = 'block';
            el.focus();
        }
    }
    function hideElement(el) {
        if (el) {
            el.style.display = 'none';
        }
    }
    function getDomParser() {
        const domParser = new window.DOMParser();
        return {
            /**
         * Returns an html node for an encoded string
         * @param {string} str - Encoded string to parse
         */ getHtmlFromString (str) {
                const decodedString = decodeURIComponent(str);
                const parsedHtml = domParser.parseFromString(decodedString, 'text/html');
                if (!parsedHtml || !parsedHtml.body || !parsedHtml.body.firstChild) return null;
                return parsedHtml.body.firstChild;
            }
        };
    }
    const getErrorAttrName = (errorAttr, errorCode)=>{
        const formattedErrorCode = errorCode.replace('_', '-').toLowerCase();
        return `${errorAttr}-${formattedErrorCode}-error`;
    };
    const handleErrorNode = (errorMsgNode, errorStateNode, errorCode, errorAttrPrefix, defaultErrorCopy)=>{
        // get the error copy from the data attribute
        const errorAttr = getErrorAttrName(errorAttrPrefix, errorCode);
        const errorCopy = errorMsgNode && errorMsgNode.getAttribute(errorAttr);
        // announce the contents of the div to ATs
        errorMsgNode.setAttribute('aria-live', 'assertive');
        // set the message text to the error message or default copy if it is null
        errorMsgNode.textContent = errorCopy ? errorCopy : defaultErrorCopy;
        // show the error state Element
        showElement(errorStateNode);
    };
    function disableSubmit(submit) {
        if (!submit) return '';
        // Disable submit
        submit.setAttribute('disabled', 'true');
        // Store previous value
        const value = submit.getAttribute('value');
        // Show wait text
        const waitText = submit.getAttribute('data-wait');
        if (waitText) submit.setAttribute('value', waitText);
        return value ?? '';
    }
    function resetSubmit(submit, text) {
        if (!submit) return;
        // Reenable submit
        submit.removeAttribute('disabled');
        // Reset text
        submit.setAttribute('value', text);
    }
    function getRedirectPath() {
        const queryString = window.location.search;
        const redirectParam = queryString.match(/[?|&]usredir=([^@&?=]+)/g);
        if (!redirectParam) return undefined;
        const encodedPath = redirectParam[0].substring('?usredir='.length);
        return decodeURIComponent(encodedPath);
    }
    function redirectWithUsrdir(location) {
        const redirectParam = getRedirectPath();
        let encodedPath;
        if (redirectParam) {
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            encodedPath = redirectParam[0].substring('?usredir='.length);
        } else {
            encodedPath = encodeURIComponent(window.location.pathname);
        }
        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
        window.location = location + `?usredir=${encodedPath}`;
    }
    // Test if path has a /, ., or @ at the beginning. If so, remove it.
    function normalizedRedirectPath(path) {
        // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
        const hasLeadingSymbol = /\/|\.|\@/g.test(path[0]);
        return hasLeadingSymbol ? path.substring(1) : path;
    }
    function handleRedirect(defaultRedirectPath, includeDelay = false) {
        const redirectPath = getRedirectPath();
        const redirectUrl = (()=>{
            if (redirectPath) {
                return `${window.location.origin}/${normalizedRedirectPath(redirectPath)}`;
            }
            if (defaultRedirectPath) {
                return `${window.location.origin}/${normalizedRedirectPath(defaultRedirectPath)}`;
            }
            return;
        })();
        if (!redirectUrl) return;
        return includeDelay ? setTimeout(()=>window.Webflow.location(redirectUrl), 3000) : window.Webflow.location(redirectUrl);
    }
    const wrapperSelectors = [
        '.w-file-upload-error'
    ];
    const setErrorMsg = (// @ts-expect-error - TS7006 - Parameter 'wrapper' implicitly has an 'any' type.
    wrapper, // @ts-expect-error - TS7006 - Parameter 'fieldElements' implicitly has an 'any' type.
    fieldElements, name)=>{
        for(let i = 0; i < fieldElements.length; ++i){
            const errorText = fieldElements[i].getAttribute(name);
            if (errorText) {
                fieldElements[i].innerHTML = errorText;
                removeHiddenClass(wrapper);
                return true;
            }
        }
    };
    const handleValidationErrors = (form, failedValidations)=>{
        const wrappers = [];
        wrapperSelectors.forEach((wrapperSelector)=>{
            const _wrappers = form.querySelectorAll(wrapperSelector);
            for(let i = 0; i < _wrappers.length; ++i){
                wrappers.push(_wrappers[i]);
            }
        });
        wrappers.forEach((wrapper)=>{
            for(let i = 0; i < failedValidations.length; ++i){
                const failedValidation = failedValidations[i];
                // @ts-expect-error - TS18048 - 'failedValidation' is possibly 'undefined'.
                const name = failedValidation.name;
                // @ts-expect-error - TS18048 - 'failedValidation' is possibly 'undefined'.
                const fieldId = failedValidation.fieldId;
                const fieldElements = wrapper.querySelectorAll('[' + _constants.USYS_DATA_ATTRS.field + '="' + fieldId + '"]');
                if (fieldElements && setErrorMsg(wrapper, fieldElements, name)) {
                    break;
                }
            }
        });
    };
    // error handling
    const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
    _constants.signUpErrorStates[_constants.SIGNUP_UI_ERROR_CODES.GENERAL_ERROR].copy;
    const userFormError = (form, errorState, formType)=>(error)=>{
            if (errorState === null || form === null) return;
            const errorMsgNode = errorState.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
            const failedValidations = error.graphQLErrors?.[0]?.failedValidations;
            if (failedValidations) {
                handleValidationErrors(form, failedValidations);
            }
            // if there isn't an error code, send an empty string so a generic error message appears
            const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
            const errorCode = getSignupErrorCode(elementErrorCode);
            handleErrorNode(errorMsgNode, errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX[formType], defaultErrorCopy);
        };
    const getSignupErrorCode = (error)=>{
        let errorCode;
        switch(error){
            case 'UsysInvalidUserData':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED;
                break;
            case 'UsysUnauthorizedEmail':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.NOT_ALLOWED;
                break;
            case 'UsysMustUseInvitation':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL;
                break;
            case 'UsysDuplicateEmail':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST;
                break;
            case 'UsysInvalidEmail':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.INVALID_EMAIL;
                break;
            case 'UsysInvalidPassword':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD;
                break;
            case 'UsysInvalidToken':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.NOT_VERIFIED;
                break;
            case 'UsysExpiredToken':
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN;
                break;
            default:
                errorCode = _constants.SIGNUP_UI_ERROR_CODES.GENERAL_ERROR;
        }
        return errorCode;
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    62467: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        appendUserInputClasses: function() {
            return appendUserInputClasses;
        },
        getTempUserFileKey: function() {
            return getTempUserFileKey;
        },
        getUserFileKey: function() {
            return getUserFileKey;
        },
        parseWfUsysVariant: function() {
            return parseWfUsysVariant;
        },
        removeTempUserFileKey: function() {
            return removeTempUserFileKey;
        },
        setTempUserFileKey: function() {
            return setTempUserFileKey;
        },
        setUserFileKey: function() {
            return setUserFileKey;
        },
        uploadFileToS3: function() {
            return uploadFileToS3;
        }
    });
    const _constants = __webpack_require__(7462);
    const appendUserInputClasses = (node, classes)=>{
        const updatedClasses = classes.push('w-input');
        if (node.getIn([
            'data',
            'attr',
            'disabled'
        ])) {
            return updatedClasses.push('w-input-disabled');
        }
        return updatedClasses;
    };
    const parseWfUsysVariant = (wfUsysVariant)=>{
        if (!wfUsysVariant) return [];
        let results = [];
        for (const wfUsysVariantKey of wfUsysVariant.split(',')){
            if (// @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type '"LOGGED_IN" | "ADMIN_ALWAYS_VISIBLE"'.
            _constants.USER_ACCESS_META_OPTIONS.includes(wfUsysVariantKey) && // @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type '"LOGGED_IN" | "ADMIN_ALWAYS_VISIBLE"'.
            !results.includes(wfUsysVariantKey)) {
                results.push(wfUsysVariantKey);
            } else {
                // This is the error case
                console.error(`UnexpectedWfUsysVariant: Renderer received unexpected wf-usys-variant`);
                results = [];
                break;
            }
        }
        return results;
    };
    function uploadFileToS3(url, fields, file) {
        return new Promise((resolve, reject)=>{
            const formData = new FormData();
            Object.entries(fields).forEach(([key, value])=>{
                formData.append(key, value);
            });
            formData.append('file', file);
            fetch(url, {
                method: 'POST',
                body: formData
            }).then((response)=>{
                if (response.ok) {
                    // @ts-expect-error - TS2794 - Expected 1 arguments, but got 0. Did you forget to include 'void' in your type argument to 'Promise'?
                    resolve();
                } else {
                    return response.text();
                }
            }).then((text)=>{
                reject(text);
            });
        });
    }
    const getUserFileKey = (element)=>{
        return element.getAttribute(_constants.USYS_DATA_ATTRS.fileUploadKey);
    };
    const setUserFileKey = (element, value)=>{
        element.setAttribute(_constants.USYS_DATA_ATTRS.fileUploadKey, value);
    };
    const getTempUserFileKey = (element)=>{
        return element.getAttribute(_constants.USYS_DATA_ATTRS.unsavedFileUploadKey);
    };
    const setTempUserFileKey = (element, value)=>{
        element.setAttribute(_constants.USYS_DATA_ATTRS.unsavedFileUploadKey, value);
    };
    const removeTempUserFileKey = (element)=>{
        element.removeAttribute(_constants.USYS_DATA_ATTRS.unsavedFileUploadKey);
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtBYnN0cmFjdE5vZGVUeXBlfSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9jb3JlL0Fic3RyYWN0Tm9kZSc7XG5pbXBvcnQgdHlwZSB7Q2xhc3Nlc0xpc3R9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3dmZGwnO1xuXG5pbXBvcnQge1xuICB0eXBlIFVzZXJBY2Nlc3NNZXRhLFxuICB0eXBlIFVzZXJBY2Vzc01ldGFPcHRpb24sXG4gIFVTRVJfQUNDRVNTX01FVEFfT1BUSU9OUyxcbiAgVVNZU19EQVRBX0FUVFJTLFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy91c2Vycy9jb25zdGFudHMnO1xuXG5leHBvcnQgY29uc3QgYXBwZW5kVXNlcklucHV0Q2xhc3NlcyA9IChcbiAgbm9kZTogQWJzdHJhY3ROb2RlVHlwZSxcbiAgY2xhc3NlczogQ2xhc3Nlc0xpc3RcbikgPT4ge1xuICBjb25zdCB1cGRhdGVkQ2xhc3NlcyA9IGNsYXNzZXMucHVzaCgndy1pbnB1dCcpO1xuICBpZiAobm9kZS5nZXRJbihbJ2RhdGEnLCAnYXR0cicsICdkaXNhYmxlZCddKSkge1xuICAgIHJldHVybiB1cGRhdGVkQ2xhc3Nlcy5wdXNoKCd3LWlucHV0LWRpc2FibGVkJyk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZWRDbGFzc2VzO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlV2ZVc3lzVmFyaWFudCA9ICh3ZlVzeXNWYXJpYW50Pzogc3RyaW5nKTogVXNlckFjY2Vzc01ldGEgPT4ge1xuICBpZiAoIXdmVXN5c1ZhcmlhbnQpIHJldHVybiBbXTtcblxuICBsZXQgcmVzdWx0czogQXJyYXk8VXNlckFjZXNzTWV0YU9wdGlvbj4gPSBbXTtcblxuICBmb3IgKGNvbnN0IHdmVXN5c1ZhcmlhbnRLZXkgb2Ygd2ZVc3lzVmFyaWFudC5zcGxpdCgnLCcpKSB7XG4gICAgaWYgKFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjM0NSAtIEFyZ3VtZW50IG9mIHR5cGUgJ3N0cmluZycgaXMgbm90IGFzc2lnbmFibGUgdG8gcGFyYW1ldGVyIG9mIHR5cGUgJ1wiTE9HR0VEX0lOXCIgfCBcIkFETUlOX0FMV0FZU19WSVNJQkxFXCInLlxuICAgICAgVVNFUl9BQ0NFU1NfTUVUQV9PUFRJT05TLmluY2x1ZGVzKHdmVXN5c1ZhcmlhbnRLZXkpICYmXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzQ1IC0gQXJndW1lbnQgb2YgdHlwZSAnc3RyaW5nJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnXCJMT0dHRURfSU5cIiB8IFwiQURNSU5fQUxXQVlTX1ZJU0lCTEVcIicuXG4gICAgICAhcmVzdWx0cy5pbmNsdWRlcyh3ZlVzeXNWYXJpYW50S2V5KVxuICAgICkge1xuICAgICAgcmVzdWx0cy5wdXNoKHdmVXN5c1ZhcmlhbnRLZXkgYXMgVXNlckFjZXNzTWV0YU9wdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGVycm9yIGNhc2VcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBVbmV4cGVjdGVkV2ZVc3lzVmFyaWFudDogUmVuZGVyZXIgcmVjZWl2ZWQgdW5leHBlY3RlZCB3Zi11c3lzLXZhcmlhbnRgXG4gICAgICApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkRmlsZVRvUzMoXG4gIHVybDogc3RyaW5nLFxuICBmaWVsZHM6IGFueSxcbiAgZmlsZTogRmlsZVxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShcbiAgICAoXG4gICAgICByZXNvbHZlOiAocmVzdWx0OiBQcm9taXNlPHVuZGVmaW5lZD4gfCB1bmRlZmluZWQpID0+IHZvaWQsXG4gICAgICByZWplY3Q6IChlcnJvcj86IGFueSkgPT4gdm9pZFxuICAgICkgPT4ge1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGZpZWxkcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdOiBbYW55LCBhbnldKSA9PiB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICB9KVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzI3OTQgLSBFeHBlY3RlZCAxIGFyZ3VtZW50cywgYnV0IGdvdCAwLiBEaWQgeW91IGZvcmdldCB0byBpbmNsdWRlICd2b2lkJyBpbiB5b3VyIHR5cGUgYXJndW1lbnQgdG8gJ1Byb21pc2UnP1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHRleHQpID0+IHtcbiAgICAgICAgICByZWplY3QodGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldFVzZXJGaWxlS2V5ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmlsZVVwbG9hZEtleSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0VXNlckZpbGVLZXkgPSAoZWxlbWVudDogRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmlsZVVwbG9hZEtleSwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFRlbXBVc2VyRmlsZUtleSA9IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLnVuc2F2ZWRGaWxlVXBsb2FkS2V5KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRUZW1wVXNlckZpbGVLZXkgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLnVuc2F2ZWRGaWxlVXBsb2FkS2V5LCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlVGVtcFVzZXJGaWxlS2V5ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFVTWVNfREFUQV9BVFRSUy51bnNhdmVkRmlsZVVwbG9hZEtleSk7XG59O1xuIl0sIm5hbWVzIjpbImFwcGVuZFVzZXJJbnB1dENsYXNzZXMiLCJnZXRUZW1wVXNlckZpbGVLZXkiLCJnZXRVc2VyRmlsZUtleSIsInBhcnNlV2ZVc3lzVmFyaWFudCIsInJlbW92ZVRlbXBVc2VyRmlsZUtleSIsInNldFRlbXBVc2VyRmlsZUtleSIsInNldFVzZXJGaWxlS2V5IiwidXBsb2FkRmlsZVRvUzMiLCJub2RlIiwiY2xhc3NlcyIsInVwZGF0ZWRDbGFzc2VzIiwicHVzaCIsImdldEluIiwid2ZVc3lzVmFyaWFudCIsInJlc3VsdHMiLCJ3ZlVzeXNWYXJpYW50S2V5Iiwic3BsaXQiLCJVU0VSX0FDQ0VTU19NRVRBX09QVElPTlMiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJlcnJvciIsInVybCIsImZpZWxkcyIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwiYXBwZW5kIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJ0ZXh0IiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsIlVTWVNfREFUQV9BVFRSUyIsImZpbGVVcGxvYWRLZXkiLCJzZXRBdHRyaWJ1dGUiLCJ1bnNhdmVkRmlsZVVwbG9hZEtleSIsInJlbW92ZUF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFVYUEsc0JBQXNCO2VBQXRCQTs7SUFnRkFDLGtCQUFrQjtlQUFsQkE7O0lBUkFDLGNBQWM7ZUFBZEE7O0lBN0RBQyxrQkFBa0I7ZUFBbEJBOztJQTZFQUMscUJBQXFCO2VBQXJCQTs7SUFKQUMsa0JBQWtCO2VBQWxCQTs7SUFSQUMsY0FBYztlQUFkQTs7SUF2Q0dDLGNBQWM7ZUFBZEE7OzsyQkF2Q1Q7QUFFQSxNQUFNUCx5QkFBeUIsQ0FDcENRLE1BQ0FDO0lBRUEsTUFBTUMsaUJBQWlCRCxRQUFRRSxJQUFJLENBQUM7SUFDcEMsSUFBSUgsS0FBS0ksS0FBSyxDQUFDO1FBQUM7UUFBUTtRQUFRO0tBQVcsR0FBRztRQUM1QyxPQUFPRixlQUFlQyxJQUFJLENBQUM7SUFDN0I7SUFDQSxPQUFPRDtBQUNUO0FBRU8sTUFBTVAscUJBQXFCLENBQUNVO0lBQ2pDLElBQUksQ0FBQ0EsZUFBZSxPQUFPLEVBQUU7SUFFN0IsSUFBSUMsVUFBc0MsRUFBRTtJQUU1QyxLQUFLLE1BQU1DLG9CQUFvQkYsY0FBY0csS0FBSyxDQUFDLEtBQU07UUFDdkQsSUFDRSx1SUFBdUk7UUFDdklDLG1DQUF3QixDQUFDQyxRQUFRLENBQUNILHFCQUNsQyx1SUFBdUk7UUFDdkksQ0FBQ0QsUUFBUUksUUFBUSxDQUFDSCxtQkFDbEI7WUFDQUQsUUFBUUgsSUFBSSxDQUFDSTtRQUNmLE9BQU87WUFDTCx5QkFBeUI7WUFDekJJLFFBQVFDLEtBQUssQ0FDWCxDQUFDLHFFQUFxRSxDQUFDO1lBRXpFTixVQUFVLEVBQUU7WUFDWjtRQUNGO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRU8sU0FBU1AsZUFDZGMsR0FBVyxFQUNYQyxNQUFXLEVBQ1hDLElBQVU7SUFFVixPQUFPLElBQUlDLFFBQ1QsQ0FDRUMsU0FDQUM7UUFFQSxNQUFNQyxXQUFXLElBQUlDO1FBQ3JCQyxPQUFPQyxPQUFPLENBQUNSLFFBQVFTLE9BQU8sQ0FBQyxDQUFDLENBQUNDLEtBQUtDLE1BQWtCO1lBQ3RETixTQUFTTyxNQUFNLENBQUNGLEtBQUtDO1FBQ3ZCO1FBRUFOLFNBQVNPLE1BQU0sQ0FBQyxRQUFRWDtRQUN4QlksTUFBTWQsS0FBSztZQUNUZSxRQUFRO1lBQ1JDLE1BQU1WO1FBQ1IsR0FDR1csSUFBSSxDQUFDLENBQUNDO1lBQ0wsSUFBSUEsU0FBU0MsRUFBRSxFQUFFO2dCQUNmLG9JQUFvSTtnQkFDcElmO1lBQ0YsT0FBTztnQkFDTCxPQUFPYyxTQUFTRSxJQUFJO1lBQ3RCO1FBQ0YsR0FDQ0gsSUFBSSxDQUFDLENBQUNHO1lBQ0xmLE9BQU9lO1FBQ1Q7SUFDSjtBQUVKO0FBRU8sTUFBTXZDLGlCQUFpQixDQUFDd0M7SUFDN0IsT0FBT0EsUUFBUUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDQyxhQUFhO0FBQzNEO0FBRU8sTUFBTXZDLGlCQUFpQixDQUFDb0MsU0FBa0JUO0lBQy9DUyxRQUFRSSxZQUFZLENBQUNGLDBCQUFlLENBQUNDLGFBQWEsRUFBRVo7QUFDdEQ7QUFFTyxNQUFNaEMscUJBQXFCLENBQUN5QztJQUNqQyxPQUFPQSxRQUFRQyxZQUFZLENBQUNDLDBCQUFlLENBQUNHLG9CQUFvQjtBQUNsRTtBQUVPLE1BQU0xQyxxQkFBcUIsQ0FBQ3FDLFNBQXNCVDtJQUN2RFMsUUFBUUksWUFBWSxDQUFDRiwwQkFBZSxDQUFDRyxvQkFBb0IsRUFBRWQ7QUFDN0Q7QUFFTyxNQUFNN0Isd0JBQXdCLENBQUNzQztJQUNwQ0EsUUFBUU0sZUFBZSxDQUFDSiwwQkFBZSxDQUFDRyxvQkFBb0I7QUFDOUQifQ==
    
    }),
    99866: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        buildApolloClientUri: function() {
            return buildApolloClientUri;
        },
        createApolloClient: function() {
            return createApolloClient;
        }
    });
    const _client = __webpack_require__(12522);
    const _batchhttp = __webpack_require__(8012);
    const _error = __webpack_require__(25064);
    const _fetchWithCsrf = __webpack_require__(22393);
    const _helpers = __webpack_require__(21650);
    const createApolloClient = ({ origin = '', path, publicationId, previewKey, ssrMode = false, credentials = 'same-origin', headers = {}, useCsrf = false, retryConfig, onError, disableBatching = false, customLinks = [] })=>{
        const uri = buildApolloClientUri({
            origin,
            path,
            publicationId,
            previewKey
        });
        const requestHeaders = {
            Accept: 'application/json'
        };
        Object.keys(headers).forEach((headerKey)=>{
            // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
            requestHeaders[headerKey] = headers[headerKey];
        });
        const batchLinkArgs = {
            uri,
            headers: requestHeaders,
            credentials
        };
        // Disable batching
        if (disableBatching) {
            batchLinkArgs.batchMax = 1;
            batchLinkArgs.batchInterval = 0;
        }
        // Fetch using a CSRF token if toggled
        if (useCsrf) {
            batchLinkArgs.fetch = _fetchWithCsrf.fetchWithCsrf;
        }
        const batchLink = new _batchhttp.BatchHttpLink(batchLinkArgs);
        const links = [];
        if (retryConfig) {
            links.push((0, _helpers.createRetryLink)(retryConfig));
        }
        if (onError) {
            links.push((0, _error.onError)(onError));
        }
        const apolloClient = new _client.ApolloClient({
            link: _client.ApolloLink.from([
                ...customLinks,
                ...links,
                batchLink
            ]),
            cache: new _client.InMemoryCache({
                dataIdFromObject: (object)=>{
                    switch(object.__typename){
                        case 'sku_props':
                            return undefined;
                        case 'commerce_subscription':
                            {
                                return object._id;
                            }
                        case 'collections':
                            // `collections` does not have an ID, so we must
                            // use a hard-coded string so that Apollo cache
                            // can merge the `collections` objects together.
                            return object.__typename;
                        case 'CMSNamespace':
                            // `CMSNamespace` does not have an ID, so we must
                            // use a hard-coded string so that Apollo cache
                            // can merge the `CMSNamespace` objects together.
                            return object.__typename;
                        default:
                            {
                                if (object.cmsLocaleId) {
                                    return `${object.id}_${object.cmsLocaleId}`;
                                }
                                return object.id;
                            }
                    }
                }
            }),
            ssrMode
        });
        return apolloClient;
    };
    const buildApolloClientUri = ({ origin = '', path, publicationId, previewKey })=>{
        const params = [];
        if (publicationId) {
            params.push(`pub=${publicationId}`);
        }
        if (previewKey) {
            params.push(`preview=${previewKey}`);
        }
        // Replace multiple slashes with single slashes
        const cleanPath = `${origin}${path}`.replace(/([^:])\/\/+/g, '$1/');
        return `${cleanPath}${params.length ? `?${params.join('&')}` : ''}`;
    };
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    22393: (function (__unused_webpack_module, exports) {
    "use strict";
    /* globals
      window,
      document,
      */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        fetchWithCsrf: function() {
            return fetchWithCsrf;
        },
        getLocalCsrfCookie: function() {
            return getLocalCsrfCookie;
        }
    });
    const WF_CSRF_COOKIE_REGEX = '(^|;)\\s*wf-csrf\\s*=\\s*([^;]+)';
    const WF_CSRF_URI = '/.wf_graphql/csrf';
    let hasFetchedCsrfCookie = false;
    function fetchWithCsrf(uri, options) {
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return fetch(uri, options);
        }
        const localCsrvCookie = getLocalCsrfCookie();
        const requestHeaders = options?.headers || {};
        return new Promise((resolve, reject)=>{
            if (hasFetchedCsrfCookie && localCsrvCookie) {
                requestHeaders['X-Wf-Csrf'] = localCsrvCookie;
                resolve(fetch(uri, {
                    ...options,
                    headers: requestHeaders
                }));
            } else {
                fetch(WF_CSRF_URI, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                }).then(()=>{
                    const newWfCsrfCookie = getLocalCsrfCookie();
                    if (newWfCsrfCookie) {
                        hasFetchedCsrfCookie = true;
                        requestHeaders['X-Wf-Csrf'] = newWfCsrfCookie;
                        resolve(fetch(uri, {
                            ...options,
                            headers: requestHeaders
                        }));
                    } else {
                        reject(new Error('Did not receive CSRF token'));
                    }
                }).catch((err)=>reject(err));
            }
        });
    }
    function getLocalCsrfCookie() {
        const wfCsrfCookieArray = document.cookie.match(WF_CSRF_COOKIE_REGEX);
        return wfCsrfCookieArray ? wfCsrfCookieArray.pop() : null;
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZldGNoV2l0aENzcmYudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsc1xuICB3aW5kb3csXG4gIGRvY3VtZW50LFxuICAqL1xuXG5jb25zdCBXRl9DU1JGX0NPT0tJRV9SRUdFWCA9ICcoXnw7KVxcXFxzKndmLWNzcmZcXFxccyo9XFxcXHMqKFteO10rKSc7XG5jb25zdCBXRl9DU1JGX1VSSSA9ICcvLndmX2dyYXBocWwvY3NyZic7XG5cbmxldCBoYXNGZXRjaGVkQ3NyZkNvb2tpZSA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hXaXRoQ3NyZihcbiAgdXJpOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCAmIHtcbiAgICAvLyBPdmVycmlkZSBgaGVhZGVyczogSGVhZGVyc0luaXRgIHdpdGggYSBzaW1wbGVyIHR5cGU6XG4gICAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIH1cbik6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgaWYgKHdpbmRvdy5XZWJmbG93LmVudignZGVzaWduJykgfHwgd2luZG93LldlYmZsb3cuZW52KCdwcmV2aWV3JykpIHtcbiAgICByZXR1cm4gZmV0Y2godXJpLCBvcHRpb25zKTtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsQ3NydkNvb2tpZSA9IGdldExvY2FsQ3NyZkNvb2tpZSgpO1xuICBjb25zdCByZXF1ZXN0SGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IG9wdGlvbnM/LmhlYWRlcnMgfHwge307XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKFxuICAgIChcbiAgICAgIHJlc29sdmU6IChyZXN1bHQ6IFByb21pc2U8UmVzcG9uc2U+IHwgUmVzcG9uc2UpID0+IHZvaWQsXG4gICAgICByZWplY3Q6IChlcnJvcj86IGFueSkgPT4gdm9pZFxuICAgICkgPT4ge1xuICAgICAgaWYgKGhhc0ZldGNoZWRDc3JmQ29va2llICYmIGxvY2FsQ3NydkNvb2tpZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1snWC1XZi1Dc3JmJ10gPSBsb2NhbENzcnZDb29raWU7XG4gICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgZmV0Y2godXJpLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoKFdGX0NTUkZfVVJJLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgICAgICBoZWFkZXJzOiB7J1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnfSxcbiAgICAgICAgfSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdXZkNzcmZDb29raWUgPSBnZXRMb2NhbENzcmZDb29raWUoKTtcbiAgICAgICAgICAgIGlmIChuZXdXZkNzcmZDb29raWUpIHtcbiAgICAgICAgICAgICAgaGFzRmV0Y2hlZENzcmZDb29raWUgPSB0cnVlO1xuICAgICAgICAgICAgICByZXF1ZXN0SGVhZGVyc1snWC1XZi1Dc3JmJ10gPSBuZXdXZkNzcmZDb29raWU7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgZmV0Y2godXJpLCB7XG4gICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0RpZCBub3QgcmVjZWl2ZSBDU1JGIHRva2VuJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbENzcmZDb29raWUoKSB7XG4gIGNvbnN0IHdmQ3NyZkNvb2tpZUFycmF5ID0gZG9jdW1lbnQuY29va2llLm1hdGNoKFdGX0NTUkZfQ09PS0lFX1JFR0VYKTtcbiAgcmV0dXJuIHdmQ3NyZkNvb2tpZUFycmF5ID8gd2ZDc3JmQ29va2llQXJyYXkucG9wKCkgOiBudWxsO1xufVxuIl0sIm5hbWVzIjpbImZldGNoV2l0aENzcmYiLCJnZXRMb2NhbENzcmZDb29raWUiLCJXRl9DU1JGX0NPT0tJRV9SRUdFWCIsIldGX0NTUkZfVVJJIiwiaGFzRmV0Y2hlZENzcmZDb29raWUiLCJ1cmkiLCJvcHRpb25zIiwid2luZG93IiwiV2ViZmxvdyIsImVudiIsImZldGNoIiwibG9jYWxDc3J2Q29va2llIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtZXRob2QiLCJjcmVkZW50aWFscyIsInRoZW4iLCJuZXdXZkNzcmZDb29raWUiLCJFcnJvciIsImNhdGNoIiwiZXJyIiwid2ZDc3JmQ29va2llQXJyYXkiLCJkb2N1bWVudCIsImNvb2tpZSIsIm1hdGNoIiwicG9wIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0VBR0U7Ozs7Ozs7Ozs7O0lBT2NBLGFBQWE7ZUFBYkE7O0lBc0RBQyxrQkFBa0I7ZUFBbEJBOzs7QUEzRGhCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxjQUFjO0FBRXBCLElBQUlDLHVCQUF1QjtBQUVwQixTQUFTSixjQUNkSyxHQUFXLEVBQ1hDLE9BR0M7SUFFRCxJQUFJQyxPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhRixPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZO1FBQ2pFLE9BQU9DLE1BQU1MLEtBQUtDO0lBQ3BCO0lBRUEsTUFBTUssa0JBQWtCVjtJQUN4QixNQUFNVyxpQkFBeUNOLFNBQVNPLFdBQVcsQ0FBQztJQUVwRSxPQUFPLElBQUlDLFFBQ1QsQ0FDRUMsU0FDQUM7UUFFQSxJQUFJWix3QkFBd0JPLGlCQUFpQjtZQUMzQ0MsY0FBYyxDQUFDLFlBQVksR0FBR0Q7WUFDOUJJLFFBQ0VMLE1BQU1MLEtBQUs7Z0JBQ1QsR0FBR0MsT0FBTztnQkFDVk8sU0FBU0Q7WUFDWDtRQUVKLE9BQU87WUFDTEYsTUFBTVAsYUFBYTtnQkFDakJjLFFBQVE7Z0JBQ1JDLGFBQWE7Z0JBQ2JMLFNBQVM7b0JBQUMsb0JBQW9CO2dCQUFnQjtZQUNoRCxHQUNHTSxJQUFJLENBQUM7Z0JBQ0osTUFBTUMsa0JBQWtCbkI7Z0JBQ3hCLElBQUltQixpQkFBaUI7b0JBQ25CaEIsdUJBQXVCO29CQUN2QlEsY0FBYyxDQUFDLFlBQVksR0FBR1E7b0JBQzlCTCxRQUNFTCxNQUFNTCxLQUFLO3dCQUNULEdBQUdDLE9BQU87d0JBQ1ZPLFNBQVNEO29CQUNYO2dCQUVKLE9BQU87b0JBQ0xJLE9BQU8sSUFBSUssTUFBTTtnQkFDbkI7WUFDRixHQUNDQyxLQUFLLENBQUMsQ0FBQ0MsTUFBUVAsT0FBT087UUFDM0I7SUFDRjtBQUVKO0FBRU8sU0FBU3RCO0lBQ2QsTUFBTXVCLG9CQUFvQkMsU0FBU0MsTUFBTSxDQUFDQyxLQUFLLENBQUN6QjtJQUNoRCxPQUFPc0Isb0JBQW9CQSxrQkFBa0JJLEdBQUcsS0FBSztBQUN2RCJ9
    
    }),
    21650: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        createRetryLink: function() {
            return createRetryLink;
        },
        waitForInFlightQueries: function() {
            return waitForInFlightQueries;
        }
    });
    const _retry = __webpack_require__(65822);
    const ERROR_METRIC_NAME = 'webflow.renderer.apollo.request.error';
    const waitForInFlightQueries = (apolloClient)=>{
        // @ts-expect-error - Property 'queryManager' is private and only accessible within class 'ApolloClient<TCacheShape>'
        if (!apolloClient || !apolloClient.queryManager) {
            return Promise.resolve(null);
        }
        const { // @ts-expect-error - Property 'queryManager' is private and only accessible within class 'ApolloClient<TCacheShape>'
        queryManager: { queries } } = apolloClient;
        const promises = Array.from(queries.values()).reduce(// @ts-expect-error - TS2345 - Argument of type '(memo: any[], { observableQuery }: { observableQuery: any; }) => any[]' is not assignable to parameter of type '(previousValue: any[], currentValue: unknown, currentIndex: number, array: unknown[]) => any[]'.
        (memo, { observableQuery })=>{
            const loading = observableQuery && observableQuery.getCurrentResult().loading || false;
            return loading ? memo.concat(observableQuery.result()) : memo;
        }, []);
        // @ts-expect-error - TS2769 - No overload matches this call.
        return Promise.all(promises).then(()=>null);
    };
    const createRetryLink = ({ maxAttempts = 1, retryOnCorsErrors = true, retriedServerErrors = 'all', metricsLogger })=>{
        return new _retry.RetryLink({
            attempts: (count, operation, error)=>{
                const tags = [];
                let ret = false;
                if (count >= maxAttempts) {
                    tags.push('max_attempts:true');
                } else {
                    tags.push('max_attempts:false');
                    if (error && (retriedServerErrors === 'all' && error.statusCode >= 500 || retriedServerErrors === 'bad-gateway' && error.statusCode === 502)) {
                        // if the request fails, let's try it again because it was probably
                        // a temporary issue.
                        tags.push('reason:server_error');
                        tags.push(`status_code:${error.statusCode}`);
                        ret = true;
                    } else if (retryOnCorsErrors && error && error.result && error.result.code === 'BadCrossOriginRequest') {
                        // if CORS fails, it means we used a stale token so we can try it again
                        // with the correct one
                        tags.push('reason:cors_error');
                        ret = true;
                    }
                }
                tags.push(`attempt:${count}`, `retry:${ret}`);
                metricsLogger?.logDistributionMetric(ERROR_METRIC_NAME, 1, ...tags);
                return ret;
            },
            delay: (count)=>{
                // delay in ms
                return count * 500 + Math.random() * 500;
            }
        });
    };
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXRyeUxpbmt9IGZyb20gJ0BhcG9sbG8vY2xpZW50L2xpbmsvcmV0cnknO1xuaW1wb3J0IHtBcG9sbG9NZXRyaWNzTG9nZ2VyfSBmcm9tICcuL2Fwb2xsb01ldHJpY3NMb2dnZXInO1xuaW1wb3J0IHtBcG9sbG9DbGllbnRTdGF0ZVR5cGV9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2Rlc2lnbmVyL2Fwb2xsby1jbGllbnQnO1xuXG5jb25zdCBFUlJPUl9NRVRSSUNfTkFNRSA9ICd3ZWJmbG93LnJlbmRlcmVyLmFwb2xsby5yZXF1ZXN0LmVycm9yJztcblxuZXhwb3J0IGNvbnN0IHdhaXRGb3JJbkZsaWdodFF1ZXJpZXMgPSAoXG4gIGFwb2xsb0NsaWVudDogQXBvbGxvQ2xpZW50U3RhdGVUeXBlXG4pOiBQcm9taXNlPG51bGw+ID0+IHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFByb3BlcnR5ICdxdWVyeU1hbmFnZXInIGlzIHByaXZhdGUgYW5kIG9ubHkgYWNjZXNzaWJsZSB3aXRoaW4gY2xhc3MgJ0Fwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4nXG4gIGlmICghYXBvbGxvQ2xpZW50IHx8ICFhcG9sbG9DbGllbnQucXVlcnlNYW5hZ2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gUHJvcGVydHkgJ3F1ZXJ5TWFuYWdlcicgaXMgcHJpdmF0ZSBhbmQgb25seSBhY2Nlc3NpYmxlIHdpdGhpbiBjbGFzcyAnQXBvbGxvQ2xpZW50PFRDYWNoZVNoYXBlPidcbiAgICBxdWVyeU1hbmFnZXI6IHtxdWVyaWVzfSxcbiAgfSA9IGFwb2xsb0NsaWVudDtcblxuICBjb25zdCBwcm9taXNlcyA9IEFycmF5LmZyb20ocXVlcmllcy52YWx1ZXMoKSkucmVkdWNlPEFycmF5PGFueT4+KFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzNDUgLSBBcmd1bWVudCBvZiB0eXBlICcobWVtbzogYW55W10sIHsgb2JzZXJ2YWJsZVF1ZXJ5IH06IHsgb2JzZXJ2YWJsZVF1ZXJ5OiBhbnk7IH0pID0+IGFueVtdJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnKHByZXZpb3VzVmFsdWU6IGFueVtdLCBjdXJyZW50VmFsdWU6IHVua25vd24sIGN1cnJlbnRJbmRleDogbnVtYmVyLCBhcnJheTogdW5rbm93bltdKSA9PiBhbnlbXScuXG4gICAgKG1lbW8sIHtvYnNlcnZhYmxlUXVlcnl9KSA9PiB7XG4gICAgICBjb25zdCBsb2FkaW5nID1cbiAgICAgICAgKG9ic2VydmFibGVRdWVyeSAmJiBvYnNlcnZhYmxlUXVlcnkuZ2V0Q3VycmVudFJlc3VsdCgpLmxvYWRpbmcpIHx8XG4gICAgICAgIGZhbHNlO1xuICAgICAgcmV0dXJuIGxvYWRpbmcgPyBtZW1vLmNvbmNhdChvYnNlcnZhYmxlUXVlcnkucmVzdWx0KCkpIDogbWVtbztcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjc2OSAtIE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4gbnVsbCk7XG59O1xuXG5leHBvcnQgdHlwZSBSZXRyeUxpbmtDb25maWcgPSB7XG4gIG1heEF0dGVtcHRzPzogbnVtYmVyO1xuICByZXRyeU9uQ29yc0Vycm9ycz86IGJvb2xlYW47XG4gIHJldHJpZWRTZXJ2ZXJFcnJvcnM/OiAnYmFkLWdhdGV3YXknIHwgJ2FsbCc7XG4gIG1ldHJpY3NMb2dnZXI/OiBBcG9sbG9NZXRyaWNzTG9nZ2VyO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJldHJ5TGluayA9ICh7XG4gIG1heEF0dGVtcHRzID0gMSxcbiAgcmV0cnlPbkNvcnNFcnJvcnMgPSB0cnVlLFxuICByZXRyaWVkU2VydmVyRXJyb3JzID0gJ2FsbCcsXG4gIG1ldHJpY3NMb2dnZXIsXG59OiBSZXRyeUxpbmtDb25maWcpOiBSZXRyeUxpbmsgPT4ge1xuICByZXR1cm4gbmV3IFJldHJ5TGluayh7XG4gICAgYXR0ZW1wdHM6IChjb3VudCwgb3BlcmF0aW9uLCBlcnJvcikgPT4ge1xuICAgICAgY29uc3QgdGFncyA9IFtdO1xuICAgICAgbGV0IHJldCA9IGZhbHNlO1xuICAgICAgaWYgKGNvdW50ID49IG1heEF0dGVtcHRzKSB7XG4gICAgICAgIHRhZ3MucHVzaCgnbWF4X2F0dGVtcHRzOnRydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ3MucHVzaCgnbWF4X2F0dGVtcHRzOmZhbHNlJyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBlcnJvciAmJlxuICAgICAgICAgICgocmV0cmllZFNlcnZlckVycm9ycyA9PT0gJ2FsbCcgJiYgZXJyb3Iuc3RhdHVzQ29kZSA+PSA1MDApIHx8XG4gICAgICAgICAgICAocmV0cmllZFNlcnZlckVycm9ycyA9PT0gJ2JhZC1nYXRld2F5JyAmJiBlcnJvci5zdGF0dXNDb2RlID09PSA1MDIpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBpZiB0aGUgcmVxdWVzdCBmYWlscywgbGV0J3MgdHJ5IGl0IGFnYWluIGJlY2F1c2UgaXQgd2FzIHByb2JhYmx5XG4gICAgICAgICAgLy8gYSB0ZW1wb3JhcnkgaXNzdWUuXG4gICAgICAgICAgdGFncy5wdXNoKCdyZWFzb246c2VydmVyX2Vycm9yJyk7XG4gICAgICAgICAgdGFncy5wdXNoKGBzdGF0dXNfY29kZToke2Vycm9yLnN0YXR1c0NvZGV9YCk7XG4gICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICByZXRyeU9uQ29yc0Vycm9ycyAmJlxuICAgICAgICAgIGVycm9yICYmXG4gICAgICAgICAgZXJyb3IucmVzdWx0ICYmXG4gICAgICAgICAgZXJyb3IucmVzdWx0LmNvZGUgPT09ICdCYWRDcm9zc09yaWdpblJlcXVlc3QnXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIGlmIENPUlMgZmFpbHMsIGl0IG1lYW5zIHdlIHVzZWQgYSBzdGFsZSB0b2tlbiBzbyB3ZSBjYW4gdHJ5IGl0IGFnYWluXG4gICAgICAgICAgLy8gd2l0aCB0aGUgY29ycmVjdCBvbmVcbiAgICAgICAgICB0YWdzLnB1c2goJ3JlYXNvbjpjb3JzX2Vycm9yJyk7XG4gICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0YWdzLnB1c2goYGF0dGVtcHQ6JHtjb3VudH1gLCBgcmV0cnk6JHtyZXR9YCk7XG4gICAgICBtZXRyaWNzTG9nZ2VyPy5sb2dEaXN0cmlidXRpb25NZXRyaWMoRVJST1JfTUVUUklDX05BTUUsIDEsIC4uLnRhZ3MpO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuICAgIGRlbGF5OiAoY291bnQpID0+IHtcbiAgICAgIC8vIGRlbGF5IGluIG1zXG4gICAgICByZXR1cm4gY291bnQgKiA1MDAgKyBNYXRoLnJhbmRvbSgpICogNTAwO1xuICAgIH0sXG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVSZXRyeUxpbmsiLCJ3YWl0Rm9ySW5GbGlnaHRRdWVyaWVzIiwiRVJST1JfTUVUUklDX05BTUUiLCJhcG9sbG9DbGllbnQiLCJxdWVyeU1hbmFnZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInF1ZXJpZXMiLCJwcm9taXNlcyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJvYnNlcnZhYmxlUXVlcnkiLCJsb2FkaW5nIiwiZ2V0Q3VycmVudFJlc3VsdCIsImNvbmNhdCIsInJlc3VsdCIsImFsbCIsInRoZW4iLCJtYXhBdHRlbXB0cyIsInJldHJ5T25Db3JzRXJyb3JzIiwicmV0cmllZFNlcnZlckVycm9ycyIsIm1ldHJpY3NMb2dnZXIiLCJSZXRyeUxpbmsiLCJhdHRlbXB0cyIsImNvdW50Iiwib3BlcmF0aW9uIiwiZXJyb3IiLCJ0YWdzIiwicmV0IiwicHVzaCIsInN0YXR1c0NvZGUiLCJjb2RlIiwibG9nRGlzdHJpYnV0aW9uTWV0cmljIiwiZGVsYXkiLCJNYXRoIiwicmFuZG9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXlDYUEsZUFBZTtlQUFmQTs7SUFuQ0FDLHNCQUFzQjtlQUF0QkE7Ozt1QkFOVztBQUl4QixNQUFNQyxvQkFBb0I7QUFFbkIsTUFBTUQseUJBQXlCLENBQ3BDRTtJQUVBLHFIQUFxSDtJQUNySCxJQUFJLENBQUNBLGdCQUFnQixDQUFDQSxhQUFhQyxZQUFZLEVBQUU7UUFDL0MsT0FBT0MsUUFBUUMsT0FBTyxDQUFDO0lBQ3pCO0lBRUEsTUFBTSxFQUNKLHFIQUFxSDtJQUNySEYsY0FBYyxFQUFDRyxPQUFPLEVBQUMsRUFDeEIsR0FBR0o7SUFFSixNQUFNSyxXQUFXQyxNQUFNQyxJQUFJLENBQUNILFFBQVFJLE1BQU0sSUFBSUMsTUFBTSxDQUNsRCxpUUFBaVE7SUFDalEsQ0FBQ0MsTUFBTSxFQUFDQyxlQUFlLEVBQUM7UUFDdEIsTUFBTUMsVUFDSixBQUFDRCxtQkFBbUJBLGdCQUFnQkUsZ0JBQWdCLEdBQUdELE9BQU8sSUFDOUQ7UUFDRixPQUFPQSxVQUFVRixLQUFLSSxNQUFNLENBQUNILGdCQUFnQkksTUFBTSxNQUFNTDtJQUMzRCxHQUNBLEVBQUU7SUFHSiw2REFBNkQ7SUFDN0QsT0FBT1IsUUFBUWMsR0FBRyxDQUFDWCxVQUFVWSxJQUFJLENBQUMsSUFBTTtBQUMxQztBQVNPLE1BQU1wQixrQkFBa0IsQ0FBQyxFQUM5QnFCLGNBQWMsQ0FBQyxFQUNmQyxvQkFBb0IsSUFBSSxFQUN4QkMsc0JBQXNCLEtBQUssRUFDM0JDLGFBQWEsRUFDRztJQUNoQixPQUFPLElBQUlDLGdCQUFTLENBQUM7UUFDbkJDLFVBQVUsQ0FBQ0MsT0FBT0MsV0FBV0M7WUFDM0IsTUFBTUMsT0FBTyxFQUFFO1lBQ2YsSUFBSUMsTUFBTTtZQUNWLElBQUlKLFNBQVNOLGFBQWE7Z0JBQ3hCUyxLQUFLRSxJQUFJLENBQUM7WUFDWixPQUFPO2dCQUNMRixLQUFLRSxJQUFJLENBQUM7Z0JBQ1YsSUFDRUgsU0FDQyxDQUFBLEFBQUNOLHdCQUF3QixTQUFTTSxNQUFNSSxVQUFVLElBQUksT0FDcERWLHdCQUF3QixpQkFBaUJNLE1BQU1JLFVBQVUsS0FBSyxHQUFHLEdBQ3BFO29CQUNBLG1FQUFtRTtvQkFDbkUscUJBQXFCO29CQUNyQkgsS0FBS0UsSUFBSSxDQUFDO29CQUNWRixLQUFLRSxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUVILE1BQU1JLFVBQVUsQ0FBQyxDQUFDO29CQUMzQ0YsTUFBTTtnQkFDUixPQUFPLElBQ0xULHFCQUNBTyxTQUNBQSxNQUFNWCxNQUFNLElBQ1pXLE1BQU1YLE1BQU0sQ0FBQ2dCLElBQUksS0FBSyx5QkFDdEI7b0JBQ0EsdUVBQXVFO29CQUN2RSx1QkFBdUI7b0JBQ3ZCSixLQUFLRSxJQUFJLENBQUM7b0JBQ1ZELE1BQU07Z0JBQ1I7WUFDRjtZQUVBRCxLQUFLRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUVMLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFSSxJQUFJLENBQUM7WUFDNUNQLGVBQWVXLHNCQUFzQmpDLG1CQUFtQixNQUFNNEI7WUFDOUQsT0FBT0M7UUFDVDtRQUNBSyxPQUFPLENBQUNUO1lBQ04sY0FBYztZQUNkLE9BQU9BLFFBQVEsTUFBTVUsS0FBS0MsTUFBTSxLQUFLO1FBQ3ZDO0lBQ0Y7QUFDRiJ9
    
    }),
    25195: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        createApolloClient: function() {
            return _createApolloClient.createApolloClient;
        },
        waitForInFlightQueries: function() {
            return _helpers.waitForInFlightQueries;
        }
    });
    const _createApolloClient = __webpack_require__(99866);
    const _helpers = __webpack_require__(21650);
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7Y3JlYXRlQXBvbGxvQ2xpZW50fSBmcm9tICcuL2NyZWF0ZUFwb2xsb0NsaWVudCc7XG5leHBvcnQge3R5cGUgQXBvbGxvTWV0cmljc0xvZ2dlcn0gZnJvbSAnLi9hcG9sbG9NZXRyaWNzTG9nZ2VyJztcbmV4cG9ydCB7d2FpdEZvckluRmxpZ2h0UXVlcmllc30gZnJvbSAnLi9oZWxwZXJzJztcbiJdLCJuYW1lcyI6WyJjcmVhdGVBcG9sbG9DbGllbnQiLCJ3YWl0Rm9ySW5GbGlnaHRRdWVyaWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFRQSxrQkFBa0I7ZUFBbEJBLHNDQUFrQjs7SUFFbEJDLHNCQUFzQjtlQUF0QkEsK0JBQXNCOzs7b0NBRkc7eUJBRUkifQ==
    
    }),
    51522: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        None: function() {
            return None;
        },
        Some: function() {
            return Some;
        },
        fromNullable: function() {
            return fromNullable;
        },
        maybe: function() {
            return maybe;
        },
        of: function() {
            return of;
        }
    });
    const { create } = Object;
    const returnThis = function() {
        return this;
    };
    const VALUE = Symbol();
    const FOLD = Symbol();
    const None = create({
        map: returnThis,
        chain: returnThis,
        alt: (alternativeOption)=>alternativeOption,
        ap: returnThis,
        concat: (other)=>other,
        /**
       * Returns a default fallback value if the `Option` is a `None`.
       */ [FOLD]: (fallback)=>fallback
    });
    const Some = (value)=>{
        const object = create(SomePrototype);
        object[VALUE] = value;
        return object;
    };
    const SomePrototype = {
        /**
       * Transform the value inside of a `Option` by applying a unary function to it.
       */ map (f) {
            return Some(f(this[VALUE]));
        },
        /**
       * Sequence computations by applying a function to the value
       * contained in the `Option`. The function must return an `Option`.
       */ chain (f) {
            return f(this[VALUE]);
        },
        /**
       * Provide an alternative option that will be returned if this option is None.
       */ alt: returnThis,
        /**
       * Allows you to apply the Option's value with another Option's value,
       * returning another Option.
       */ ap (m) {
            return m.map(this[VALUE]);
        },
        concat (other) {
            return other[FOLD](this, (otherValue)=>Some(this[VALUE].concat(otherValue)));
        },
        /**
       * Applies a function to the value contained in an `Option`
       * if the `Option` is a `Some`.
       */ [FOLD] (fallback, mapValue) {
            return mapValue(this[VALUE]);
        }
    };
    const fromNullable = (value)=>value == null ? None : Some(value);
    const maybe = (fallback)=>(mapValue)=>(option)=>option[FOLD](fallback, mapValue);
    const of = Some;
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    16387: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        Err: function() {
            return Err;
        },
        Ok: function() {
            return Ok;
        },
        either: function() {
            return either;
        },
        of: function() {
            return of;
        }
    });
    const { create } = Object;
    const returnThis = function() {
        return this;
    };
    const VALUE = Symbol();
    const ERROR = Symbol();
    const FOLD = Symbol();
    const Err = (error)=>{
        const object = create(ErrPrototype);
        object[ERROR] = error;
        return object;
    };
    const Ok = (value)=>{
        const object = create(OkPrototype);
        object[VALUE] = value;
        return object;
    };
    const ErrPrototype = {
        map: returnThis,
        chain: returnThis,
        ap: returnThis,
        [FOLD]: function(errorHandler, _) {
            return errorHandler(this[ERROR]);
        }
    };
    const OkPrototype = {
        map (f) {
            return Ok(f(this[VALUE]));
        },
        chain (f) {
            return f(this[VALUE]);
        },
        ap (m) {
            return m.map(this[VALUE]);
        },
        [FOLD]: function(errorHandler, valueHandler) {
            return valueHandler(this[VALUE]);
        }
    };
    const either = (mapErr)=>(mapVal)=>(result)=>result[FOLD](mapErr, mapVal);
    const of = Ok;
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjcmVhdGV9ID0gT2JqZWN0O1xuXG5jb25zdCByZXR1cm5UaGlzID0gZnVuY3Rpb24gPFQ+KHRoaXM6IFQpOiBUIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5jb25zdCBWQUxVRTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuY29uc3QgRVJST1I6IHVuaXF1ZSBzeW1ib2wgPSBTeW1ib2woKTtcbmNvbnN0IEZPTEQ6IHVuaXF1ZSBzeW1ib2wgPSBTeW1ib2woKTtcblxuLy8gIyBSZXN1bHRcbi8vXG4vLyBSZXN1bHQgaXMgYSBkYXRhIHR5cGUgZm9yIHJlcHJlc2VudGluZyByZXN1bHRzIGZyb20gY29tcHV0YXRpb25zIHRoYXQgbWF5XG4vLyBmYWlsIGJ5IGdpdmluZyB0aGUgdXNlciBhIGNvbnRyb2xsYWJsZSB3YXkgdG8gcHJvcGFnYXRlIGVycm9ycy4gYFJlc3VsdGAgaXNcbi8vIGFsc28ga25vd24gYXMgYEVpdGhlcmAgaW4gb3RoZXIgbGFuZ3VhZ2VzIGFuZCBsaWJyYXJpZXMuXG4vL1xuLy8gYGBganNcbi8vIGltcG9ydCB7RXJyLCBPa30gZnJvbSAnQHBhY2thZ2VzL3V0aWxpdGllcy9mcC9yZXN1bHQnXG4vL1xuLy8gY29uc3Qgc2FmZURpdmlkZSA9IChhLCBiKSA9PiBiID09PSAwXG4vLyAgID8gRXJyKCdDYW5ub3QgZGl2aWRlIGJ5IDAuJylcbi8vICAgOiBPayhhIC8gYilcbi8vIGBgYFxuLy9cbi8vIE5vdGljZSBpbiB0aGUgdXNhZ2UgZXhhbXBsZSBhYm92ZSBob3cgaW4gdGhlIGNhc2Ugb2YgYSBmYWlsdXJlIHRoZSBlcnJvclxuLy8gbWVzc2FnZSBpcyB3cmFwcGVkIGluIGBFcnJgIHdoaWxlIG90aGVyd2lzZSB0aGUgcmVzdWx0IGlzIHJldHVybmVkIHdyYXBwZWRcbi8vIGluIGBPa2AuIGBFcnJgIGFuZCBgT2tgIGFyZSB0aGUgY29uc3RydWN0b3JzIGZvciB0aGUgYFJlc3VsdGAgdHlwZS5cbi8vXG4vLyBDb25zdW1pbmcgYSB2YWx1ZSBvZiB0aGlzIHR5cGUgaW52b2x2ZXMgc29tZWhvdyDigJxlbmhhbmNpbmfigJ0gYSByZWd1bGFyXG4vLyBmdW5jdGlvbiB0byB3b3JrIG9uIHZhbHVlcyBvZiB0eXBlIGBSZXN1bHRgLiBUaGlzIGlzIGRvbmUgYnkgYXBwbHlpbmdcbi8vIHRoZSBmYW1pbGlhciBgbWFwYCBmdW5jdGlvbiB0byBvdXIgb3JpZ2luYWwgZnVuY3Rpb246XG4vL1xuLy8gYGBganNcbi8vIGltcG9ydCB7bWFwfSBmcm9tICdAcGFja2FnZXMvdXRpbGl0aWVzL2ZwL3V0aWxzJ1xuLy9cbi8vIGNvbnN0IG9yaWdpbmFsRG91YmxlID0gYSA9PiBhICsgYVxuLy8gY29uc3QgZG91YmxlID0gbWFwKG9yaWdpbmFsRG91YmxlKVxuLy8gYGBgXG4vL1xuLy8gVGhpcyBgZG91YmxlYCBmdW5jdGlvbiBjYW4gbm93IHNhZmVseSBiZSBhcHBsaWVkIHRvIGEgYFJlc3VsdGAgdmFsdWU6XG4vL1xuLy8gYGBganNcbi8vIGNvbnN0IHJlc3VsdDEgPSBkb3VibGUoc2FmZURpdmlkZSg2LCAyKSkgLy8gPT4gT2soMylcbi8vIGNvbnN0IHJlc3VsdDIgPSBkb3VibGUoc2FmZURpdmlkZSg2LCAwKSkgLy8gPT4gRXJyKCdDYW5ub3QgZGl2aWRlIGJ5IDAuJylcbi8vIGBgYFxuLy9cbi8vIE5vdGljZSBob3cgb3VyIGBkb3VibGVgIGZ1bmN0aW9uIHdvcmtzIGp1c3QgZmluZSwgZXZlbiBpZiB0aGUgcmVzdWx0IG9mIHRoZVxuLy8gZGl2aXNpb24gaXMgYW4gZXJyb3IsIGJ5IHBhc3NpbmcgdGhhdCBlcnJvciBhbG9uZy4gSW4gY2FzZXMgd2hlcmUgd2Ugb25seVxuLy8gY2FyZSBhYm91dCB0aGUgc3VjY2Vzc2Z1bCByZXN1bHQgdGhpcyBpcyBhbGwgd2UgbmVlZCB0byBkby4gV2hlbiB3ZSBuZWVkIHRvXG4vLyB0YWtlIHRoZSB2YWx1ZSBvdXQgb2YgdGhlIGBSZXN1bHRgIGJveCB3ZSBjYW4gbWFrZSB1c2Ugb2YgYGVpdGhlcmA6XG4vL1xuLy8gYGBganNcbi8vIGNvbnN0IG51bWJlcjEgPSBlaXRoZXIoZXJyb3IgPT4gMCkodmFsID0+IHZhbCkocmVzdWx0MSkgLy8gPT4gM1xuLy8gY29uc3QgbnVtYmVyMiA9IGVpdGhlcihlcnJvciA9PiAwKSh2YWwgPT4gdmFsKShyZXN1bHQyKSAvLyA9PiAwXG4vLyBgYGBcbi8vXG4vLyBUaGUgYGVpdGhlcmAgZnVuY3Rpb24gdGFrZXMgdGhyZWUgYXJndW1lbnRzLCBhIGZ1bmN0aW9uIGZvciBoYW5kbGluZyB0aGUgRXJyXG4vLyBjYXNlLCBhIGZ1bmN0aW9uIGZvciBoYW5kbGluZyB0aGUgT2sgY2FzZSBhbmQgdGhlIHJlc3VsdC4gQm90aCBoYW5kbGVyc1xuLy8gc2hvdWxkIHJldHVybiB2YWx1ZXMgb2YgdGhlIHNhbWUgdHlwZS5cblxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHQ8RSwgQT4ge1xuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSB2YWx1ZSBpbnNpZGUgb2YgYSBgUmVzdWx0YCBieSBhcHBseWluZyBhIHVuYXJ5IGZ1bmN0aW9uIHRvIGl0LlxuICAgKi9cbiAgbWFwOiA8Qj4oZjogKHg6IEEpID0+IEIpID0+IFJlc3VsdDxFLCBCPjtcbiAgLyoqXG4gICAqIFNlcXVlbmNlIGNvbXB1dGF0aW9ucyB0aGF0IG1heSBmYWlsIGJ5IGFwcGx5aW5nIGEgZnVuY3Rpb24gdG8gdGhlIHZhbHVlXG4gICAqIGNvbnRhaW5lZCBpbiB0aGUgYFJlc3VsdGAsIHdoZXJlIHRoZSBmdW5jdGlvbiBhbHNvIHJldHVybnMgYSBgUmVzdWx0YC5cbiAgICovXG4gIGNoYWluOiA8Qj4oZjogKHg6IEEpID0+IFJlc3VsdDxFLCBCPikgPT4gUmVzdWx0PEUsIEI+O1xuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byBhcHBseSB0aGUgUmVzdWx0J3MgdmFsdWUgd2l0aCBhbm90aGVyIFJlc3VsdCdzIHZhbHVlLFxuICAgKiByZXR1cm5pbmcgYW5vdGhlciBSZXN1bHQuXG4gICAqL1xuICBhcDogPEIsIEM+KHRoaXM6IFJlc3VsdDxFLCAoeDogQikgPT4gQz4sIHg6IFJlc3VsdDxFLCBCPikgPT4gUmVzdWx0PEUsIEM+O1xuICBbRk9MRF06IDxCPihlcnI6IChlOiBFKSA9PiBCLCBvazogKGE6IEEpID0+IEIpID0+IEI7XG59XG5cbnR5cGUgRXJyVDxFLCBBPiA9IFJlc3VsdDxFLCBBPiAmIHtbRVJST1JdOiBFfTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBjb25zdCBFcnIgPSA8RT4oZXJyb3I6IEUpOiBSZXN1bHQ8RSwgYW55PiA9PiB7XG4gIGNvbnN0IG9iamVjdCA9IGNyZWF0ZShFcnJQcm90b3R5cGUpO1xuICBvYmplY3RbRVJST1JdID0gZXJyb3I7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG50eXBlIE9rVDxFLCBBPiA9IFJlc3VsdDxFLCBBPiAmIHtbVkFMVUVdOiBBfTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBjb25zdCBPayA9IDxBPih2YWx1ZTogQSk6IFJlc3VsdDxhbnksIEE+ID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKE9rUHJvdG90eXBlKTtcbiAgb2JqZWN0W1ZBTFVFXSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuY29uc3QgRXJyUHJvdG90eXBlID0ge1xuICBtYXA6IHJldHVyblRoaXMsXG4gIGNoYWluOiByZXR1cm5UaGlzLFxuICBhcDogcmV0dXJuVGhpcyxcbiAgW0ZPTERdOiBmdW5jdGlvbiA8RSwgQSwgQj4oXG4gICAgdGhpczogRXJyVDxFLCBBPixcbiAgICBlcnJvckhhbmRsZXI6IChlOiBFKSA9PiBCLFxuICAgIF86IChhOiBBKSA9PiBCXG4gICkge1xuICAgIHJldHVybiBlcnJvckhhbmRsZXIodGhpc1tFUlJPUl0pO1xuICB9LFxufTtcblxuY29uc3QgT2tQcm90b3R5cGUgPSB7XG4gIG1hcDxFLCBBLCBCPih0aGlzOiBPa1Q8RSwgQT4sIGY6ICh4OiBBKSA9PiBCKTogUmVzdWx0PEUsIEI+IHtcbiAgICByZXR1cm4gT2soZih0aGlzW1ZBTFVFXSkpO1xuICB9LFxuXG4gIGNoYWluPEUsIEEsIEI+KHRoaXM6IE9rVDxFLCBBPiwgZjogKHg6IEEpID0+IFJlc3VsdDxFLCBCPik6IFJlc3VsdDxFLCBCPiB7XG4gICAgcmV0dXJuIGYodGhpc1tWQUxVRV0pO1xuICB9LFxuXG4gIGFwPEUsIEEsIEI+KHRoaXM6IE9rVDxFLCAoeDogQSkgPT4gQj4sIG06IFJlc3VsdDxFLCBBPik6IFJlc3VsdDxFLCBCPiB7XG4gICAgcmV0dXJuIG0ubWFwKHRoaXNbVkFMVUVdKTtcbiAgfSxcblxuICBbRk9MRF06IGZ1bmN0aW9uIDxFLCBBLCBCPihcbiAgICB0aGlzOiBPa1Q8RSwgQT4sXG4gICAgZXJyb3JIYW5kbGVyOiAoZTogRSkgPT4gQixcbiAgICB2YWx1ZUhhbmRsZXI6IChhOiBBKSA9PiBCXG4gICkge1xuICAgIHJldHVybiB2YWx1ZUhhbmRsZXIodGhpc1tWQUxVRV0pO1xuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGVpdGhlciA9XG4gIDxFLCBCPihtYXBFcnI6IChlOiBFKSA9PiBCKSA9PlxuICA8QT4obWFwVmFsOiAoYTogQSkgPT4gQikgPT5cbiAgKHJlc3VsdDogUmVzdWx0PEUsIEE+KSA9PlxuICAgIHJlc3VsdFtGT0xEXShtYXBFcnIsIG1hcFZhbCk7XG5cbmV4cG9ydCBjb25zdCBvZiA9IE9rO1xuIl0sIm5hbWVzIjpbIkVyciIsIk9rIiwiZWl0aGVyIiwib2YiLCJjcmVhdGUiLCJPYmplY3QiLCJyZXR1cm5UaGlzIiwiVkFMVUUiLCJTeW1ib2wiLCJFUlJPUiIsIkZPTEQiLCJlcnJvciIsIm9iamVjdCIsIkVyclByb3RvdHlwZSIsInZhbHVlIiwiT2tQcm90b3R5cGUiLCJtYXAiLCJjaGFpbiIsImFwIiwiZXJyb3JIYW5kbGVyIiwiXyIsImYiLCJtIiwidmFsdWVIYW5kbGVyIiwibWFwRXJyIiwibWFwVmFsIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWlGYUEsR0FBRztlQUFIQTs7SUFTQUMsRUFBRTtlQUFGQTs7SUF5Q0FDLE1BQU07ZUFBTkE7O0lBTUFDLEVBQUU7ZUFBRkE7OztBQXpJYixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHQztBQUVqQixNQUFNQyxhQUFhO0lBQ2pCLE9BQU8sSUFBSTtBQUNiO0FBRUEsTUFBTUMsUUFBdUJDO0FBQzdCLE1BQU1DLFFBQXVCRDtBQUM3QixNQUFNRSxPQUFzQkY7QUF5RXJCLE1BQU1SLE1BQU0sQ0FBSVc7SUFDckIsTUFBTUMsU0FBU1IsT0FBT1M7SUFDdEJELE1BQU0sQ0FBQ0gsTUFBTSxHQUFHRTtJQUNoQixPQUFPQztBQUNUO0FBS08sTUFBTVgsS0FBSyxDQUFJYTtJQUNwQixNQUFNRixTQUFTUixPQUFPVztJQUN0QkgsTUFBTSxDQUFDTCxNQUFNLEdBQUdPO0lBQ2hCLE9BQU9GO0FBQ1Q7QUFFQSxNQUFNQyxlQUFlO0lBQ25CRyxLQUFLVjtJQUNMVyxPQUFPWDtJQUNQWSxJQUFJWjtJQUNKLENBQUNJLEtBQUssRUFBRSxTQUVOUyxZQUF5QixFQUN6QkMsQ0FBYztRQUVkLE9BQU9ELGFBQWEsSUFBSSxDQUFDVixNQUFNO0lBQ2pDO0FBQ0Y7QUFFQSxNQUFNTSxjQUFjO0lBQ2xCQyxLQUE4QkssQ0FBYztRQUMxQyxPQUFPcEIsR0FBR29CLEVBQUUsSUFBSSxDQUFDZCxNQUFNO0lBQ3pCO0lBRUFVLE9BQWdDSSxDQUF5QjtRQUN2RCxPQUFPQSxFQUFFLElBQUksQ0FBQ2QsTUFBTTtJQUN0QjtJQUVBVyxJQUF1Q0ksQ0FBZTtRQUNwRCxPQUFPQSxFQUFFTixHQUFHLENBQUMsSUFBSSxDQUFDVCxNQUFNO0lBQzFCO0lBRUEsQ0FBQ0csS0FBSyxFQUFFLFNBRU5TLFlBQXlCLEVBQ3pCSSxZQUF5QjtRQUV6QixPQUFPQSxhQUFhLElBQUksQ0FBQ2hCLE1BQU07SUFDakM7QUFDRjtBQUVPLE1BQU1MLFNBQ1gsQ0FBT3NCLFNBQ1AsQ0FBSUMsU0FDSixDQUFDQyxTQUNDQSxNQUFNLENBQUNoQixLQUFLLENBQUNjLFFBQVFDO0FBRWxCLE1BQU10QixLQUFLRiJ9
    
    }),
    56574: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        Const: function() {
            return Const;
        },
        getConst: function() {
            return getConst;
        },
        of: function() {
            return of;
        }
    });
    const { create } = Object;
    const VALUE = Symbol();
    const prototype = {
        map () {
            return this;
        }
    };
    const Const = (value)=>{
        const object = create(prototype);
        object[VALUE] = value;
        return object;
    };
    const of = Const;
    const getConst = (con)=>con[VALUE];
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbnN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjcmVhdGV9ID0gT2JqZWN0O1xuXG5jb25zdCBWQUxVRTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0VHlwZTxDLCBBPiB7XG4gIFtWQUxVRV06IEM7XG4gIG1hcDogPEI+KGY6ICh4OiBBKSA9PiBCKSA9PiBDb25zdFR5cGU8QywgQj47XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IHtcbiAgbWFwKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IENvbnN0ID0gPEMsIEE+KHZhbHVlOiBDKTogQ29uc3RUeXBlPEMsIEE+ID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKHByb3RvdHlwZSk7XG4gIG9iamVjdFtWQUxVRV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCBjb25zdCBvZiA9IENvbnN0O1xuZXhwb3J0IGNvbnN0IGdldENvbnN0ID0gPEEsIEM+KGNvbjogQ29uc3RUeXBlPEMsIEE+KTogQyA9PiBjb25bVkFMVUVdO1xuIl0sIm5hbWVzIjpbIkNvbnN0IiwiZ2V0Q29uc3QiLCJvZiIsImNyZWF0ZSIsIk9iamVjdCIsIlZBTFVFIiwiU3ltYm9sIiwicHJvdG90eXBlIiwibWFwIiwidmFsdWUiLCJvYmplY3QiLCJjb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBZWFBLEtBQUs7ZUFBTEE7O0lBT0FDLFFBQVE7ZUFBUkE7O0lBREFDLEVBQUU7ZUFBRkE7OztBQXJCYixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHQztBQUVqQixNQUFNQyxRQUF1QkM7QUFPN0IsTUFBTUMsWUFBWTtJQUNoQkM7UUFDRSxPQUFPLElBQUk7SUFDYjtBQUNGO0FBRU8sTUFBTVIsUUFBUSxDQUFPUztJQUMxQixNQUFNQyxTQUFTUCxPQUFPSTtJQUN0QkcsTUFBTSxDQUFDTCxNQUFNLEdBQUdJO0lBQ2hCLE9BQU9DO0FBQ1Q7QUFFTyxNQUFNUixLQUFLRjtBQUNYLE1BQU1DLFdBQVcsQ0FBT1UsTUFBNEJBLEdBQUcsQ0FBQ04sTUFBTSJ9
    
    }),
    64552: (function (__unused_webpack_module, exports) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        Identity: function() {
            return Identity;
        },
        of: function() {
            return of;
        },
        runIdentity: function() {
            return runIdentity;
        }
    });
    const { create } = Object;
    const VALUE = Symbol();
    const prototype = {
        map (f) {
            return Identity(f(this[VALUE]));
        }
    };
    const Identity = (value)=>{
        const object = create(prototype);
        object[VALUE] = value;
        return object;
    };
    const of = Identity;
    const runIdentity = (object)=>object[VALUE];
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklkZW50aXR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjcmVhdGV9ID0gT2JqZWN0O1xuXG5jb25zdCBWQUxVRTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aXR5VHlwZTxBPiB7XG4gIFtWQUxVRV06IEE7XG4gIG1hcDogPEI+KGY6ICh4OiBBKSA9PiBCKSA9PiBJZGVudGl0eVR5cGU8Qj47XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IHtcbiAgbWFwPEEsIEI+KHRoaXM6IElkZW50aXR5VHlwZTxBPiwgZjogKHg6IEEpID0+IEIpIHtcbiAgICByZXR1cm4gSWRlbnRpdHkoZih0aGlzW1ZBTFVFXSkpO1xuICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IElkZW50aXR5ID0gPEE+KHZhbHVlOiBBKTogSWRlbnRpdHlUeXBlPEE+ID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKHByb3RvdHlwZSk7XG4gIG9iamVjdFtWQUxVRV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCBjb25zdCBvZiA9IElkZW50aXR5O1xuZXhwb3J0IGNvbnN0IHJ1bklkZW50aXR5ID0gPEE+KG9iamVjdDogSWRlbnRpdHlUeXBlPEE+KTogQSA9PiBvYmplY3RbVkFMVUVdO1xuIl0sIm5hbWVzIjpbIklkZW50aXR5Iiwib2YiLCJydW5JZGVudGl0eSIsImNyZWF0ZSIsIk9iamVjdCIsIlZBTFVFIiwiU3ltYm9sIiwicHJvdG90eXBlIiwibWFwIiwiZiIsInZhbHVlIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWVhQSxRQUFRO2VBQVJBOztJQU1BQyxFQUFFO2VBQUZBOztJQUNBQyxXQUFXO2VBQVhBOzs7QUF0QmIsTUFBTSxFQUFDQyxNQUFNLEVBQUMsR0FBR0M7QUFFakIsTUFBTUMsUUFBdUJDO0FBTzdCLE1BQU1DLFlBQVk7SUFDaEJDLEtBQWlDQyxDQUFjO1FBQzdDLE9BQU9ULFNBQVNTLEVBQUUsSUFBSSxDQUFDSixNQUFNO0lBQy9CO0FBQ0Y7QUFFTyxNQUFNTCxXQUFXLENBQUlVO0lBQzFCLE1BQU1DLFNBQVNSLE9BQU9JO0lBQ3RCSSxNQUFNLENBQUNOLE1BQU0sR0FBR0s7SUFDaEIsT0FBT0M7QUFDVDtBQUVPLE1BQU1WLEtBQUtEO0FBQ1gsTUFBTUUsY0FBYyxDQUFJUyxTQUErQkEsTUFBTSxDQUFDTixNQUFNIn0=
    
    }),
    1242: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        add: function() {
            return add;
        },
        adjust: function() {
            return adjust;
        },
        allPass: function() {
            return allPass;
        },
        anyPass: function() {
            return anyPass;
        },
        append: function() {
            return append;
        },
        assoc: function() {
            return assoc;
        },
        blackbird: function() {
            return blackbird;
        },
        both: function() {
            return both;
        },
        complement: function() {
            return complement;
        },
        compose: function() {
            return compose;
        },
        concat: function() {
            return concat;
        },
        concatTo: function() {
            return concatTo;
        },
        constant: function() {
            return constant;
        },
        constantFalse: function() {
            return constantFalse;
        },
        constantIdentity: function() {
            return constantIdentity;
        },
        constantNone: function() {
            return constantNone;
        },
        constantTrue: function() {
            return constantTrue;
        },
        dissoc: function() {
            return dissoc;
        },
        either: function() {
            return either;
        },
        emptyArray: function() {
            return emptyArray;
        },
        emptyObject: function() {
            return emptyObject;
        },
        entries: function() {
            return entries;
        },
        equals: function() {
            return equals;
        },
        errToOption: function() {
            return errToOption;
        },
        extractArray: function() {
            return extractArray;
        },
        extractBool: function() {
            return extractBool;
        },
        extractFunctionFromOption: function() {
            return extractFunctionFromOption;
        },
        extractFunctionFromResult: function() {
            return extractFunctionFromResult;
        },
        filter: function() {
            return filter;
        },
        find: function() {
            return find;
        },
        flat: function() {
            return flat;
        },
        flatMap: function() {
            return flatMap;
        },
        flip: function() {
            return flip;
        },
        getDeepestValues: function() {
            return getDeepestValues;
        },
        has: function() {
            return has;
        },
        head: function() {
            return head;
        },
        identity: function() {
            return identity;
        },
        inc: function() {
            return inc;
        },
        isNil: function() {
            return isNil;
        },
        last: function() {
            return last;
        },
        length: function() {
            return length;
        },
        lens: function() {
            return lens;
        },
        lensProp: function() {
            return lensProp;
        },
        lookup: function() {
            return lookup;
        },
        lookupWithDefault: function() {
            return lookupWithDefault;
        },
        map: function() {
            return map;
        },
        mapArray: function() {
            return mapArray;
        },
        mapValues: function() {
            return mapValues;
        },
        match: function() {
            return match;
        },
        max: function() {
            return max;
        },
        noneToErr: function() {
            return noneToErr;
        },
        not: function() {
            return not;
        },
        notEqual: function() {
            return notEqual;
        },
        notNil: function() {
            return notNil;
        },
        nth: function() {
            return nth;
        },
        objOf: function() {
            return objOf;
        },
        objectKeys: function() {
            return objectKeys;
        },
        okToOption: function() {
            return okToOption;
        },
        omit: function() {
            return omit;
        },
        optionToArray: function() {
            return optionToArray;
        },
        optionToBool: function() {
            return optionToBool;
        },
        over: function() {
            return over;
        },
        parseIntWithRadix: function() {
            return parseIntWithRadix;
        },
        pick: function() {
            return pick;
        },
        pickBy: function() {
            return pickBy;
        },
        pipe: function() {
            return pipe;
        },
        prop: function() {
            return prop;
        },
        reduce: function() {
            return reduce;
        },
        reduceObject: function() {
            return reduceObject;
        },
        replace: function() {
            return replace;
        },
        resultToBool: function() {
            return resultToBool;
        },
        safeParseInt: function() {
            return safeParseInt;
        },
        set: function() {
            return set;
        },
        split: function() {
            return split;
        },
        substitution: function() {
            return substitution;
        },
        tail: function() {
            return tail;
        },
        tap: function() {
            return tap;
        },
        test: function() {
            return test;
        },
        thrush: function() {
            return thrush;
        },
        traverseObjectResults: function() {
            return traverseObjectResults;
        },
        traverseOptions: function() {
            return traverseOptions;
        },
        traverseResults: function() {
            return traverseResults;
        },
        union: function() {
            return union;
        },
        unionTo: function() {
            return unionTo;
        },
        unionWith: function() {
            return unionWith;
        },
        values: function() {
            return values;
        },
        view: function() {
            return view;
        },
        when: function() {
            return when;
        },
        zip: function() {
            return zip;
        },
        zipCat: function() {
            return zipCat;
        },
        zipWith: function() {
            return zipWith;
        }
    });
    const _Const = __webpack_require__(56574);
    const _Identity = __webpack_require__(64552);
    const _option = __webpack_require__(51522);
    const _result = __webpack_require__(16387);
    const objectKeys = Object.keys;
    let emptyArray = [];
    let emptyObject = {};
    if (false) {}
    const identity = (x)=>x;
    const constant = (x)=>(_)=>x;
    const compose = (f)=>(g)=>(x)=>f(g(x));
    const blackbird = (f)=>(g)=>(x)=>(y)=>f(g(x)(y));
    const flip = (f)=>(x)=>(y)=>f(y)(x);
    const thrush = (x)=>(f)=>f(x);
    const substitution = (f)=>(g)=>(x)=>f(x)(g(x));
    const constantFalse = constant(false);
    const constantTrue = constant(true);
    const not = (x)=>!x;
    const complement = compose(not);
    const anyPass = (preds)=>(value)=>preds.some(thrush(value));
    const allPass = (preds)=>(value)=>preds.every(thrush(value));
    const optionToBool = (0, _option.maybe)(false)(constantTrue);
    const resultToBool = (0, _result.either)(constantFalse)(constantTrue);
    const equals = (x)=>(y)=>x === y;
    const notEqual = (x)=>(y)=>x !== y;
    const isNil = (value)=>value == null;
    const notNil = complement(isNil);
    const either = (predicateA, predicateB)=>(...args)=>predicateA(...args) || predicateB(...args);
    const both = (predicateA, predicateB)=>(...args)=>predicateA(...args) && predicateB(...args);
    const when = (predicate)=>(whenTrueFn)=>(value)=>predicate(value) ? whenTrueFn(value) : value;
    const has = (key)=>(object)=>Object.hasOwn(object, key);
    const prop = (key)=>(object)=>object[key];
    const assocReducer = (acc, key)=>{
        acc.result[key] = acc.source[key];
        return acc;
    };
    const assoc = (key)=>{
        const hasKey = has(key);
        return (value)=>(object)=>{
                if (hasKey(object) && object[key] === value) {
                    return object;
                }
                const result = objectKeys(object).reduce(assocReducer, {
                    source: object,
                    result: {}
                }).result;
                result[key] = value;
                return result;
            };
    };
    const dissocReducer = (acc, key)=>{
        if (acc.exclude !== key) {
            acc.result[key] = acc.source[key];
        }
        return acc;
    };
    const dissoc = (key)=>{
        const hasKey = has(key);
        return (object)=>hasKey(object) ? objectKeys(object).reduce(dissocReducer, {
                source: object,
                result: {},
                exclude: key
            }).result : object;
    };
    const adjust = (f)=>(key)=>{
            const hasKey = has(key);
            return (obj)=>hasKey(obj) ? assoc(key)(f(obj[key]))(obj) : obj;
        };
    const unionWith = (combine)=>(first)=>first === emptyObject ? identity : (second)=>{
                if (second === emptyObject) return first;
                let changedFromFirst = false;
                let changedFromSecond = false;
                const result = {};
                for(const key in second){
                    const secondVal = second[key];
                    if (key in first) {
                        const firstVal = first[key];
                        const finalVal = combine(firstVal)(secondVal);
                        if (finalVal !== secondVal) {
                            changedFromSecond = true;
                        }
                        if (finalVal !== firstVal) {
                            changedFromFirst = true;
                        }
                        result[key] = finalVal;
                    } else {
                        changedFromFirst = true;
                        result[key] = secondVal;
                    }
                }
                for(const key in first){
                    if (key in result) continue;
                    changedFromSecond = true;
                    result[key] = first[key];
                }
                if (!changedFromFirst) return first;
                if (!changedFromSecond) return second;
                return result;
            };
    const union = unionWith(constant);
    const unionTo = flip(union);
    const omitReducer = (acc, key)=>{
        if (acc.exclude.includes(key)) {
            acc.changed = true;
        } else {
            // @ts-expect-error - TS2322 - Type 'a | undefined' is not assignable to type 'a'.
            acc.result[key] = acc.source[key];
        }
        return acc;
    };
    const omit = (keys)=>{
        const len = keys.length;
        if (len === 0) {
            return identity;
        }
        if (len === 1) {
            // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            return dissoc(keys[0]);
        }
        return (object)=>{
            const { result, changed } = objectKeys(object).reduce(omitReducer, {
                source: object,
                exclude: keys,
                changed: false,
                result: {}
            });
            return changed ? result : object;
        };
    };
    const pickReducer = (acc, key)=>{
        if (Object.hasOwn(acc.source, key)) {
            acc.result[key] = acc.source[key];
        }
        return acc;
    };
    const pick = (keys)=>(source)=>keys.reduce(pickReducer, {
                source,
                result: {}
            }).result;
    const pickByReducer = (acc, key)=>{
        const value = acc.source[key];
        // @ts-expect-error - TS2345 - Argument of type 'undefined' is not assignable to parameter of type 'never'.
        if (acc.predicate(value)) {
            acc.result[key] = value;
        } else {
            acc.changed = true;
        }
        return acc;
    };
    const pickBy = (predicate)=>(object)=>{
            const { result, changed } = objectKeys(object).reduce(pickByReducer, {
                source: object,
                predicate,
                changed: false,
                result: {}
            });
            return changed ? result : object;
        };
    const lookup = (key)=>{
        const hasKey = has(key);
        return (object)=>hasKey(object) ? (0, _option.Some)(object[key]) : _option.None;
    };
    const lookupWithDefault = (defaultValue)=>(key)=>{
            const hasKey = has(key);
            return (object)=>hasKey(object) ? object[key] : defaultValue;
        };
    const find = (pred)=>// @ts-expect-error - TS2322 - Type '(array: a[]) => Option<a> | Option<a | undefined>' is not assignable to type '(arg1: a[]) => Option<a>'.
        (array)=>{
            const index = array.findIndex(pred);
            return index === -1 ? _option.None : (0, _option.Some)(array[index]);
        };
    const pipe = (fns)=>(initialValue)=>fns.reduce((value, fn)=>fn(value), initialValue);
    const zipWith = (f)=>(xs)=>(ys)=>{
                const rv = [];
                let idx = 0;
                const len = Math.min(xs.length, ys.length);
                while(idx < len){
                    // @ts-expect-error - TS2345 - Argument of type 'a | undefined' is not assignable to parameter of type 'a'. | TS2345 - Argument of type 'b | undefined' is not assignable to parameter of type 'b'.
                    rv[idx] = f(xs[idx])(ys[idx]);
                    idx += 1;
                }
                return rv;
            };
    const zip = zipWith((x)=>(y)=>[
                x,
                y
            ]);
    function getMinLength(arrays) {
        if (arrays.length === 0) return 0;
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        if (arrays.length === 1) return arrays[0].length;
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        let min = arrays[0].length;
        for(let i = 1, len = arrays.length; i < len; i++){
            // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
            const arr_len = arrays[i].length;
            if (arr_len < min) min = arr_len;
        }
        return min;
    }
    function zipCat(fn) {
        return function zipCat_inner(arrays) {
            // Find the length of the shortest array to know the max number of zip items.
            const zipLength = getMinLength(arrays);
            // Create a single array reference to store our items into.
            const rv = [];
            // For each array
            for(let i = 0, len = arrays.length; i < len; i++){
                const array = arrays[i];
                // For each index in the current array
                // @ts-expect-error - TS18048 - 'array' is possibly 'undefined'.
                for(let j = 0, array_len = array.length; j < array_len; j++){
                    // @ts-expect-error - TS18048 - 'array' is possibly 'undefined'.
                    const item = array[j];
                    // For each index that falls in the zip range
                    if (j < zipLength) {
                        const existing = rv[j];
                        // Check if we have a previously calculated value for this zip index.
                        // If we do then we call the zip fn on the existing result and the current item,
                        // then save it back at the zip index.
                        if (typeof existing !== 'undefined') {
                            // @ts-expect-error - TS2345 - Argument of type 'T | undefined' is not assignable to parameter of type 'T'.
                            rv[j] = fn(existing)(item);
                        } else {
                            // @ts-expect-error - TS2322 - Type 'T | undefined' is not assignable to type 'T'.
                            rv[j] = item;
                        }
                    } else {
                        // @ts-expect-error - TS2345 - Argument of type 'T | undefined' is not assignable to parameter of type 'T'.
                        rv.push(item);
                    }
                }
            }
            return rv;
        };
    }
    const map = (f)=>(xs)=>xs.map(f);
    const mapArray = (f)=>(xs)=>{
            let changed = false;
            const ys = xs.reduce((res, x)=>{
                const newX = f(x);
                // @ts-expect-error - TS2367 - This comparison appears to be unintentional because the types 'b' and 'a' have no overlap.
                if (newX !== x) {
                    changed = true;
                }
                res.push(newX);
                return res;
            }, []);
            // @ts-expect-error - TS2352 - Conversion of type 'a[]' to type 'b[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
            return changed ? ys : xs;
        };
    const filter = (f)=>(xs)=>xs.filter(f);
    const reduce = (reducer)=>(init)=>(xs)=>xs.reduce(reducer, init);
    const reduceObject = (reducer)=>(init)=>(obj)=>// @ts-expect-error - TS2345 - Argument of type 'a | undefined' is not assignable to parameter of type 'a'.
                objectKeys(obj).reduce((result, key)=>reducer(result)(obj[key]), init);
    const objOf = (key)=>(value)=>({
                [key]: value
            });
    const concat = (ys)=>ys.length ? (xs)=>xs.length ? xs.concat(ys) : ys : identity;
    const concatTo = flip(concat);
    const append = (value)=>concat([
            value
        ]);
    const constantIdentity = constant(identity);
    const add = (x)=>(y)=>x + y;
    const inc = (x)=>x + 1;
    const max = (x)=>(y)=>x > y ? x : y;
    const parseIntWithRadix = (radix)=>(num)=>{
            const parsed = parseInt(num, radix);
            return isNaN(parsed) ? _option.None : (0, _option.Some)(parsed);
        };
    const safeParseInt = parseIntWithRadix(10);
    const head = (xs)=>// @ts-expect-error - TS2322 - Type 'Option<any> | Option<a | undefined>' is not assignable to type 'Option<a>'.
        xs.length ? (0, _option.Some)(xs[0]) : _option.None;
    const last = (xs)=>// @ts-expect-error - TS2322 - Type 'Option<any> | Option<a | undefined>' is not assignable to type 'Option<a>'.
        xs.length ? (0, _option.Some)(xs[xs.length - 1]) : _option.None;
    const tail = (xs)=>xs.slice(1);
    const length = (xs)=>xs.length;
    const flatMap = (f)=>reduce((result, item)=>{
            const ys = f(item);
            if (!ys.length) {
                return result;
            }
            const nextResult = result.length ? result : [];
            nextResult.push.apply(nextResult, ys); // eslint-disable-line prefer-spread
            return nextResult;
        })(emptyArray);
    const flat = flatMap(identity);
    const test = (regex)=>(string)=>{
            regex.lastIndex = 0;
            const result = regex.test(string);
            regex.lastIndex = 0;
            return result;
        };
    const match = (regex)=>(string)=>{
            const result = string.match(regex);
            return result ? (0, _option.Some)(result[0]) : _option.None;
        };
    const replace = (pattern)=>(replacement)=>(string)=>string.replace(pattern, replacement);
    const split = (pattern)=>(string)=>string.split(pattern);
    const lens = (getter)=>(setter)=>(toFunctor)=>(target)=>toFunctor(getter(target)).map((focus)=>setter(focus)(target));
    const lensProp = (key)=>lens(prop(key))(assoc(key));
    const view = // @ts-expect-error Argument of type '<A>(arg1: (arg2: A) => unknown) => (arg3: A) => unknown' is not assignable to parameter of type '(arg1: unknown) => (arg3: unknown) => unknown'.  Types of parameters 'arg1' and 'arg1' are incompatible.  Type 'unknown' is not assignable to type '(arg2: unknown) => unknown'.
    compose(compose(_Const.getConst))(thrush(_Const.Const));
    const over = (l)=>(f)=>{
            const toFunctor = compose(_Identity.Identity)(f);
            // @ts-expect-error - TS2322 - Type '(arg1: s) => unknown' is not assignable to type '(arg1: s) => t'. | TS2345 - Argument of type '<a>(object: IdentityType<a>) => a' is not assignable to parameter of type '(arg1: unknown) => unknown'. | TS2345 - Argument of type '(arg1: a) => IdentityType<unknown>' is not assignable to parameter of type '(arg1: a) => Functor<b>'.
            return compose(_Identity.runIdentity)(l(toFunctor));
        };
    const set = (l)=>compose(over(l))(constant);
    const constantNone = constant(_option.None);
    const noneToErr = (error)=>(0, _option.maybe)((0, _result.Err)(error))(_result.Ok);
    const okToOption = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (0, _result.either)(constantNone)(_option.Some);
    const errToOption = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (0, _result.either)(_option.Some)(constantNone);
    const tap = (unsafeFn)=>(value)=>{
            unsafeFn(value);
            return value;
        };
    const extractBool = (0, _option.maybe)(false)(identity);
    const extractArray = (0, _option.maybe)(emptyArray)(identity);
    const extractFunctionFromOption = (0, _option.maybe)(identity)(identity);
    const extractFunctionFromResult = (0, _result.either)(constantIdentity)(identity);
    const optionToArray = (0, _option.maybe)(emptyArray)(Array.of);
    const optionOfEmptyArray = (0, _option.Some)(emptyArray);
    const traverseOptions = (f)=>(xs)=>xs.reduce((option, x)=>f(x).map(append).ap(option), optionOfEmptyArray);
    const resultOfEmptyArray = (0, _result.Ok)(emptyArray);
    const traverseResults = (f)=>(xs)=>xs.reduce((result, x)=>f(x).map(append).ap(result), resultOfEmptyArray);
    const resultOfEmptyObject = (0, _result.Ok)(emptyObject);
    const traverseObjectResults = (f)=>(obj)=>objectKeys(obj).reduce((result, key)=>f(obj[key]).map(assoc(key)).ap(result), resultOfEmptyObject);
    const mapValues = (f)=>(obj)=>{
            let changed = false;
            const newObj = objectKeys(obj).reduce((result, key)=>{
                const oldVal = obj[key];
                // @ts-expect-error - TS2345 - Argument of type 'a | undefined' is not assignable to parameter of type 'a'.
                const newVal = f(oldVal);
                if (oldVal !== newVal) {
                    changed = true;
                }
                result[key] = newVal;
                return result;
            }, {});
            return changed ? newObj : obj;
        };
    const values = (obj)=>// @ts-expect-error - TS2322 - Type '(T | undefined)[]' is not assignable to type 'T[]'.
        Object.keys(obj).map((k)=>obj[k]);
    const entries = (obj)=>{
        const keys = Object.keys(obj);
        // @ts-expect-error - TS2322 - Type '[string, any][]' is not assignable to type '[V, T][]'. | TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<V, T>>'.
        return keys.map((key)=>[
                key,
                obj[key]
            ]);
    };
    const getDeepestValues = (obj)=>{
        // @ts-expect-error - TS2322 - Type '(T | undefined)[]' is not assignable to type 'T[]'.
        return Object.keys(obj).flatMap((k)=>obj[k] && typeof obj[k] === 'object' ? getDeepestValues(obj[k]) : [
                obj[k]
            ]);
    };
    const nth = (index)=>(a)=>index < 0 || index >= a.length ? _option.None : (0, _option.Some)(a[index]);
    
    //# sourceMappingURL=data:application/json;base64,
    
    }),
    23056: (function (__unused_webpack_module, exports, __webpack_require__) {
    "use strict";
    /* eslint-disable @typescript-eslint/ban-types */ 
    Object.defineProperty(exports, "__esModule", ({
        value: true
    }));
    function _export(target, all) {
        for(var name in all)Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name]
        });
    }
    _export(exports, {
        cacheMemo: function() {
            return cacheMemo;
        },
        isEqual: function() {
            return isEqual;
        },
        memoize: function() {
            return memoize;
        },
        once: function() {
            return once;
        },
        singleMemo: function() {
            return singleMemo;
        },
        weakMemo: function() {
            return weakMemo;
        }
    });
    const _reselect = __webpack_require__(14445);
    const _lrucache = __webpack_require__(77825);
    const _isBoolean = /*#__PURE__*/ _interop_require_default(__webpack_require__(81247));
    const _isFunction = /*#__PURE__*/ _interop_require_default(__webpack_require__(56644));
    const _isObject = /*#__PURE__*/ _interop_require_default(__webpack_require__(28532));
    function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    const True = {
        '@webflow/Boolean': true
    };
    const False = {
        '@webflow/Boolean': false
    };
    /*
     * Inlined Immutable v3.8.1 `is` to reduce webflow.js bundle size
     * Source: https://github.com/immutable-js/immutable-js/blob/v3.8.1/src/is.js
     */ const is = (valueA, valueB)=>{
        // eslint-disable-next-line no-self-compare
        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
        }
        if (!valueA || !valueB) {
            return false;
        }
        if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {
            valueA = valueA.valueOf();
            valueB = valueB.valueOf();
            // eslint-disable-next-line no-self-compare
            if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
                return true;
            }
            if (!valueA || !valueB) {
                return false;
            }
        }
        if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {
            return true;
        }
        return false;
    };
    const isEqual = (a, b)=>{
        if (is(a, b)) {
            return true;
        }
        if (typeof a !== 'object' || a === null || typeof b !== 'object' || b === null) {
            return false;
        }
        for(const k in a){
            if (!is(a[k], b[k])) {
                return false;
            }
        }
        return Object.keys(a).length === Object.keys(b).length;
    };
    function memoize(fn) {
        // We need to cast `fn` to some ungodly type because `lruMemoize` expects
        // (...args: any[]) => any, but we want to be more strict about the type of `fn`.
        // In other words, if we accept the same type than `lruMemoize` does, we
        // stop requesting fn to be properly typed (as it infers that both arguments
        // and return type are already `any`). For further discussion about this:
        // https://github.com/webflow/webflow/pull/85516/files#r2128406623
        return (0, _reselect.lruMemoize)(fn, isEqual);
    }
    function weakMemo(fn) {
        if (false) {}
        const map = new WeakMap();
        // @ts-expect-error - TS2322 - Type '{ (arg: any): any; displayName: string; }' is not assignable to type 'F'. | TS7006 - Parameter 'arg' implicitly has an 'any' type.
        const memFn = (arg)=>{
            if (!(0, _isObject.default)(arg) && !(0, _isBoolean.default)(arg)) {
                const errorMessage = `Expected an object or boolean as an argument to "${// @ts-expect-error - TS2339 - Property 'displayName' does not exist on type 'F'.
                fn.displayName || fn.name}()", but received ${String(arg)}.`;
                const fnString = fn.toString();
                if (false) {}
                throw new WeakMemoError({
                    message: errorMessage,
                    memFn
                });
            }
            const key = typeof arg === 'boolean' ? arg && True || False : arg;
            // Flow doesn't seem to like True/False since they don't always
            // fit the expected type of `arg`
            if (!map.has(key)) {
                map.set(key, fn(arg));
            }
            const result = map.get(key);
            return result;
        };
        if (false) {}
        return memFn;
    }
    const cacheMemo = (depth)=>{
        /**
       * Returns a memoized version of a "trivially hashable" function passed as parameter, with a fixed cache size.
       *
       * A "trivially hashable" function takes a single string as an argument and therefore does not need to be hashed.
       *
       * This is a pretty significant optimization if your function needs to be called very frequently.
       *
       * @param  {Function} fn          The function to memoize.
       * @return {Function}             The memoized function.
       */ const memoizeFn = (fn)=>{
            const cache = new _lrucache.LRUCache({
                max: depth || 1
            });
            // @ts-expect-error - TS2322 - Type '(arg: F) => unknown' is not assignable to type 'F'.
            return function(arg) {
                if (!cache.has(arg)) {
                    cache.set(arg, fn(arg));
                }
                return cache.get(arg);
            };
        };
        return memoizeFn;
    };
    /**
     * A simple memoization function for usage with primitives or single argument
     * arguments of identity equality.
     */ const defaultLastArg = Symbol();
    const singleMemo = (fn)=>{
        let lastArg = defaultLastArg;
        // @ts-expect-error - TS7034 - Variable 'lastResult' implicitly has type 'any' in some locations where its type cannot be determined.
        let lastResult;
        // @ts-expect-error - TS2322 - Type '(arg: F) => any' is not assignable to type 'F'.
        return (arg)=>{
            // @ts-expect-error - TS2367 - This condition will always return 'true' since the types 'F' and 'symbol' have no overlap.
            if (arg !== lastArg) {
                lastResult = fn(arg);
                // @ts-expect-error - TS2322 - Type 'F' is not assignable to type 'symbol'.
                lastArg = arg;
            }
            // @ts-expect-error - TS7005 - Variable 'lastResult' implicitly has an 'any' type.
            return lastResult;
        };
    };
    const once = (fn)=>{
        let result;
        return ()=>{
            if (fn) {
                result = fn();
                // @ts-expect-error - TS2322 - Type 'undefined' is not assignable to type '(arg1: undefined) => a'.
                fn = undefined;
            }
            return result;
        };
    };
    class WeakMemoError extends TypeError {
        constructor(opts){
            super();
            if (TypeError.captureStackTrace) {
                TypeError.captureStackTrace(this, opts.memFn);
            }
            this.name = 'WeakMemoError';
            this.message = opts.message;
        }
    }
    function syntaxHighlight(fnSource) {
        const keywords = /\b(function|return|const|let|if|else|throw|for|while|switch|case|break|continue|default|new|delete|typeof|instanceof|void|this|class)\b/g;
        const literals = /\b(true|false|null|undefined)\b/g;
        const strings = /(['"`][^'"`]*['"`])/g; // Matches single, double, or backticks (template literals)
        const numbers = /\b(\d+(\.\d+)?(e[+-]?\d+)?|NaN|Infinity)\b/gi; // Matches integers, floats, and scientific notation
        const operators = /[=+\-*\/%<>!&|^~?]/g;
        const comments = /(\/\/[^\n]*|\/\*[\s\S]*?\*\/)/g;
        const parentheses = /[\(\)\[\]\{\}]/g; // Matches (), [], {}
        // Apply syntax highlighting via ANSI escape codes
        return fnSource.replace(parentheses, (match)=>`\x1b[37m${match}\x1b[0m`) // white for parentheses and brackets
        .replace(comments, (match)=>`\x1b[90m${match}\x1b[0m`) // gray for comments
        .replace(strings, (match)=>`\x1b[32m${match}\x1b[0m`) // green for strings and template literals
        .replace(literals, (match)=>`\x1b[33m${match}\x1b[0m`) // yellow for literals (true, false, null, undefined)
        .replace(keywords, (match)=>`\x1b[35m${match}\x1b[0m`) // magenta for keywords
        .replace(numbers, (match)=>`\x1b[36m${match}\x1b[0m`) // cyan for numbers
        .replace(operators, (match)=>`\x1b[31m${match}\x1b[0m`); // red for operators
    }
    
    //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXMgKi9cbmltcG9ydCB7bHJ1TWVtb2l6ZX0gZnJvbSAncmVzZWxlY3QnO1xuaW1wb3J0IHtMUlVDYWNoZX0gZnJvbSAnbHJ1LWNhY2hlJztcblxuLy8gaW1wb3J0IGxvZGFzaCBmdW5jdGlvbnMgaW5kaXZpZHVhbGx5IHRvIG1pbmltaXplIGJ1bmRsZSBzaXplXG5pbXBvcnQgaXNCb29sZWFuIGZyb20gJ2xvZGFzaC9pc0Jvb2xlYW4nO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnbG9kYXNoL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJ2xvZGFzaC9pc09iamVjdCc7XG5cbmNvbnN0IFRydWUgPSB7J0B3ZWJmbG93L0Jvb2xlYW4nOiB0cnVlfSBhcyBjb25zdDtcbmNvbnN0IEZhbHNlID0geydAd2ViZmxvdy9Cb29sZWFuJzogZmFsc2V9IGFzIGNvbnN0O1xuXG4vKlxuICogSW5saW5lZCBJbW11dGFibGUgdjMuOC4xIGBpc2AgdG8gcmVkdWNlIHdlYmZsb3cuanMgYnVuZGxlIHNpemVcbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2ltbXV0YWJsZS1qcy9pbW11dGFibGUtanMvYmxvYi92My44LjEvc3JjL2lzLmpzXG4gKi9cbmNvbnN0IGlzID0gKHZhbHVlQTogYW55LCB2YWx1ZUI6IGFueSk6IGJvb2xlYW4gPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCF2YWx1ZUEgfHwgIXZhbHVlQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoXG4gICAgdHlwZW9mIHZhbHVlQS52YWx1ZU9mID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbHVlQi52YWx1ZU9mID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHZhbHVlQSA9IHZhbHVlQS52YWx1ZU9mKCk7XG4gICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWVBLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWx1ZUIuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmXG4gICAgdmFsdWVBLmVxdWFscyh2YWx1ZUIpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0VxdWFsID0gKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiA9PiB7XG4gIGlmIChpcyhhLCBiKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBhICE9PSAnb2JqZWN0JyB8fFxuICAgIGEgPT09IG51bGwgfHxcbiAgICB0eXBlb2YgYiAhPT0gJ29iamVjdCcgfHxcbiAgICBiID09PSBudWxsXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3QgayBpbiBhKSB7XG4gICAgaWYgKCFpcyhhW2tdLCBiW2tdKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhhKS5sZW5ndGggPT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPEYgZXh0ZW5kcyBGdW5jdGlvbj4oZm46IEYpOiBGIHtcbiAgLy8gV2UgbmVlZCB0byBjYXN0IGBmbmAgdG8gc29tZSB1bmdvZGx5IHR5cGUgYmVjYXVzZSBgbHJ1TWVtb2l6ZWAgZXhwZWN0c1xuICAvLyAoLi4uYXJnczogYW55W10pID0+IGFueSwgYnV0IHdlIHdhbnQgdG8gYmUgbW9yZSBzdHJpY3QgYWJvdXQgdGhlIHR5cGUgb2YgYGZuYC5cbiAgLy8gSW4gb3RoZXIgd29yZHMsIGlmIHdlIGFjY2VwdCB0aGUgc2FtZSB0eXBlIHRoYW4gYGxydU1lbW9pemVgIGRvZXMsIHdlXG4gIC8vIHN0b3AgcmVxdWVzdGluZyBmbiB0byBiZSBwcm9wZXJseSB0eXBlZCAoYXMgaXQgaW5mZXJzIHRoYXQgYm90aCBhcmd1bWVudHNcbiAgLy8gYW5kIHJldHVybiB0eXBlIGFyZSBhbHJlYWR5IGBhbnlgKS4gRm9yIGZ1cnRoZXIgZGlzY3Vzc2lvbiBhYm91dCB0aGlzOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2ViZmxvdy93ZWJmbG93L3B1bGwvODU1MTYvZmlsZXMjcjIxMjg0MDY2MjNcbiAgcmV0dXJuIGxydU1lbW9pemUoZm4gYXMgRiAmICgoLi4uYXJnczogYW55W10pID0+IGFueSksIGlzRXF1YWwpO1xufVxuXG4vKlxuICogV0FSTklORzogYHdlYWtNZW1vYCBkb2VzIG5vdCB0aHJvdyBlcnJvcnMgb3IgaGFuZGxlIGludmFsaWQga2V5cyBncmFjZWZ1bGx5XG4gKiBvbiBwdXJwb3NlLiBUaGlzIGlzIGEgY2FzZSB3aGVyZSB3ZSB3YW50IHRoZSBhcHAgdG8gY3Jhc2ggaWYgYW4gaW52YWxpZCBrZXlcbiAqIGlzIHVzZWQuIFRoZSBwdXJwb3NlIG9mIGFsbG93aW5nIHRoZSBhcHAgdG8gY3Jhc2ggaW4gdGhpcyBzaXR1YXRpb24gaXMgdG9cbiAqIGNvbGxlY3QgZGF0YSBzbyBhIHJvb3QgY2F1c2UgbWlnaHQgYmUgZGlzY292ZXJlZCBhbmQgYWRkcmVzc2VkLlxuICpcbiAqIFdBUk5JTkc6IGB3ZWFrTWVtb2AgdXNlcyBvbmx5IHRoZSBmaXJzdCBmbidzIGFyZ3VtZW50IGFzIGEga2V5LiAybmQgYW5kIGZ1cnRoZXIgYXJndW1lbnRzIGFyZSBpZ25vcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2Vha01lbW88RiBleHRlbmRzIEZ1bmN0aW9uPihmbjogRik6IEYge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgYSBmdW5jdGlvbiBhcyBhcmd1bWVudCB0byB3ZWFrTWVtbyBidXQgZ290ICR7Zm59LmBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzIyIC0gVHlwZSAneyAoYXJnOiBhbnkpOiBhbnk7IGRpc3BsYXlOYW1lOiBzdHJpbmc7IH0nIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ0YnLiB8IFRTNzAwNiAtIFBhcmFtZXRlciAnYXJnJyBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlLlxuICBjb25zdCBtZW1GbjogRiA9IChhcmcpID0+IHtcbiAgICBpZiAoIWlzT2JqZWN0KGFyZykgJiYgIWlzQm9vbGVhbihhcmcpKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgRXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGJvb2xlYW4gYXMgYW4gYXJndW1lbnQgdG8gXCIke1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ2Rpc3BsYXlOYW1lJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdGJy5cbiAgICAgICAgZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZVxuICAgICAgfSgpXCIsIGJ1dCByZWNlaXZlZCAke1N0cmluZyhhcmcpfS5gO1xuXG4gICAgICBjb25zdCBmblN0cmluZyA9IGZuLnRvU3RyaW5nKCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgICAgYFxceDFiWzFtXFx4MWJbMzJtRnVuY3Rpb24gU291cmNlOlxceDFiWzBtXFxuXFxuYCArXG4gICAgICAgICAgICBgXFx4MWJbMzNtd2Vha01lbW9cXHgxYlswbSgke3N5bnRheEhpZ2hsaWdodChmblN0cmluZyl9KWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IFdlYWtNZW1vRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIG1lbUZuLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nID8gKGFyZyAmJiBUcnVlKSB8fCBGYWxzZSA6IGFyZztcblxuICAgIC8vIEZsb3cgZG9lc24ndCBzZWVtIHRvIGxpa2UgVHJ1ZS9GYWxzZSBzaW5jZSB0aGV5IGRvbid0IGFsd2F5c1xuICAgIC8vIGZpdCB0aGUgZXhwZWN0ZWQgdHlwZSBvZiBgYXJnYFxuICAgIGlmICghbWFwLmhhcyhrZXkpKSB7XG4gICAgICBtYXAuc2V0KGtleSwgZm4oYXJnKSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gbWFwLmdldChrZXkpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ2Rpc3BsYXlOYW1lJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdGJy5cbiAgICBtZW1Gbi5kaXNwbGF5TmFtZSA9XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ2Rpc3BsYXlOYW1lJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdGJy4gfCBUUzIzMzkgLSBQcm9wZXJ0eSAnbmFtZScgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAnRicuIHwgVFMyMzM5IC0gUHJvcGVydHkgJ3RvU3RyaW5nJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdGJy5cbiAgICAgIGB3ZWFrTWVtbyhcXG4gICR7Zm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSB8fCBmbi50b1N0cmluZygpfVxcbilgO1xuXG4gICAgbWVtRm4udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYHdlYWtNZW1vKFxcbiAgJHtmbi50b1N0cmluZygpfVxcbilgO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gbWVtRm47XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1lbW9pemUgZmFjdG9yeSB3aXRoIGEgY2FjaGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gZGVwdGguXG4gKiBPbmx5IGZ1bmN0aW9ucyB0aGF0IGFjY2VwdCBhIHNpbmdsZSBhcmd1bWVudCBhcmUgdmFsaWQuXG4gKlxuICog4pqg77iPSU1QT1JUQU5U4pqg77iPIE9iamVjdCBhbmQgRnVuY3Rpb24gYXJndW1lbnRzIGFyZSBjb21wYXJlZCAqYnkgcmVmZXJlbmNlKi5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGRlcHRoICAgICAgICAgVGhlIHNpemUgb2YgdGhlIGNhY2hlLlxuICogQHJldHVybiB7RnVuY3Rpb259ICAgICAgICAgICAgIFRoZSByZXN1bHRpbmcgbWVtb2l6ZSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGNhY2hlTWVtbyA9IChkZXB0aDogbnVtYmVyKSA9PiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbWVtb2l6ZWQgdmVyc2lvbiBvZiBhIFwidHJpdmlhbGx5IGhhc2hhYmxlXCIgZnVuY3Rpb24gcGFzc2VkIGFzIHBhcmFtZXRlciwgd2l0aCBhIGZpeGVkIGNhY2hlIHNpemUuXG4gICAqXG4gICAqIEEgXCJ0cml2aWFsbHkgaGFzaGFibGVcIiBmdW5jdGlvbiB0YWtlcyBhIHNpbmdsZSBzdHJpbmcgYXMgYW4gYXJndW1lbnQgYW5kIHRoZXJlZm9yZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGhhc2hlZC5cbiAgICpcbiAgICogVGhpcyBpcyBhIHByZXR0eSBzaWduaWZpY2FudCBvcHRpbWl6YXRpb24gaWYgeW91ciBmdW5jdGlvbiBuZWVkcyB0byBiZSBjYWxsZWQgdmVyeSBmcmVxdWVudGx5LlxuICAgKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIG1lbW9pemUuXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufSAgICAgICAgICAgICBUaGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAqL1xuICBjb25zdCBtZW1vaXplRm4gPSA8RiBleHRlbmRzIEZ1bmN0aW9uPihmbjogRik6IEYgPT4ge1xuICAgIGNvbnN0IGNhY2hlID0gbmV3IExSVUNhY2hlKHtcbiAgICAgIG1heDogZGVwdGggfHwgMSxcbiAgICB9KTtcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMjIgLSBUeXBlICcoYXJnOiBGKSA9PiB1bmtub3duJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdGJy5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZzogRikge1xuICAgICAgaWYgKCFjYWNoZS5oYXMoYXJnKSkge1xuICAgICAgICBjYWNoZS5zZXQoYXJnLCBmbihhcmcpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYWNoZS5nZXQoYXJnKTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBtZW1vaXplRm47XG59O1xuXG4vKipcbiAqIEEgc2ltcGxlIG1lbW9pemF0aW9uIGZ1bmN0aW9uIGZvciB1c2FnZSB3aXRoIHByaW1pdGl2ZXMgb3Igc2luZ2xlIGFyZ3VtZW50XG4gKiBhcmd1bWVudHMgb2YgaWRlbnRpdHkgZXF1YWxpdHkuXG4gKi9cbmNvbnN0IGRlZmF1bHRMYXN0QXJnID0gU3ltYm9sKCk7XG5leHBvcnQgY29uc3Qgc2luZ2xlTWVtbyA9IDxGIGV4dGVuZHMgRnVuY3Rpb24+KGZuOiBGKTogRiA9PiB7XG4gIGxldCBsYXN0QXJnID0gZGVmYXVsdExhc3RBcmc7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMzQgLSBWYXJpYWJsZSAnbGFzdFJlc3VsdCcgaW1wbGljaXRseSBoYXMgdHlwZSAnYW55JyBpbiBzb21lIGxvY2F0aW9ucyB3aGVyZSBpdHMgdHlwZSBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAgbGV0IGxhc3RSZXN1bHQ7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMjIgLSBUeXBlICcoYXJnOiBGKSA9PiBhbnknIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ0YnLlxuICByZXR1cm4gKGFyZzogRikgPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzNjcgLSBUaGlzIGNvbmRpdGlvbiB3aWxsIGFsd2F5cyByZXR1cm4gJ3RydWUnIHNpbmNlIHRoZSB0eXBlcyAnRicgYW5kICdzeW1ib2wnIGhhdmUgbm8gb3ZlcmxhcC5cbiAgICBpZiAoYXJnICE9PSBsYXN0QXJnKSB7XG4gICAgICBsYXN0UmVzdWx0ID0gZm4oYXJnKTtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMjIgLSBUeXBlICdGJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdzeW1ib2wnLlxuICAgICAgbGFzdEFyZyA9IGFyZztcbiAgICB9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzAwNSAtIFZhcmlhYmxlICdsYXN0UmVzdWx0JyBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlLlxuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufTtcblxuLyoqXG4gKiBBIG1lbW9pemF0aW9uIGZ1bmN0aW9uIHRoYXQgb25seSBjYWxscyB0aGUgcHJvdmlkZWQgbnVsbGFyeSBmdW5jdGlvblxuICogdGhlIGZpcnN0IHRpbWUuIFN1YnNlcXVlbnQgY2FsbHMgcmV0dXJuIHRoZSBmaXJzdCByZXN1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBvbmNlID0gPGE+KGZuOiAoYXJnMTogdm9pZCkgPT4gYSk6ICgoYXJnMTogdm9pZCkgPT4gYSkgPT4ge1xuICBsZXQgcmVzdWx0OiBhO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChmbikge1xuICAgICAgcmVzdWx0ID0gZm4oKTtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMjIgLSBUeXBlICd1bmRlZmluZWQnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJyhhcmcxOiB1bmRlZmluZWQpID0+IGEnLlxuICAgICAgZm4gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5jbGFzcyBXZWFrTWVtb0Vycm9yIGV4dGVuZHMgVHlwZUVycm9yIHtcbiAgY29uc3RydWN0b3Iob3B0czoge21lc3NhZ2U6IHN0cmluZzsgbWVtRm46IEZ1bmN0aW9ufSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAoVHlwZUVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBUeXBlRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgb3B0cy5tZW1Gbik7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gJ1dlYWtNZW1vRXJyb3InO1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdHMubWVzc2FnZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzeW50YXhIaWdobGlnaHQoZm5Tb3VyY2U6IHN0cmluZykge1xuICBjb25zdCBrZXl3b3JkcyA9XG4gICAgL1xcYihmdW5jdGlvbnxyZXR1cm58Y29uc3R8bGV0fGlmfGVsc2V8dGhyb3d8Zm9yfHdoaWxlfHN3aXRjaHxjYXNlfGJyZWFrfGNvbnRpbnVlfGRlZmF1bHR8bmV3fGRlbGV0ZXx0eXBlb2Z8aW5zdGFuY2VvZnx2b2lkfHRoaXN8Y2xhc3MpXFxiL2c7XG4gIGNvbnN0IGxpdGVyYWxzID0gL1xcYih0cnVlfGZhbHNlfG51bGx8dW5kZWZpbmVkKVxcYi9nO1xuICBjb25zdCBzdHJpbmdzID0gLyhbJ1wiYF1bXidcImBdKlsnXCJgXSkvZzsgLy8gTWF0Y2hlcyBzaW5nbGUsIGRvdWJsZSwgb3IgYmFja3RpY2tzICh0ZW1wbGF0ZSBsaXRlcmFscylcbiAgY29uc3QgbnVtYmVycyA9IC9cXGIoXFxkKyhcXC5cXGQrKT8oZVsrLV0/XFxkKyk/fE5hTnxJbmZpbml0eSlcXGIvZ2k7IC8vIE1hdGNoZXMgaW50ZWdlcnMsIGZsb2F0cywgYW5kIHNjaWVudGlmaWMgbm90YXRpb25cbiAgY29uc3Qgb3BlcmF0b3JzID0gL1s9K1xcLSpcXC8lPD4hJnxefj9dL2c7XG4gIGNvbnN0IGNvbW1lbnRzID0gLyhcXC9cXC9bXlxcbl0qfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pL2c7XG4gIGNvbnN0IHBhcmVudGhlc2VzID0gL1tcXChcXClcXFtcXF1cXHtcXH1dL2c7IC8vIE1hdGNoZXMgKCksIFtdLCB7fVxuXG4gIC8vIEFwcGx5IHN5bnRheCBoaWdobGlnaHRpbmcgdmlhIEFOU0kgZXNjYXBlIGNvZGVzXG4gIHJldHVybiBmblNvdXJjZVxuICAgIC5yZXBsYWNlKHBhcmVudGhlc2VzLCAobWF0Y2gpID0+IGBcXHgxYlszN20ke21hdGNofVxceDFiWzBtYCkgLy8gd2hpdGUgZm9yIHBhcmVudGhlc2VzIGFuZCBicmFja2V0c1xuICAgIC5yZXBsYWNlKGNvbW1lbnRzLCAobWF0Y2gpID0+IGBcXHgxYls5MG0ke21hdGNofVxceDFiWzBtYCkgLy8gZ3JheSBmb3IgY29tbWVudHNcbiAgICAucmVwbGFjZShzdHJpbmdzLCAobWF0Y2gpID0+IGBcXHgxYlszMm0ke21hdGNofVxceDFiWzBtYCkgLy8gZ3JlZW4gZm9yIHN0cmluZ3MgYW5kIHRlbXBsYXRlIGxpdGVyYWxzXG4gICAgLnJlcGxhY2UobGl0ZXJhbHMsIChtYXRjaCkgPT4gYFxceDFiWzMzbSR7bWF0Y2h9XFx4MWJbMG1gKSAvLyB5ZWxsb3cgZm9yIGxpdGVyYWxzICh0cnVlLCBmYWxzZSwgbnVsbCwgdW5kZWZpbmVkKVxuICAgIC5yZXBsYWNlKGtleXdvcmRzLCAobWF0Y2gpID0+IGBcXHgxYlszNW0ke21hdGNofVxceDFiWzBtYCkgLy8gbWFnZW50YSBmb3Iga2V5d29yZHNcbiAgICAucmVwbGFjZShudW1iZXJzLCAobWF0Y2gpID0+IGBcXHgxYlszNm0ke21hdGNofVxceDFiWzBtYCkgLy8gY3lhbiBmb3IgbnVtYmVyc1xuICAgIC5yZXBsYWNlKG9wZXJhdG9ycywgKG1hdGNoKSA9PiBgXFx4MWJbMzFtJHttYXRjaH1cXHgxYlswbWApOyAvLyByZWQgZm9yIG9wZXJhdG9yc1xufVxuIl0sIm5hbWVzIjpbImNhY2hlTWVtbyIsImlzRXF1YWwiLCJtZW1vaXplIiwib25jZSIsInNpbmdsZU1lbW8iLCJ3ZWFrTWVtbyIsIlRydWUiLCJGYWxzZSIsImlzIiwidmFsdWVBIiwidmFsdWVCIiwidmFsdWVPZiIsImVxdWFscyIsImEiLCJiIiwiayIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJmbiIsImxydU1lbW9pemUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJpc0Z1bmN0aW9uIiwiY29uc29sZSIsImVycm9yIiwibWFwIiwiV2Vha01hcCIsIm1lbUZuIiwiYXJnIiwiaXNPYmplY3QiLCJpc0Jvb2xlYW4iLCJlcnJvck1lc3NhZ2UiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJTdHJpbmciLCJmblN0cmluZyIsInRvU3RyaW5nIiwiaW5mbyIsInN5bnRheEhpZ2hsaWdodCIsIldlYWtNZW1vRXJyb3IiLCJtZXNzYWdlIiwia2V5IiwiaGFzIiwic2V0IiwicmVzdWx0IiwiZ2V0IiwiZGVwdGgiLCJtZW1vaXplRm4iLCJjYWNoZSIsIkxSVUNhY2hlIiwibWF4IiwiZGVmYXVsdExhc3RBcmciLCJTeW1ib2wiLCJsYXN0QXJnIiwibGFzdFJlc3VsdCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImNvbnN0cnVjdG9yIiwib3B0cyIsImNhcHR1cmVTdGFja1RyYWNlIiwiZm5Tb3VyY2UiLCJrZXl3b3JkcyIsImxpdGVyYWxzIiwic3RyaW5ncyIsIm51bWJlcnMiLCJvcGVyYXRvcnMiLCJjb21tZW50cyIsInBhcmVudGhlc2VzIiwicmVwbGFjZSIsIm1hdGNoIl0sIm1hcHBpbmdzIjoiQUFBQSwrQ0FBK0M7Ozs7Ozs7Ozs7O0lBK0psQ0EsU0FBUztlQUFUQTs7SUEvR0FDLE9BQU87ZUFBUEE7O0lBdUJHQyxPQUFPO2VBQVBBOztJQThJSEMsSUFBSTtlQUFKQTs7SUFyQkFDLFVBQVU7ZUFBVkE7O0lBdkdHQyxRQUFRO2VBQVJBOzs7MEJBeEZTOzBCQUNGO2tFQUdEO21FQUNDO2lFQUNGOzs7Ozs7QUFFckIsTUFBTUMsT0FBTztJQUFDLG9CQUFvQjtBQUFJO0FBQ3RDLE1BQU1DLFFBQVE7SUFBQyxvQkFBb0I7QUFBSztBQUV4Qzs7O0NBR0MsR0FDRCxNQUFNQyxLQUFLLENBQUNDLFFBQWFDO0lBQ3ZCLDJDQUEyQztJQUMzQyxJQUFJRCxXQUFXQyxVQUFXRCxXQUFXQSxVQUFVQyxXQUFXQSxRQUFTO1FBQ2pFLE9BQU87SUFDVDtJQUNBLElBQUksQ0FBQ0QsVUFBVSxDQUFDQyxRQUFRO1FBQ3RCLE9BQU87SUFDVDtJQUNBLElBQ0UsT0FBT0QsT0FBT0UsT0FBTyxLQUFLLGNBQzFCLE9BQU9ELE9BQU9DLE9BQU8sS0FBSyxZQUMxQjtRQUNBRixTQUFTQSxPQUFPRSxPQUFPO1FBQ3ZCRCxTQUFTQSxPQUFPQyxPQUFPO1FBQ3ZCLDJDQUEyQztRQUMzQyxJQUFJRixXQUFXQyxVQUFXRCxXQUFXQSxVQUFVQyxXQUFXQSxRQUFTO1lBQ2pFLE9BQU87UUFDVDtRQUNBLElBQUksQ0FBQ0QsVUFBVSxDQUFDQyxRQUFRO1lBQ3RCLE9BQU87UUFDVDtJQUNGO0lBQ0EsSUFDRSxPQUFPRCxPQUFPRyxNQUFNLEtBQUssY0FDekIsT0FBT0YsT0FBT0UsTUFBTSxLQUFLLGNBQ3pCSCxPQUFPRyxNQUFNLENBQUNGLFNBQ2Q7UUFDQSxPQUFPO0lBQ1Q7SUFDQSxPQUFPO0FBQ1Q7QUFFTyxNQUFNVCxVQUFVLENBQUNZLEdBQVFDO0lBQzlCLElBQUlOLEdBQUdLLEdBQUdDLElBQUk7UUFDWixPQUFPO0lBQ1Q7SUFFQSxJQUNFLE9BQU9ELE1BQU0sWUFDYkEsTUFBTSxRQUNOLE9BQU9DLE1BQU0sWUFDYkEsTUFBTSxNQUNOO1FBQ0EsT0FBTztJQUNUO0lBRUEsSUFBSyxNQUFNQyxLQUFLRixFQUFHO1FBQ2pCLElBQUksQ0FBQ0wsR0FBR0ssQ0FBQyxDQUFDRSxFQUFFLEVBQUVELENBQUMsQ0FBQ0MsRUFBRSxHQUFHO1lBQ25CLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT0MsT0FBT0MsSUFBSSxDQUFDSixHQUFHSyxNQUFNLEtBQUtGLE9BQU9DLElBQUksQ0FBQ0gsR0FBR0ksTUFBTTtBQUN4RDtBQUVPLFNBQVNoQixRQUE0QmlCLEVBQUs7SUFDL0MseUVBQXlFO0lBQ3pFLGlGQUFpRjtJQUNqRix3RUFBd0U7SUFDeEUsNEVBQTRFO0lBQzVFLHlFQUF5RTtJQUN6RSxrRUFBa0U7SUFDbEUsT0FBT0MsSUFBQUEsb0JBQVUsRUFBQ0QsSUFBcUNsQjtBQUN6RDtBQVVPLFNBQVNJLFNBQTZCYyxFQUFLO0lBQ2hELElBQUlFLFFBQVFDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLGVBQWU7UUFDMUMsSUFBSSxDQUFDQyxJQUFBQSxtQkFBVSxFQUFDTCxLQUFLO1lBQ25CTSxRQUFRQyxLQUFLLENBQ1gsQ0FBQyxvREFBb0QsRUFBRVAsR0FBRyxDQUFDLENBQUM7UUFFaEU7SUFDRjtJQUVBLE1BQU1RLE1BQU0sSUFBSUM7SUFFaEIsdUtBQXVLO0lBQ3ZLLE1BQU1DLFFBQVcsQ0FBQ0M7UUFDaEIsSUFBSSxDQUFDQyxJQUFBQSxpQkFBUSxFQUFDRCxRQUFRLENBQUNFLElBQUFBLGtCQUFTLEVBQUNGLE1BQU07WUFDckMsTUFBTUcsZUFBZSxDQUFDLGlEQUFpRCxFQUNyRSxpRkFBaUY7WUFDakZkLEdBQUdlLFdBQVcsSUFBSWYsR0FBR2dCLElBQUksQ0FDMUIsa0JBQWtCLEVBQUVDLE9BQU9OLEtBQUssQ0FBQyxDQUFDO1lBRW5DLE1BQU1PLFdBQVdsQixHQUFHbUIsUUFBUTtZQUU1QixJQUFJakIsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssZUFBZTtnQkFDMUNFLFFBQVFjLElBQUksQ0FDVixDQUFDLDBDQUEwQyxDQUFDLEdBQzFDLENBQUMsd0JBQXdCLEVBQUVDLGdCQUFnQkgsVUFBVSxDQUFDLENBQUM7WUFFN0Q7WUFFQSxNQUFNLElBQUlJLGNBQWM7Z0JBQ3RCQyxTQUFTVDtnQkFDVEo7WUFDRjtRQUNGO1FBRUEsTUFBTWMsTUFBTSxPQUFPYixRQUFRLFlBQVksQUFBQ0EsT0FBT3hCLFFBQVNDLFFBQVF1QjtRQUVoRSwrREFBK0Q7UUFDL0QsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQ0gsSUFBSWlCLEdBQUcsQ0FBQ0QsTUFBTTtZQUNqQmhCLElBQUlrQixHQUFHLENBQUNGLEtBQUt4QixHQUFHVztRQUNsQjtRQUVBLE1BQU1nQixTQUFTbkIsSUFBSW9CLEdBQUcsQ0FBQ0o7UUFFdkIsT0FBT0c7SUFDVDtJQUVBLElBQUl6QixRQUFRQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxlQUFlO1FBQzFDLGlGQUFpRjtRQUNqRk0sTUFBTUssV0FBVyxHQUNmLG1NQUFtTTtRQUNuTSxDQUFDLGFBQWEsRUFBRWYsR0FBR2UsV0FBVyxJQUFJZixHQUFHZ0IsSUFBSSxJQUFJaEIsR0FBR21CLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFFakVULE1BQU1TLFFBQVEsR0FBRztZQUNmLE9BQU8sQ0FBQyxhQUFhLEVBQUVuQixHQUFHbUIsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUMzQztJQUNGO0lBRUEsT0FBT1Q7QUFDVDtBQVdPLE1BQU03QixZQUFZLENBQUNnRDtJQUN4Qjs7Ozs7Ozs7O0dBU0MsR0FDRCxNQUFNQyxZQUFZLENBQXFCOUI7UUFDckMsTUFBTStCLFFBQVEsSUFBSUMsa0JBQVEsQ0FBQztZQUN6QkMsS0FBS0osU0FBUztRQUNoQjtRQUVBLHdGQUF3RjtRQUN4RixPQUFPLFNBQVVsQixHQUFNO1lBQ3JCLElBQUksQ0FBQ29CLE1BQU1OLEdBQUcsQ0FBQ2QsTUFBTTtnQkFDbkJvQixNQUFNTCxHQUFHLENBQUNmLEtBQUtYLEdBQUdXO1lBQ3BCO1lBQ0EsT0FBT29CLE1BQU1ILEdBQUcsQ0FBQ2pCO1FBQ25CO0lBQ0Y7SUFFQSxPQUFPbUI7QUFDVDtBQUVBOzs7Q0FHQyxHQUNELE1BQU1JLGlCQUFpQkM7QUFDaEIsTUFBTWxELGFBQWEsQ0FBcUJlO0lBQzdDLElBQUlvQyxVQUFVRjtJQUNkLHFJQUFxSTtJQUNySSxJQUFJRztJQUNKLG9GQUFvRjtJQUNwRixPQUFPLENBQUMxQjtRQUNOLHlIQUF5SDtRQUN6SCxJQUFJQSxRQUFReUIsU0FBUztZQUNuQkMsYUFBYXJDLEdBQUdXO1lBQ2hCLDJFQUEyRTtZQUMzRXlCLFVBQVV6QjtRQUNaO1FBQ0Esa0ZBQWtGO1FBQ2xGLE9BQU8wQjtJQUNUO0FBQ0Y7QUFNTyxNQUFNckQsT0FBTyxDQUFJZ0I7SUFDdEIsSUFBSTJCO0lBQ0osT0FBTztRQUNMLElBQUkzQixJQUFJO1lBQ04yQixTQUFTM0I7WUFDVCxtR0FBbUc7WUFDbkdBLEtBQUtzQztRQUNQO1FBQ0EsT0FBT1g7SUFDVDtBQUNGO0FBRUEsTUFBTUwsc0JBQXNCaUI7SUFDMUJDLFlBQVlDLElBQXdDLENBQUU7UUFDcEQsS0FBSztRQUVMLElBQUlGLFVBQVVHLGlCQUFpQixFQUFFO1lBQy9CSCxVQUFVRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVELEtBQUsvQixLQUFLO1FBQzlDO1FBRUEsSUFBSSxDQUFDTSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNPLE9BQU8sR0FBR2tCLEtBQUtsQixPQUFPO0lBQzdCO0FBQ0Y7QUFFQSxTQUFTRixnQkFBZ0JzQixRQUFnQjtJQUN2QyxNQUFNQyxXQUNKO0lBQ0YsTUFBTUMsV0FBVztJQUNqQixNQUFNQyxVQUFVLHdCQUF3QiwyREFBMkQ7SUFDbkcsTUFBTUMsVUFBVSxnREFBZ0Qsb0RBQW9EO0lBQ3BILE1BQU1DLFlBQVk7SUFDbEIsTUFBTUMsV0FBVztJQUNqQixNQUFNQyxjQUFjLG1CQUFtQixxQkFBcUI7SUFFNUQsa0RBQWtEO0lBQ2xELE9BQU9QLFNBQ0pRLE9BQU8sQ0FBQ0QsYUFBYSxDQUFDRSxRQUFVLENBQUMsUUFBUSxFQUFFQSxNQUFNLE9BQU8sQ0FBQyxFQUFFLHFDQUFxQztLQUNoR0QsT0FBTyxDQUFDRixVQUFVLENBQUNHLFFBQVUsQ0FBQyxRQUFRLEVBQUVBLE1BQU0sT0FBTyxDQUFDLEVBQUUsb0JBQW9CO0tBQzVFRCxPQUFPLENBQUNMLFNBQVMsQ0FBQ00sUUFBVSxDQUFDLFFBQVEsRUFBRUEsTUFBTSxPQUFPLENBQUMsRUFBRSwwQ0FBMEM7S0FDakdELE9BQU8sQ0FBQ04sVUFBVSxDQUFDTyxRQUFVLENBQUMsUUFBUSxFQUFFQSxNQUFNLE9BQU8sQ0FBQyxFQUFFLHFEQUFxRDtLQUM3R0QsT0FBTyxDQUFDUCxVQUFVLENBQUNRLFFBQVUsQ0FBQyxRQUFRLEVBQUVBLE1BQU0sT0FBTyxDQUFDLEVBQUUsdUJBQXVCO0tBQy9FRCxPQUFPLENBQUNKLFNBQVMsQ0FBQ0ssUUFBVSxDQUFDLFFBQVEsRUFBRUEsTUFBTSxPQUFPLENBQUMsRUFBRSxtQkFBbUI7S0FDMUVELE9BQU8sQ0FBQ0gsV0FBVyxDQUFDSSxRQUFVLENBQUMsUUFBUSxFQUFFQSxNQUFNLE9BQU8sQ0FBQyxHQUFHLG9CQUFvQjtBQUNuRiJ9
    
    }),
    11840: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
    __webpack_require__(9461);__webpack_require__(27624);__webpack_require__(30286);__webpack_require__(8334);__webpack_require__(12338);__webpack_require__(93695);__webpack_require__(60322);__webpack_require__(40941);__webpack_require__(65134);__webpack_require__(41655);__webpack_require__(64054);__webpack_require__(27527);__webpack_require__(25898);
    
    }),
    25898: (function () {
    /**
     * ----------------------------------------------------------------------
     * Webflow: Interactions 2.0: Init
     */
    Webflow.require('ix2').init(
    {"events":{"e":{"id":"e","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-2"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-01","originalId":"665a18c0eb9c74c4006ece39|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-01","originalId":"665a18c0eb9c74c4006ece39|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368629175},"e-2":{"id":"e-2","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-2","affectedElements":{},"playInReverse":false,"autoStopEventId":"e"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-01","originalId":"665a18c0eb9c74c4006ece39|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-01","originalId":"665a18c0eb9c74c4006ece39|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368629176},"e-3":{"id":"e-3","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-3","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-58"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-02","originalId":"665a18c0eb9c74c4006ece39|eb8dec28-6d4f-c86f-c68f-8ba9fc65946e","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-02","originalId":"665a18c0eb9c74c4006ece39|eb8dec28-6d4f-c86f-c68f-8ba9fc65946e","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368817552},"e-4":{"id":"e-4","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-4","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-3"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-02","originalId":"665a18c0eb9c74c4006ece39|eb8dec28-6d4f-c86f-c68f-8ba9fc65946e","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-02","originalId":"665a18c0eb9c74c4006ece39|eb8dec28-6d4f-c86f-c68f-8ba9fc65946e","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368817552},"e-5":{"id":"e-5","name":"","animationType":"preset","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-5","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-6"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-03","originalId":"665a18c0eb9c74c4006ece39|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-03","originalId":"665a18c0eb9c74c4006ece39|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368990971},"e-6":{"id":"e-6","name":"","animationType":"preset","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-6","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-59"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-03","originalId":"665a18c0eb9c74c4006ece39|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-03","originalId":"665a18c0eb9c74c4006ece39|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368990971},"e-7":{"id":"e-7","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-7","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-8"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-04","originalId":"665a18c0eb9c74c4006ece39|bdac6aad-ea46-de38-5682-bb015f0792db","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-04","originalId":"665a18c0eb9c74c4006ece39|bdac6aad-ea46-de38-5682-bb015f0792db","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638369406127},"e-8":{"id":"e-8","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-8","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-7"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-04","originalId":"665a18c0eb9c74c4006ece39|bdac6aad-ea46-de38-5682-bb015f0792db","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-04","originalId":"665a18c0eb9c74c4006ece39|bdac6aad-ea46-de38-5682-bb015f0792db","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638369406127},"e-9":{"id":"e-9","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-9","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-10"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-05","originalId":"665a18c0eb9c74c4006ece39|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-05","originalId":"665a18c0eb9c74c4006ece39|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638369634769},"e-10":{"id":"e-10","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-10","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-9"}},"mediaQueries":["main"],"target":{"selector":".link-block.animation-05","originalId":"665a18c0eb9c74c4006ece39|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"},"targets":[{"selector":".link-block.animation-05","originalId":"665a18c0eb9c74c4006ece39|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638369634769},"e-11":{"id":"e-11","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-11","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-12"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".fade-in-on-scroll","originalId":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04","appliesTo":"CLASS"},"targets":[{"selector":".fade-in-on-scroll","originalId":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1639044095607},"e-13":{"id":"e-13","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-14"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".fade-in-move-on-scroll","originalId":"665a18c0eb9c74c4006ece39|d153327e-0b89-53f6-8af6-bfb408d9df35","appliesTo":"CLASS"},"targets":[{"selector":".fade-in-move-on-scroll","originalId":"665a18c0eb9c74c4006ece39|d153327e-0b89-53f6-8af6-bfb408d9df35","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1639044166707},"e-15":{"id":"e-15","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-13","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-16"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".fade-in-slace-on-scroll","originalId":"665a18c0eb9c74c4006ece39|b40307ba-5bc6-bd78-6e19-712b5713de87","appliesTo":"CLASS"},"targets":[{"selector":".fade-in-slace-on-scroll","originalId":"665a18c0eb9c74c4006ece39|b40307ba-5bc6-bd78-6e19-712b5713de87","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1639044220804},"e-17":{"id":"e-17","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-14","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-18"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".fade-in-blur-on-scroll","originalId":"665a18c0eb9c74c4006ece39|548a5b34-b2c2-5a0b-7e8c-aacb07ebb25f","appliesTo":"CLASS"},"targets":[{"selector":".fade-in-blur-on-scroll","originalId":"665a18c0eb9c74c4006ece39|548a5b34-b2c2-5a0b-7e8c-aacb07ebb25f","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1639044269084},"e-19":{"id":"e-19","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-15","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-20"}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece25","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece25","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1639044628728},"e-23":{"id":"e-23","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-17","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-24"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".template-container","originalId":"665a18c0eb9c74c4006ece49|c32ddce7-9ecb-b557-b599-6de1d8239110","appliesTo":"CLASS"},"targets":[{"selector":".template-container","originalId":"665a18c0eb9c74c4006ece49|c32ddce7-9ecb-b557-b599-6de1d8239110","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1639400886769},"e-24":{"id":"e-24","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-18","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-23"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".template-container","originalId":"665a18c0eb9c74c4006ece49|c32ddce7-9ecb-b557-b599-6de1d8239110","appliesTo":"CLASS"},"targets":[{"selector":".template-container","originalId":"665a18c0eb9c74c4006ece49|c32ddce7-9ecb-b557-b599-6de1d8239110","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1639400886770},"e-37":{"id":"e-37","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-2","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-46"}},"mediaQueries":["main"],"target":{"selector":".link-block-2.animation-03","originalId":"62e39d1f126f5823c2e4b5ce|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"},"targets":[{"selector":".link-block-2.animation-03","originalId":"62e39d1f126f5823c2e4b5ce|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368629176},"e-38":{"id":"e-38","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-20","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-47"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".contact-field-text","originalId":"62e39d1f126f588edfe4b5c8|183927b3-82e6-bdab-7199-4e547274e639","appliesTo":"CLASS"},"targets":[{"selector":".contact-field-text","originalId":"62e39d1f126f588edfe4b5c8|183927b3-82e6-bdab-7199-4e547274e639","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1659528051152},"e-39":{"id":"e-39","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-9","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-48"}},"mediaQueries":["main"],"target":{"selector":".link-block-2.animation-05","originalId":"6319f69c5ef0f30066db6dff|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"},"targets":[{"selector":".link-block-2.animation-05","originalId":"6319f69c5ef0f30066db6dff|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638369634769},"e-40":{"id":"e-40","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-20","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-43"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".subscribe-field-text","originalId":"62ea2f329d12251b48ea50cb|6fbf96fd-708a-56bf-c7d3-029c12d50c11","appliesTo":"CLASS"},"targets":[{"selector":".subscribe-field-text","originalId":"62ea2f329d12251b48ea50cb|6fbf96fd-708a-56bf-c7d3-029c12d50c11","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1659534008993},"e-41":{"id":"e-41","name":"","animationType":"preset","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-24","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-52"}},"mediaQueries":["main"],"target":{"selector":".link-block-2.animation-03","originalId":"6319f69c5ef0f30066db6dff|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"},"targets":[{"selector":".link-block-2.animation-03","originalId":"6319f69c5ef0f30066db6dff|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368990971},"e-43":{"id":"e-43","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-22","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-40"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".subscribe-field-text","originalId":"62ea2f329d12251b48ea50cb|6fbf96fd-708a-56bf-c7d3-029c12d50c11","appliesTo":"CLASS"},"targets":[{"selector":".subscribe-field-text","originalId":"62ea2f329d12251b48ea50cb|6fbf96fd-708a-56bf-c7d3-029c12d50c11","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1659534008991},"e-45":{"id":"e-45","name":"","animationType":"preset","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-23","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-50"}},"mediaQueries":["main"],"target":{"selector":".link-block-2.animation-03","originalId":"6319f69c5ef0f30066db6dff|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"},"targets":[{"selector":".link-block-2.animation-03","originalId":"6319f69c5ef0f30066db6dff|babb1a74-1ca8-4e3b-31b3-e12d0db617be","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368990971},"e-46":{"id":"e-46","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-37"}},"mediaQueries":["main"],"target":{"selector":".link-block-2.animation-03","originalId":"62e39d1f126f5823c2e4b5ce|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"},"targets":[{"selector":".link-block-2.animation-03","originalId":"62e39d1f126f5823c2e4b5ce|8ed1b952-23ff-bc0f-8964-7935e1d755b9","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638368629175},"e-47":{"id":"e-47","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-22","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-51"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".contact-field-text","originalId":"62e39d1f126f588edfe4b5c8|183927b3-82e6-bdab-7199-4e547274e639","appliesTo":"CLASS"},"targets":[{"selector":".contact-field-text","originalId":"62e39d1f126f588edfe4b5c8|183927b3-82e6-bdab-7199-4e547274e639","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1659528051150},"e-48":{"id":"e-48","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-10","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-52"}},"mediaQueries":["main"],"target":{"selector":".link-block-2.animation-05","originalId":"6319f69c5ef0f30066db6dff|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"},"targets":[{"selector":".link-block-2.animation-05","originalId":"6319f69c5ef0f30066db6dff|eb817875-6024-a502-e779-eda35e78cc94","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1638369634769},"e-51":{"id":"e-51","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-52"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-small-container","originalId":"665a18c0eb9c74c4006ece25|f078fdf9-afcd-dd23-e056-d7d58c77dcd8","appliesTo":"CLASS"},"targets":[{"selector":".logo-small-container","originalId":"665a18c0eb9c74c4006ece25|f078fdf9-afcd-dd23-e056-d7d58c77dcd8","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1656506482066},"e-55":{"id":"e-55","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-28","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-56"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".trusted-item-header","originalId":"665a18c0eb9c74c4006ece25|0f99c55c-aef0-ebd9-f690-9830ff12bd24","appliesTo":"CLASS"},"targets":[{"selector":".trusted-item-header","originalId":"665a18c0eb9c74c4006ece25|0f99c55c-aef0-ebd9-f690-9830ff12bd24","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1615749404457},"e-57":{"id":"e-57","name":"","animationType":"custom","eventTypeId":"SCROLLING_IN_VIEW","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-29","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece25|d95b58db-0fc5-f212-3174-acbf7385172b","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece25|d95b58db-0fc5-f212-3174-acbf7385172b","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-29-p","smoothing":85,"startsEntering":false,"addStartOffset":false,"addOffsetValue":50,"startsExiting":false,"addEndOffset":true,"endOffsetValue":32}],"createdOn":1672841000224},"e-65":{"id":"e-65","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-28","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-62"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".footer-list-item","originalId":"a91eae88-2cd2-a6a2-03b1-a73f4b02afec","appliesTo":"CLASS"},"targets":[{"selector":".footer-list-item","originalId":"a91eae88-2cd2-a6a2-03b1-a73f4b02afec","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1615749650340},"e-69":{"id":"e-69","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-28","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-61"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".social-media-icon","originalId":"a91eae88-2cd2-a6a2-03b1-a73f4b02afd2","appliesTo":"CLASS"},"targets":[{"selector":".social-media-icon","originalId":"a91eae88-2cd2-a6a2-03b1-a73f4b02afd2","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1615751775634},"e-70":{"id":"e-70","name":"","animationType":"custom","eventTypeId":"SCROLLING_IN_VIEW","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-30","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece25|c78f219d-acfe-cf0c-7273-cb7eb8df08a1","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece25|c78f219d-acfe-cf0c-7273-cb7eb8df08a1","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-30-p","smoothing":92,"startsEntering":true,"addStartOffset":false,"addOffsetValue":50,"startsExiting":false,"addEndOffset":false,"endOffsetValue":50}],"createdOn":1672845770088},"e-71":{"id":"e-71","name":"","animationType":"custom","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-31","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece25|c78f219d-acfe-cf0c-7273-cb7eb8df08a1","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece25|c78f219d-acfe-cf0c-7273-cb7eb8df08a1","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-31-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-31-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1672846821803},"e-72":{"id":"e-72","name":"","animationType":"custom","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-32","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-holder","originalId":"28288ee9-aae6-3bba-5f56-45a89ddc7aee","appliesTo":"CLASS"},"targets":[{"selector":".logo-holder","originalId":"28288ee9-aae6-3bba-5f56-45a89ddc7aee","appliesTo":"CLASS"}],"config":[{"continuousParameterGroupId":"a-32-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":94,"restingState":50},{"continuousParameterGroupId":"a-32-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":94,"restingState":50}],"createdOn":1672846871162},"e-73":{"id":"e-73","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-33","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-74"}},"mediaQueries":["main"],"target":{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"},"targets":[{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|98338922-2ac0-90bd-27f5-a4d54b51da2f","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1672847045650},"e-74":{"id":"e-74","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-34","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-73"}},"mediaQueries":["main"],"target":{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"},"targets":[{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|98338922-2ac0-90bd-27f5-a4d54b51da2f","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1672847045651},"e-83":{"id":"e-83","name":"","animationType":"custom","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-35","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-84"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-holder","originalId":"28288ee9-aae6-3bba-5f56-45a89ddc7adf","appliesTo":"CLASS"},"targets":[{"selector":".logo-holder","originalId":"28288ee9-aae6-3bba-5f56-45a89ddc7adf","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1672847702417},"e-84":{"id":"e-84","name":"","animationType":"custom","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-36","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-83"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-holder","originalId":"28288ee9-aae6-3bba-5f56-45a89ddc7adf","appliesTo":"CLASS"},"targets":[{"selector":".logo-holder","originalId":"28288ee9-aae6-3bba-5f56-45a89ddc7adf","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1672847702418},"e-87":{"id":"e-87","name":"","animationType":"custom","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-37","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece25|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece25|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-37-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-37-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1672848489955},"e-104":{"id":"e-104","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-105"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".download-badge-container","originalId":"665a18c0eb9c74c4006ece25|8ba9ae63-375e-564e-c431-ba2fd2d554ea","appliesTo":"CLASS"},"targets":[{"selector":".download-badge-container","originalId":"665a18c0eb9c74c4006ece25|8ba9ae63-375e-564e-c431-ba2fd2d554ea","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1672914782593},"e-106":{"id":"e-106","name":"","animationType":"custom","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-44","affectedElements":{},"duration":0}},"mediaQueries":["main"],"target":{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"},"targets":[{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"}],"config":[{"continuousParameterGroupId":"a-44-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":98,"restingState":50},{"continuousParameterGroupId":"a-44-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":98,"restingState":50}],"createdOn":1672925932877},"e-107":{"id":"e-107","name":"","animationType":"custom","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-45","affectedElements":{},"duration":0}},"mediaQueries":["main"],"target":{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"},"targets":[{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"}],"config":[{"continuousParameterGroupId":"a-45-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":90,"restingState":50},{"continuousParameterGroupId":"a-45-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":90,"restingState":50}],"createdOn":1672929570954},"e-108":{"id":"e-108","name":"","animationType":"custom","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-46","affectedElements":{},"duration":0}},"mediaQueries":["main"],"target":{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"},"targets":[{"selector":".experience-card","originalId":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94","appliesTo":"CLASS"}],"config":[{"continuousParameterGroupId":"a-46-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":90,"restingState":50},{"continuousParameterGroupId":"a-46-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":90,"restingState":50}],"createdOn":1672929892132},"e-109":{"id":"e-109","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-47","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-110"}},"mediaQueries":["tiny"],"target":{"id":"665a18c0eb9c74c4006ece25","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece25","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1672996134857},"e-111":{"id":"e-111","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-48","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-112"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".buy-template-guide","originalId":"665a18c0eb9c74c4006ece25|e04f6272-87d9-318c-14ae-f900837de426","appliesTo":"CLASS"},"targets":[{"selector":".buy-template-guide","originalId":"665a18c0eb9c74c4006ece25|e04f6272-87d9-318c-14ae-f900837de426","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1674658285242},"e-118":{"id":"e-118","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-37","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece3b|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3b|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-37-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-37-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1682327662814},"e-123":{"id":"e-123","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-40","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"076ad6bd-252d-be8f-852d-adcc0bb202e4","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"076ad6bd-252d-be8f-852d-adcc0bb202e4","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-40-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-40-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50}],"createdOn":1682327662814},"e-126":{"id":"e-126","name":"","animationType":"preset","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-42","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-127"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"076ad6bd-252d-be8f-852d-adcc0bb202e3","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"076ad6bd-252d-be8f-852d-adcc0bb202e3","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682327662814},"e-136":{"id":"e-136","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-49","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-holder","originalId":"665a18c0eb9c74c4006ece3b|14b81ed3-e553-535a-28b7-9490a95f0cee","appliesTo":"CLASS"},"targets":[{"selector":".logo-holder","originalId":"665a18c0eb9c74c4006ece3b|14b81ed3-e553-535a-28b7-9490a95f0cee","appliesTo":"CLASS"}],"config":[{"continuousParameterGroupId":"a-49-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":94,"restingState":50},{"continuousParameterGroupId":"a-49-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":94,"restingState":50}],"createdOn":1682338352042},"e-137":{"id":"e-137","name":"","animationType":"preset","eventTypeId":"MOUSE_OVER","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-50","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-138"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-holder","originalId":"665a18c0eb9c74c4006ece3b|14b81ed3-e553-535a-28b7-9490a95f0cdf","appliesTo":"CLASS"},"targets":[{"selector":".logo-holder","originalId":"665a18c0eb9c74c4006ece3b|14b81ed3-e553-535a-28b7-9490a95f0cdf","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682338352042},"e-138":{"id":"e-138","name":"","animationType":"preset","eventTypeId":"MOUSE_OUT","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-51","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-137"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".logo-holder","originalId":"665a18c0eb9c74c4006ece3b|14b81ed3-e553-535a-28b7-9490a95f0cdf","appliesTo":"CLASS"},"targets":[{"selector":".logo-holder","originalId":"665a18c0eb9c74c4006ece3b|14b81ed3-e553-535a-28b7-9490a95f0cdf","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682338352042},"e-141":{"id":"e-141","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-37","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece3c|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3c|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-37-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-37-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1682338983608},"e-146":{"id":"e-146","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-37","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece3f|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3f|bbb1681c-62a0-7375-a529-1c7bec5a4a0e","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-37-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-37-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1682423176858},"e-149":{"id":"e-149","name":"","animationType":"custom","eventTypeId":"MOUSE_CLICK","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-52","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-150"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".faq-block","originalId":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19","appliesTo":"CLASS"},"targets":[{"selector":".faq-block","originalId":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682429931043},"e-150":{"id":"e-150","name":"","animationType":"custom","eventTypeId":"MOUSE_SECOND_CLICK","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-53","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-149"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".faq-block","originalId":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19","appliesTo":"CLASS"},"targets":[{"selector":".faq-block","originalId":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682429931044},"e-151":{"id":"e-151","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-37","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece42|07ecd636-7d03-f8c9-9271-f9df17cbe45e","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece42|07ecd636-7d03-f8c9-9271-f9df17cbe45e","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-37-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-37-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1682512431902},"e-152":{"id":"e-152","name":"","animationType":"preset","eventTypeId":"MOUSE_MOVE","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-37","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small"],"target":{"id":"665a18c0eb9c74c4006ece40|de2c1a22-6aa7-bc90-8931-b47734c9d84a","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece40|de2c1a22-6aa7-bc90-8931-b47734c9d84a","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-37-p","selectedAxis":"X_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":92,"restingState":50},{"continuousParameterGroupId":"a-37-p-2","selectedAxis":"Y_AXIS","basedOn":"ELEMENT","reverse":false,"smoothing":50,"restingState":50}],"createdOn":1682515042204},"e-153":{"id":"e-153","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-154"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece3b","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3b","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682584055631},"e-161":{"id":"e-161","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-13","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-162"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".your-needs-image","originalId":"665a18c0eb9c74c4006ece3b|985ce3a0-bac2-428b-f035-339dd48095e0","appliesTo":"CLASS"},"targets":[{"selector":".your-needs-image","originalId":"665a18c0eb9c74c4006ece3b|985ce3a0-bac2-428b-f035-339dd48095e0","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682584593806},"e-163":{"id":"e-163","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-164"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece3c","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3c","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682584981001},"e-165":{"id":"e-165","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-166"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".divider","originalId":"665a18c0eb9c74c4006ece3c|40638b74-629c-c3ce-b828-bfab5d3e3372","appliesTo":"CLASS"},"targets":[{"selector":".divider","originalId":"665a18c0eb9c74c4006ece3c|40638b74-629c-c3ce-b828-bfab5d3e3372","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682585103132},"e-167":{"id":"e-167","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-168"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".about-black-list-wrapper","originalId":"665a18c0eb9c74c4006ece3c|15af9c4f-72a6-c690-7c30-3b66fd78df1c","appliesTo":"CLASS"},"targets":[{"selector":".about-black-list-wrapper","originalId":"665a18c0eb9c74c4006ece3c|15af9c4f-72a6-c690-7c30-3b66fd78df1c","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682585130924},"e-171":{"id":"e-171","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-172"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".more-info-text","originalId":"665a18c0eb9c74c4006ece3c|81fd6807-e29c-27d3-5639-3109528f27cc","appliesTo":"CLASS"},"targets":[{"selector":".more-info-text","originalId":"665a18c0eb9c74c4006ece3c|81fd6807-e29c-27d3-5639-3109528f27cc","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682585194262},"e-173":{"id":"e-173","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-174"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece3d","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3d","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682587054718},"e-175":{"id":"e-175","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-176"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".blog-cta-container","originalId":"665a18c0eb9c74c4006ece3d|2748fa48-15bc-71e0-9c54-148d6116ac00","appliesTo":"CLASS"},"targets":[{"selector":".blog-cta-container","originalId":"665a18c0eb9c74c4006ece3d|2748fa48-15bc-71e0-9c54-148d6116ac00","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682587102810},"e-181":{"id":"e-181","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-182"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece3f","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3f","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682587437055},"e-183":{"id":"e-183","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-184"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".faq-block","originalId":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19","appliesTo":"CLASS"},"targets":[{"selector":".faq-block","originalId":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682587456932},"e-185":{"id":"e-185","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-186"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece3e","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece3e","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682602926119},"e-187":{"id":"e-187","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-188"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece42","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece42","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682602963444},"e-189":{"id":"e-189","name":"","animationType":"custom","eventTypeId":"PAGE_START","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-54","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-190"}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"665a18c0eb9c74c4006ece40","appliesTo":"PAGE","styleBlockIds":[]},"targets":[{"id":"665a18c0eb9c74c4006ece40","appliesTo":"PAGE","styleBlockIds":[]}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":null,"scrollOffsetUnit":null,"delay":null,"direction":null,"effectIn":null},"createdOn":1682603009689},"e-191":{"id":"e-191","name":"","animationType":"custom","eventTypeId":"SCROLLING_IN_VIEW","action":{"id":"","actionTypeId":"GENERAL_CONTINUOUS_ACTION","config":{"actionListId":"a-55","affectedElements":{},"duration":0}},"mediaQueries":["main","medium","small","tiny"],"target":{"id":"a12b5c3d-c7b2-e6ec-c40e-64a48b363b3a","appliesTo":"ELEMENT","styleBlockIds":[]},"targets":[{"id":"a12b5c3d-c7b2-e6ec-c40e-64a48b363b3a","appliesTo":"ELEMENT","styleBlockIds":[]}],"config":[{"continuousParameterGroupId":"a-55-p","smoothing":92,"startsEntering":true,"addStartOffset":false,"addOffsetValue":50,"startsExiting":false,"addEndOffset":false,"endOffsetValue":50}],"createdOn":1682674146371},"e-192":{"id":"e-192","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-193"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".open-roles-container","originalId":"665a18c0eb9c74c4006ece3c|bc2b8232-65f7-1758-7803-5acebd1de50a","appliesTo":"CLASS"},"targets":[{"selector":".open-roles-container","originalId":"665a18c0eb9c74c4006ece3c|bc2b8232-65f7-1758-7803-5acebd1de50a","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682674206185},"e-194":{"id":"e-194","name":"","animationType":"custom","eventTypeId":"SCROLL_INTO_VIEW","action":{"id":"","actionTypeId":"GENERAL_START_ACTION","config":{"delay":0,"easing":"","duration":0,"actionListId":"a-12","affectedElements":{},"playInReverse":false,"autoStopEventId":"e-195"}},"mediaQueries":["main","medium","small","tiny"],"target":{"selector":".open-roles-cta-holder","originalId":"a12b5c3d-c7b2-e6ec-c40e-64a48b363b3a","appliesTo":"CLASS"},"targets":[{"selector":".open-roles-cta-holder","originalId":"a12b5c3d-c7b2-e6ec-c40e-64a48b363b3a","appliesTo":"CLASS"}],"config":{"loop":false,"playInReverse":false,"scrollOffsetValue":0,"scrollOffsetUnit":"%","delay":null,"direction":null,"effectIn":null},"createdOn":1682674253706}},"actionLists":{"a":{"id":"a","title":"ðŸ‘† Link Block Animation 01 -> Hover In","actionItemGroups":[{"actionItems":[{"id":"a-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638368632285},"a-2":{"id":"a-2","title":"ðŸ‘† Link Block Animation 01 -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-2-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":800,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-2-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638368632285},"a-3":{"id":"a-3","title":"ðŸ‘† Link Block Animation 02 -> Hover In","actionItemGroups":[{"actionItems":[{"id":"a-3-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":800,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-3-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":800,"target":{},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-3-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-3-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638368821040},"a-4":{"id":"a-4","title":"ðŸ‘† Link Block Animation 02 -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-4-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-4-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-4-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-4-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638368821040},"a-5":{"id":"a-5","title":"ðŸ‘† Link Block Animation 03 -> Hover In","actionItemGroups":[{"actionItems":[{"id":"a-5-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-5-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":-150,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-5-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-5-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-6":{"id":"a-6","title":"ðŸ‘† Link Block Animation 03 -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-6-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-6-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":150,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-6-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-6-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{},"xValue":-150,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-7":{"id":"a-7","title":"ðŸ‘† Link Block Animation 04 -> Hover In","actionItemGroups":[{"actionItems":[{"id":"a-7-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-7-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-7-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":700,"target":{},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-7-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":700,"target":{},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-8":{"id":"a-8","title":"ðŸ‘† Link Block Animation 04 -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-8-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-8-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-9":{"id":"a-9","title":"ðŸ‘† Link Block Animation 05 -> Hover In","actionItemGroups":[{"actionItems":[{"id":"a-9-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"yValue":10,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-9-n-2","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"widthValue":50,"widthUnit":"%","heightUnit":"PX","locked":false}},{"id":"a-9-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-9-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-9-n-6","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"value":1,"unit":""}},{"id":"a-9-n-5","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"widthValue":100,"widthUnit":"%","heightUnit":"PX","locked":false}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-10":{"id":"a-10","title":"ðŸ‘† Link Block Animation 05 -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-10-n-2","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"widthValue":50,"widthUnit":"%","heightUnit":"PX","locked":false}},{"id":"a-10-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-10-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066"]},"yValue":15,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-11":{"id":"a-11","title":"â¬‡ï¸ Fade In On Scroll","actionItemGroups":[{"actionItems":[{"id":"a-11-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-11-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":1,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639044101700},"a-12":{"id":"a-12","title":"â¬‡ï¸ Fade In & Move On Scroll","actionItemGroups":[{"actionItems":[{"id":"a-12-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":0,"unit":""}},{"id":"a-12-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"yValue":25,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]},{"actionItems":[{"id":"a-12-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":1,"unit":""}},{"id":"a-12-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639044101700},"a-13":{"id":"a-13","title":"â¬‡ï¸ Fade In & Slace On Scroll","actionItemGroups":[{"actionItems":[{"id":"a-13-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":0,"unit":""}},{"id":"a-13-n-4","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"xValue":1.1,"yValue":1.1,"locked":true}}]},{"actionItems":[{"id":"a-13-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":1,"unit":""}},{"id":"a-13-n-5","actionTypeId":"TRANSFORM_SCALE","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"xValue":1,"yValue":1,"locked":true}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639044101700},"a-14":{"id":"a-14","title":"â¬‡ï¸ Fade In & Blur On Scroll","actionItemGroups":[{"actionItems":[{"id":"a-14-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":0,"unit":""}},{"id":"a-14-n-5","actionTypeId":"STYLE_FILTER","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"filters":[{"type":"blur","filterId":"3278","value":5,"unit":"px"}]}}]},{"actionItems":[{"id":"a-14-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"value":1,"unit":""}},{"id":"a-14-n-6","actionTypeId":"STYLE_FILTER","config":{"delay":100,"easing":"ease","duration":1000,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece39|48a7b1d3-b07a-497b-d5ee-44049694be04"},"filters":[{"type":"blur","filterId":"3278","value":0,"unit":"px"}]}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639044101700},"a-15":{"id":"a-15","title":"â± Home-Page On Load Animation","actionItemGroups":[{"actionItems":[{"id":"a-15-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"yValue":120,"xUnit":"PX","yUnit":"%","zUnit":"PX"}},{"id":"a-15-n-18","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".iphone-drop-shadow","selectorGuids":["24fec700-9241-f06d-0037-82e2ba4cebcf"]},"value":0,"unit":""}},{"id":"a-15-n-16","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".nav-menu-container","selectorGuids":["ce88a8fd-a045-613d-2bfb-d48d93b0d60d"]},"value":0,"unit":""}},{"id":"a-15-n-11","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"value":0,"unit":""}},{"id":"a-15-n-10","actionTypeId":"STYLE_FILTER","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"filters":[{"type":"blur","filterId":"2e8b","value":10,"unit":"px"}]}},{"id":"a-15-n-6","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":1.1,"yValue":1.1,"locked":true}},{"id":"a-15-n-5","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"value":0,"unit":""}},{"id":"a-15-n-4","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":60,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-15-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"value":0,"unit":""}},{"id":"a-15-n-25","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":1.1,"yValue":1.1,"locked":true}},{"id":"a-15-n-27","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":60,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-15-n-26","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"value":0,"unit":""}},{"id":"a-15-n-32","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":50,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-15-n-31","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":-50,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-15-n-9","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":0,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-15-n-8","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"value":1,"unit":""}},{"id":"a-15-n-28","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":400,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":0,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-15-n-29","actionTypeId":"STYLE_OPACITY","config":{"delay":400,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"value":1,"unit":""}},{"id":"a-15-n-13","actionTypeId":"STYLE_FILTER","config":{"delay":400,"easing":"ease","duration":500,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"filters":[{"type":"blur","filterId":"2e8b","value":120,"unit":"px"}]}},{"id":"a-15-n-12","actionTypeId":"STYLE_OPACITY","config":{"delay":400,"easing":"ease","duration":1800,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"value":0.6,"unit":""}},{"id":"a-15-n-14","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1200,"easing":"ease","duration":1200,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"yValue":0,"xUnit":"PX","yUnit":"%","zUnit":"PX"}},{"id":"a-15-n-15","actionTypeId":"STYLE_OPACITY","config":{"delay":1200,"easing":"ease","duration":600,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"value":1,"unit":""}},{"id":"a-15-n-33","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":0,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-15-n-34","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":0,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-15-n-7","actionTypeId":"TRANSFORM_SCALE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":1,"yValue":1,"locked":true}},{"id":"a-15-n-30","actionTypeId":"TRANSFORM_SCALE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":1,"yValue":1,"locked":true}},{"id":"a-15-n-19","actionTypeId":"STYLE_OPACITY","config":{"delay":1500,"easing":"ease","duration":1000,"target":{"selector":".iphone-drop-shadow","selectorGuids":["24fec700-9241-f06d-0037-82e2ba4cebcf"]},"value":1,"unit":""}},{"id":"a-15-n-17","actionTypeId":"STYLE_OPACITY","config":{"delay":1500,"easing":"ease","duration":1000,"target":{"selector":".nav-menu-container","selectorGuids":["ce88a8fd-a045-613d-2bfb-d48d93b0d60d"]},"value":1,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639044633546},"a-17":{"id":"a-17","title":"ðŸ‘†Template Card -> Hover On","actionItemGroups":[{"actionItems":[{"id":"a-17-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{},"value":0,"unit":""}},{"id":"a-17-n-5","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{},"xValue":1,"yValue":1,"locked":true}},{"id":"a-17-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".link-block.animation-01","selectorGuids":["333430c2-6b08-7b1b-e65f-6baa136f520e","cd35f39f-9f47-f14e-26ff-57a6fdc1b473"]},"yValue":20,"xUnit":"PX","yUnit":"%","zUnit":"PX"}}]},{"actionItems":[{"id":"a-17-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":800,"target":{},"value":1,"unit":""}},{"id":"a-17-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":800,"target":{"useEventTarget":"CHILDREN","selector":".link-block.animation-01","selectorGuids":["333430c2-6b08-7b1b-e65f-6baa136f520e","cd35f39f-9f47-f14e-26ff-57a6fdc1b473"]},"yValue":0,"xUnit":"PX","yUnit":"%","zUnit":"PX"}},{"id":"a-17-n-6","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"ease","duration":800,"target":{},"xValue":1.05,"yValue":1.05,"locked":true}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639400891923},"a-18":{"id":"a-18","title":"ðŸ‘†Template Card -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-18-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":800,"target":{},"value":0,"unit":""}},{"id":"a-18-n-2","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"ease","duration":800,"target":{},"xValue":1,"yValue":1,"locked":true}},{"id":"a-18-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":800,"target":{"useEventTarget":"CHILDREN","selector":".link-block.animation-01","selectorGuids":["333430c2-6b08-7b1b-e65f-6baa136f520e","cd35f39f-9f47-f14e-26ff-57a6fdc1b473"]},"yValue":20,"xUnit":"PX","yUnit":"%","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1639400891923},"a-20":{"id":"a-20","title":"ðŸ‘† Links -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-20-n","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"ease","duration":500,"target":{},"widthValue":20,"heightValue":20,"widthUnit":"px","heightUnit":"px","locked":false}},{"id":"a-20-n-2","actionTypeId":"STYLE_BORDER","config":{"delay":0,"easing":"ease","duration":500,"target":{},"globalSwatchId":"","rValue":255,"bValue":255,"gValue":255,"aValue":0}},{"id":"a-20-n-3","actionTypeId":"STYLE_BACKGROUND_COLOR","config":{"delay":0,"easing":"ease","duration":500,"target":{},"globalSwatchId":"","rValue":0,"bValue":0,"gValue":0,"aValue":1}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-24":{"id":"a-24","title":"ðŸ‘† Link Block Animation 03 -> Hover Out 2","actionItemGroups":[{"actionItems":[{"id":"a-24-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._01._2px","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbed","66d8d1ec-1518-3b82-a8ae-642dc968cbf2"]},"xValue":101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-24-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._02","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbea"]},"xValue":150,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-24-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._01._2px","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbed","66d8d1ec-1518-3b82-a8ae-642dc968cbf2"]},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-24-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":0,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._02","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbea"]},"xValue":-150,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-22":{"id":"a-22","title":"ðŸ‘† Links -> Hover On","actionItemGroups":[{"actionItems":[{"id":"a-22-n","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"","duration":500,"target":{},"widthValue":20,"heightValue":20,"widthUnit":"px","heightUnit":"px","locked":false}},{"id":"a-22-n-2","actionTypeId":"STYLE_BORDER","config":{"delay":0,"easing":"","duration":500,"target":{},"globalSwatchId":"","rValue":255,"bValue":255,"gValue":255,"aValue":0}},{"id":"a-22-n-3","actionTypeId":"STYLE_BACKGROUND_COLOR","config":{"delay":0,"easing":"","duration":500,"target":{},"globalSwatchId":"","rValue":0,"bValue":0,"gValue":0,"aValue":1}}]},{"actionItems":[{"id":"a-22-n-4","actionTypeId":"STYLE_BORDER","config":{"delay":0,"easing":"bouncePast","duration":500,"target":{},"globalSwatchId":"","rValue":190,"bValue":190,"gValue":190,"aValue":1}},{"id":"a-22-n-5","actionTypeId":"STYLE_BACKGROUND_COLOR","config":{"delay":0,"easing":"bouncePast","duration":500,"target":{},"globalSwatchId":"","rValue":219,"bValue":219,"gValue":219,"aValue":0.45}},{"id":"a-22-n-6","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"bouncePast","duration":500,"target":{},"widthValue":50,"heightValue":50,"widthUnit":"px","heightUnit":"px","locked":false}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-23":{"id":"a-23","title":"ðŸ‘† Link Block Animation 03 -> Hover In 2","actionItemGroups":[{"actionItems":[{"id":"a-23-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._01._2px","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbed","66d8d1ec-1518-3b82-a8ae-642dc968cbf2"]},"xValue":-101,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-23-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":400,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._02","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbea"]},"xValue":-150,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-23-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._01._2px","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbed","66d8d1ec-1518-3b82-a8ae-642dc968cbf2"]},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}},{"id":"a-23-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":600,"target":{"useEventTarget":"CHILDREN","selector":".link-block-underline._02","selectorGuids":["e7362ff3-1cb5-d07c-af2e-df27fc2f3066","66d8d1ec-1518-3b82-a8ae-642dc968cbea"]},"xValue":0,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-28":{"id":"a-28","title":"Fade In Slow - On Scroll into VIew","actionItemGroups":[{"actionItems":[{"id":"a-28-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"604b35876a71cb76ac768e33|e74ed22c-3155-00fa-e7e3-df8b5875d506"},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-28-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":100,"easing":"ease","duration":1500,"target":{"useEventTarget":true,"id":"604b35876a71cb76ac768e33|e74ed22c-3155-00fa-e7e3-df8b5875d506"},"value":1,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1599490304692},"a-29":{"id":"a-29","title":"ðŸŒ• Dark And Light Mode Switch","continuousParameterGroups":[{"id":"a-29-p","type":"SCROLL_PROGRESS","parameterLabel":"Scroll","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-29-n","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".white-mode-holder","selectorGuids":["f85a3d62-3269-6eea-4b16-3cd4516ae799"]},"heightValue":0,"widthUnit":"PX","heightUnit":"vh","locked":false}}]},{"keyframe":85,"actionItems":[{"id":"a-29-n-2","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".white-mode-holder","selectorGuids":["f85a3d62-3269-6eea-4b16-3cd4516ae799"]},"heightValue":100,"widthUnit":"PX","heightUnit":"vh","locked":false}}]}]}],"createdOn":1672841018969},"a-30":{"id":"a-30","title":"ðŸ§± Integration Animation","continuousParameterGroups":[{"id":"a-30-p","type":"SCROLL_PROGRESS","parameterLabel":"Scroll","continuousActionGroups":[{"keyframe":20,"actionItems":[{"id":"a-30-n-8","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".iphone-holder-effortlessly-integration","selectorGuids":["7947e46a-f6c2-e0c7-be1e-0ba84b69cfe5"]},"yValue":200,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-30-n-10","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".line","selectorGuids":["34588490-e510-f73c-bd1f-0f92f9d6cce3"]},"widthValue":0,"widthUnit":"%","heightUnit":"PX","locked":false}}]},{"keyframe":48,"actionItems":[{"id":"a-30-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-holder","selectorGuids":["cb9dbc29-e52a-d92f-b313-870e291707ae"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-30-n-3","actionTypeId":"STYLE_FILTER","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-holder","selectorGuids":["cb9dbc29-e52a-d92f-b313-870e291707ae"]},"filters":[{"type":"blur","filterId":"c4a6","value":0,"unit":"px"}]}},{"id":"a-30-n-4","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-holder","selectorGuids":["cb9dbc29-e52a-d92f-b313-870e291707ae"]},"value":0,"unit":""}}]},{"keyframe":55,"actionItems":[{"id":"a-30-n-5","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-holder","selectorGuids":["cb9dbc29-e52a-d92f-b313-870e291707ae"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-30-n-6","actionTypeId":"STYLE_FILTER","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-holder","selectorGuids":["cb9dbc29-e52a-d92f-b313-870e291707ae"]},"filters":[{"type":"blur","filterId":"c4a6","value":100,"unit":"px"}]}},{"id":"a-30-n-7","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-holder","selectorGuids":["cb9dbc29-e52a-d92f-b313-870e291707ae"]},"value":0.23,"unit":""}},{"id":"a-30-n-11","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".line","selectorGuids":["34588490-e510-f73c-bd1f-0f92f9d6cce3"]},"widthValue":80,"widthUnit":"%","heightUnit":"PX","locked":false}},{"id":"a-30-n-9","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".iphone-holder-effortlessly-integration","selectorGuids":["7947e46a-f6c2-e0c7-be1e-0ba84b69cfe5"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}]}],"createdOn":1672845775406},"a-31":{"id":"a-31","title":"ðŸ§± Mouse Follow Integration","continuousParameterGroups":[{"id":"a-31-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-31-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".logo-holder-effortlessly-integration","selectorGuids":["5b266c21-b70f-19b9-fdbd-fc68683b645d"]},"xValue":20,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-31-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".logo-holder-effortlessly-integration","selectorGuids":["5b266c21-b70f-19b9-fdbd-fc68683b645d"]},"xValue":-20,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]}]},{"id":"a-31-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[]}],"createdOn":1672846825789},"a-32":{"id":"a-32","title":"ðŸ§± Integration Look-at Mouse","continuousParameterGroups":[{"id":"a-32-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-32-n","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"yValue":-40,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}}]},{"keyframe":100,"actionItems":[{"id":"a-32-n-2","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"yValue":40,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}}]}]},{"id":"a-32-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-32-n-3","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"xValue":40,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}}]},{"keyframe":100,"actionItems":[{"id":"a-32-n-4","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"xValue":-40,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}}]}]}],"createdOn":1672846825789},"a-33":{"id":"a-33","title":"ðŸ‘† Cards -> Hover On","actionItemGroups":[{"actionItems":[{"id":"a-33-n-5","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-outside","selectorGuids":["addba45a-d560-7685-d43f-cef1cfb87f60"]},"value":0,"unit":""}},{"id":"a-33-n-7","actionTypeId":"GENERAL_DISPLAY","config":{"delay":0,"easing":"","duration":0,"target":{"selector":".light-wrapper-in-front","selectorGuids":["ba2a070d-503a-6763-0793-5496094efc19"]},"value":"flex"}}]},{"actionItems":[{"id":"a-33-n-6","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-outside","selectorGuids":["addba45a-d560-7685-d43f-cef1cfb87f60"]},"value":0.1,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-34":{"id":"a-34","title":"ðŸ‘† Cards -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-34-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-outside","selectorGuids":["addba45a-d560-7685-d43f-cef1cfb87f60"]},"value":0,"unit":""}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-35":{"id":"a-35","title":"ðŸ‘† Interegration Logo -> Hover On","actionItemGroups":[{"actionItems":[{"id":"a-35-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image.blured","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2","aa54b86e-b3d4-f252-3aca-fcd48dc4d8f7"]},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-35-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":1300,"target":{"useEventTarget":"CHILDREN","selector":".logo-image.blured","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2","aa54b86e-b3d4-f252-3aca-fcd48dc4d8f7"]},"value":0.4,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-36":{"id":"a-36","title":"ðŸ‘† Interegration Logo -> Hover Out","actionItemGroups":[{"actionItems":[{"id":"a-36-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":1300,"target":{"useEventTarget":"CHILDREN","selector":".logo-image.blured","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2","aa54b86e-b3d4-f252-3aca-fcd48dc4d8f7"]},"value":0,"unit":""}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-37":{"id":"a-37","title":"ðŸ“± Meet Black Text Follow Mouse","continuousParameterGroups":[{"id":"a-37-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-37-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"xValue":-50,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-37-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".hero-section-text-holder","selectorGuids":["f140c4b3-bdb3-69ec-63af-b0360fdb418f"]},"xValue":-10,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-37-n-5","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".hero-text-holder","selectorGuids":["1acd55b5-39ac-1992-9c24-502cbf86ba82"]},"xValue":20,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-37-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"xValue":50,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-37-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".hero-section-text-holder","selectorGuids":["f140c4b3-bdb3-69ec-63af-b0360fdb418f"]},"xValue":10,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-37-n-6","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".hero-text-holder","selectorGuids":["1acd55b5-39ac-1992-9c24-502cbf86ba82"]},"xValue":-20,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]}]},{"id":"a-37-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[]}],"createdOn":1672848494407},"a-44":{"id":"a-44","title":"ðŸƒ Experience Card Look-at Mouse","continuousParameterGroups":[{"id":"a-44-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-44-n","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94"},"yValue":-10,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-44-n-9","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".experience-card-text-holder","selectorGuids":["39876d5b-3f04-9d83-e67e-1909f0d0cfac"]},"xValue":-30,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-44-n-2","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94"},"yValue":10,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-44-n-10","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".experience-card-text-holder","selectorGuids":["39876d5b-3f04-9d83-e67e-1909f0d0cfac"]},"xValue":30,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]}]},{"id":"a-44-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-44-n-3","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94"},"xValue":10,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}},{"id":"a-44-n-11","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".experience-card-text-holder","selectorGuids":["39876d5b-3f04-9d83-e67e-1909f0d0cfac"]},"yValue":-30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-44-n-4","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece25|c9a3eb7f-e26e-bb52-e19d-39f848eddb94"},"xValue":-10,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}},{"id":"a-44-n-12","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".experience-card-text-holder","selectorGuids":["39876d5b-3f04-9d83-e67e-1909f0d0cfac"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}]}],"createdOn":1672925937761},"a-45":{"id":"a-45","title":"ðŸ”† Light On Stroke","continuousParameterGroups":[{"id":"a-45-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-45-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper","selectorGuids":["75c9957e-21dc-0f7d-eb16-3e9518caaae3"]},"xValue":-50,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-45-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper","selectorGuids":["75c9957e-21dc-0f7d-eb16-3e9518caaae3"]},"xValue":50,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}]},{"id":"a-45-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-45-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper","selectorGuids":["75c9957e-21dc-0f7d-eb16-3e9518caaae3"]},"yValue":-50,"xUnit":"PX","yUnit":"%","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-45-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper","selectorGuids":["75c9957e-21dc-0f7d-eb16-3e9518caaae3"]},"yValue":50,"xUnit":"PX","yUnit":"%","zUnit":"PX"}}]}]}],"createdOn":1672929250263},"a-46":{"id":"a-46","title":"ðŸ”† Light Follow Mouse Stroke","continuousParameterGroups":[{"id":"a-46-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-46-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper-in-front","selectorGuids":["ba2a070d-503a-6763-0793-5496094efc19"]},"xValue":-50,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-46-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper-in-front","selectorGuids":["ba2a070d-503a-6763-0793-5496094efc19"]},"xValue":50,"xUnit":"%","yUnit":"PX","zUnit":"PX"}}]}]},{"id":"a-46-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-46-n-3","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper-in-front","selectorGuids":["ba2a070d-503a-6763-0793-5496094efc19"]},"yValue":-50,"xUnit":"PX","yUnit":"%","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-46-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".light-wrapper-in-front","selectorGuids":["ba2a070d-503a-6763-0793-5496094efc19"]},"yValue":50,"xUnit":"PX","yUnit":"%","zUnit":"PX"}}]}]}],"createdOn":1672929250263},"a-47":{"id":"a-47","title":"â± Page On Load Animation MOBILE","actionItemGroups":[{"actionItems":[{"id":"a-47-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"yValue":120,"xUnit":"PX","yUnit":"%","zUnit":"PX"}},{"id":"a-47-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".iphone-drop-shadow","selectorGuids":["24fec700-9241-f06d-0037-82e2ba4cebcf"]},"value":0,"unit":""}},{"id":"a-47-n-3","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".nav-menu-container","selectorGuids":["ce88a8fd-a045-613d-2bfb-d48d93b0d60d"]},"value":0,"unit":""}},{"id":"a-47-n-4","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"value":0,"unit":""}},{"id":"a-47-n-5","actionTypeId":"STYLE_FILTER","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"filters":[{"type":"blur","filterId":"2e8b","value":10,"unit":"px"}]}},{"id":"a-47-n-6","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":1.1,"yValue":1.1,"locked":true}},{"id":"a-47-n-7","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"value":0,"unit":""}},{"id":"a-47-n-8","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":60,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-47-n-9","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"value":0,"unit":""}},{"id":"a-47-n-10","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":1.1,"yValue":1.1,"locked":true}},{"id":"a-47-n-11","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":60,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-47-n-12","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"value":0,"unit":""}},{"id":"a-47-n-13","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":10,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-47-n-14","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":-10,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]},{"actionItems":[{"id":"a-47-n-15","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":0,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-47-n-16","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"value":1,"unit":""}},{"id":"a-47-n-17","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":400,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":0,"yValue":null,"xUnit":"deg","yUnit":"deg","zUnit":"DEG"}},{"id":"a-47-n-18","actionTypeId":"STYLE_OPACITY","config":{"delay":400,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"value":1,"unit":""}},{"id":"a-47-n-19","actionTypeId":"STYLE_FILTER","config":{"delay":400,"easing":"ease","duration":500,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"filters":[{"type":"blur","filterId":"2e8b","value":120,"unit":"px"}]}},{"id":"a-47-n-20","actionTypeId":"STYLE_OPACITY","config":{"delay":400,"easing":"ease","duration":1800,"target":{"selector":".hero-text-blur","selectorGuids":["de94bd13-57fd-bc7c-c21d-899f63a5e641"]},"value":0.6,"unit":""}},{"id":"a-47-n-21","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1200,"easing":"ease","duration":1200,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"yValue":0,"xUnit":"PX","yUnit":"%","zUnit":"PX"}},{"id":"a-47-n-22","actionTypeId":"STYLE_OPACITY","config":{"delay":1200,"easing":"ease","duration":600,"target":{"selector":".iphone-holder","selectorGuids":["1014f9eb-a115-ee65-ecfa-fb998ee4ba6b"]},"value":1,"unit":""}},{"id":"a-47-n-23","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":0,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-47-n-24","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":0,"xUnit":"px","yUnit":"PX","zUnit":"PX"}},{"id":"a-47-n-25","actionTypeId":"TRANSFORM_SCALE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._01","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","cee338de-f121-5b26-2787-05984143a632"]},"xValue":1,"yValue":1,"locked":true}},{"id":"a-47-n-26","actionTypeId":"TRANSFORM_SCALE","config":{"delay":1200,"easing":"ease","duration":1100,"target":{"selector":".hero-text-wrapper._02","selectorGuids":["874b9232-d2af-c9fa-2ae0-47129e88c9ef","0449f9b2-3e25-924d-dd39-abed86e3909b"]},"xValue":1,"yValue":1,"locked":true}},{"id":"a-47-n-27","actionTypeId":"STYLE_OPACITY","config":{"delay":1500,"easing":"ease","duration":1000,"target":{"selector":".iphone-drop-shadow","selectorGuids":["24fec700-9241-f06d-0037-82e2ba4cebcf"]},"value":1,"unit":""}},{"id":"a-47-n-28","actionTypeId":"STYLE_OPACITY","config":{"delay":1500,"easing":"ease","duration":1000,"target":{"selector":".nav-menu-container","selectorGuids":["ce88a8fd-a045-613d-2bfb-d48d93b0d60d"]},"value":1,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1639044633546},"a-48":{"id":"a-48","title":"Buy This Template Fade In","actionItemGroups":[{"actionItems":[{"id":"a-48-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".buy-this-template-button-container","selectorGuids":["7081c556-1c44-cd4d-3d29-62c6c603df4c"]},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-48-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":1000,"easing":"ease","duration":1000,"target":{"useEventTarget":"CHILDREN","selector":".buy-this-template-button-container","selectorGuids":["7081c556-1c44-cd4d-3d29-62c6c603df4c"]},"value":1,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1674658295409},"a-40":{"id":"a-40","title":"ðŸ§± Logo Look-at Mouse","continuousParameterGroups":[{"id":"a-40-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-40-n","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"yValue":-40,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-40-n-5","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo","selectorGuids":["9e3ec8fd-ba2e-3d9f-7e6e-8a10c33b64e6"]},"xValue":-20,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-40-n-2","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"yValue":40,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-40-n-6","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo","selectorGuids":["9e3ec8fd-ba2e-3d9f-7e6e-8a10c33b64e6"]},"xValue":20,"xUnit":"px","yUnit":"PX","zUnit":"PX"}}]}]},{"id":"a-40-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-40-n-3","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"xValue":40,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}},{"id":"a-40-n-7","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo","selectorGuids":["9e3ec8fd-ba2e-3d9f-7e6e-8a10c33b64e6"]},"yValue":-20,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]},{"keyframe":100,"actionItems":[{"id":"a-40-n-4","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"xValue":-40,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}},{"id":"a-40-n-8","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo","selectorGuids":["9e3ec8fd-ba2e-3d9f-7e6e-8a10c33b64e6"]},"yValue":20,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}]}],"createdOn":1672846825789},"a-42":{"id":"a-42","title":"ðŸŽ´ Forth Card Animation On Load","actionItemGroups":[{"actionItems":[{"id":"a-42-n-2","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece25|fc8765e5-00fe-9e2a-d8f7-edcc2476991c"},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-42-n-5","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"value":0,"unit":""}},{"id":"a-42-n-6","actionTypeId":"TRANSFORM_SCALE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"xValue":1.3,"yValue":1.3,"locked":true}}]},{"actionItems":[{"id":"a-42-n-8","actionTypeId":"TRANSFORM_SCALE","config":{"delay":600,"easing":[0.68,-0.55,0.265,1.55],"duration":1300,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"xValue":1,"yValue":1,"locked":true}},{"id":"a-42-n-9","actionTypeId":"STYLE_OPACITY","config":{"delay":600,"easing":"ease","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".card-logo-container","selectorGuids":["cffd6d5f-b76a-39bd-d244-f03a6670c13f"]},"value":1,"unit":""}},{"id":"a-42-n-10","actionTypeId":"TRANSFORM_MOVE","config":{"delay":600,"easing":"ease","duration":1200,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece25|fc8765e5-00fe-9e2a-d8f7-edcc2476991c"},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1672910338107},"a-49":{"id":"a-49","title":"ðŸ§± Integration Look-at Mouse 2","continuousParameterGroups":[{"id":"a-49-p","type":"MOUSE_X","parameterLabel":"Mouse X","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-49-n","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"yValue":-40,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}}]},{"keyframe":100,"actionItems":[{"id":"a-49-n-2","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"yValue":40,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}}]}]},{"id":"a-49-p-2","type":"MOUSE_Y","parameterLabel":"Mouse Y","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-49-n-3","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"xValue":40,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}}]},{"keyframe":100,"actionItems":[{"id":"a-49-n-4","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2"]},"xValue":-40,"xUnit":"deg","yUnit":"DEG","zUnit":"DEG"}}]}]}],"createdOn":1672846825789},"a-50":{"id":"a-50","title":"ðŸ‘† Interegration Logo -> Hover On 2","actionItemGroups":[{"actionItems":[{"id":"a-50-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".logo-image.blured","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2","aa54b86e-b3d4-f252-3aca-fcd48dc4d8f7"]},"value":0,"unit":""}}]},{"actionItems":[{"id":"a-50-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":1300,"target":{"useEventTarget":"CHILDREN","selector":".logo-image.blured","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2","aa54b86e-b3d4-f252-3aca-fcd48dc4d8f7"]},"value":0.4,"unit":""}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-51":{"id":"a-51","title":"ðŸ‘† Interegration Logo -> Hover Out 2","actionItemGroups":[{"actionItems":[{"id":"a-51-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":1300,"target":{"useEventTarget":"CHILDREN","selector":".logo-image.blured","selectorGuids":["d2ac88cc-62bc-c77f-eb2a-3213179d26c2","aa54b86e-b3d4-f252-3aca-fcd48dc4d8f7"]},"value":0,"unit":""}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-52":{"id":"a-52","title":"ðŸ‘† FAQ -> Open","actionItemGroups":[{"actionItems":[{"id":"a-52-n","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".faq-answer-holder","selectorGuids":["b199a318-32e3-4419-797f-edae0a21c20d"]},"heightValue":0,"widthUnit":"PX","heightUnit":"px","locked":false}},{"id":"a-52-n-3","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".faq-icon","selectorGuids":["136d84ba-9916-d749-189c-8083c0567420"]},"zValue":0,"xUnit":"DEG","yUnit":"DEG","zUnit":"deg"}},{"id":"a-52-n-2","actionTypeId":"STYLE_BORDER","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19"},"globalSwatchId":"","rValue":48,"bValue":61,"gValue":54,"aValue":1}}]},{"actionItems":[{"id":"a-52-n-4","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":"CHILDREN","selector":".faq-answer-holder","selectorGuids":["b199a318-32e3-4419-797f-edae0a21c20d"]},"widthUnit":"PX","heightUnit":"AUTO","locked":false}},{"id":"a-52-n-6","actionTypeId":"STYLE_BORDER","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19"},"globalSwatchId":"","rValue":243,"bValue":165,"gValue":177,"aValue":1}},{"id":"a-52-n-5","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":"CHILDREN","selector":".faq-icon","selectorGuids":["136d84ba-9916-d749-189c-8083c0567420"]},"zValue":45,"xUnit":"DEG","yUnit":"DEG","zUnit":"deg"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1638369025313},"a-53":{"id":"a-53","title":"ðŸ‘† FAQ -> Close","actionItemGroups":[{"actionItems":[{"id":"a-53-n","actionTypeId":"STYLE_SIZE","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":"CHILDREN","selector":".faq-answer-holder","selectorGuids":["b199a318-32e3-4419-797f-edae0a21c20d"]},"heightValue":0,"widthUnit":"PX","heightUnit":"px","locked":false}},{"id":"a-53-n-2","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":"CHILDREN","selector":".faq-icon","selectorGuids":["136d84ba-9916-d749-189c-8083c0567420"]},"zValue":0,"xUnit":"DEG","yUnit":"DEG","zUnit":"deg"}},{"id":"a-53-n-3","actionTypeId":"STYLE_BORDER","config":{"delay":0,"easing":"ease","duration":700,"target":{"useEventTarget":true,"id":"665a18c0eb9c74c4006ece3f|09e54095-dc71-e6f1-574b-9da0a6b21f19"},"globalSwatchId":"","rValue":48,"bValue":61,"gValue":54,"aValue":1}}]}],"useFirstGroupAsInitialState":false,"createdOn":1638369025313},"a-54":{"id":"a-54","title":"ðŸ•§ Default On Load","actionItemGroups":[{"actionItems":[{"id":"a-54-n","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-01","selectorGuids":["6db4ed9e-75ff-2589-ebc8-461f43d1940e"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-55","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".navbar","selectorGuids":["e120672f-745f-faa1-71e7-c904666db13c"]},"value":0,"unit":""}},{"id":"a-54-n-3","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-01","selectorGuids":["6db4ed9e-75ff-2589-ebc8-461f43d1940e"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-01","selectorGuids":["6db4ed9e-75ff-2589-ebc8-461f43d1940e"]},"value":0,"unit":""}},{"id":"a-54-n-4","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-02","selectorGuids":["48e09963-7782-9d34-ef4c-234e60e3fd30"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-6","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-02","selectorGuids":["48e09963-7782-9d34-ef4c-234e60e3fd30"]},"value":0,"unit":""}},{"id":"a-54-n-5","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-02","selectorGuids":["48e09963-7782-9d34-ef4c-234e60e3fd30"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-7","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-03","selectorGuids":["df83a443-3a4f-2222-5efe-4d796b05a6e1"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-9","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-03","selectorGuids":["df83a443-3a4f-2222-5efe-4d796b05a6e1"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-8","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-03","selectorGuids":["df83a443-3a4f-2222-5efe-4d796b05a6e1"]},"value":0,"unit":""}},{"id":"a-54-n-19","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._1","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","3775fc90-aeb8-2131-e7d9-8b583561d468"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-21","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._1","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","3775fc90-aeb8-2131-e7d9-8b583561d468"]},"value":0,"unit":""}},{"id":"a-54-n-20","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._1","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","3775fc90-aeb8-2131-e7d9-8b583561d468"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-22","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._2","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","0dca4e72-c02f-b997-9024-6cd7a93f724a"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-24","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._2","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","0dca4e72-c02f-b997-9024-6cd7a93f724a"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-23","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._2","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","0dca4e72-c02f-b997-9024-6cd7a93f724a"]},"value":0,"unit":""}},{"id":"a-54-n-25","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._3","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","06d8af2b-2779-cb8f-7aea-6351b38c7069"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-27","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._3","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","06d8af2b-2779-cb8f-7aea-6351b38c7069"]},"value":0,"unit":""}},{"id":"a-54-n-26","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._3","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","06d8af2b-2779-cb8f-7aea-6351b38c7069"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-28","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._4","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","c92e2298-ed40-811f-0ea6-4cadb48e16d4"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-30","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._4","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","c92e2298-ed40-811f-0ea6-4cadb48e16d4"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-29","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-number._4","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","c92e2298-ed40-811f-0ea6-4cadb48e16d4"]},"value":0,"unit":""}},{"id":"a-54-n-31","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-phone-container","selectorGuids":["fdd5ce20-49b3-5184-91b6-79fe8bee806b"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-33","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-phone-container","selectorGuids":["fdd5ce20-49b3-5184-91b6-79fe8bee806b"]},"value":0,"unit":""}},{"id":"a-54-n-32","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".features-phone-container","selectorGuids":["fdd5ce20-49b3-5184-91b6-79fe8bee806b"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-49","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-04","selectorGuids":["2fd06b03-c0e2-b5f3-486d-9e6dc1fea90a"]},"yValue":30,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-51","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-04","selectorGuids":["2fd06b03-c0e2-b5f3-486d-9e6dc1fea90a"]},"value":0,"unit":""}},{"id":"a-54-n-50","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"","duration":500,"target":{"selector":".animate-on-load-04","selectorGuids":["2fd06b03-c0e2-b5f3-486d-9e6dc1fea90a"]},"yValue":32,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}}]},{"actionItems":[{"id":"a-54-n-10","actionTypeId":"TRANSFORM_MOVE","config":{"delay":0,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-01","selectorGuids":["6db4ed9e-75ff-2589-ebc8-461f43d1940e"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-12","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-01","selectorGuids":["6db4ed9e-75ff-2589-ebc8-461f43d1940e"]},"value":1,"unit":""}},{"id":"a-54-n-11","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":0,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-01","selectorGuids":["6db4ed9e-75ff-2589-ebc8-461f43d1940e"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-14","actionTypeId":"STYLE_OPACITY","config":{"delay":150,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-02","selectorGuids":["48e09963-7782-9d34-ef4c-234e60e3fd30"]},"value":1,"unit":""}},{"id":"a-54-n-13","actionTypeId":"TRANSFORM_MOVE","config":{"delay":150,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-02","selectorGuids":["48e09963-7782-9d34-ef4c-234e60e3fd30"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-15","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":150,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-02","selectorGuids":["48e09963-7782-9d34-ef4c-234e60e3fd30"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-17","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":300,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-03","selectorGuids":["df83a443-3a4f-2222-5efe-4d796b05a6e1"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-16","actionTypeId":"TRANSFORM_MOVE","config":{"delay":300,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-03","selectorGuids":["df83a443-3a4f-2222-5efe-4d796b05a6e1"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-18","actionTypeId":"STYLE_OPACITY","config":{"delay":300,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-03","selectorGuids":["df83a443-3a4f-2222-5efe-4d796b05a6e1"]},"value":1,"unit":""}},{"id":"a-54-n-35","actionTypeId":"TRANSFORM_MOVE","config":{"delay":450,"easing":"ease","duration":700,"target":{"selector":".features-number._1","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","3775fc90-aeb8-2131-e7d9-8b583561d468"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-34","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":450,"easing":"ease","duration":700,"target":{"selector":".features-number._1","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","3775fc90-aeb8-2131-e7d9-8b583561d468"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-36","actionTypeId":"STYLE_OPACITY","config":{"delay":450,"easing":"ease","duration":700,"target":{"selector":".features-number._1","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","3775fc90-aeb8-2131-e7d9-8b583561d468"]},"value":1,"unit":""}},{"id":"a-54-n-52","actionTypeId":"TRANSFORM_MOVE","config":{"delay":450,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-04","selectorGuids":["2fd06b03-c0e2-b5f3-486d-9e6dc1fea90a"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-54","actionTypeId":"STYLE_OPACITY","config":{"delay":450,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-04","selectorGuids":["2fd06b03-c0e2-b5f3-486d-9e6dc1fea90a"]},"value":1,"unit":""}},{"id":"a-54-n-53","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":450,"easing":"ease","duration":700,"target":{"selector":".animate-on-load-04","selectorGuids":["2fd06b03-c0e2-b5f3-486d-9e6dc1fea90a"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-37","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":600,"easing":"ease","duration":700,"target":{"selector":".features-number._2","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","0dca4e72-c02f-b997-9024-6cd7a93f724a"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-39","actionTypeId":"TRANSFORM_MOVE","config":{"delay":600,"easing":"ease","duration":700,"target":{"selector":".features-number._2","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","0dca4e72-c02f-b997-9024-6cd7a93f724a"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-38","actionTypeId":"STYLE_OPACITY","config":{"delay":600,"easing":"ease","duration":700,"target":{"selector":".features-number._2","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","0dca4e72-c02f-b997-9024-6cd7a93f724a"]},"value":1,"unit":""}},{"id":"a-54-n-56","actionTypeId":"STYLE_OPACITY","config":{"delay":600,"easing":"ease","duration":700,"target":{"selector":".navbar","selectorGuids":["e120672f-745f-faa1-71e7-c904666db13c"]},"value":1,"unit":""}},{"id":"a-54-n-40","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":750,"easing":"ease","duration":700,"target":{"selector":".features-number._3","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","06d8af2b-2779-cb8f-7aea-6351b38c7069"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-42","actionTypeId":"STYLE_OPACITY","config":{"delay":750,"easing":"ease","duration":700,"target":{"selector":".features-number._3","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","06d8af2b-2779-cb8f-7aea-6351b38c7069"]},"value":1,"unit":""}},{"id":"a-54-n-41","actionTypeId":"TRANSFORM_MOVE","config":{"delay":750,"easing":"ease","duration":700,"target":{"selector":".features-number._3","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","06d8af2b-2779-cb8f-7aea-6351b38c7069"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-43","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":900,"easing":"ease","duration":700,"target":{"selector":".features-number._4","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","c92e2298-ed40-811f-0ea6-4cadb48e16d4"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-45","actionTypeId":"TRANSFORM_MOVE","config":{"delay":900,"easing":"ease","duration":700,"target":{"selector":".features-number._4","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","c92e2298-ed40-811f-0ea6-4cadb48e16d4"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}},{"id":"a-54-n-44","actionTypeId":"STYLE_OPACITY","config":{"delay":900,"easing":"ease","duration":700,"target":{"selector":".features-number._4","selectorGuids":["e740349a-0fe4-d6dd-46bb-a58197d1ae6e","c92e2298-ed40-811f-0ea6-4cadb48e16d4"]},"value":1,"unit":""}},{"id":"a-54-n-46","actionTypeId":"TRANSFORM_ROTATE","config":{"delay":1050,"easing":"ease","duration":700,"target":{"selector":".features-phone-container","selectorGuids":["fdd5ce20-49b3-5184-91b6-79fe8bee806b"]},"yValue":0,"xUnit":"DEG","yUnit":"deg","zUnit":"DEG"}},{"id":"a-54-n-48","actionTypeId":"STYLE_OPACITY","config":{"delay":1050,"easing":"ease","duration":700,"target":{"selector":".features-phone-container","selectorGuids":["fdd5ce20-49b3-5184-91b6-79fe8bee806b"]},"value":1,"unit":""}},{"id":"a-54-n-47","actionTypeId":"TRANSFORM_MOVE","config":{"delay":1050,"easing":"ease","duration":700,"target":{"selector":".features-phone-container","selectorGuids":["fdd5ce20-49b3-5184-91b6-79fe8bee806b"]},"yValue":0,"xUnit":"PX","yUnit":"px","zUnit":"PX"}}]}],"useFirstGroupAsInitialState":true,"createdOn":1682584065846},"a-55":{"id":"a-55","title":"CTA Gradient Fade","continuousParameterGroups":[{"id":"a-55-p","type":"SCROLL_PROGRESS","parameterLabel":"Scroll","continuousActionGroups":[{"keyframe":0,"actionItems":[{"id":"a-55-n","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".cta-gradient","selectorGuids":["f03b3dfb-1b62-52cb-68a6-c53e2a0221a2"]},"value":0,"unit":""}}]},{"keyframe":45,"actionItems":[{"id":"a-55-n-2","actionTypeId":"STYLE_OPACITY","config":{"delay":0,"easing":"","duration":500,"target":{"useEventTarget":"CHILDREN","selector":".cta-gradient","selectorGuids":["f03b3dfb-1b62-52cb-68a6-c53e2a0221a2"]},"value":1,"unit":""}}]}]}],"createdOn":1682674168427}},"site":{"mediaQueries":[{"key":"main","min":992,"max":10000},{"key":"medium","min":768,"max":991},{"key":"small","min":480,"max":767},{"key":"tiny","min":0,"max":479}]}}
    );
    
    Webflow.require('commerce') && Webflow.require('commerce').init({siteId: "665a18c0eb9c74c4006ecded", apiUrl: "https://render.webflow.com"});
    
    
    }),
    2292: (function () {
    "use strict";
    /* (ignored) */
    
    }),
    
    });
    /************************************************************************/
    // The module cache
    var __webpack_module_cache__ = {};
    
    // The require function
    function __webpack_require__(moduleId) {
    
    // Check if module is in cache
    var cachedModule = __webpack_module_cache__[moduleId];
    if (cachedModule !== undefined) {
    return cachedModule.exports;
    }
    // Create a new module (and put it into the cache)
    var module = (__webpack_module_cache__[moduleId] = {
    id: moduleId,
    loaded: false,
    exports: {}
    });
    // Execute the module function
    __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    
    // Flag the module as loaded
    module.loaded = true;
    // Return the exports of the module
    return module.exports;
    
    }
    
    // expose the modules object (__webpack_modules__)
    __webpack_require__.m = __webpack_modules__;
    
    /************************************************************************/
    // webpack/runtime/create_fake_namespace_object
    (() => {
    var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
    var leafPrototypes;
    // create a fake namespace object
    // mode & 1: value is a module id, require it
    // mode & 2: merge all properties of value into the ns
    // mode & 4: return value when already ns object
    // mode & 16: return value when it's Promise-like
    // mode & 8|1: behave like require
    __webpack_require__.t = function(value, mode) {
        if(mode & 1) value = this(value);
        if(mode & 8) return value;
        if(typeof value === 'object' && value) {
            if((mode & 4) && value.__esModule) return value;
            if((mode & 16) && typeof value.then === 'function') return value;
        }
        var ns = Object.create(null);
      __webpack_require__.r(ns);
        var def = {};
        leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
        for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
            Object.getOwnPropertyNames(current).forEach((key) => { def[key] = () => (value[key]) });
        }
        def['default'] = () => (value);
        __webpack_require__.d(ns, def);
        return ns;
    };
    })();
    // webpack/runtime/define_property_getters
    (() => {
    __webpack_require__.d = (exports, definition) => {
        for(var key in definition) {
            if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
            }
        }
    };
    })();
    // webpack/runtime/esm_module_decorator
    (() => {
    __webpack_require__.hmd = (module) => {
      module = Object.create(module);
      if (!module.children) module.children = [];
      Object.defineProperty(module, 'exports', {
          enumerable: true,
          set: () => {
              throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
          }
      });
      return module;
    };
    })();
    // webpack/runtime/global
    (() => {
    __webpack_require__.g = (() => {
        if (typeof globalThis === 'object') return globalThis;
        try {
            return this || new Function('return this')();
        } catch (e) {
            if (typeof window === 'object') return window;
        }
    })();
    })();
    // webpack/runtime/has_own_property
    (() => {
    __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
    })();
    // webpack/runtime/make_namespace_object
    (() => {
    // define __esModule on exports
    __webpack_require__.r = (exports) => {
        if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
        }
        Object.defineProperty(exports, '__esModule', { value: true });
    };
    })();
    // webpack/runtime/node_module_decorator
    (() => {
    __webpack_require__.nmd = (module) => {
      module.paths = [];
      if (!module.children) module.children = [];
      return module;
    };
    })();
    // webpack/runtime/on_chunk_loaded
    (() => {
    var deferred = [];
    __webpack_require__.O = (result, chunkIds, fn, priority) => {
        if (chunkIds) {
            priority = priority || 0;
            for (var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--)
                deferred[i] = deferred[i - 1];
            deferred[i] = [chunkIds, fn, priority];
            return;
        }
        var notFulfilled = Infinity;
        for (var i = 0; i < deferred.length; i++) {
            var [chunkIds, fn, priority] = deferred[i];
            var fulfilled = true;
            for (var j = 0; j < chunkIds.length; j++) {
                if (
                    (priority & (1 === 0) || notFulfilled >= priority) &&
                    Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))
                ) {
                    chunkIds.splice(j--, 1);
                } else {
                    fulfilled = false;
                    if (priority < notFulfilled) notFulfilled = priority;
                }
            }
            if (fulfilled) {
                deferred.splice(i--, 1);
                var r = fn();
                if (r !== undefined) result = r;
            }
        }
        return result;
    };
    
    })();
    // webpack/runtime/rspack_version
    (() => {
    __webpack_require__.rv = () => ("1.3.9")
    })();
    // webpack/runtime/jsonp_chunk_loading
    (() => {
    
          // object to store loaded and loading chunks
          // undefined = chunk not loaded, null = chunk preloaded/prefetched
          // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
          var installedChunks = {"679": 0,};
          __webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
    // install a JSONP callback for chunk loading
    var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
        var [chunkIds, moreModules, runtime] = data;
        // add "moreModules" to the modules object,
        // then flag all "chunkIds" as loaded and fire callback
        var moduleId, chunkId, i = 0;
        if (chunkIds.some((id) => (installedChunks[id] !== 0))) {
            for (moduleId in moreModules) {
                if (__webpack_require__.o(moreModules, moduleId)) {
                    __webpack_require__.m[moduleId] = moreModules[moduleId];
                }
            }
            if (runtime) var result = runtime(__webpack_require__);
        }
        if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);
        for (; i < chunkIds.length; i++) {
            chunkId = chunkIds[i];
            if (
                __webpack_require__.o(installedChunks, chunkId) &&
                installedChunks[chunkId]
            ) {
                installedChunks[chunkId][0]();
            }
            installedChunks[chunkId] = 0;
        }
        return __webpack_require__.O(result);
    };
    
    var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
    chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
    chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
    
    })();
    // webpack/runtime/rspack_unique_id
    (() => {
    __webpack_require__.ruid = "bundler=rspack@1.3.9";
    
    })();
    /************************************************************************/
    // startup
    // Load entry module and return exports
    // This entry module depends on other loaded chunks and execution need to be delayed
    var __webpack_exports__ = __webpack_require__.O(undefined, ["672"], function() { return __webpack_require__(11840) });
    __webpack_exports__ = __webpack_require__.O(__webpack_exports__);
    })()
    ;